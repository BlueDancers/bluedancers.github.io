<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vkcya Blog</title>
  
  
  <link href="https://vkcyan.github.io/atom.xml" rel="self"/>
  
  <link href="https://vkcyan.github.io/"/>
  <updated>2022-05-12T01:22:41.901Z</updated>
  <id>https://vkcyan.github.io/</id>
  
  <author>
    <name>vkcyan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://vkcyan.github.io/2022/05/23/%E9%92%88%E5%AF%B9%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://vkcyan.github.io/2022/05/23/%E9%92%88%E5%AF%B9%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/</id>
    <published>2022-05-23T06:29:52.233Z</published>
    <updated>2022-05-12T01:22:41.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="针对打通免登录的一些实践与思考"><a href="#针对打通免登录的一些实践与思考" class="headerlink" title="针对打通免登录的一些实践与思考"></a>针对打通免登录的一些实践与思考</h1><p>我最近一直再想一句话，听用户说，但是不要照着做。这人</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;针对打通免登录的一些实践与思考&quot;&gt;&lt;a href=&quot;#针对打通免登录的一些实践与思考&quot; class=&quot;headerlink&quot; title=&quot;针对打通免登录的一些实践与思考&quot;&gt;&lt;/a&gt;针对打通免登录的一些实践与思考&lt;/h1&gt;&lt;p&gt;我最近一直再想一句话，听用户说，但是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JS数据结构与算法</title>
    <link href="https://vkcyan.github.io/2022/03/15/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://vkcyan.github.io/2022/03/15/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:09.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>数据结构为算法提供服务，算法围绕数据结构操作</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li>一个函数用大O表示，比如O(1)，O(n)，O(logN)…</li><li>定性描述该算法的运行时间</li></ul><img src="http://www.vkcyan.top/FjHw8lvXEnVrgeNMLJ15aEQWZX7G.png" style="zoom:30%;" /><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>每次执行改逻辑的时候，之后执行一次，复杂度不会随着时间的变化而变化</p><h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 0; i &lt; n; i += 1) &#123;</span><br><span class="line">console.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环里面的代码执行n次</p><h3 id="O-1-O-n-x3D-O-n"><a href="#O-1-O-n-x3D-O-n" class="headerlink" title="O(1)  + O(n) &#x3D; O(n)"></a>O(1)  + O(n) &#x3D; O(n)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个时间复杂度先后排列就需要相加，相加的情况下低的的忽略不计，取更高的时间复杂度</p><h3 id="O-n-O-n-x3D-O-n-2"><a href="#O-n-O-n-x3D-O-n-2" class="headerlink" title="O(n)  * O(n) &#x3D; O(n ^ 2)"></a>O(n)  * O(n) &#x3D; O(n ^ 2)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i, j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个时间复杂度嵌套排列，时间复杂度就需要相乘</p><h3 id="O-logN"><a href="#O-logN" class="headerlink" title="O(logN)"></a>O(logN)</h3><p>$$<br>对数函数：如果ax&#x3D;N（a&gt;0，且a≠1），那么数x叫做以a为底N的对数，记作x&#x3D;loga<br>$$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; n) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">i *= <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的logN以2为底数，目的是就是求2的多少次方为N，  上面的代码while循环每次*2，实际上就是求2的多少次方为N，所以时间复杂度就是O(logN)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><ul><li>一个函数用O表示，比如O(1)，O(n)，O(n^2)</li><li>算法在运行过程中临时占用存储空间的大小的量度</li></ul><h3 id="O-1-1"><a href="#O-1-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>声明了变量i，单个变量所占用的内存为1，所以空间复杂度为O(1)</p><h3 id="O-n-1"><a href="#O-n-1" class="headerlink" title="O(n)"></a>O(n)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">list.<span class="title function_">push</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明了变量list，通过循环我们增加了n个值，相当于占用了n个内存单元，所以这段代码的空间复杂度为O(n)</p><h3 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> matrix = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  matrix.<span class="title function_">push</span>([])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line">matrix[i].<span class="title function_">push</span>(j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n^2)实际上就是一个矩阵，矩阵的本质就是一个二维数据，存储了n的二次方的变量</p><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><h3 id="调试工具栏每个图标的作用"><a href="#调试工具栏每个图标的作用" class="headerlink" title="调试工具栏每个图标的作用"></a>调试工具栏每个图标的作用</h3><img src="http://www.vkcyan.top/FvPzD6xek5NzfA-Sa2wAfTKkT8nH.png" style="zoom:50%;" /><p>第一个箭头：程序运行到下一个断点，没有断点，程序执行完毕</p><p>第二个图标：一行一行执行代码</p><p>第三个图标：当前处如果调用了fun，点击此图标就会进入函数里面</p><p>第四个图标：点击跳出当前函数</p><p>第五个图标：重启调试</p><p>第六个图标：停止调试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;数据结构为算法提供服务，算法围绕数据结构操作&lt;/p&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 + jsx开发指南</title>
    <link href="https://vkcyan.github.io/2022/03/15/Vue3%20%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>https://vkcyan.github.io/2022/03/15/Vue3%20%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:18.409Z</updated>
    
    <content type="html"><![CDATA[<img src="http://www.vkcyan.top/FuGdH5QngblNApxjW3YV8ozIsO0J.png" style="zoom:30%;" /><p>​在2021年，<code>vue3</code>发布了正式版本，并且经过一年的维护已经越来越稳定，我们在公司项目中也小范围的上线了<code>vue3</code>的项目，总体还是很不错的</p><p>​但是<code>setup</code>语法需要return比较麻烦，还有<code>.value</code>问题，尝试过<code>setup</code>语法糖，依旧觉得<code>setup</code>语法的api记忆负担比较重</p><p>​所以下半年逐渐拾起了<code>jsx</code>的语法，并在开源项目中使用，总体感觉还是相当不错的，前人栽树后人乘凉，本文对jsx for vue的常见问题进行说明</p><ul><li><p><code>jsx</code>学习成本更低，这么多年jsx没有大改动；</p></li><li><p>无记忆负担，同时足够灵活，如果你是vue开发者，同时对setup语法并不是太合得来， vue3 + jsx也是非常不错的选择~</p></li></ul><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>​在vue3中使用jsx需要安装<a href="https://www.npmjs.com/package/@vitejs/plugin-vue-jsx">@vitejs&#x2F;plugin-vue-jsx</a>（webpack版本的不了解，有需要者执行搜索），根据文档配置一下就行了，官方提供了文档供参考，提供了相关示例<a href="https://github.com/vuejs/jsx-next">jsx-next</a>,有react基础的同学可以先看官方文档，在开发过程中出现问题再看本文</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>JSX  for vue是支持v-model语法的，这一点比react的setState,体验感确实要好</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常写法</span></span><br><span class="line">&lt;input v-model=<span class="string">&quot;value&quot;</span> /&gt;  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span> <span class="comment">// jsx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定值写法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model:modelValue</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span>  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;[value,</span>&#x27;<span class="attr">modelValue</span>&#x27;]&#125; /&gt;</span></span> <span class="comment">// jsx</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 修饰符写法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model:modelValue.trim</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span>  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;[value,</span>&#x27;<span class="attr">modelValue</span>&#x27;,[&#x27;<span class="attr">trim</span>&#x27;]]&#125; /&gt;</span></span> <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>这个api与在vue中的表现形式一致</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show=<span class="string">&quot;isShow&quot;</span>&gt;&lt;<span class="regexp">/div&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&lt;div v-show=&#123;isShow&#125;&gt;&lt;/</span>div&gt; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue</span></span><br><span class="line">&lt;a-modal</span><br><span class="line">  :width=<span class="string">&quot;&#x27;400px&#x27;&quot;</span></span><br><span class="line">  :title=<span class="string">&quot;&#x27;设置组件名称&#x27;&quot;</span></span><br><span class="line"> &gt;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&lt;/a-modal&gt;</span><br><span class="line"><span class="comment">// jsx</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a-modal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&#123;</span>&quot;<span class="attr">400px</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">title</span>=<span class="string">&#123;</span>&quot;设置组件名称&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> &gt;</span></span></span><br><span class="line"><span class="language-xml">// ....</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>在jsx for vue中没有这个api，我们需要用jsx风格来实现v-if的效果</p><p>可以简单理解为jsx直接将if搬到html中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">&quot;isShow&quot;</span>&gt; ... &lt;<span class="regexp">/div&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&#123;isShow &amp;&amp; &lt;div&gt; ... &lt;/</span>div&gt;&#125; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件语法"><a href="#事件语法" class="headerlink" title="事件语法"></a>事件语法</h3><p>jsx for vue，所有的事件都按照react风格来</p><ul><li>所有事件有on开头</li><li>所有事件名称首字母大写</li></ul><p><strong>例如：@click &#x3D;&gt; onClick @change &#x3D;&gt; onChange @drop &#x3D;&gt; onDrop</strong> </p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>这里没有找到权威的资料，有小伙伴知道也请告知一下，目前建议大家通过原生JavaScript来实现vue事件修饰符的效果</p><p>.stop ： 阻止事件冒泡，在JSX中使用event.stopPropagation()来代替</p><p>.prevent：阻止默认行为，在JSX中使用event.preventDefault() 来代替</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="ref与reactive"><a href="#ref与reactive" class="headerlink" title="ref与reactive"></a>ref与reactive</h3><p>vue3的template会自动解析ref的<code>.value</code>,在jsx中ref的<code>.value</code>是不会被自动解析的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量 let type = ref(1)</span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; type &#125;&#125;&lt;<span class="regexp">/p&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&lt;p&gt;&#123;type.value&#125;&lt;/</span>p&gt; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>在jsx for vue中，props的语法使用的就是setup的语法，实际表现形式完全一致</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h3><p>同样与vue3的setup语法保持一致，注意子父方法需要符合react规范</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">emit(&#x27;changeVisible&#x27;, false) // 子组件 </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xxx</span> <span class="attr">onChangeVisible</span>=<span class="string">&#123;(params)</span> =&gt;</span> xxxFun(params)&#125;&gt;<span class="tag">&lt;/<span class="name">xxx</span>&gt;</span> // 父组件</span><br></pre></td></tr></table></figure><h2 id="solt如何写插槽"><a href="#solt如何写插槽" class="headerlink" title="solt如何写插槽"></a>solt如何写插槽</h2><p>这里以antd for vue的<a href="https://next.antdv.com/components/popover-cn">Popover 气泡卡片</a>，为例子</p><h3 id="Vue3语法"><a href="#Vue3语法" class="headerlink" title="Vue3语法"></a>Vue3语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-popover</span> <span class="attr">title</span>=<span class="string">&quot;Title&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-popover</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jsx-for-vue语法"><a href="#jsx-for-vue语法" class="headerlink" title="jsx for vue语法"></a>jsx for vue语法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-popover</span><br><span class="line">title=<span class="string">&quot;Title&quot;</span></span><br><span class="line">content=&#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span></span><br><span class="line">&lt;/a-popover&gt;</span><br></pre></td></tr></table></figure><h2 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// props: [&#x27;xx&#x27;],</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props,&#123; emit &#125;</span>) &#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>国内这方面资料比较少，查问题的时候注意vue版本，以及jsx的使用（render方式本文不适用）</li><li>如果代码里面存在问题，如果是ui框架，建议直接看react版本的代码，例如antdv的jsx版本直接看antd的实例代码</li><li>直接看jsx语法的项目代码，<a href="https://github.com/vkcyan/H5-YD.v2">H5-YD.v2</a></li><li>不接受杠精，例如写jsx为啥不去用使用react</li></ul><p>如果在学习过程中遇到了解决不了的问题，请到QQ群 530496237，大佬解答疑惑~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;http://www.vkcyan.top/FuGdH5QngblNApxjW3YV8ozIsO0J.png&quot; style=&quot;zoom:30%;&quot; /&gt;



&lt;p&gt;​	在2021年，&lt;code&gt;vue3&lt;/code&gt;发布了正式版本，并且经过一年的维护已经越来</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vite配置alias（设置别名）</title>
    <link href="https://vkcyan.github.io/2022/03/15/vite%E9%85%8D%E7%BD%AEalias/"/>
    <id>https://vkcyan.github.io/2022/03/15/vite%E9%85%8D%E7%BD%AEalias/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:16.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vite配置alias需要两步进行（TS项目）</p><p>1、修改vite.config.ts（让程序支持）</p><p>2、修改tsconfig.json（让编辑器支持）</p></blockquote><h2 id="修改vite配置"><a href="#修改vite配置" class="headerlink" title="修改vite配置"></a>修改vite配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_resolve</span>(<span class="params">dir: string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">resolve</span>(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="comment">// 配置项目别名</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">_resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改tsconfig-json"><a href="#修改tsconfig-json" class="headerlink" title="修改tsconfig.json"></a>修改tsconfig.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;importHelpers&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 不让同样的辅助函数重复的出现在多个文件中</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许对不包含默认导出的模块使用默认导入。</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// 非相对模块的导入可以相对于baseUrl或通过下文会讲到的路径映射来进行解析</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 配置导出路径（这里根据自己项目执行修改）</span></span><br><span class="line">      <span class="attr">&quot;@/stores*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/stores*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/components*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/components*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/modules*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/modules*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/utils*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/utils*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;element-plus/global&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.jsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.js&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li><p>修改后请重启编辑器</p></li><li><p>本文验证与2022年1月10号，mac，win双平台均有效，如果以上配置无效了，请查看相关api的改动</p></li><li><p>如果帮助你解决了问题，动动小手点个赞吧！:)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Vite配置alias需要两步进行（TS项目）&lt;/p&gt;
&lt;p&gt;1、修改vite.config.ts（让程序支持）&lt;/p&gt;
&lt;p&gt;2、修改tsconfig.json（让编辑器支持）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;修改vite配置</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.x 预渲染 Unable to prerender all routes错误排查</title>
    <link href="https://vkcyan.github.io/2022/03/15/vue3.x%20%E9%A2%84%E6%B8%B2%E6%9F%93%20Unable%20to%20prerender%20all%20routes%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/"/>
    <id>https://vkcyan.github.io/2022/03/15/vue3.x%20%E9%A2%84%E6%B8%B2%E6%9F%93%20Unable%20to%20prerender%20all%20routes%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:23.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​BOOS最近对前几年做的公司官网不太满意，觉得没有有效体现公司的优势，表明随着公司这几年的努力发展，我们将会接触到更大规模的合作伙伴，自然要展示更好的企业形象，所以官网重做。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>没有交互的静态页面，但是存在大量动画</li><li>需要支持良好的SEO</li></ul><p>​最早期的官网是<code>vue2.x</code> + <code>webpack3.x</code> + <code>vue-cli-plugin-prerender-spa</code>进行实现的，效果挺不错，很快各大搜索引擎就收录了我们的网站，所以这次我们打算沿用此方案，不过使用最新技术栈；</p><h3 id="为什么不用vite"><a href="#为什么不用vite" class="headerlink" title="为什么不用vite"></a>为什么不用vite</h3><p>​查阅vite的生态后，未找到类似<strong>prerender-spa</strong>的plugin，没办法支持预渲染，所以vite就被淘汰了。</p><h3 id="为什么不用unxtjs"><a href="#为什么不用unxtjs" class="headerlink" title="为什么不用unxtjs"></a>为什么不用unxtjs</h3><p>​我们的官网不具备大量的接口交互，用<strong>Nnxtjs</strong>多少有点杀鸡用牛刀了，并且还需要使用<strong>pm2</strong>部署代码，付出于收获不成正比，被淘汰。</p><h3 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h3><p>​我们部门是vue技术栈，团队不考虑react，通过以上排除法，只能使用<code>vue3.x</code> + <code>webpack5.x</code> + <code>prerender-spa</code>进行业务实现了。</p><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><h3 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h3><p>我们使用最新的<code>vue-cli</code>进行项目搭建，选择vue3版本，最近的cli默认就是webpack5</p><h3 id="安装预渲染插件"><a href="#安装预渲染插件" class="headerlink" title="安装预渲染插件"></a>安装预渲染插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i prerender-spa-plugin -D</span><br></pre></td></tr></table></figure><h3 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      config.<span class="property">plugins</span>.<span class="title function_">push</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PrerenderSPAPlugin</span>(&#123;</span><br><span class="line">          <span class="attr">staticDir</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">          <span class="attr">routes</span>: [<span class="string">&#x27;/xxx&#x27;</span>],</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>然后就出现一个错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[prerender-spa-plugin] Unable to prerender all routes!</span><br></pre></td></tr></table></figure><p>让我们一起抽丝剥茧，看看报错的具体原因。</p><h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2><p>因为报错提示很模糊，我们打开他的源码，在源码line144发生错误的地方增加log，了解具体报错。</p><img src="http://www.vkcyan.top/image-20220520134031605.png" alt="image-20220520134031605" style="zoom:50%;" /><p>再次执行<code>npm run build</code>，得到真正的错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Building for production...error TypeError: compilerFS.mkdirp is not a function</span><br></pre></td></tr></table></figure><p>​我们继续最终源码发现 <strong>compilerFS</strong> 由<strong>webpack</strong>进行提供，我们带着错误前往<strong>webpack</strong>官网查询错误，于是就找到了<a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#filesystems">Filesystems</a>，因为这个插件已经好几年没有更新，而我们当前使用的是webpack5，出现了API变更的情况。</p><p>​于此同时，根据错误提示，我们也在该库的issues中找到了历史讨论。</p><img src="http://www.vkcyan.top/image-20220520135141080.png" alt="image-20220520135141080" style="zoom:67%;" /><p>在讨论中，找到了两种解决方案</p><ol><li><strong>修改node_modules源码，使其兼容webpack5</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// From https://github.com/ahmadnassri/mkdirp-promise/blob/master/lib/index.js</span></span><br><span class="line"> <span class="keyword">const</span> mkdirp = <span class="keyword">function</span> (<span class="params">dir, opts</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\ndir&#x27;</span>, dir, opts, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       compilerFS.<span class="title function_">mkdirp</span>(dir, opts, <span class="function">(<span class="params">err, made</span>) =&gt;</span> err === <span class="literal">null</span> ? <span class="title function_">resolve</span>(made) : <span class="title function_">reject</span>(err))</span><br><span class="line">     &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">       compilerFS.<span class="title function_">mkdir</span>(dir, opts, <span class="function">(<span class="params">err, made</span>) =&gt;</span> err === <span class="literal">null</span> ? <span class="title function_">resolve</span>(made) : <span class="title function_">reject</span>(err))</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用已经被修改的库，感谢这位大哥</strong></li></ol><p><img src="http://www.vkcyan.top/image-20220520135437289.png" alt="image-20220520135437289"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @dreysolano/prerender-spa-plugin</span><br></pre></td></tr></table></figure><p>我们使用第二种方案，重新修改<strong>vue.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>)</span><br><span class="line">+ <span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;@dreysolano/prerender-spa-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后再次打包测试</p><p><img src="http://www.vkcyan.top/image-20220520135659280.png" alt="image-20220520135659280"></p><p>打包成功，通过启动本地服务器<strong>curl</strong>命令测试得知，SEO功能正常，未发现问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​使用<strong>prerender-spa-plugin</strong>打包出现报错<code>[prerender-spa-plugin] Unable to prerender all routes!</code>，更换库为**@dreysolano&#x2F;prerender-spa-plugin**，即可解决问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	BOOS最近对前几年做的公司官网不太满意，觉得没有有效体现公司的优势，表明随着公司这几年的努力发展，我们将会接触到更大规模的合作伙伴，自</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>写给前端新人的nginx教程</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84nginx%E6%95%99%E7%A8%8B/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84nginx%E6%95%99%E7%A8%8B/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:07.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​我相信大部分前端新手是接触不到部署相关的工作的，一般都是将代码包交给后端，或者通过CI，FTP完成代码的更新，至于代码如何部署，如何从域名到前端代码包，很多前端仔没有实际操作过，自然是不知道的，这篇文章就是要帮助未接触过部署的人学会在服务器上线部署一个前端项目，在这个主线中带大家慢慢的熟悉nginx</p><p>​记得在2017年暑假，那时候大二还没开学，当时我只会写一点简单代码，linux和运维完全没接触过，一冲动在阿里云购买了一个服务器，外加一个域名，好像还是<code>xiaowuasy.top</code>,现在已经不能访问了；那时候单纯的兴趣使然，想搭建一个网站，因为实力不足，也不知道求助别人，前前后后折腾了一个月，最终竟然成功在服务器上面部署了wordpress服务，后面域名备案也成功了；</p><p>​这段经历是曲折的，依稀记得在盛夏的傍晚，我坐在慢慢暗下来的客厅，头上还残留着因为紧张流下的细汗，眼睛因为专注而干涩，面对不太看得懂的文档，一遍一遍尝试；我自然不希望大家在这上面浪费时间，这也是写这篇文章的初衷</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>一个云服务器，阿里云，腾讯云，xx云都行，首次购买或者学生认证都是有很大的优惠（本文以阿里云为例子）</li><li>了解linux基础命令，也就是对各种文件的增删改查</li><li>本教程基于CentOS 7.5系统，如果是图形化界面，或者其他系统，命令可能不完全一致，但是流程都是一致的，建议看对应教程</li></ul><p>如果linux基础命令不会。下面的也不用看了，立刻去学</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><p>通过<strong>远程工具</strong>（CRT，Xshell）或者自带的<strong>远程连接</strong>进入自己的服务器，连接方式选择<strong>公网ip</strong></p><p><img src="http://www.vkcyan.top/FkugXnbgmCdIOX-iAYI3UYUjmv7a.png" alt="image-20220113105611506"></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><blockquote><p>CentOS自带yum命令，这个命令很关键，自行了解</p></blockquote><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx // 终于遇到需要确认的，直接确认即可</span><br></pre></td></tr></table></figure><p>安装完成后,主机中便有了nginx服务，相关命令如下，启动完成后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>启动完成后，浏览器访问<strong>公网IP</strong>,就可以访问到nginx的默认主页</p><p><img src="http://www.vkcyan.top/FtVofGcUY5HFXsoI2PpMqNNXberG.png"></p><p>到这一步就算是nginx部署成功了</p><h3 id="nginx相关文件路径"><a href="#nginx相关文件路径" class="headerlink" title="nginx相关文件路径"></a>nginx相关文件路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/nginx/ // 配置文件</span><br><span class="line">/usr/share/nginx/ // 默认前端代码存放处</span><br></pre></td></tr></table></figure><p>​默认配置在<code>/etc/nginx/nginx.conf</code>,nginx根据默认配置，监听80端口，80端口指定了&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html这个文件夹，于是你访问公网ip -&gt; 公网ip:80 -&gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html,于是”Welcome to <strong>CentOS</strong>“便呈现在你的面前</p><p>​如果你希望不显示默认的页面，而是显示你自己写的项目，直接替换<code>/etc/nginx/nginx.conf</code>中的<strong>root</strong>,字段为自己程序包的路径</p><img src="http://www.vkcyan.top/FiqSDRnFVl2vLwpIGa7FMtv7QPkY.png" style="zoom: 33%;" /><h2 id="在6666端口上搭建一个站点"><a href="#在6666端口上搭建一个站点" class="headerlink" title="在6666端口上搭建一个站点"></a>在6666端口上搭建一个站点</h2><p>​我们的代码除了部署在默认80端口上面，还可以其他端口上，例如8888，7777，等等</p><p>​接下来我们就在一个自定义的端口上面部署一个站点</p><p>​这里我们需要注意<code>nginx.conf</code>中的一行配置</p><blockquote><p>含义：在&#x2F;etc&#x2F;nginx&#x2F;conf.d下面所有nginx的配置文件都会自动生效</p></blockquote><img src="http://www.vkcyan.top/Ft5oDDtWUipvEf-tFA5XNcR8N87L.png" style="zoom:33%;" /><p>根据配置文件的提示我们到目标文件夹下面，建立test.conf，名字无所谓，配置文件里面是通配符匹配的</p><p>并通过vi 写入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       7777;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    root/usr/share/nginx/test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再去文件夹<code>/usr/share/nginx/test</code>下建立一个index.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span> </span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure><p>将一下内容放入index.html种</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是7777端口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后重启nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>访问我们部署的项目ip:7777</p><p>然后你会发现访问不了，最终访问超时(&#x3D;&#x3D;)，这是因为服务器限制了可访问端口，此时需要到云管理后台设置安全组</p><img src="http://www.vkcyan.top/FsVXXP3i-gLk0rNFYdlPWxCGPBxl.png" style="zoom:50%;" /><p>在阿里云后台增加安全组规则</p><p><img src="http://www.vkcyan.top/Fv_L-8z8yfwLO0N69zahJp0L2vhf.png"></p><p>之后就可以正常访问了！</p><p><img src="http://www.vkcyan.top/Fq0nB1GSEzI1FJN-f0sf66YXVl1T.png">至此，便完成了第一个nginx项目的部署</p><h2 id="部署一个vue项目"><a href="#部署一个vue项目" class="headerlink" title="部署一个vue项目"></a>部署一个vue项目</h2><p>​通过上面的例子，我们已经可以完成一个自定义站点的部署了，那么真实项目呢，例如将一个vue项目部署到3006端口</p><ol><li>首先编写xxx.conf</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       3006;</span><br><span class="line">    server_name  _;</span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 开启gzip相关配置</span></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_static on;</span><br><span class="line">    gzip_min_length 2k;</span><br><span class="line">    gzip_buffers 4 8k;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/x-icon application/javascript;</span><br><span class="line">    gzip_comp_level 9;</span><br><span class="line">    gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"><span class="comment"># 站点代码路径</span></span><br><span class="line">    root         /usr/share/nginx/client;</span><br><span class="line"><span class="comment"># 单页应用必须设置（刷新404问题）</span></span><br><span class="line">    location / &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>将打包之后的代码，通过FTP上传代码到目标文件夹<code>/usr/share/nginx/client</code>（注意文件夹名称）</p><p><a href="https://www.filezilla.cn/">ftp</a></p></li><li><p>重启nginx <code>nginx -s reload</code></p></li></ol><p>这边完成了一个站点的部署！是不是很简单</p><p><img src="http://www.vkcyan.top/FjjTa2vHly5zv0-wvUdExapUmAhd.png"></p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>​直接拿<strong>ip+端口</strong>给别人访问是不太好的，大家都给自己站点绑定上一个好记忆的域名，那么nginx如何绑定域名呢？</p><ol><li>购买一个域名<a href="https://wanwang.aliyun.com/domain/%EF%BC%8C%E5%A4%87%E6%A1%88%E5%9F%9F%E5%90%8D%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%B5%81%E7%A8%8B%E5%BE%88%E9%BA%BB%E7%83%A6%EF%BC%8C%E9%9C%80%E8%A6%8110-30%E5%A4%A9">https://wanwang.aliyun.com/domain/，备案域名，这个流程很麻烦，需要10-30天</a></li><li>备案完成后，域名就可以使用了</li></ol><p>我们需要去修改我们的nginx配置，将server_name的值修改为需要绑定的域名即可；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       3006;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">// ....</span><br></pre></td></tr></table></figure><h2 id="增加https支持"><a href="#增加https支持" class="headerlink" title="增加https支持"></a>增加https支持</h2><ol><li>申请一个https证书，<a href="https://yundunnext.console.aliyun.com/?spm=a2c4g.11186623.0.0.4a7b9d1d55eAnw&p=cas#/certExtend/free">数字证书管理</a>，以阿里云为例子，国内云厂商都有</li><li>将证书放在服务器中你可以记得住的文件夹里面</li><li>修改nginx配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123; // <span class="comment"># 将当前域名的http自动打到https</span></span><br><span class="line">        listen  80;</span><br><span class="line">        server_name     xxx.com;</span><br><span class="line">        rewrite ^(.*)$  https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">    ssl_certificate xxxx/yy.pem; <span class="comment"># 证书</span></span><br><span class="line">    ssl_certificate_key xxxx/yy.key; <span class="comment"># 证书秘钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ssl验证相关配置</span></span><br><span class="line">    ssl_session_timeout  5m;    <span class="comment">#缓存有效期</span></span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    <span class="comment">#加密算法</span></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    <span class="comment">#安全链接可选的加密协议</span></span><br><span class="line">    ssl_prefer_server_ciphers on;   <span class="comment">#使用服务器端的首选算法</span></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line">    </span><br><span class="line">root   /usr/share/nginx/client;</span><br><span class="line">    location / &#123;   </span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​虽然部署一个站点，仅仅是用到nginx，但是涉及到的知识点还是很多的</p><p>​如果遇到了错误，一定要仔细检查报错信息，问题百度百度基本都能得到答案，如果实在搞不定，直接重做云服务器系统，重头再来；遇到问题并把它解决了，便成了你的技能</p><p>​一个有经验的开发人员部署一个站点，可能半小时就弄完了，想要熟练的话，一定要多练习多实践，从0到1部署一个项目还是一件很酷的事情！</p><p>如果搭建中遇到了解决不了的问题，请到QQ群 530496237，大佬解答疑惑~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	我相信大部分前端新手是接触不到部署相关的工作的，一般都是将代码包交给后端，或者通过CI，FTP完成代码的更新，至于代码如何部署，如何从域</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器读取xls并生成二维码下载到本地</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96xls%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B9%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96xls%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B9%B6%E4%B8%8B%E8%BD%BD/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:04.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一次普通的技术需求会议</p><p>​项目经理首先发言 我们技术这边需要将xls表格中的几千条数据变成二维码，并且中间镶嵌logo，图片底部放置编号，由于xls表格数据私密，不能通过第三方完成</p><p>​平常这个事情都是后端处理的，前端就是来摸鱼的，但是这次一反常态，后端脸黑了，带样式搞不来，脚一蹬，直接装死</p><p>​项目经理用期盼的眼神看着我，顿时我紧张了起来，眼神飘忽，我已经好多年没搞过node了啊！！会议室都沉默了，在项目经理不断精神攻击下，后端装死的情况下，看来注定要大前端来拯救世界了，毕竟JavaScript万能语言，俺来试试吧！</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>​以上情节纯属虚构，但是需求确实是这样的，虽然好几年没碰过node，好歹年轻记性好，用过的基本都还记得，调研实现方案上没出现太多问题，有如下方案</p><h3 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h3><p>地址：<a href="https://github.com/puppeteer/puppeteer">https://github.com/puppeteer/puppeteer</a></p><p>​使用基于node环境的puppeteer，进行二维码绘制，图片绘制，是JavaScript开发者面对此类需求的主流选择</p><h3 id="node-canvas"><a href="#node-canvas" class="headerlink" title="node-canvas"></a>node-canvas</h3><p>地址：<a href="https://github.com/Automattic/node-canvas">https://github.com/Automattic/node-canvas</a></p><p>​同样是在服务端完成渲染，但是这个库依赖node-gyp，如果不安装python2，那安装过程懂得都懂，不过这也是很不错的方案</p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>​通过浏览器canvas绘制，然后下载下来，会有刷刷刷下载图片的炫酷效果</p><p>很明显有刷刷刷下载图片炫酷效果的方案更好，所以就选择你了 <strong>浏览器</strong>方案！</p><h2 id="问题分解"><a href="#问题分解" class="headerlink" title="问题分解"></a>问题分解</h2><p>确定了技术方案，就要考虑具体实现了</p><ul><li>JavaScript读取execl文件，并处理成理想格式</li><li>将读取到的execl中的网址字段生成一张二维码</li><li>将二维码写入canvas，在其中间加上logo，并在底部加一行文字</li><li>将canva转化为DataURL，下载它</li><li>不断递归生成，直到xls数据全部处理完毕</li></ul><p><strong>理论存在，实践开始</strong>！</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="启动一个本地服务器"><a href="#启动一个本地服务器" class="headerlink" title="启动一个本地服务器"></a>启动一个本地服务器</h3><p>首先我们通过VScode <strong>Live Server</strong> 启动一个本地服务器</p><p>这里有好奇宝宝要问了，为啥第一步是这？</p><p>答：因为浏览器是访问不了电脑的文件系统的，所以只能通过启动一个本地服务器的方案，来读取我们的资源文件</p><h3 id="创建html，引入资源库"><a href="#创建html，引入资源库" class="headerlink" title="创建html，引入资源库"></a>创建html，引入资源库</h3><p>分析需要用到的第三方开源库</p><ul><li>解析xls <a href="https://github.com/sheetjs/sheetjs">https://github.com/sheetjs/sheetjs</a></li><li>生成QRcode <a href="https://github.com/soldair/node-qrcode">https://github.com/soldair/node-qrcode</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>生成二维码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./qrcode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./xlsx.full.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于生成载体 最终生成的图片大小，按自己的需求来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">height</span>=<span class="string">&quot;310&quot;</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ctx = <span class="title function_">initCanvas</span>(); <span class="comment">// 获取ctx实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化画布</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">initCanvas</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#fff&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">260</span>, <span class="number">310</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> ctx;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解析xls文件"><a href="#解析xls文件" class="headerlink" title="解析xls文件"></a>解析xls文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readWorkbookFromRemoteFile</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res 为实际解析代码 [&#123;key:&#x27;xxxx&#x27;,value:&#x27;xxxx&#x27;&#125;,....]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取xls信息，并处理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readWorkbookFromRemoteFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://127.0.0.1:5500/xls.xls&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.<span class="property">responseType</span> = <span class="string">&quot;arraybuffer&quot;</span>;</span><br><span class="line">        xhr.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                <span class="keyword">var</span> workbook = <span class="variable constant_">XLSX</span>.<span class="title function_">read</span>(data, &#123; <span class="attr">type</span>: <span class="string">&quot;array&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取实际表格长度（去除表头）</span></span><br><span class="line">                <span class="keyword">let</span> carryLen = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>]) &#123;</span><br><span class="line">                    <span class="keyword">const</span> ele = workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>][key];</span><br><span class="line">                    <span class="keyword">if</span> (key.<span class="title function_">includes</span>(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">                        carryLen++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析数据</span></span><br><span class="line">                <span class="keyword">let</span> xls = [];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= carryLen; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> data = workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>];</span><br><span class="line">                    xls.<span class="title function_">push</span>(&#123;</span><br><span class="line">                        <span class="attr">key</span>: data[<span class="string">&quot;A&quot;</span> + i].<span class="property">w</span>,</span><br><span class="line">                        <span class="attr">value</span>: data[<span class="string">&quot;B&quot;</span> + i].<span class="property">w</span>,</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_">resolve</span>(xls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里肯定也有细心的好奇宝宝问，为啥循环体中的<code>i</code>为2呢?</p><p>答案：因为表格中的A1，B1为表格的第一行，而第一行是表头，要去除</p><h4 id="将链接生成为二维码"><a href="#将链接生成为二维码" class="headerlink" title="将链接生成为二维码"></a>将链接生成为二维码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 生成二维码</span></span><br><span class="line">    <span class="title class_">QRCode</span>.<span class="title function_">toDataURL</span>(</span><br><span class="line">        <span class="string">&#x27;xxxxxxx&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="attr">margin</span>: <span class="number">3</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">error, url</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">            <span class="keyword">const</span> code = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">            code.<span class="property">src</span> = url;</span><br><span class="line">            code.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                ctx.<span class="title function_">drawImage</span>(code, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="title function_">resolve</span>(code);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="写入中间logo"><a href="#写入中间logo" class="headerlink" title="写入中间logo"></a>写入中间logo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> code = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    code.<span class="property">src</span> = <span class="string">&quot;http://127.0.0.1:5500/logo.jpeg&quot;</span>;</span><br><span class="line">    code.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ctx.<span class="title function_">drawImage</span>(code, <span class="number">260</span> / <span class="number">2</span> - <span class="number">20</span>, <span class="number">260</span> / <span class="number">2</span> - <span class="number">20</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="写入底部文字"><a href="#写入底部文字" class="headerlink" title="写入底部文字"></a>写入底部文字</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入编号</span></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;24px Arial&quot;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#000&quot;</span>;</span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">ctx.<span class="property">textBaseline</span> = <span class="string">&quot;middle&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(xls[index].<span class="property">value</span>, <span class="number">130</span>, <span class="number">270</span>);</span><br></pre></td></tr></table></figure><h3 id="canvas转化为图片，并下载到本地"><a href="#canvas转化为图片，并下载到本地" class="headerlink" title="canvas转化为图片，并下载到本地"></a>canvas转化为图片，并下载到本地</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于预览</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>).<span class="title function_">toDataURL</span>(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// 生成一个a元素</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&quot;click&quot;</span>); <span class="comment">// 创建一个单击事件</span></span><br><span class="line">a.<span class="property">download</span> = xls[index].<span class="property">value</span>; <span class="comment">// 将a的download属性设置为我们想要下载的图片名称，若name不存在则使用‘下载图片名称’作为默认名称</span></span><br><span class="line">a.<span class="property">href</span> = url; <span class="comment">// 将生成的URL设置为a.href属性</span></span><br><span class="line">a.<span class="title function_">dispatchEvent</span>(event); <span class="comment">// 触发a的单击事件</span></span><br></pre></td></tr></table></figure><p>第一张图片，完成生成</p><img src="http://www.vkcyan.top/image-20220424154056800.png" alt="image-20220424154056800" style="zoom: 67%;" /><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><p>我们修改发起逻辑代码，逻辑尾部增加递归调用就好啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readWorkbookFromRemoteFile</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">createImg</span>(res, <span class="number">0</span>); <span class="comment">// 递归生成</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// 实际生成逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createImg</span>(<span class="params">xls, index</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 生成二维码</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 生成中间logo</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 写入编号</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 下载图片</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xls.<span class="property">length</span> &gt; index + <span class="number">1</span>) &#123;</span><br><span class="line">                ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#fff&quot;</span>; </span><br><span class="line">                ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">260</span>, <span class="number">310</span>); <span class="comment">// 初始化画布</span></span><br><span class="line">                <span class="title function_">createImg</span>(xls, index + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">20</span>); <span class="comment">// 爱惜机器，加个延时，也可以去掉延时，体会机器的极致速度</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="http://www.vkcyan.top/8my3l-a8ef0.gif" alt="8my3l-a8ef0"></p><p>至此，终于实现了刷刷刷下载图片炫酷效果，此时可以脑部一段很快的rap，如果华佗再世，崇洋可以医治，外邦来学汉字……………</p><p>最终生成的文件</p><img src="http://www.vkcyan.top/image-20220424160255476.png" alt="image-20220424160255476" style="zoom:67%;" /><h2 id="最终代码地址"><a href="#最终代码地址" class="headerlink" title="最终代码地址"></a>最终代码地址</h2><blockquote><p>一定要针对该项目启动一个本地服务器，否则资源无法访问</p></blockquote><p><a href="https://github.com/vkcyan/web-Output-QRcode">web-Output-QRcode</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​首先纠正一点，JavaScript开发者针对生成二维码类似的任务，首选肯定是<code>puppeteer</code>，使用浏览器绕个弯这种实现方案，多少带点科研味道，长期项目自然是不推荐的</p><p>​带着学习的态度去完成需求，并且不断优化代码、总结问题，将遇到的未知知识点学会，（比如创建a链接，自动触发点击事件），这才是本文的目的。</p><p>​感谢阅读，觉得还不错就点个赞吧~</p><p>​QQ交流群：530496237 大佬解答疑惑~（内有微信群二维码）</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;一次普通的技术需求会议&lt;/p&gt;
&lt;p&gt;​	项目经理首先发言 我们技术这边需要将xls表格中的几千条数据变成二维码，并且中间镶嵌logo，图片</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>三个案例带你理解Event Loop流程</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E8%81%8A%E4%B8%80%E8%81%8A%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8AEventLoop/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E8%81%8A%E4%B8%80%E8%81%8A%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8AEventLoop/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:01.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么-JavaScript-需要-Event-Loop"><a href="#为什么-JavaScript-需要-Event-Loop" class="headerlink" title="为什么 JavaScript 需要 Event Loop"></a>为什么 JavaScript 需要 Event Loop</h2><p> JavaScript 在创建之初就确认了一点，JavaScript 是一门单线程语言，因为 JavaScript 主要提供用户互动以及操作 DOM，假定存在两个线程，同时对一个 Dom 进行操作，那究竟以谁为准呢，为了避免这种复杂性，JavaScript 确认了单线程这个核心概念</p><p> 在单线程中，除了 JavaScript 本身的逻辑之外，还存在一些 IO 操作，例如从服务端获取数据，在单线程中就需要等待结果的返回才能继续下面的逻辑，这时候机器是挂起状态，为了避免这个低效问题，这里就引入了同步任务与异步任务的概念，依旧是是单线程，但是有些任务不等待其运行结果</p><p> 于是同步任务都在函数执行栈（Stack）上执行，所有的异步任务，在有了运行结果之后，就会将其放入任务队列（callback queue），如果 Stack 中任务执行完毕，就会再去检查任务队列是否存在待执行的回调任务，将其任务放入 Stack，再执行，这里就会不断循环此操作</p><p> Stack 执行 - Stack 执行完毕 - 检查任务队列 - 将任务加入 Stack - Stack 执行，这样重复的过程就需要 Event Loop 来持续不断的循环检查任务队列，确保异步任务被准时加入到 Stack</p><p><img src="http://www.vkcyan.top/Fr09Z8JDsWNH_CThK4l2piOyaagp.png"></p><h2 id="相关名词介绍"><a href="#相关名词介绍" class="headerlink" title="相关名词介绍"></a>相关名词介绍</h2><p><strong>函数执行栈（Stask）</strong>：遵循后进先出原则，同步函数执行栈</p><p><strong>webAPIs</strong>：异步任务的发起者，事件是首先进入 stack，例如 click，change，再将 callback 加入任务队列</p><p><strong>回调队列（callback queue）</strong>：也可以被称为任务队列，回调函数到达了执行时机就会进入任务队列，他们将会被 Event Loop 持续打入函数执行栈</p><h2 id="事件循环解析"><a href="#事件循环解析" class="headerlink" title="事件循环解析"></a>事件循环解析</h2><p>我们用 Event Loop 来解释一个简单的 demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">consoleo.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure><p>我相信大部分人都知道，这里打印的顺序为 1 3 2，下面我们用事件循环的流程来说明为什么是这个结果</p><p><strong>注： cb 为 callback</strong></p><ol><li><p><code>console.log(&#39;hi&#39;)</code>，进栈 执行 出栈，<strong>打印 1</strong></p></li><li><p><code>setTimeout</code>进栈 执行 cb 加入异步队列 自身出栈</p></li><li><p><code>console.log(&#39;end&#39;)</code>，进栈 执行 出栈 <strong>打印 3</strong></p></li><li><p>5s 后，cb 加入任务队列，event Loop 检查当前执行栈是否存在函数，检查发现不存在，将 cb 加入函数执行栈</p></li><li><p><code>cb</code>进栈 执行 出栈 <strong>打印 2</strong></p></li></ol><p> 我们通过 event Loop 的角度进行解析，就能很轻易的解释为什么代码执行顺序是 1 3 2，这是非常简单的场景，接下来我们会分析一些更加有难度的代码</p><h2 id="关于宏任务与微任务"><a href="#关于宏任务与微任务" class="headerlink" title="关于宏任务与微任务"></a>关于宏任务与微任务</h2><p> 通过上面的介绍，我相信大部分人都事件循环有一个基础的认知的，但是与以上我们通过简单的示例，演示了异步代码在事件循环中的运行流程，并没有涉及宏任务与微任务，这两货是什么呢，为什么要在这里出现？</p><p><strong>首先，宏任务（macrotask），微任务（microtask）都是异步任务</strong></p><p>宏任务：<code>setTimeout</code> <code>setInterval</code> <code>setImmediate</code> <code>I/O 键盘事件</code> <code>网络事件</code> <code>UI rendering</code></p><p>微任务：<code>pormise</code> <code>MutationObserver</code> <code>process.nextTick</code></p><p>他们在执行层面上存在一定差异</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br></pre></td></tr></table></figure><p>结果为 <code>script start</code> <code>script end</code> <code>promise1</code> <code>promise2</code> <code>setTimeout</code></p><p>pormise 与 setTimeout 虽然都是异步任务，但是上图的代码你会发现，promise 仿佛插队了，这便是宏任务与微任务在任务队列最大的不同之处</p><p> <strong>event Loop 在事件循环中,首先解析 script，将宏任务加入宏任务队列，将微任务加入微任务队列，栈空了之后，执行当前微任务，第一轮事件循环结束</strong></p><p><strong>在第二轮事件循环中，首先执行宏任务 callback 中的第一个，执行完毕，栈空了之后，再执行当前微任务，后面同理</strong></p><img src="http://www.vkcyan.top/FqUHDZ_5cScznXGrkeEfGhaXCWUw.png" style="zoom: 50%;" /><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;g&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f&quot;</span>);</span><br></pre></td></tr></table></figure><p>大家可以先别看答案，自己先尝试将答案推算出来</p><h4 id="第一轮事件循环"><a href="#第一轮事件循环" class="headerlink" title="第一轮事件循环"></a>第一轮事件循环</h4><p><code>console.log(&quot;a&quot;);</code>进入栈 执行 出栈 <strong>打印 a</strong></p><p><code>setTimeout</code>进入栈 <strong>callback 加入宏任务队列</strong> 本身出栈</p><p><code>new Promise</code> 进入栈 执行</p><p><code>console.log(&quot;c&quot;);</code>进入栈 执行 出栈 <strong>打印 c</strong></p><p><code>new Promise.then</code> 进入微任务队列</p><p><code>console.log(&quot;f&quot;);</code>进入栈 执行 出栈 <strong>打印 f</strong></p><p><code>new Promise</code> 出栈</p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><code>console.log(&quot;d&quot;)</code>进入栈 执行 出栈 <strong>打印 d</strong></p><p><code>console.log(&quot;e&quot;)</code>进入栈 执行 出栈 <strong>打印 e</strong></p><p><strong>–微任务执行完毕 第一轮事件循环完毕–</strong></p><p>结果为 a c f d e</p><h4 id="第二轮事件循环"><a href="#第二轮事件循环" class="headerlink" title="第二轮事件循环"></a>第二轮事件循环</h4><p>第一轮循环中 setTimeout 在宏任务中，开始执行</p><p><code>console.log(&quot;b&quot;)</code> 进入栈 执行 出栈 <strong>打印 b</strong></p><p><code>setTimeout</code>进入栈 <strong>callback 加入宏任务队列</strong> 本身出栈</p><p><code>new Promise</code> 进入栈 执行</p><p><code>new Promise.then</code> 进入微任务队列</p><p><code>new Promise</code> 出栈</p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><code>console.log(&quot;h&quot;)</code>进入栈 执行 出栈 <strong>打印 h</strong></p><p><strong>–微任务执行完毕 第二轮事件循环完毕–</strong></p><p>结果为 b h</p><h4 id="第三轮事件循环"><a href="#第三轮事件循环" class="headerlink" title="第三轮事件循环"></a>第三轮事件循环</h4><p>第二轮循环中 setTimeout 在宏任务中，开始执行</p><p><code>console.log(&quot;g&quot;);</code>进入栈 执行 出栈 <strong>打印 g</strong></p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><strong>–微任务队列为空 第三轮事件循环完毕–</strong></p><p>结果为 g</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><strong>a c f d e b h g</strong></p><h3 id="宏-x2F-微任务的结论"><a href="#宏-x2F-微任务的结论" class="headerlink" title="宏&#x2F;微任务的结论"></a>宏&#x2F;微任务的结论</h3><p>通过上面三个例子，我们可以得出以下结论</p><ul><li><p>函数执行栈中如果还存在函数，则等待其结束，才会继续事件循环</p></li><li><p>Event Loop 先执行同步任务，再微任务，下一轮循环，宏任务加入队列，执行，所以说先微任务，再宏任务是合理的</p></li><li><p>单次 Event Loop 中，只会执行一次宏任务，但是微任务可以一次执行多个</p></li></ul><h2 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h2><p><a href="https://juejin.cn/post/6969028296893792286">做一些动图，学习一下 EventLoop</a> 通过动图看 Event Loop 更加便于理解</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> JavaScript 单线程语言的特性注定其需要异步队列，让网页交互体验上更加友好，对于开发来说，需要尽量了解其特性</p><p> 首先我们需要了解事件循环机制，搞懂代码执行栈 异步队列的概念，再后面搞懂宏任务与微任务，读懂异步队列的运行机制，这样基本上就可以解决大部分 Event Loop 问题，了解宏任务 微任务 将会对代码执行顺序有更加底层的理解，这样就可以解决</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么-JavaScript-需要-Event-Loop&quot;&gt;&lt;a href=&quot;#为什么-JavaScript-需要-Event-Loop&quot; class=&quot;headerlink&quot; title=&quot;为什么 JavaScript 需要 Event Loop&quot;&gt;&lt;/a&gt;为什</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>基于PromiseA+，从零实现Promise</title>
    <link href="https://vkcyan.github.io/2021/12/15/promise%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>https://vkcyan.github.io/2021/12/15/promise%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</id>
    <published>2021-12-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:14.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ECMAScript6中promise是划时代的API，他的出现解决了一直困扰前端开发者的异步问题，从此面对异步回调，我们有了更好的武器</p></blockquote><p><img src="http://www.vkcyan.top/1_Bf17KrH3fJo09LTKHRYJcw.jpeg" alt="1_Bf17KrH3fJo09LTKHRYJcw"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​面对天天都能见面的promise，不知道你是否有以下的一些问题</p><ol><li>我们new Promise((resolve,reject) &#x3D;&gt;{})，resolve，reject都是哪来的？</li><li>为什么resolve之后才会执行then或者catch？</li><li>为什么可以链式.then，并且还都会按同步进行？</li><li>为什么执行promise.resolve()，后面的函数就支持promise了？</li><li>promise.all是如何实现的？</li><li>是否被面试题中的promise题目迷惑的头晕目眩？</li></ol><p>让我们了解Promise的实现原理，所有问题答案自然浮出水面~</p><p>​promise在潜移默化之间帮助我们简化了复杂的异步代码，降低逻辑难度，说promise是划时代的异步解决方案也不为过，他很好的提现了<strong>开放封闭原则</strong>，解决耦合性过高的问题</p><p>​说一个小知识，es6发布之前类似prmise的异步方案已经存在，在jquery的ajax中已经应用了类似的技术方案的jQuery.deferred()，感兴趣的同学可以去了解一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(<span class="string">&quot;test.html&quot;</span>)</span><br><span class="line">.<span class="title function_">done</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&quot;哈哈，成功了！&quot;</span>); &#125;)</span><br><span class="line">.<span class="title function_">fail</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&quot;出错啦！&quot;</span>); &#125;);</span><br></pre></td></tr></table></figure><img src="http://www.vkcyan.top/FqgRN77OCKkvYc0jP_nVYjch_kCx.png" style="zoom:33%;" /><h2 id="简化版Primise"><a href="#简化版Primise" class="headerlink" title="简化版Primise"></a>简化版Primise</h2><blockquote><p>基础版本的实现虽然简单，但是解释了很多问题</p><p>建议将代码复制到本地，通过断点的方式查看代码的执行流程</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PEDDING</span> = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 等待状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span> <span class="comment">// 成功状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span> <span class="comment">// 失败状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">PEDDING</span> <span class="comment">// 初始化状态</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span> <span class="comment">// 成功的数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span> <span class="comment">// 失败的原因</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [] <span class="comment">// 保存成功状态的回调队列</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectCallbacks</span> = [] <span class="comment">// 保存失败状态的回调队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable constant_">PEDDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">FULFILLED</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = data</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">e</span>())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">err</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable constant_">PEDDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">REJECTED</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = err</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectCallbacks</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">e</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">rejected</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">      <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable constant_">PEDDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始回调&#x27;</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行回调&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">11111</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调&#x27;</span>, value)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败回调&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="代码运行流程"><a href="#代码运行流程" class="headerlink" title="代码运行流程"></a>代码运行流程</h3><ol><li>初始化APromise，开始执行class中的constructor</li><li>在constructor中初始化当前promise的一些状态值以及resolve，reject函数</li><li>最后将resolve函数与reject函数以参数的形式给promise的回调函数，同时执行函数，打印<strong>开始回调</strong></li><li>运行setTimeout，并且开始解析then函数</li><li>如果是成功，或者失败状态，直接执行回调，如果是pedding状态，则存储成功与失败回调函数</li><li>1s之后，setTimeout执行完毕，resolve执行触发constructor中的resolve</li><li>resolve函数中执行之前初始化.then时候存储的回调函数，打印 <strong>成功回调，11111</strong>或者<strong>失败回调</strong></li></ol><h3 id="逻辑流程图"><a href="#逻辑流程图" class="headerlink" title="逻辑流程图"></a>逻辑流程图</h3><p><img src="http://www.vkcyan.top/Fn85w7D8S4hjZbpJpXQTpFLbUeKZ.png" alt="基础版本逻辑流程流程图"></p><p>基础版本的实现，不支持链式调用，不支持then穿透，不支持catch，只实现了最基础的逻辑</p><p>我们在这里解答一下前言中提出的问题</p><ol><li><p>我们new Promise((resolve,reject) &#x3D;&gt;{})，resolve，reject都是哪来的？</p><p>答：new的时候执行Promise中的constructor，声明了resolve与reject，并且在执行Promise回调函数的时候将参数传入到函数中</p></li><li><p>为什么resolve之后才会执行then或者catch？</p><p>答：因为在初始化阶段，pedding状态下，我们存储了当前Promise的成功与失败回调，当执行resolve的时候，当前Promise的状态发生变化，开始执行之前存储的回调函数，如果不是padding，则立即执行回调函数</p></li></ol><p>后面的问题我们暂时还无法解释，但是随着我们进一步的实现，答案都会浮出水面</p><h2 id="正式版（链式回调，then值穿透，-catch-等）"><a href="#正式版（链式回调，then值穿透，-catch-等）" class="headerlink" title="正式版（链式回调，then值穿透，.catch  等）"></a>正式版（链式回调，then值穿透，.catch  等）</h2><h3 id="链式回调"><a href="#链式回调" class="headerlink" title="链式回调"></a>链式回调</h3><p>​我们一般写promise都会写多个.then，在多个.then中我们将异步代码变成同步代码块，但是我们基础版本的promise中无法显示链式调用，因为执行.then之后函数没有任何返回值，自然不会存在.then方法，在这个思路上，我们对promise的.then解析过程进行改写,尝试让其支持链式调用</p><ol><li>每次.then中都需要返回一个promise来触发下一个.then</li><li>对then回调函数的各种情况需要进行判断，例如。then中返回的是一个string还是返回了一个promise，如果是则需要增加链式回调触发父级的resolve</li><li>then函数执行需要通过settimeout进行包裹，让其加入宏任务</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * then可能返回的是普通值,也可能返回一个promise，这里的写法参照PromiseA+标准进行完成</span></span><br><span class="line"><span class="comment"> * 逻辑较为复杂，可以先看静态变量代码逻辑，再看针对promise的处理逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; promise 当前promise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; x 当前返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; resolve 成功回调</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; reject 失败回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolvePromise</span> = (<span class="params">promise, x, resolve, reject</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;检测到promise的循环调用&#x27;</span>)) <span class="comment">// &#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> &amp;&amp; x !== <span class="literal">null</span>) || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> then = x.<span class="property">then</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        then.<span class="title function_">call</span>(</span><br><span class="line">          x,</span><br><span class="line">          <span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise, y, resolve, reject)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="title function_">reject</span>(r)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">      called = <span class="literal">true</span></span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> apromise = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">          <span class="title function_">resolvePromise</span>(apromise, x, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">          <span class="title function_">resolvePromise</span>(apromise, x, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PEDDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">            <span class="title function_">resolvePromise</span>(apromise, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">            <span class="title function_">resolvePromise</span>(apromise, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> apromise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的内部promise处理，函数的运行逻辑发生了很大的变化</p><p>我们直观看到的逻辑是</p><p><img src="http://www.vkcyan.top/FvuUJMgXm4Pf2DgVK7bT8uolxp0i.png" alt="外在的运行逻辑"></p><p>​实际的运行逻辑是每次.then中都会再次创建一个Promise，以便于下次进行调用，并且对.then的回调函数进行处理，区分.then中返回了Promise对象还是普通对象，这样的思路实现了.then链式调用</p><p><img src="http://www.vkcyan.top/FlzdXO2ovUK36pdn5BGUpMVzNcsV.png" alt="实际的运行逻辑"></p><p>当then中存在return promise的情况，逻辑会发生一些变化，这些主要体现在resolvePromise函数中</p><p><img src="http://www.vkcyan.top/Fl5vlJvqk-NpsXmQY4cajAGo0VQp.png" alt="Snipaste_2021-06-29_09-23-14"></p><h3 id="then值穿透"><a href="#then值穿透" class="headerlink" title="then值穿透"></a>then值穿透</h3><p>首先查看一种场景</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">11111</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>()</span><br><span class="line">  .<span class="title function_">then</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调&#x27;</span>, data);</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败回调&#x27;</span>, err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>​这里我们就会发现，then的回调函数都不存在，自然无法将resolve的值传递到最下面的.then中，所以这里我们需要对这种情况做一些处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">// 值穿透问题 如果then是空的话,就手动的将上一个resolve的值带入到下一个then中</span></span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled == <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function">(<span class="params">data</span>) =&gt;</span> data</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected == <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;</span><br><span class="line">  <span class="keyword">let</span> apromise = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> apromise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们对then值中的回调函数进行处理后，实际运行的函数变成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">11111</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> data)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> data)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调&#x27;</span>, data);</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败回调&#x27;</span>, err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这样便实现了then穿透问题</p><h3 id="catch"><a href="#catch" class="headerlink" title=".catch"></a>.catch</h3><p>目前我们错误回调在.then的第二个参数中，并不支持.catch的写法，我们可以在原型链上面增加catch方法</p><blockquote><p>catch其实也是对.then方法的封装，只不过不存在成功回调，只有失败回调</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">APromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span> (<span class="params">errCallback</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, errCallback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title=".finally"></a>.finally</h3><blockquote><p>由于finally无法预知promise的最终状态，所以finally的回调函数中不接受任何参数，他仅用于无论最终结果都要执行的情况</p><p>需要注意的一点是如果finally中存在Promise，这需要等待promise执行完毕</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">APromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">callBack</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">APromise</span>.<span class="title function_">resolve</span>(<span class="title function_">callBack</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> data)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">APromise</span>.<span class="title function_">reject</span>(<span class="title function_">callBack</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于finally的小知识"><a href="#关于finally的小知识" class="headerlink" title="关于finally的小知识"></a>关于finally的小知识</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;&#125;, <span class="function">() =&gt;</span> &#123;&#125;) <span class="comment">// 此时传递下去的是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;&#125;, <span class="function">() =&gt;</span> &#123;&#125;) <span class="comment">// 传递下去的是 2，finally本身未接收参数，但是将上次的回调数据放入到了下次的回调</span></span><br></pre></td></tr></table></figure><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><blockquote><p>调用Promise.resolve()就会返回一个真实的promise，并且直接返回成功回调</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">APromise</span>.<span class="property">resolve</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h3><blockquote><p>调用Promise.resolve()就会返回一个真实的promise，并且直接返回失败回调</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">APromise</span>.<span class="property">reject</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><blockquote><p>当调用race方法的时候，必须传入一个数组，数组中可以存在不同类型以及函数类型，在初始化过程中会再次创建一个promise，当数组中的某个promise对象最先执行的时候，触发自身的.then在回调函数中触发了race本身的resolve，后面执行完毕之后，因为race的状态已经发生了变化，自然无法再执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同时执行多个promise,但是最返回最先返回的结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">promiseList</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">APromise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promiseList</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseList)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;必须传递数组&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promiseList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item &amp;&amp; <span class="keyword">typeof</span> item.<span class="property">then</span> == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        item.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(item)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok1&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;ok2&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">APromise</span>.<span class="title function_">race</span>([<span class="number">1</span>, p1, p2]).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success1&#x27;</span>, data)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error1&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><blockquote><p>all的实现逻辑非常简单，all的时候创建一个promise，内部记录当前传入的列表状态成功的单个数据，当所有的then数据都成功，调用自己的resolve，当有一个失败的时候，调用自己的reject</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同时执行多个promise,会等待每次promise的结果,最后一起返回,有一个失败,这都不会返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type"></span>&#125; promiseList </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">APromise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promiseList</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseList)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;必须是数组&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resulteArr = []</span><br><span class="line">    <span class="keyword">const</span> len = promiseList.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getResult</span> = (<span class="params">key, val</span>) =&gt; &#123;</span><br><span class="line">      resulteArr[key] = val</span><br><span class="line">      <span class="keyword">if</span> (++currentIndex == len) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(resulteArr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> val = promiseList[i]</span><br><span class="line">      <span class="keyword">if</span> (val &amp;&amp; <span class="keyword">typeof</span> val.<span class="property">then</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        val.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">getResult</span>(i, data)</span><br><span class="line">        &#125;, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">getResult</span>(i, val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok1&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok2&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,p1,p2]).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>, data);</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h3><blockquote><p>实现方法与all非常相似，是all完全相反的情况</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * any与all完全相反,只要有个一个成功就会返回成功,全部失败才会返回失败</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">promiseList</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">APromise</span>.<span class="property">any</span> = <span class="keyword">function</span> (<span class="params">promiseList</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseList)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;必须是数组&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resultArr = []</span><br><span class="line">    <span class="keyword">const</span> len = promiseList.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getResult</span> = (<span class="params">index, err</span>) =&gt; &#123;</span><br><span class="line">      resultArr[index] = err</span><br><span class="line">      <span class="keyword">if</span> (++currentIndex == len) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(resultArr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    promiseList.<span class="title function_">map</span>(<span class="function">(<span class="params">res, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res &amp;&amp; <span class="keyword">typeof</span> res.<span class="property">then</span> == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">then</span>(resolve, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">getResult</span>(index, err)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;err3&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;err4&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">APromise</span>.<span class="title function_">any</span>([p3, p4]).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>, data)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h3><blockquote><p>allSettled是ES2020加入的工具方法，一句话总结：他是永远都不会失败处理的promise.all</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存所有的成功与失败</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; promiseList </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">APromise</span>.<span class="property">allSettled</span> = <span class="keyword">function</span> (<span class="params">promiseList</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseList)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;必须是数组&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resultArr = []</span><br><span class="line">    <span class="keyword">const</span> len = promiseList.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getResult</span> = (<span class="params">index, data, status</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (status == <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        resultArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">status</span>: status,</span><br><span class="line">          <span class="attr">value</span>: data,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (status == <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        resultArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">status</span>: status,</span><br><span class="line">          <span class="attr">reason</span>: data,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (++currentIndex == len) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(resultArr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    promiseList.<span class="title function_">map</span>(<span class="function">(<span class="params">res, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res &amp;&amp; <span class="keyword">typeof</span> res.<span class="property">then</span> == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">getResult</span>(index, data, <span class="variable constant_">FULFILLED</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">getResult</span>(index, err, <span class="variable constant_">REJECTED</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">getResult</span>(index, res, <span class="variable constant_">FULFILLED</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok1&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok2&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;err3&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;err4&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">APromise</span>.<span class="title function_">allSettled</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, p1, p2, p3, p4]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>, res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2><p>首先需要安装测试脚本 <strong>npm install -g promises-aplus-tests</strong></p><p>测试命令 <strong>promises-aplus-tests xxxx.js</strong></p><blockquote><p>测试文件末尾需要加入如下代码</p><p>不存在错误则为符合promiseA+标准</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">APromise</span>.<span class="property">defer</span> = <span class="title class_">APromise</span>.<span class="property">deferred</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> dfd = &#123;&#125;</span><br><span class="line">  dfd.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    dfd.<span class="property">resolve</span> = resolve</span><br><span class="line">    dfd.<span class="property">reject</span> = reject</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> dfd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">APromise</span></span><br></pre></td></tr></table></figure><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/vkcyan/code-fragment/tree/master/promise">github-promise</a></p><p>可以通过chrome DevTool或者Vscode Debug的方式，加上断点，查看代码运行流程，便于理解promise运行逻辑</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://juejin.cn/post/6968843434006315016#heading-12">重学Promise，基于A+规范实现它</a>，感谢掘金@关er的promise解读文章，大大降低了深入promise的门槛</p><p><a href="https://promisesaplus.com/">PromiseA+规范</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN-Promise</a></p><p><a href="https://juejin.cn/post/6844904077537574919">45道Promise面试题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ECMAScript6中promise是划时代的API，他的出现解决了一直困扰前端开发者的异步问题，从此面对异步回调，我们有了更好的武器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://www.vkcyan.top/1_</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>简易版Reactivity源码解析</title>
    <link href="https://vkcyan.github.io/2021/12/01/%E7%AE%80%E6%98%93%E7%89%88Reactivity%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://vkcyan.github.io/2021/12/01/%E7%AE%80%E6%98%93%E7%89%88Reactivity%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2021-11-30T16:00:00.000Z</published>
    <updated>2022-05-23T08:17:48.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​首先感谢<a href="https://juejin.cn/user/3790771824108808">__mxin</a>同学的简易版本，没有这个简化版本，我大概率也没办法沉下心来将代码读下去，再次表示感谢，通读下来简化之后的逻辑清晰，只需要对几个JavaScript原生API进行了解，走完代码流程，便了解了核心流程</p><p>代码地址：<a href="https://github.com/vkcyan/code-fragment/tree/master/Reactivity%E7%AE%80%E6%98%93%E7%89%88%E6%BA%90%E7%A0%81">传送门</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">Reflect</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">WeakMap</a></p><h2 id="核心流程图"><a href="#核心流程图" class="headerlink" title="核心流程图"></a>核心流程图</h2><p>​尝试绘制了一遍代码流程图，主要流程就是初始化时候对reactive，computed，effect的依赖收集，以及在触发set事件的时候，对收集到的依赖的触发</p><p><img src="http://www.vkcyan.top/FjoAy1WA7p8OeSXqZYkrnSeera3j.png" alt="Snipaste_2021-06-15_20-33-48"></p><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">    <span class="attr">r</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">g</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">o</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="title function_">reactive</span>(object)</span><br></pre></td></tr></table></figure><p>​reactive是一个赋予对象响应式特征的方法，传入的数据会被proxy代理，变量一旦被代理，就将会被加入reactiveMap，以后都会触发reactiveMap内的proxy</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义响应式对象，返回proxy代理对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">object</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">object</span>) &#123;</span><br><span class="line"><span class="comment">// 判断是否已经代理，已经存在直接取自</span></span><br><span class="line">  <span class="keyword">if</span> (reactiveMap.<span class="title function_">has</span>(object)) <span class="keyword">return</span> reactiveMap.<span class="title function_">get</span>(object)</span><br><span class="line"><span class="comment">// 第一次进行处理，进行proxy代理</span></span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(object, &#123;</span><br><span class="line">    <span class="comment">// 处理器对象，定义捕获器</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get方法&#x27;</span>, target, key)</span><br><span class="line">      <span class="comment">// 针对effect，computed依赖进行处理</span></span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="comment">// 如果当前代理的值为object类型，将会对当前的值再次进行proxy,否则直接获取数据</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> target[key] === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">reactive</span>(target[key]) : <span class="title class_">Reflect</span>.<span class="title function_">get</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;设置的值&#x27;</span>, ...<span class="variable language_">arguments</span>)</span><br><span class="line">      <span class="comment">// 在set事件中对原本的数据进行修改</span></span><br><span class="line">      <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">      <span class="comment">// trigger(target, key)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  reactiveMap.<span class="title function_">set</span>(object, proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成代理的数据</p><img src="http://www.vkcyan.top/Fkt6CdXcoINsKX0ZhgzbaDSn073Z.png" style="zoom:50%;" /><h2 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h2><blockquote><p>effect会在依赖的经过reactive处理后的对象发生变化的时候，自动执行一次回调函数，通常称它为副作用函数</p></blockquote><p>effect的实现是Reactivity最核心的部分，也是比较难理解的部分，依赖WeakMap进行实现，如果不了解WeakMap，务必先去看一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> computedObj = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> proxy.<span class="property">r</span> * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`proxy.o.a: <span class="subst">$&#123;proxy.o.a&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>初始化的过程中触发effect，将函数fn放入effectStack，同时执行effect中的函数，一旦执行，必定会触发经过reactive代理的get函数，进行数据获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> effectStack = []  <span class="comment">// 收集副作用函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 副作用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 将需要执行的effect入栈</span></span><br><span class="line">    effectStack.<span class="title function_">push</span>(fn)</span><br><span class="line">    <span class="comment">// **** 执行该effect，进入proxy的get拦截 ****</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fn</span>()</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 依赖收集完毕及所有get流程走完，当前effect出栈</span></span><br><span class="line">    effectStack.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// get方法触发了track方法</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  <span class="title function_">track</span>(target, key)</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖收集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 初始化依赖Map</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 第二层依赖使用Set存放key对应的effect</span></span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    targetMap.<span class="title function_">get</span>(target).<span class="title function_">set</span>(key, (dep = <span class="keyword">new</span> <span class="title class_">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取当前栈中的effect存入第二层依赖中</span></span><br><span class="line">  <span class="keyword">const</span> activeEffect = effectStack[effectStack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">  activeEffect &amp;&amp; dep.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">  <span class="comment">// 最后触发effect函数的finally，将处理完毕的effect进行弹出，完成依赖收集</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化完成后，effect全部完成处理，我们可以看一下targetMap的数据</p><img src="http://www.vkcyan.top/FhXB0sJ9-li2v03asqwdwKAis3Qs.png" style="zoom:50%;" /><p>我们可以看到，变量a与effect中的函数关联在了一起，经过track处理后，effect内部用到的变量都与effect建立了某种关联，至此我们就完成了依赖收集</p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>Reactivity计算属性的实现是依赖effect进行实现，仅仅是增加了一个value函数进行包裹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">computed</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">effect</span>(fn)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量发生变化"><a href="#变量发生变化" class="headerlink" title="变量发生变化"></a>变量发生变化</h2><p>数据发生变化的时候，例如我们将proxy.o.a&#x3D;1,他是如何完成响应式，以及effect的触发的呢？</p><p>首先一定是触发proxy的set函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">set</span>(target, key)</span><br><span class="line"><span class="comment">// 修改代理的值</span></span><br><span class="line">  <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>) <span class="comment">// 等同于arguments[0][arguments[1]] = arguments[2]</span></span><br><span class="line"><span class="comment">// 触发依赖收集器</span></span><br><span class="line">  <span class="title function_">trigger</span>(target, key)</span><br><span class="line">&#125;,</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖收集触发器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123; <span class="comment">// target: &#123;a:1&#125; key: a</span></span><br><span class="line">  <span class="comment">// 获取当前修改的值</span></span><br><span class="line">  <span class="keyword">const</span> depMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="comment">// 开始执行effect方法</span></span><br><span class="line">  <span class="keyword">if</span> (depMap) &#123;</span><br><span class="line">    <span class="comment">// 如果存在，开始寻找Map的value，在通过key找到对应的回调函数</span></span><br><span class="line">    <span class="keyword">const</span> effects = depMap.<span class="title function_">get</span>(key)</span><br><span class="line">    effects &amp;&amp;</span><br><span class="line">      effects.<span class="title function_">forEach</span>(<span class="function">(<span class="params">run</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 执行收集的effect函数</span></span><br><span class="line">        <span class="title function_">run</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="http://www.vkcyan.top/Fuqeu7ONrETGQS60cJ0quEYeEcha.png" style="zoom:50%;" /><p>至此完成数据的响应式，effect的函数触发完成</p><h2 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h2><p>reactive 创建响应式对象</p><p>effect 副作用函数，存储匿名函数，同时调用自身收集依赖，最后弹出匿名函数</p><p>computed 计算属性，其原理是对effect的包装</p><p>track 收集依赖，绑定变量与使用该变量的effect</p><p>trigger 触发依赖，根据变量触发对应的effect</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​这个文章是一个代码记录贴，希望大家看到可以静下心来看看<a href="https://juejin.cn/user/3790771824108808">__mxin</a>同学的文章，或者<a href="https://github.com/vkcyan/code-fragment/tree/master/Reactivity%E7%AE%80%E6%98%93%E7%89%88%E6%BA%90%E7%A0%81">传送门</a>代码，了解了基础的原理后再去看<a href="https://github.com/vuejs/vue-next/tree/master/packages/reactivity#readme">@vue&#x2F;Reactivity</a>的代码，将会事半功倍；</p><p>​日积月累，将知识变成你的财富吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	首先感谢&lt;a href=&quot;https://juejin.cn/user/3790771824108808&quot;&gt;__mxin&lt;/a&gt;同学的简</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React17学习记录</title>
    <link href="https://vkcyan.github.io/2021/10/15/react17%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vkcyan.github.io/2021/10/15/react17%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-10-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:16.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么学习React17"><a href="#为什么学习React17" class="headerlink" title="为什么学习React17"></a>为什么学习React17</h2><p>​公司使用的是vue技术栈，并且因为历史原因，以及外部因素，可能不会使用react来做生产环境的项目，最近vue3走上正轨，大家都需要抛弃vue2.x的编码思想，在vue3中，hook思想开始越发明显，所以学习react17也是想借此加深对hook的理解，同时取长补短，综合vue与react的优点，在实际的开发中更好的完成开发任务</p><h2 id="useState的疑问"><a href="#useState的疑问" class="headerlink" title="useState的疑问"></a>useState的疑问</h2><p>​    关于react的useState有一个疑问，useState里面是一个对象，我想要修改对象里面的某一个字段，每次都需要<code>...state</code>,把之前的数据预先填入，这做法感觉有点傻</p><h2 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h2><p>hook是在特定换下调用自己的代码</p><p>实现自定义hook必须使用关键字<code>use</code>开头，这是ESLint的规则</p><p>自定义hook一般用于需要持续监听的值，而针对纯工具函数则不需要进行处理</p><h3 id="实现一个hook风格的防抖函数"><a href="#实现一个hook风格的防抖函数" class="headerlink" title="实现一个hook风格的防抖函数"></a>实现一个hook风格的防抖函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const [param, setParam] = useState(&#x27;ha ha&#x27;);</span><br><span class="line">const debounceParam = useDebounce(param, 2000);</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;log log&#x27;)</span><br><span class="line">&#125;, [debounceParam]);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 去抖函数</span><br><span class="line"> * @param value 监听的值</span><br><span class="line"> * @param delay 防抖时间</span><br><span class="line"> * @returns 变化后变量</span><br><span class="line"> */</span><br><span class="line">export function useDebounce(value, delay) &#123;</span><br><span class="line">  // 声明一个保存防抖结果的字段</span><br><span class="line">  const [debounceValue, setDebounceValue] = useState(value);</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 每次value,delay发生变化的时候生成一个定时器</span><br><span class="line">    const timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">      setDebounceValue(value);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">    // 在执行下一个useEffect之前,会执行上一个useEffect的返回函数</span><br><span class="line">    return () =&gt; clearTimeout(timeout);</span><br><span class="line">  &#125;, [value, delay]);</span><br><span class="line">  return debounceValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>useDebounce是一个hook风格的函数</li><li>每次param发生变化都会触发useDebounce中的useEffect</li><li>而在2000ms时间内如果重复触发就会执行上一个effect return的函数</li><li>进而不修改debounceValue，直到2000ms内无任何操作，触发setDebounceValue修改属性，改变了debounceParam</li><li>第一个useEffect触发，触发打印<code>log log</code></li></ul><h2 id="react中使用TS做代码静态检查"><a href="#react中使用TS做代码静态检查" class="headerlink" title="react中使用TS做代码静态检查"></a>react中使用TS做代码静态检查</h2><ul><li>函数类型 <code>fn: () =&gt; void</code></li><li>any类型是危险的，应当尽量不用，但是对于模糊的类型，我们可以在标注类型为unknown，这样就不会对赋值做任何校验，但是ts不允许我们对unknown类型做出任何处理，所以可以吧unknown理解成为加强版any</li><li>针对参数不固定，返回值不确定的场景，应当使用泛型，在方法名称后面加<T>,然后在参数上指定某一个为T，则T跟这参数的类型而变化</li></ul><h2 id="自定义hook-useArray"><a href="#自定义hook-useArray" class="headerlink" title="自定义hook useArray"></a>自定义hook useArray</h2><blockquote><p>传入一个hook，我们返回针对这个hook的可使用的对应方法，总体来说实现一个hook还是一个比较简单</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * hook处理的Array</span><br><span class="line"> * @param value</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">export function useArray&lt;V&gt;(value: V[]) &#123;</span><br><span class="line">  const [arrayValue, setArrayValue] = useState(value);</span><br><span class="line">  const clear = () =&gt; &#123;</span><br><span class="line">    setArrayValue([]);</span><br><span class="line">  &#125;;</span><br><span class="line">  const add = (value: V) =&gt; &#123;</span><br><span class="line">    setArrayValue([...arrayValue, value]);</span><br><span class="line">  &#125;;</span><br><span class="line">  const removeIndex = (index: number) =&gt; &#123;</span><br><span class="line">    let value = [...arrayValue];</span><br><span class="line">    value.splice(index, 1);</span><br><span class="line">    setArrayValue(value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    value: arrayValue,</span><br><span class="line">    add,</span><br><span class="line">    clear,</span><br><span class="line">    removeIndex,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于TS中interface的属性继承"><a href="#关于TS中interface的属性继承" class="headerlink" title="关于TS中interface的属性继承"></a>关于TS中interface的属性继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">interface a &#123;</span><br><span class="line">  <span class="attr">a</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface b <span class="keyword">extends</span> a &#123;</span><br><span class="line">  <span class="attr">b</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: b = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">p: a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(c); <span class="comment">// 不会报错，因为b包含了a，所以这个传入b也不会出现错误</span></span><br></pre></td></tr></table></figure><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><blockquote><p>useContext主要用于多个组件之间共享状态</p></blockquote><p>在<strong>parent</strong>组件中存在<strong>child1</strong>.<strong>child2</strong>，<strong>child3</strong>组件，我们希望这些组件之前都共享一个状态1</p><ol><li>生成createContext</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TestContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用createContext.Provider包裹<strong>parent</strong>组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;TestContext.Provider </span><br><span class="line">value=&#123;&#123;</span><br><span class="line">username: &#x27;我是变量&#x27;,</span><br><span class="line">&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;div className=&quot;parent&quot;&gt;</span><br><span class="line">&lt;Child1 /&gt;</span><br><span class="line">&lt;Child2 /&gt;</span><br><span class="line">    &lt;Child3 /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;TestContext.Provider/&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>在子组件中就可以使用useContext来获取父级创建的TestContext</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Child1 = () =&gt; &#123;</span><br><span class="line">const &#123; username &#125; = useContext(TestContext);</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;child1&quot;&gt;</span><br><span class="line">      &lt;p&gt;1 message for &#123;username&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过useContext就可以做到子组件共享一个状态，如果状态被改变，所有使用变量的都放都会发生变化</p><h2 id="TS类型的一些知识"><a href="#TS类型的一些知识" class="headerlink" title="TS类型的一些知识"></a>TS类型的一些知识</h2><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><blockquote><p>获取函数的全部参数，并且以元祖类型进行返回,Utiltity Types</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span>, c: <span class="built_in">number</span>[], d: <span class="built_in">any</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接继承test函数的全部参数类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testPlus</span>(<span class="params">...[a, b, c, d]: Parameters&lt;<span class="keyword">typeof</span> test&gt;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">string</span> | <span class="built_in">number</span>; <span class="comment">// 可以是多种类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象联合类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="attr">aType</span>:<span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:aType</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以通过interface可以实现类型功能，但是指定单个类型是无法实现的，但是interface的全部功能type都可以实现</span></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="keyword">interface</span> aaa  &#123;</span><br><span class="line"><span class="attr">a</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> aaa = &#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上2种效果都是一致的</span></span><br></pre></td></tr></table></figure><h3 id="js的typeof与ts的typeof"><a href="#js的typeof与ts的typeof" class="headerlink" title="js的typeof与ts的typeof"></a>js的typeof与ts的typeof</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js: typeof runtime阶段运行 检查参数的类型</span></span><br><span class="line"><span class="comment">// ts: typeof 静态检查阶段运行 识别函数的参数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Partial与Omit关键字"><a href="#Partial与Omit关键字" class="headerlink" title="Partial与Omit关键字"></a>Partial与Omit关键字</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Preson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="title class_">String</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Partial关键字会将传入的类型处理成为非必填</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">xiaoMin</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">Preson</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;非必填&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;非必填&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;非必填&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Omit 会删除第一个参数 类型 中的第二个参数中的变量 并返回结果 例如这里删除 name age</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shenMiRen</span>: <span class="title class_">Omit</span>&lt;<span class="title class_">Preson</span>, <span class="string">&quot;age&quot;</span> | <span class="string">&quot;name&quot;</span>&gt; = &#123; <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="关于css一些不知道的"><a href="#关于css一些不知道的" class="headerlink" title="关于css一些不知道的"></a>关于css一些不知道的</h2><h4 id="关于rem"><a href="#关于rem" class="headerlink" title="关于rem"></a>关于rem</h4><p>em表示相对于父级的font-size</p><p>rem表示相对于根元素html的font-size</p><p>正常默认font-size为16px，那么1rem &#x3D;&#x3D;&#x3D; 16px</p><p>如果希望rem的比例自定义只需要将html的font-size设置为对应的百分就行，例如设置为62.5的时候1rem &#x3D;&#x3D;&#x3D; 10px</p><h3 id="关于vh"><a href="#关于vh" class="headerlink" title="关于vh"></a>关于vh</h3><p>vh的全称为viewport height，100vh就是代表视口的高度</p><h2 id="emotion"><a href="#emotion" class="headerlink" title="emotion"></a>emotion</h2><blockquote><p>emotion是一个css in js的方案，也就是使用js来写css代码，这样的话就可以在css中直接写逻辑</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;@emotion/styled&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Row</span> = styled.<span class="property">div</span>&lt;&#123;</span><br><span class="line">  <span class="attr">gap</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">  &gt; * &#123;</span></span><br><span class="line"><span class="string">    margin-top: 0 !important;</span></span><br><span class="line"><span class="string">    margin-bottom: 0 !important;</span></span><br><span class="line"><span class="string">    margin-right: <span class="subst">$&#123;(props) =&gt; <span class="string">`<span class="subst">$&#123;props.gap&#125;</span>rem`</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h2 id="自定义hook-useAsync的实现"><a href="#自定义hook-useAsync的实现" class="headerlink" title="自定义hook useAsync的实现"></a>自定义hook useAsync的实现</h2><blockquote><p>useAsync可以理解为针对请求体再次封装，经过封装之后的请求体，自带请求进度，以及针对catch更加优雅的处理方式</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span>&lt;D&gt; &#123;</span><br><span class="line">  <span class="attr">error</span>: <span class="title class_">Error</span> | <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">data</span>: D | <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;idle&quot;</span> | <span class="string">&quot;loading&quot;</span> | <span class="string">&quot;error&quot;</span> | <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立初始化的值</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">defaultState</span>: <span class="title class_">State</span>&lt;<span class="literal">null</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;idle&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useAsync = &lt;D&gt;<span class="function">(<span class="params">initState?: State&lt;D&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 默认状态</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState&lt;<span class="title class_">State</span>&lt;D&gt;&gt;(&#123;</span><br><span class="line">    ...defaultState,</span><br><span class="line">    ...initState,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 请求成功的调用</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setData</span> = (<span class="params">data: D</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setState</span>(&#123;</span><br><span class="line">      data,</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 请求失败的调用</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setError</span> = (<span class="params">error: <span class="built_in">Error</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">error</span>: error,</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 请求开始的调用</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setLoading</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;loading&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 对外实际执行的函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params">promise: <span class="built_in">Promise</span>&lt;D&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!promise || !promise.<span class="property">then</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;请传入 promise 类型数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setLoading</span>();</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setData</span>(data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setError</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isIdle</span>: state.<span class="property">status</span> == <span class="string">&quot;idle&quot;</span>,</span><br><span class="line">    <span class="attr">isLoading</span>: state.<span class="property">status</span> == <span class="string">&quot;loading&quot;</span>,</span><br><span class="line">    <span class="attr">isError</span>: state.<span class="property">status</span> == <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="attr">isSuccess</span>: state.<span class="property">status</span> == <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    run,</span><br><span class="line">    setData,</span><br><span class="line">    setLoading,</span><br><span class="line">    setError,</span><br><span class="line">    ...state,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>使用阶段</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑顶部应用相关逻辑</span></span><br><span class="line">  <span class="keyword">const</span> projectData = useAsync&lt;any[]&gt;(); <span class="comment">// 泛型为后台返回的数据的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  启动请求，传入请求体</span></span><br><span class="line">projectData.<span class="title function_">run</span>(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求完成后，projectData中的数据状态会被同步更新</span></span><br><span class="line"><span class="keyword">let</span> &#123; data, isLoading,isError,...other&#125; = projectData </span><br></pre></td></tr></table></figure><h2 id="react中实现捕捉边界错误"><a href="#react中实现捕捉边界错误" class="headerlink" title="react中实现捕捉边界错误"></a>react中实现捕捉边界错误</h2><blockquote><p>关于错误边界的概念在react官网中是这样描述的，组件内的JavaScript错误会导致React的内部状态被破坏，并且在下一次的渲染时会产生<strong>可能无法追踪的错误</strong>，但是部分ui的JavaScript错误不应该导致整个应用的崩溃，所以react16中引入了错误边界的概念，</p><p>错误边界是一种react组件，最终组件可以捕获发生在其朱组件树任何位置的JavaScript错误，并打印错误，同时展示降级ui，而并不会渲染发生崩溃的子组件树，错误边界在渲染期间，生命周期方法和整个组件数的构造函数中捕获错误</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">ReactNode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">FallBackRender</span> = <span class="function">(<span class="params">props: &#123; error: <span class="built_in">Error</span> | <span class="literal">null</span> &#125;</span>) =&gt;</span> <span class="title class_">React</span>.<span class="property">ReactElement</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 2 两种写法一致</span></span><br><span class="line">type <span class="title class_">Components1</span> = &#123; <span class="attr">children</span>: <span class="title class_">ReactNode</span>; <span class="attr">fallbackRender</span>: <span class="title class_">FallBackRender</span> &#125;;</span><br><span class="line">type <span class="title class_">Components2</span> = <span class="title class_">React</span>.<span class="property">PropsWithChildren</span>&lt;&#123; <span class="attr">fallbackRender</span>: <span class="title class_">FallBackRender</span> &#125;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;</span><br><span class="line">  <span class="title class_">Components2</span>,</span><br><span class="line">  &#123; <span class="attr">error</span>: <span class="title class_">Error</span> | <span class="literal">null</span> &#125;</span><br><span class="line">&gt; &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 当子组件抛出异常, state中的errir就会被调用</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params">error: <span class="built_in">Error</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; error &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; error &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; fallbackRender, children &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;错误执行&quot;</span>, error);</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fallbackRender</span>(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<strong>App.tsx</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ErrorBoundary</span> fallbackRender=&#123;fallPageErrorFallback&#125;&gt;</span><br><span class="line">&#123;user ? <span class="language-xml"><span class="tag">&lt;<span class="name">AuthenicatedApp</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">UnAuthenicated</span> /&gt;</span></span>&#125;</span><br><span class="line">&lt;/<span class="title class_">ErrorBoundary</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发生错误的时候就会渲染这个dom</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fallPageErrorFallback</span> = (<span class="params">&#123; error &#125;: &#123; error: <span class="built_in">Error</span> | <span class="literal">null</span> &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请求失败了,错误信息&#123;error&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="阶段性结束"><a href="#阶段性结束" class="headerlink" title="阶段性结束"></a>阶段性结束</h2><p>  关于react hook的理念学习已经结束了，这段时间学习来看，确实react在很多方面更加易于理解，更加工程化，同时也学会了很多ts的知识，一直以来ts在我手中都是anyscript，本次学习让我对ts的运用更加熟练；在这个过程中也学会了很多hook相关的理念以及实例，并且可以带着这思想去优化项目代码</p><p>  可惜我是一名vuer，继续学习react的实际编码，意义已经不是很大，所以关于这个课程的学习，本次告一段落；通过本次学习，非常深刻的体会到了hook的优雅，后面会深入学习vue3，在vue3中将hook与业务结合，让代码更加健壮</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么学习React17&quot;&gt;&lt;a href=&quot;#为什么学习React17&quot; class=&quot;headerlink&quot; title=&quot;为什么学习React17&quot;&gt;&lt;/a&gt;为什么学习React17&lt;/h2&gt;&lt;p&gt;​		公司使用的是vue技术栈，并且因为历史原因，以及外部因</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS文件格式相互转换</title>
    <link href="https://vkcyan.github.io/2021/06/15/JavaScript%20%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%BA%92%E8%BD%AC/"/>
    <id>https://vkcyan.github.io/2021/06/15/JavaScript%20%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%BA%92%E8%BD%AC/</id>
    <published>2021-06-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:06.432Z</updated>
    
    <content type="html"><![CDATA[<h3 id="base64-转-File"><a href="#base64-转-File" class="headerlink" title="base64 转 File"></a>base64 转 File</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * base64转file文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">dataurl</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">filename</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">dataURLtoFile</span>(<span class="params">dataurl: string, filename: string</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取到base64编码</span></span><br><span class="line">  <span class="keyword">const</span> arr = dataurl.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="comment">// 将base64编码转为字符串</span></span><br><span class="line">  <span class="keyword">const</span> bstr = <span class="variable language_">window</span>.<span class="title function_">atob</span>(arr[<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">let</span> n = bstr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> u8arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(n) <span class="comment">// 创建初始化为0的，包含length个元素的无符号整型数组</span></span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    u8arr[n] = bstr.<span class="title function_">charCodeAt</span>(n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>([u8arr], filename, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="base64-转-blob"><a href="#base64-转-blob" class="headerlink" title="base64 转 blob"></a>base64 转 blob</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * base64转blob文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">dataURI</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">dataURItoBlob</span>(<span class="params">dataURI</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> mimeString = dataURI.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>] <span class="comment">// mime类型</span></span><br><span class="line">  <span class="keyword">var</span> byteString = <span class="title function_">atob</span>(dataURI.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>]) <span class="comment">//base64 解码</span></span><br><span class="line">  <span class="keyword">var</span> arrayBuffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(byteString.<span class="property">length</span>) <span class="comment">//创建缓冲数组</span></span><br><span class="line">  <span class="keyword">var</span> intArray = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer) <span class="comment">//创建视图</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteString.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    intArray[i] = byteString.<span class="title function_">charCodeAt</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Blob</span>([intArray], &#123; <span class="attr">type</span>: mimeString &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="blob转url"><a href="#blob转url" class="headerlink" title="blob转url"></a>blob转url</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * blob 转 url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">base64</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">contentType</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">translateBase64ImgToBlob</span>(<span class="params">base64, contentType</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = base64.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>) <span class="comment">//去掉base64格式图片的头部</span></span><br><span class="line">  <span class="keyword">var</span> bstr = <span class="title function_">atob</span>(arr[<span class="number">1</span>]) <span class="comment">//atob()方法将数据解码</span></span><br><span class="line">  <span class="keyword">var</span> leng = bstr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">var</span> u8arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(leng)</span><br><span class="line">  <span class="keyword">while</span> (leng--) &#123;</span><br><span class="line">    u8arr[leng] = bstr.<span class="title function_">charCodeAt</span>(leng) <span class="comment">//返回指定位置的字符的 Unicode 编码</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([u8arr], &#123; <span class="attr">type</span>: contentType &#125;)</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">blobImg</span>: any = &#123;&#125;</span><br><span class="line">  blobImg.<span class="property">url</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob) <span class="comment">//创建URL</span></span><br><span class="line">  blobImg.<span class="property">name</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> blobImg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;base64-转-File&quot;&gt;&lt;a href=&quot;#base64-转-File&quot; class=&quot;headerlink&quot; title=&quot;base64 转 File&quot;&gt;&lt;/a&gt;base64 转 File&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用gitlabCI/CD完成前端自动化部署</title>
    <link href="https://vkcyan.github.io/2021/06/15/%E4%BD%BF%E7%94%A8gitlabCICD%E5%AE%8C%E6%88%90%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/"/>
    <id>https://vkcyan.github.io/2021/06/15/%E4%BD%BF%E7%94%A8gitlabCICD%E5%AE%8C%E6%88%90%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2/</id>
    <published>2021-06-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:21:57.486Z</updated>
    
    <content type="html"><![CDATA[<img src="https://images.591wsh.com/2021/10/18/thumb_1634553431259.png" style="zoom:20%;" /><p>2021年11月16日更新 </p><ul><li><p>静态数据提取为变量</p></li><li><p>增加备份版本</p></li></ul><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>为什么使用CI&#x2F;CD？</p><p>​目前我们公司更新使用的<a href="https://juejin.cn/post/7020322286565589029">轻量化更新脚本</a>，更新操作虽然简单,但是不够规范，并且敏感信息存在开发者电脑中，虽然我们<code>git</code>上进行了配置文件忽略，但是依旧存在泄密的风险，为了防止以上情况出现，我们将敏感信息移植到gitlab中，并且将更新操作从人工变为自动化</p><h2 id="CI-x2F-CD的优点"><a href="#CI-x2F-CD的优点" class="headerlink" title="CI&#x2F;CD的优点"></a>CI&#x2F;CD的优点</h2><p>自动构建并且状态是每个人都可见的</p><p>减少手工的错误，解放了重复劳动力</p><p>更好，更快，更加安全，更加稳定的交付</p><ul><li>在CI的过程中可以进行代码质量的自动检测，减少人工检查的劳动力</li><li>打包环境一致，不会出现编译后代码异常</li></ul><p>减少等待时间，更快的交付成果</p><h2 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h2><h4 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h4><p>​持续集成（continuous Integration）频繁的将代码继承到主干。目的是让产品可以快速迭代，同时还能保证高质量，他的核心措施就是代码继承到主干之前，必须通过自动化测试，只有存在失败，就不能集成。”持续继承并不能消除bug，而是让他非常容易发现和修改”</p><h4 id="CD"><a href="#CD" class="headerlink" title="CD"></a>CD</h4><p>​持续交付（continuous Delivery）与持续部署（continuous Deployment）频繁的将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过就会进入生产阶段，持续交付可以看做持续集成的下一步，它强调的是不论怎么更新，软件都是随时随地可以交付的；代码通过评审之后，自动部署到生产环境，持续部署是持续交付的下一步，持续部署的目标是，软件在任何时刻都是可以部署的，可以进入生产阶段</p><h4 id="gitLab"><a href="#gitLab" class="headerlink" title="gitLab"></a>gitLab</h4><p>​gitLab是一个开源的应用程序，他可以实现私有化的Gti项目仓库，可以通过web界面进行访问公开或者私人项目</p><h4 id="gitLab-CI-x2F-CD"><a href="#gitLab-CI-x2F-CD" class="headerlink" title="gitLab CI&#x2F;CD"></a>gitLab CI&#x2F;CD</h4><p>​gitLab持续集成，只要在仓库的根目录添加<code>.gitlab-ci.yml</code>文件，并且配置了gitLab runner（运行器），每次代码发生变成的时候就会执行<code>.gitlab-ci.yml</code>中的配置</p><h4 id="gitLab-Runner"><a href="#gitLab-Runner" class="headerlink" title="gitLab Runner"></a>gitLab Runner</h4><p>​gitLab Runner是一个开源项目，支持多平台运行，他的作用是每次代码发生变更的时候gitlab CI会根据<code>.gitlab-ci.yml</code>，配置文件执行流水线（Pipeline）中每个阶段Stages中的Jobs，并将结果发送回gitLab。gitLab Runner是基于gitLab CI的API进行构建的相互隔离的机器，所以gitLab Runner 与gitlab本身不需要安装在同一台机器上，并且考虑到执行Runner对资源的消耗，以及安全性问题，所以并不建议安装在同一台机器上</p><h4 id="Pipelines"><a href="#Pipelines" class="headerlink" title="Pipelines"></a>Pipelines</h4><p>​流水线，是分阶段的构建任务，比如安装依赖，运行测试，打包部署，流水线由gitLab Runner进行触发，流水线运行的依据是<code>gitlab-ci.yml</code></p><h4 id="Stages"><a href="#Stages" class="headerlink" title="Stages"></a>Stages</h4><p>​构建阶段,也就是流水线的每一个环节，我们可以在 Pipelines中建立多个Stages，所有Stages都会按顺序同步进行，只有当所有的Stages都完成了Pipelines才算成功，默认情况下上一个Stages失败，这条流水线则为失败</p><h4 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h4><p>​表示构建阶段的作业，关于jobs的设置有很多，比如指定手动触发，指定分支触发，同时运行多个jobs，等等，相同的Stages中的jobs会异步进行，Stages中的jobs全部成功了，Stages才为成功，默认情况下存在jobs失败，这条流水线则为失败</p><h4 id="gitlab-ci-yml"><a href="#gitlab-ci-yml" class="headerlink" title=".gitlab-ci.yml"></a>.gitlab-ci.yml</h4><p>​在gitLab CI&#x2F;CD中，具体如何运行流水线，是由<code> .gitlab-ci.yml</code>来管理的，这个文件放在项目仓库的根目录</p><p>实例代码：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># stages：定义Pipeline中的各个构建阶段，并且定义Stages名称</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 install 阶段的一个 job</span></span><br><span class="line"><span class="attr">install-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;hello install&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 build 阶段的一个 job</span></span><br><span class="line"><span class="attr">build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Hello, build&quot;</span></span><br></pre></td></tr></table></figure><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>​此类文章太多了，请自行查找，本文不做搭建介绍</p><p>​针对已经搭建好的gitLab以及runner，为了适应前端开发环境，需要安装了node，cnpm，等等依赖</p><h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><p>git：不会git可以退出直播间了，赶快去学吧</p><p>linux：常用命令必须会，不然配置runner，以及编写ci.yml脚本的时候会寸步难行</p><h2 id="创建组织，导入git的项目"><a href="#创建组织，导入git的项目" class="headerlink" title="创建组织，导入git的项目"></a>创建组织，导入git的项目</h2><blockquote><p>创建组织主要是为了方便配置CI&#x2F;CD的全局变量，也方便项目的集中管理</p></blockquote><p>​在使用gitlab之前，我们的项目可能会在github，gitee，等等其他代码仓库，为了保留之前记录，我们需要将git仓库移植过来</p><p><img src="https://images.591wsh.com/2021/10/14/1634192962342.png" alt="image-20211014140909840"></p><p>我们之前使用的是gitee，gitlab没有对此做快捷支持，所以我们使用<code>Repo URL</code>,填写好地址与账号，就可以将git仓库导入进来</p><h2 id="更新git文件"><a href="#更新git文件" class="headerlink" title="更新git文件"></a>更新git文件</h2><p>我们将git迁移到gitlab之后，现有项目中的.git文件都需要进行更换，不能再向之前的仓库提交代码。</p><ul><li><p>停止代码提交</p></li><li><p>获取最新代码，切换到master分支</p></li><li><p>clone 新的gitlab的仓库</p></li><li><p>获取新的.git文件，覆盖原本项目中的.git，完成迁移</p></li></ul><p>到目前为止，我们就可以完成git项目的迁移操作</p><h2 id="配置组织的CI-x2F-CD变量"><a href="#配置组织的CI-x2F-CD变量" class="headerlink" title="配置组织的CI&#x2F;CD变量"></a>配置组织的CI&#x2F;CD变量</h2><p>​组织中的项目大部分都是更新到一个服务器，例如服务器地址与密码，我们可以将这部分数据统一配置到全局变量，这样组织中的项目则无需再次进行设置</p><p><img src="https://images.591wsh.com/2021/10/14/thumb_1634191321809.png" alt="image-20211014140044915"></p><p>注意：</p><ul><li>因为我们的项目不仅仅是master分支会运行runner，如果这里不关闭State，除了master（受保护的分支）其他的分支都访问不了这个变量</li><li>CI&#x2F;CD的变量功能可以很好的保护项目的隐私数据，可以隔离使用者与项目更新配置</li></ul><h2 id="配置gitlab-runner（linux）"><a href="#配置gitlab-runner（linux）" class="headerlink" title="配置gitlab-runner（linux）"></a>配置gitlab-runner（linux）</h2><blockquote><p>注意：本文无搭建gitlab以及gitlab-runner相关教程，一切都是在已经搭建完成的基础上进行使用的</p></blockquote><p>​我们针对项目就要注册一个runner，来完成我们接下来配置中的命令操作，这部分界面操作无法完成，需要对gitlab runner的服务器进行操作</p><h3 id="获取配置相关数据"><a href="#获取配置相关数据" class="headerlink" title="获取配置相关数据"></a>获取配置相关数据</h3><p><img src="https://images.591wsh.com/2021/10/14/1634192961446.png"></p><p><img src="https://images.591wsh.com/2021/10/14/thumb_1634192960394.png"></p><h3 id="注册自定义runner"><a href="#注册自定义runner" class="headerlink" title="注册自定义runner"></a>注册自定义runner</h3><p>我们需要注册一个特定的runner，这里官方提示顺序为</p><ol><li>安装runner</li><li>注册一个runner，并且URL指定为xxx，token指定为xxx</li></ol><p>接下来我们就要去runner宿主机上面注册</p><p>使用终端工具链接宿主机</p><p>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gitlab-runner register</span><br></pre></td></tr></table></figure><p><img src="https://images.591wsh.com/2021/10/14/thumb_1634195014873.png"></p><p>完成配置之后，在回到项目CI&#x2F;CD部分的设置,就会发现下面多一个runner</p><blockquote><p>注：刚刚注册的runner状态是黑色的，等会就会变成绿色</p></blockquote><p><img src="https://images.591wsh.com/2021/10/14/thumb_1634195127162.png"></p><p> 到此为止，runner已经准备就绪，他会执行我们项目中的<code>.gitlab-ci.yml</code>文件中的配置</p><h2 id="编写-gitlab-ci-yml"><a href="#编写-gitlab-ci-yml" class="headerlink" title="编写.gitlab-ci.yml"></a>编写.gitlab-ci.yml</h2><blockquote><p>具体编写过程请查看官方教程</p></blockquote><p><strong>ps：注意一点，线上静态文件最好不要命名为dist，CI脚本中dist为中转站文件夹，命名为dist会出现问题</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">stages: <span class="comment"># 分段</span></span><br><span class="line">  - install</span><br><span class="line">  - build</span><br><span class="line">  - deploy</span><br><span class="line"></span><br><span class="line">cache: <span class="comment"># 缓存</span></span><br><span class="line">  paths:</span><br><span class="line">    - node_modules</span><br><span class="line">    - admin</span><br><span class="line"></span><br><span class="line">install-job:</span><br><span class="line">  stage: install</span><br><span class="line">  only:</span><br><span class="line">    - prod-pre</span><br><span class="line">  script:</span><br><span class="line">    - <span class="built_in">echo</span> <span class="string">&quot;开始install🔥🔥🔥&quot;</span></span><br><span class="line">    - npm install</span><br><span class="line">    - <span class="built_in">echo</span> <span class="string">&quot;完成install🔥🔥🔥&quot;</span></span><br><span class="line"></span><br><span class="line">build-job:</span><br><span class="line">  stage: build</span><br><span class="line">  only:</span><br><span class="line">    - prod-pre</span><br><span class="line">  script:</span><br><span class="line">    - <span class="built_in">echo</span> <span class="string">&quot;开始代码打包💪💪💪&quot;</span></span><br><span class="line">    - npm run build</span><br><span class="line">    - <span class="built_in">echo</span> <span class="string">&quot;完成代码打包💪💪💪&quot;</span></span><br><span class="line"></span><br><span class="line">deploy-job:</span><br><span class="line">  stage: deploy</span><br><span class="line">  only:</span><br><span class="line">    - prod-pre</span><br><span class="line">  before_script:</span><br><span class="line">    - <span class="built_in">echo</span> <span class="string">&quot;发射到目标服务器✨✨✨&quot;</span></span><br><span class="line">  script:</span><br><span class="line">    - sshpass -p <span class="variable">$PASSWORD</span> scp -o StrictHostKeyChecking=no -r ./dist <span class="variable">$USERNAME</span>@<span class="variable">$HOST</span>:<span class="variable">$UPLOADDIR</span>/   <span class="comment"># 将打包完成的文件复制到目标服务器</span></span><br><span class="line">    - sshpass -p <span class="variable">$PASSWORD</span> ssh -o StrictHostKeyChecking=no <span class="variable">$USERNAME</span>@<span class="variable">$HOST</span> <span class="built_in">rm</span> -rf <span class="variable">$UPLOADDIR</span>/xxxx <span class="comment"># 删除原有文件</span></span><br><span class="line">    - sshpass -p <span class="variable">$PASSWORD</span> ssh -o StrictHostKeyChecking=no <span class="variable">$USERNAME</span>@<span class="variable">$HOST</span> <span class="built_in">mv</span> <span class="variable">$UPLOADDIR</span>/dist <span class="variable">$UPLOADDIR</span>/xxxx <span class="comment"># 将目标文件改为服务端真正文件</span></span><br><span class="line">  after_script:</span><br><span class="line">    - <span class="built_in">echo</span> <span class="string">&quot;完成更新👏👏👏&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在配置文件中配置了执行的分支，当我们在prod-pre分支上提交代码的时候，脚本就会<strong>自动执行</strong></p><ul><li>install项目依赖</li><li>build项目</li><li>发射到目标服务器</li></ul><p><img src="https://images.591wsh.com/2021/10/14/thumb_1634197592199.png" alt="image-20211014154621451"></p><p>这样就完成我们项目的自动化部署</p><h2 id="CI脚本的优化"><a href="#CI脚本的优化" class="headerlink" title="CI脚本的优化"></a>CI脚本的优化</h2><h3 id="优化自动化部署速度"><a href="#优化自动化部署速度" class="headerlink" title="优化自动化部署速度"></a>优化自动化部署速度</h3><p>上面我们完成了一个简单的流水线，他可以完成 install build delay，已经满足了基本要求，但是还存在一些小问题</p><ul><li>流水线任务时间过长</li><li>频繁install存在失败的概率</li></ul><p>我们需要优化我们的CI，让速度更快更加稳定</p><p>build环节与delay环节没有太大的操作空间，并且大部分的时间都花在install环节，我们启用了gitlab的cache，实际上并不需要每次都打包，针对这个思路我们修改我们job中的 <strong>install</strong>，在job中增加当前是否存在**node_modules&#x2F;**的判断</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">install-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prod-pre</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开始install🔥🔥🔥&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">!</span> <span class="string">-d</span> <span class="string">&quot;./node_modules/&quot;</span> ]<span class="string">;then</span>   <span class="string">npm</span> <span class="string">install;</span>   <span class="string">else</span>   <span class="string">echo</span> <span class="string">&quot;缓存存在,跳过install&quot;</span><span class="string">;</span> <span class="string">fi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;完成install🔥🔥🔥&quot;</span></span><br></pre></td></tr></table></figure><pre><code>     这样存在缓存的时候就会跳过install阶段，但是这样还存在一个问题，我们修改了依赖，但是gitlab里面缓存还在，必然会出现打包异常的情况，针对package.json发生变化，我们再增加一个job，监听package.json 是否发生变化</code></pre><h3 id="静态数据提取为变量"><a href="#静态数据提取为变量" class="headerlink" title="静态数据提取为变量"></a>静态数据提取为变量</h3><blockquote><p>假如存在多个项目，使用本脚本只需要修改此处的variables即可，不需要改script部分</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">BUILDDIR:</span> <span class="string">dist</span> <span class="comment"># 打包文件名</span></span><br><span class="line">  <span class="attr">PRODDIR:</span> <span class="string">dist</span> <span class="comment"># 线上文件名</span></span><br><span class="line">  <span class="attr">BACKUPDIR:</span> <span class="string">dist_back</span> <span class="comment"># 备份文件夹</span></span><br></pre></td></tr></table></figure><h3 id="增加备份功能"><a href="#增加备份功能" class="headerlink" title="增加备份功能"></a>增加备份功能</h3><ul><li>删除原有备份文件(仅在生产环境)</li><li>删除原有文件 备份原本的代码(仅在生产环境)</li><li>将打包完成的文件复制到目标服务器</li><li>将目标文件改为服务端真正文件</li></ul><h2 id="gitlab-ci-yml（正式版本）"><a href="#gitlab-ci-yml（正式版本）" class="headerlink" title=".gitlab-ci.yml（正式版本）"></a>.gitlab-ci.yml（正式版本）</h2><blockquote><p>指定了prod分支，根据实际项目进行修改</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span> <span class="comment"># 分段</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">repInstall</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">BUILDDIR:</span> <span class="string">dist</span> <span class="comment"># 打包文件名</span></span><br><span class="line">  <span class="attr">PRODDIR:</span> <span class="string">dist</span> <span class="comment"># 线上文件名</span></span><br><span class="line">  <span class="attr">BACKUPDIR:</span> <span class="string">dist_back</span> <span class="comment"># 备份文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span> <span class="comment"># 缓存</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dist</span></span><br><span class="line"></span><br><span class="line"><span class="attr">repInstall-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">repInstall</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prod</span></span><br><span class="line">    <span class="attr">changes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">package.json</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;依赖发生变化,开始install🔥🔥🔥&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;完成install🔥🔥🔥&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开始install🔥🔥🔥&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">!</span> <span class="string">-d</span> <span class="string">&quot;./node_modules/&quot;</span> ]<span class="string">;then</span>   <span class="string">npm</span> <span class="string">install;</span>   <span class="string">else</span>   <span class="string">echo</span> <span class="string">&quot;缓存存在,跳过install&quot;</span><span class="string">;</span> <span class="string">fi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;完成install🔥🔥🔥&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开始代码打包💪💪💪&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;完成代码打包💪💪💪&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;发射到目标服务器✨✨✨&quot;</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;发射到目标服务器✨✨✨&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">$PASSWORD</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">$USERNAME@$HOST</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">$UPLOADDIR/backup/$BACKUPDIR</span> <span class="comment"># 删除原有备份文件(仅在生产环境)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">$PASSWORD</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">$USERNAME@$HOST</span> <span class="string">mv</span> <span class="string">$UPLOADDIR/$PRODDIR/</span> <span class="string">$UPLOADDIR/backup/$BACKUPDIR/</span> <span class="comment"># 删除原有文件 备份原本的代码(仅在生产环境)</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">$PASSWORD</span> <span class="string">scp</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">-r</span> <span class="string">./$BUILDDIR/.</span> <span class="string">$USERNAME@$HOST:$UPLOADDIR/dist</span> <span class="comment"># 将打包完成的文件复制到目标服务器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">$PASSWORD</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">$USERNAME@$HOST</span> <span class="string">mv</span> <span class="string">$UPLOADDIR/dist</span> <span class="string">$UPLOADDIR/$PRODDIR</span> <span class="comment"># 将目标文件改为服务端真正文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;完成更新👏👏👏&quot;</span></span><br><span class="line">  <span class="attr">after_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;完成更新👏👏👏&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="gitlab-ci-yml（简化）"><a href="#gitlab-ci-yml（简化）" class="headerlink" title=".gitlab-ci.yml（简化）"></a>.gitlab-ci.yml（简化）</h2><blockquote><p>指定了prod-pre分支，根据实际项目进行修改</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span> <span class="comment"># 分段</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">preInstall</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">BUILDDIR:</span> <span class="string">dist</span> <span class="comment"># 打包文件名</span></span><br><span class="line">  <span class="attr">PRODDIR:</span> <span class="string">dist_test</span> <span class="comment"># 线上文件名</span></span><br><span class="line"></span><br><span class="line"><span class="attr">cache:</span> <span class="comment"># 缓存</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">dist</span></span><br><span class="line"></span><br><span class="line"><span class="attr">preInstall-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">preInstall</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prod-pre</span></span><br><span class="line">    <span class="attr">changes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">package.json</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;依赖发生变化,开始install🔥🔥🔥&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;完成install🔥🔥🔥&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prod-pre</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开始install🔥🔥🔥&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">if</span> [ <span class="string">!</span> <span class="string">-d</span> <span class="string">&quot;./node_modules/&quot;</span> ]<span class="string">;then</span>   <span class="string">npm</span> <span class="string">install;</span>   <span class="string">else</span>   <span class="string">echo</span> <span class="string">&quot;缓存存在,跳过install&quot;</span><span class="string">;</span> <span class="string">fi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;完成install🔥🔥🔥&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">prod-pre</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;开始代码打包💪💪💪&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;完成代码打包💪💪💪&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">prod-pre</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;发射到目标服务器✨✨✨&quot;</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">$PASSWORD</span> <span class="string">scp</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">-r</span> <span class="string">./$BUILDDIR/.</span> <span class="string">$USERNAME@$HOST:$UPLOADDIR/dist/</span> <span class="comment"># 将打包完成的文件复制到目标服务器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">$PASSWORD</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">$USERNAME@$HOST</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">$UPLOADDIR/$PRODDIR</span> <span class="comment"># 删除原有文件</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sshpass</span> <span class="string">-p</span> <span class="string">$PASSWORD</span> <span class="string">ssh</span> <span class="string">-o</span> <span class="string">StrictHostKeyChecking=no</span> <span class="string">$USERNAME@$HOST</span> <span class="string">mv</span> <span class="string">$UPLOADDIR/dist</span> <span class="string">$UPLOADDIR/$PRODDIR</span> <span class="comment"># 将目标文件改为服务端真正文件</span></span><br><span class="line">  <span class="attr">after_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;完成更新👏👏👏&quot;</span></span><br></pre></td></tr></table></figure><h2 id="代码地址："><a href="#代码地址：" class="headerlink" title="代码地址："></a>代码地址：</h2><p><a href="https://github.com/vkcyan/code-fragment/tree/master/gitlab%20CI">github</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​除了使用gitlabCI&#x2F;CD来完成自动化部署之外也可以使用Jenkins+webHook来完成，效果都是一样的，如果这两种方案对你，或者你的公司来说都比较复杂，那么我建议试试<a href="https://juejin.cn/post/7020322286565589029">轻量化更新方案</a>，我们也在实际项目上使用过很久，可以确保不会出现稳定性，是可以在生产环境使用的</p><p>如果使用中遇到了什么问题，请到QQ群 530496237，一起吹吹水</p><p>也可以添加我的微信：carpediem-rollin，加入微信群</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://images.591wsh.com/2021/10/18/thumb_1634553431259.png&quot; style=&quot;zoom:20%;&quot; /&gt;

&lt;p&gt;2021年11月16日更新 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态数据提取为变量&lt;/p</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用iframe+postMessage通信实现商城多页面装修</title>
    <link href="https://vkcyan.github.io/2021/06/15/%E4%BD%BF%E7%94%A8iframe%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E8%A3%85%E4%BF%AE%E6%96%B9%E6%A1%88/"/>
    <id>https://vkcyan.github.io/2021/06/15/%E4%BD%BF%E7%94%A8iframe%E5%AE%9E%E7%8E%B0%E9%A1%B5%E9%9D%A2%E8%A3%85%E4%BF%AE%E6%96%B9%E6%A1%88/</id>
    <published>2021-06-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:21:59.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="演示视频"><a href="#演示视频" class="headerlink" title="演示视频"></a>演示视频</h2><p><a href="http://www.vkcyan.top/FkONMVoZGfZgYB3nQ5Rphx21qdJm.mp4">演示视频</a></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​开发项目是多商家的类似有赞的商城后台，需要支持客户端的店铺装修功能</p><p>​系统用户多为企业用户对页面效果要求较高，导致首页变化非常频繁</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>2020年第一版本装修上线了，方案是后台“模拟”客户端样式实现可视化，实现首页装修功能</p><p><strong>实际上也就是后台写一套与客户端一样的样式解析装修json，实现装修预览的效果</strong></p><img src="http://www.vkcyan.top/FjW_Ggj8OUF_yyXPUmEqhb_ZV_sz.jpg" style="zoom:50%;" /><p>模拟版本的装修上线后，确实解决了多店铺个性化首页的问题，实现了定制化首页，但是随着时间的推移，模拟版本暴露了很多问题，高频率的改版导致需求几乎无法满足</p><ul><li><p>装修数据为静态数据，不会根据商城商品状态而变化，例如某某商品下架了，但是首页装修数据里面依旧存在</p></li><li><p>每次客户端样式发生变化，后台都需要同步编写一份，否则就无法可视化，导致工作量非常大</p></li><li><p>不具备扩展性，只能可视化的装修首页，无法可视化装修其他页面，其他页面都是通过一个插槽实现</p><blockquote><p>插槽就是一个json对象的载体，因为不想写2套样式，所以采取这种很抽象的方案</p></blockquote><img src="http://www.vkcyan.top/FmoSmHV2rJV4yhoA_k90hjQHAlmH.png" style="zoom:40%;" /></li></ul><p>随着业务的拓展，暴露出来的问题也是越来越严重，为了满足需求，很多场景下需要牺牲整个技术部门的效率，以及使用者的体验感，为了解决这个问题必须另辟蹊径，寻找其他解决方案</p><p>新方案必须解决以下问题</p><ul><li>装修中的商品数据必须为非静态数据</li><li>避免2套样式的问题</li></ul><p>装修中的商品数据实时刷新可以通过约定有规律的数据结构，后端解析并实时更新商品数据，实现装修中数据的更新</p><p>抛弃模拟方案后，也是思考很多方向，但是因为基于业务组件装修是没办法整个装修数据都json化的，所以最终尝试了一个理论上可行的方案，<strong>客户端通过iframe嵌入到后台，使用postMessage来完成后台与客户端之间的数据交互，实现装修功能</strong></p><h2 id="方案逻辑图"><a href="#方案逻辑图" class="headerlink" title="方案逻辑图"></a>方案逻辑图</h2><p><img src="http://www.vkcyan.top/FmwdPswVZevT3ff2Dy4oLQXt_n2H.png" alt="image-20210325162524064"></p><p>后台装修与客户端的主要思路</p><ul><li>装修模式下获取上次的装修记录</li><li>建立前后台iframe之前的的联系</li><li>后台装修发生变化，触发watch，watch触发postmessage，客户端得到相应，客户端watch触发，实时更新装修数据</li><li>装修完成保存到数据库</li></ul><h2 id="具体实现方案"><a href="#具体实现方案" class="headerlink" title="具体实现方案"></a>具体实现方案</h2><p>之前在掘金发布过一篇<a href="https://juejin.cn/post/6844904095971540999">（开源）从0打造H5可视化搭建系统 - 易动（vue+ts+egg）</a>文章，易动是更加灵活的装修方案，感兴趣的同学可以了解一下</p><p>按<strong>基础组件</strong>定制装修方案，基础模块为： 按钮 文本 图片 轮播图此类数据 等等</p><p>本次的装修是基于业务组件进行区分，他的核心原理就是通过iframe进行数据交互实现实时装修功能</p><h3 id="定制组件数据结构"><a href="#定制组件数据结构" class="headerlink" title="定制组件数据结构"></a>定制组件数据结构</h3><p>客户端根据json数据进行组件的展示的，所有首先，我们需要定义好客户端与后台通用的数据结构，用于声明我们的装修数据</p><p><img src="http://www.vkcyan.top/FmoSmHV2rJV4yhoA_k90hjQHAlmH.png" alt="image-20210325173306995"></p><blockquote><p>例如我定义的数据结构，仅供参考 示例  搜索框 轮播图</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="title function_">guid</span>(),</span><br><span class="line">    <span class="attr">compName</span>: <span class="string">&#x27;drag-search&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;搜索框&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">placeholder</span>: <span class="string">&#x27;想要什么呢,快来搜一下吧&#x27;</span>,</span><br><span class="line">            <span class="attr">tbHeader</span>: <span class="literal">false</span>, <span class="comment">// 是否显示淘宝推荐</span></span><br><span class="line">            <span class="attr">isUpdate</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="title function_">guid</span>(),</span><br><span class="line">      <span class="attr">compName</span>: <span class="string">&#x27;drag-swiper&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;轮播图&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">interval</span>: <span class="number">5000</span>,</span><br><span class="line">              <span class="attr">data</span>: [], <span class="comment">// 数据</span></span><br><span class="line">              <span class="attr">item</span>: &#123;</span><br><span class="line">                <span class="comment">// 单个数据</span></span><br><span class="line">                <span class="attr">img</span>:</span><br><span class="line">                <span class="string">&#x27;https://images.591wsh.com/2021/02/03/thumb_32371580472397824.png&#x27;</span>,</span><br><span class="line">                <span class="attr">isLogin</span>: <span class="literal">false</span>, <span class="comment">// 是否需要登录,</span></span><br><span class="line">                <span class="attr">linkType</span>: <span class="number">2</span>, <span class="comment">// 1 无链接 2 商品 3 外部链接 4分类</span></span><br><span class="line">                <span class="attr">commodity</span>: &#123;&#125;, <span class="comment">// 商品id</span></span><br><span class="line">                <span class="attr">dataurl</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 外部链接</span></span><br><span class="line">                <span class="attr">categoryid</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 类目id</span></span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">isUpdate</span>: <span class="literal">true</span> <span class="comment">// 告诉服务器是否需更新data里面的商品数据</span></span><br><span class="line">            &#125;</span><br><span class="line">          ],</span><br><span class="line">            <span class="attr">css</span>: &#123;</span><br><span class="line">              <span class="attr">height</span>: <span class="number">266</span>, <span class="comment">//</span></span><br><span class="line">              <span class="attr">marginTop</span>: <span class="number">20</span></span><br><span class="line">            &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h3 id="为装修中的客户端页面增加一个组件"><a href="#为装修中的客户端页面增加一个组件" class="headerlink" title="为装修中的客户端页面增加一个组件"></a>为装修中的客户端页面增加一个组件</h3><blockquote><p>增加，修改，删除都会走如下逻辑，一句话说就是数据后台操作数据，客户端可以做出响应</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 后台点击右侧装修组件，例如点击 搜索框</span></span><br><span class="line"><span class="comment">// 匹配到搜索框的文字匹配定制的数据结构，得到如下点击的数据结构</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="title function_">guid</span>(),</span><br><span class="line">    <span class="attr">compName</span>: <span class="string">&#x27;drag-search&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;搜索框&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">placeholder</span>: <span class="string">&#x27;想要什么呢,快来搜一下吧&#x27;</span>,</span><br><span class="line">            <span class="attr">tbHeader</span>: <span class="literal">false</span>, <span class="comment">// 是否显示淘宝推荐</span></span><br><span class="line">            <span class="attr">isUpdate</span>: <span class="literal">false</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;,</span><br><span class="line"> <span class="comment">// 后台通过监听存储装修数据变化的字段通知到客户端</span></span><br><span class="line"> <span class="attr">computed</span>: &#123;</span><br><span class="line">   <span class="comment">// .....</span></span><br><span class="line">   <span class="comment">// 可使用组件</span></span><br><span class="line">   <span class="attr">pageComponents</span>: &#123;</span><br><span class="line">     <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">let</span> &#123; pageComponents &#125; = <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">template</span></span><br><span class="line">       <span class="keyword">if</span> (pageComponents <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">         <span class="comment">// 组件数据发生变化的时候需要通知到客户端</span></span><br><span class="line">         <span class="variable language_">this</span>.<span class="title function_">iframeMessage</span>(pageComponents)</span><br><span class="line">         <span class="keyword">return</span> pageComponents</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> []</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">       <span class="title function_">set</span>(<span class="params">data</span>) &#123;</span><br><span class="line">         <span class="comment">// 更新组件顺序</span></span><br><span class="line">         <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;template/update_current&#x27;</span>, data)</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// ......</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">methods</span>:&#123;</span><br><span class="line">   <span class="comment">// iframe加载完成的回调函数</span></span><br><span class="line">   <span class="title function_">iframeLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;iframe加载完成&#x27;</span>)</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">frm</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line">     <span class="comment">// 告诉客户端，目前处于装修中</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">frm</span>.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">       &#123;</span><br><span class="line">         <span class="attr">isIframe</span>: <span class="literal">true</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="string">&#x27;*&#x27;</span></span><br><span class="line">     )</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="comment">// 通知客户端数据发生了更新</span></span><br><span class="line">   <span class="title function_">iframeMessage</span>(<span class="params">data</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">     <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">frm</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">frm</span>.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">         &#123;</span><br><span class="line">           <span class="attr">tempLateData</span>: data</span><br><span class="line">         &#125;,</span><br><span class="line">         <span class="string">&#x27;*&#x27;</span></span><br><span class="line">       )</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;, </span><br><span class="line"> &#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端通过postMessage进行最新的装修数据接收</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, _fundecoratio)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_fundecoratio</span>(<span class="params">event</span>) &#123;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">  <span class="keyword">if</span> (event.<span class="property">data</span>.<span class="property">tempLateData</span>) &#123;</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;app/setTempLateData&#x27;</span>, event.<span class="property">data</span>.<span class="property">tempLateData</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端对应的页面再监听存在在vuex中的装修数据</span></span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">  ...<span class="title function_">mapState</span>(&#123;</span><br><span class="line">    <span class="attr">tempLateData</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">app</span>.<span class="property">tempLateData</span>, <span class="comment">// 后台的装修数据</span></span><br><span class="line">    <span class="attr">hoverComponent</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">app</span>.<span class="property">hoverComponent</span>, <span class="comment">// 当前鼠标浮动的元素id</span></span><br><span class="line">    <span class="attr">clickComponent</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">app</span>.<span class="property">clickComponent</span>, <span class="comment">// 当前鼠标点击选中的数据 </span></span><br><span class="line">    <span class="attr">isIframe</span>: <span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">app</span>.<span class="property">isIframe</span>, <span class="comment">// 当前是否在装修模式里面</span></span><br><span class="line">  &#125;),</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端替换从接口获取的之前的页面装修数据，装修数据显示在页面上</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="title function_">tempLateData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 一旦后台通过postMessage更新装修数据，就可以替换原本接口获取的数据，实现实时装修功能</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">indexData</span> = <span class="variable language_">this</span>.<span class="property">tempLateData</span> || []</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="http://www.vkcyan.top/FkLVh0uBTQ_aCzi_TLHJV0qgmYby.gif"></p><h3 id="修改装修的组件数据"><a href="#修改装修的组件数据" class="headerlink" title="修改装修的组件数据"></a>修改装修的组件数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 后台选取选中的组件</span><br><span class="line">// 后台针对每个装修组件都建立一个vue文件进行json内数据的改变‘</span><br><span class="line">// activeComponent.compName 为选中的组件compName，例如我选中搜索框 这里就是`drag-search-data`组件，这里可以是xxx-xxx-data组件</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;template_right&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span></span></span><br><span class="line"><span class="tag">      <span class="attr">v-if</span>=<span class="string">&quot;activeComponent != false &amp;&amp; activeComponent.compName&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:is</span>=<span class="string">&quot;activeComponent.compName + &#x27;-data&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:compData</span>=<span class="string">&quot;activeComponent&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 组件内部绑定搜索框的提示文字，每次修改都会触发后台的计算属性·pageComponents·，进而后台通过postMessage通知到客户端，客户端进而存储到vuex，vuex值发生变化，客户端页面的watch起作用，页面发生变化，就吃实现组件数据的变化</span><br></pre></td></tr></table></figure><p><img src="http://www.vkcyan.top/FqDdNNWXT6pYZtAi_WxdzsuSvoYq.gif"></p><h3 id="点击客户端组件，通知后台并实现选中"><a href="#点击客户端组件，通知后台并实现选中" class="headerlink" title="点击客户端组件，通知后台并实现选中"></a>点击客户端组件，通知后台并实现选中</h3><p>我们知道，在装修里面点击客户端，就直接点击到了客户端，所以点击客户端的跳转函数，我们必须进行拦截，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前提须知 客户端每个装修组件的id都会在客户端写入到class中</span></span><br><span class="line">&lt;component :is=<span class="string">&quot;xxxxx&quot;</span>:<span class="keyword">class</span>=<span class="string">&quot;[`decoration_$&#123;item.id&#125;`,]&quot;</span>&gt;&lt;/component&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装修监听函数体内</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, _fundecoratio)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_fundecoratio</span>(<span class="params">event</span>) &#123;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line"> <span class="keyword">if</span> (event.<span class="property">data</span>.<span class="property">isIframe</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;装修开发模式启动&#x27;</span>)</span><br><span class="line">    store.<span class="title function_">commit</span>(<span class="string">&#x27;app/setIsIframe&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 拦截跳转函数</span></span><br><span class="line">    uni.<span class="property">navigateTo</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    uni.<span class="property">switchTab</span> = <span class="function">() =&gt;</span> &#123;&#125;</span><br><span class="line">    <span class="comment">// 监听点击(装修用于选中组件)</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, _decoratioclick, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_decoratioclick</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">path</span>: string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="comment">// 每次点击的时候都获取一下包含组件id的class</span></span><br><span class="line">  event.<span class="property">path</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">res: any</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">className</span> &amp;&amp; res.<span class="property">className</span>.<span class="title function_">includes</span>(<span class="string">&#x27;decoration_&#x27;</span>)) &#123;</span><br><span class="line">      path = res.<span class="property">className</span>.<span class="title function_">split</span>(<span class="string">&#x27;decoration_&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 选中客户端当前组件</span></span><br><span class="line">  store.<span class="title function_">commit</span>(<span class="string">&#x27;app/setClickComponent&#x27;</span>, path)</span><br><span class="line">  <span class="comment">// 告知父级当前选中组件</span></span><br><span class="line">  <span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">activePage</span>: path, <span class="comment">// 将当前点击的组件id通过postMessage传递到后台</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;*&#x27;</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装修后台</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">    <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">    <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (e.<span class="property">data</span>.<span class="property">activePage</span>) &#123; <span class="comment">// 获取客户端传递过来的当前组件id 这就是实现点击客户端组件装修后台得到数据</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;template/set_activeComponent&#x27;</span>, e.<span class="property">data</span>.<span class="property">activePage</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="literal">false</span></span><br><span class="line">  )</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><img src="http://www.vkcyan.top/FkAjxtq0DWusJdxIRvtIRALo9r2F.gif"></p><h3 id="添加组件到页面的流程图"><a href="#添加组件到页面的流程图" class="headerlink" title="添加组件到页面的流程图"></a>添加组件到页面的流程图</h3><p><img src="http://www.vkcyan.top/FqSMCNAqYsrThHA6jouw5mRI2lOz.png" alt="image-20210326092121131"></p><h2 id="客户端与装修后台相互传值总结"><a href="#客户端与装修后台相互传值总结" class="headerlink" title="客户端与装修后台相互传值总结"></a>客户端与装修后台相互传值总结</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客户端发送</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">parent</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="attr">activePage</span>: path,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;*&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端接收</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>, （）=&gt; &#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装修后台发送</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">frm</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;iframe&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">frm</span>.<span class="property">contentWindow</span>.<span class="title function_">postMessage</span>(</span><br><span class="line">  &#123;</span><br><span class="line">     <span class="comment">// .....</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&#x27;*&#x27;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装修后台接收</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>,<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>postMessage的数据都是实时监听的，所以任意一边传值另一边都可以快速接收到，这是实现本方案的核心，通过postMessage解决了通信上的所有问题，例如</p><ul><li>装修后台点击对应组件，客户端可以得到当前点击的组件的id</li><li>客户端点击组件可以告知后台，当前用户选中的组件</li><li>包括没实现的拖拽排序，都是可以实现的</li></ul><h2 id="多页面装修"><a href="#多页面装修" class="headerlink" title="多页面装修"></a>多页面装修</h2><blockquote><p>做页面装修一定要想明白一件事，我们玩的不是装修，只是在操作页面抽象的数据结构</p></blockquote><p>根据上面的想法，我们可以明白，活动页面很多仅仅是换换商品，换换链接，不会动不动就改页面</p><p>那个就可以抽象活动页的json数据结构</p><img src="http://www.vkcyan.top/FoDAwnHCHWm2UxhS5Aq8pk9f2WE6.png" style="zoom:30%;" /><p>那么这里对应的就<strong>是图片组件 图片组件（优惠券也是图片样式） 商品组件 商品组件</strong></p><p>在装修的时候我们定义好数据结构，依次添加这几个组件，客户端活动增加一行watch代码，就可以完美的实现活动页的装修，以及更新活动商品</p><p>注：公司项目无法透露，具体逻辑需要大家自己理解了</p><img src="http://www.vkcyan.top/Fo67_RY469daqdwfOp1nHAAeAt_q.png" style="zoom:30%;" /><h2 id="iframe装修方案优势"><a href="#iframe装修方案优势" class="headerlink" title="iframe装修方案优势"></a>iframe装修方案优势</h2><ul><li><p>100%的完美还原装修样式</p></li><li><p>可以动态更新装修里面选中的商品的数据，需要数据结构统一化，后端即可按规律解析装修json</p></li><li><p>如果出现新组件，不需要写2套样式</p></li><li><p>后台装修定义好数据结构，客户端约定项目结构不变化，理论上整个项目所有页面都可以配置化</p></li></ul><h2 id="iframe装修方案弊端"><a href="#iframe装修方案弊端" class="headerlink" title="iframe装修方案弊端"></a>iframe装修方案弊端</h2><p>​通过iframe实现的前后台交互装修方案中，不仅需要动后台的装修代码，还需要客户端进行“兼容处理”，即客户端需要识别装修模式，与不断更新后台传入的装修数据，存在一定的耦合性</p><p>​这种装修方案的弊端就是，如果希望操作起来更加便捷就需要在客户端进行功能的实现，并通过postMessage提交给装修后台</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>大家可以再看一下<a href="http://www.vkcyan.top/FkONMVoZGfZgYB3nQ5Rphx21qdJm.mp4">演示视频</a></p><h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><p>欢迎大家加入qq群吹吹水,一起成长<br><img src="http://www.vkcyan.top/FvbhQJAbxvQA8TTcMwu_uCYLyUmG.png" style="zoom:30%;" /></p><p>或者关注我的公众号，不定期更新各种文章：<strong>吴凯的随笔</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;演示视频&quot;&gt;&lt;a href=&quot;#演示视频&quot; class=&quot;headerlink&quot; title=&quot;演示视频&quot;&gt;&lt;/a&gt;演示视频&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.vkcyan.top/FkONMVoZGfZgYB3nQ5Rphx21qdJm.mp</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>在Option API中使用 Custom hook</title>
    <link href="https://vkcyan.github.io/2021/06/15/%E4%BD%BF%E7%94%A8reactivity%20%E5%9C%A8vue2%E4%B8%AD%E7%BC%96%E5%86%99hook%E5%87%BD%E6%95%B0/"/>
    <id>https://vkcyan.github.io/2021/06/15/%E4%BD%BF%E7%94%A8reactivity%20%E5%9C%A8vue2%E4%B8%AD%E7%BC%96%E5%86%99hook%E5%87%BD%E6%95%B0/</id>
    <published>2021-06-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:02.513Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>适应人群： </p><ul><li>项目的vue2.x的版本，</li><li>还没在正式环境使用过composition API</li><li>但是又想享受hook带来的优势</li></ul></blockquote><p>​注：本文提出的方法并非最佳实践，而是是vue2项目渐进式切换到vue3的方案，保留的大家熟悉的编写方式，也保留了hook的优势，如果开发团队条件允许的话，建议直接使用composition API语法来完成逻辑编写</p><h2 id="什么是hook"><a href="#什么是hook" class="headerlink" title="什么是hook"></a>什么是hook</h2><p>​hook 翻译过来是钩子，在程序上体现为<strong>在行为执行之前，先把行为勾住，不让其继续，优先执行你的hook函数</strong></p><p>用一张图来表示即为</p><blockquote><p>左边为正常函数执行流程，右边为存在hook的执行流程</p></blockquote><img src="https://images.591wsh.com/2021/11/11/thumb_1636630123367.png" style="zoom:50%;" /><h2 id="没有hook之前，我们如何对待代码复用"><a href="#没有hook之前，我们如何对待代码复用" class="headerlink" title="没有hook之前，我们如何对待代码复用"></a>没有hook之前，我们如何对待代码复用</h2><p>​我们假设一种场景，你正在开发一个后台管理系统，在这个后台管理系统中，大部分都是查询表单，他们虽然业务不同，但是逻辑上存在一定的共性</p><p>共性元素：<strong>查询条件 列表数据 分页相关数据 加载状态</strong></p><p>以上4个特征几乎每个表单都有，这就意味这你在写每一个表单的时候都需要重复对接相关的逻辑，这个问题在vue2中存在两种解决办法</p><ul><li>每次都复制逻辑相同的代码</li><li>使用vue mixins完成逻辑公用</li></ul><p>然而这2种方式都存在问题</p><ul><li>复制代码低效率，虽然相对稳定，但是编码与测试工作量较大</li><li><code>vue mixins</code>可以实现逻辑抽象，但是这种方案过于简单粗暴的方案，数据全局共享，过多使用<code>mixin</code>会导致项目走向失控，是一个比较危险的方案</li></ul><p>假设表单页面数据结构如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">data</span>: [], <span class="comment">// 列表数据</span></span><br><span class="line">  <span class="attr">currentPage</span>: <span class="number">1</span>, <span class="comment">// 当前页面</span></span><br><span class="line">  <span class="attr">pageSize</span>: <span class="number">0</span>, <span class="comment">// 每一个分页的数量</span></span><br><span class="line">  <span class="attr">thePageSize</span>: <span class="number">0</span>, <span class="comment">// 本页数量</span></span><br><span class="line">  <span class="attr">totalPages</span>: <span class="number">0</span>, <span class="comment">// 总页数</span></span><br><span class="line">  <span class="attr">totalSize</span>: <span class="number">0</span>, <span class="comment">// 总记录数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了以上后端返回的数据，我们还需要在页面增加一些状态值,用于优化用户体验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">status</span>: <span class="string">&#x27;idle&#x27;</span> | <span class="string">&#x27;loading&#x27;</span> | <span class="string">&#x27;error&#x27;</span> | <span class="string">&#x27;success&#x27;</span> | ... <span class="comment">// 当前列表请求的状态</span></span><br></pre></td></tr></table></figure><p>以上的数据 + 状态每一个后台表单页面都存在，这就意味着重复的声明，重复的对接，重复的测试</p><p>​复制代码的方式看似稳定，实则不稳定，因为每一次都要对重复逻辑进行测试，并且由于此类工作繁琐且重复劳动，开发人员一般比较抵触此类任务</p><p>​这个问题在vue2中并没有非常好的解决方案，针对这个问题隔壁react从mixin到HOC最后到现在hook，给出了还不错的解决方案。</p><p>​现在@vue&#x2F;composition-api提供了hook的能力，我们可以在vue中使用hook来优化提出的问题</p><h2 id="通过hook来完成逻辑共用"><a href="#通过hook来完成逻辑共用" class="headerlink" title="通过hook来完成逻辑共用"></a>通过hook来完成逻辑共用</h2><p>​接着上面的场景，我们现在假设我们有3个后台表单页面需要写</p><p>​传统编码方案（未使用hook）</p><img src="https://images.591wsh.com/2021/11/15/thumb_1636941536140.png" alt="未使用hook" style="zoom:50%;" /><p>​可以看到我们需要写的三个页面流程上存在很多相似的地方，对接数据环节，虽然是大部分代码相同，但是还是需要重复的编写测试，例如页码相关，状态相关逻辑</p><p>​使用hook完成重复逻辑抽象</p><blockquote><p>每次调用useHook都会生成一次独立的状态</p><p>虽然状态与逻辑依赖与组件，但是useHook可以在组件外部进行定义，这一点是之前无法做到的</p></blockquote><img src="https://images.591wsh.com/2021/11/15/thumb_1636941536427.png" alt="使用hook" style="zoom:50%;" /><p>​虽然不同页面的内部逻辑细节都是不一样，但是总体流程、数据结构都是一样的，基于这样的前提，我们就可以针对共性来进行抽象，之后不论多少个页面，我们都使用抽象逻辑，也只需要维护抽象逻辑</p><h2 id="提供-组合式-API-的-Vue-2-插件"><a href="#提供-组合式-API-的-Vue-2-插件" class="headerlink" title="提供 组合式 API 的 Vue 2 插件"></a>提供 <strong>组合式 API</strong> 的 Vue 2 插件</h2><p>​虽然hook是vue3版本才提出的，但是这并不代表hook与vue3是绑定关系，实际上在任何前端应用中都可以使用vue3中提供的hook功能</p><p>文档地址：<a href="https://github.com/vuejs/composition-api/blob/main/README.zh-CN.md">@vue&#x2F;composition-api</a></p><p>所以不论是vue3还是vue2，还是react，甚至html都可以使用这个npm包</p><p>关于vue3的响应式核心包 @vue&#x2F;reactivity的具体实现，可以看看之前的文章 <a href="https://juejin.cn/post/6974193452300894216">简易版Reactivity源码解析</a>，读懂源码之后，自然解答了你对reactivity的全部疑问</p><h2 id="实战（useReqList）"><a href="#实战（useReqList）" class="headerlink" title="实战（useReqList）"></a>实战（useReqList）</h2><blockquote><p>为了方便理解，以下代码为vue2.x，使用js进行编写</p></blockquote><p>​<strong>useReqList是一个自定义hook，作用是帮助我们抽象后台表单的公共逻辑，我们先看看未使用的情况，使用了之后，代码的变化，再看看如何实现</strong></p><h3 id="未使用useReqList"><a href="#未使用useReqList" class="headerlink" title="未使用useReqList"></a>未使用useReqList</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">shopList</span>: [], <span class="comment">// 数据</span></span><br><span class="line">    <span class="attr">homePage</span>: <span class="number">0</span>, <span class="comment">// 本页有多少数据</span></span><br><span class="line">    <span class="attr">allPage</span>: <span class="number">0</span>, <span class="comment">// 总共多少页</span></span><br><span class="line">    <span class="attr">totalSize</span>: <span class="number">0</span>, <span class="comment">//总共多少条数据</span></span><br><span class="line">    <span class="attr">pageSize</span>: <span class="number">0</span>, <span class="comment">// 每页最多多少条数据</span></span><br><span class="line">    <span class="attr">currentPage</span>: <span class="number">1</span>, <span class="comment">// 当前页码</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">currentPage</span>: <span class="variable language_">this</span>.<span class="property">currentPage</span>,</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">request</span>(data) <span class="comment">// 请求</span></span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">shopList</span> = res.<span class="property">data</span>.<span class="property">data</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">currentPage</span> = res.<span class="property">data</span>.<span class="property">currentPage</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">pageSize</span> = res.<span class="property">data</span>.<span class="property">pageSize</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">totalSize</span> = <span class="title class_">Number</span>(res.<span class="property">data</span>.<span class="property">totalSize</span>)</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">homePage</span> = res.<span class="property">data</span>.<span class="property">thePageSize</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">allPage</span> = res.<span class="property">data</span>.<span class="property">totalPages</span></span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用useReqList"><a href="#使用useReqList" class="headerlink" title="使用useReqList"></a>使用useReqList</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useReqList &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/hook/useReqList&#x27;</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">dataList</span>: <span class="title function_">useReqList</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> data = &#123;</span><br><span class="line">        <span class="attr">currentPage</span>: <span class="variable language_">this</span>.<span class="property">listData</span>.<span class="property">currentPage</span> || <span class="number">1</span>,</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">listData</span>.<span class="title function_">run</span>(<span class="title function_">request</span>(data)) <span class="comment">// 请求</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let &#123; data, currentPage, pageSize, thePageSize, totalPages, totalSize, status &#125; = this.listData</span></span><br></pre></td></tr></table></figure><p>通过上面的例子可以看到，使用了useReqList之后</p><p>公共变量，公共逻辑部分被抽象出去，页面代码变得更加纯粹</p><p>因为reactivity的特性，它们都是具备响应式</p><p>避免重复编码，重复测试环节，节省开发时间</p><p><strong>hook可以给n个接口使用，只要是请求表单接口，都不需要写重复部分的代码</strong>，避免调试，测试环节</p><p>接下里我们可以看看这是如何实现上面使用的自定义（Custom） Hook <strong>useReqList</strong></p><h3 id="useReqList具体实现"><a href="#useReqList具体实现" class="headerlink" title="useReqList具体实现"></a>useReqList具体实现</h3><blockquote><p>​内部实现就是对公共逻辑的封装，被读取的数据被reactive处理后具备了响应式，每次声明都会因为闭包的特性而开启一片独立的内存来供声明单位使用</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/reactivity&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 针对后台表单页面逻辑的抽象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">useReqList</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> defaultState = &#123;</span><br><span class="line">    <span class="attr">data</span>: [], <span class="comment">// 表格数据</span></span><br><span class="line">    <span class="attr">currentPage</span>: <span class="number">1</span>, <span class="comment">// 当前页面</span></span><br><span class="line">    <span class="attr">pageSize</span>: <span class="number">0</span>, <span class="comment">// 分页数量</span></span><br><span class="line">    <span class="attr">thePageSize</span>: <span class="number">0</span>, <span class="comment">// 当前页面数量</span></span><br><span class="line">    <span class="attr">totalPages</span>: <span class="number">0</span>, <span class="comment">// 总页数</span></span><br><span class="line">    <span class="attr">totalSize</span>: <span class="number">0</span>, <span class="comment">// 总数量</span></span><br><span class="line">    <span class="attr">error</span>: <span class="literal">null</span>, <span class="comment">// 错误原因</span></span><br><span class="line">    <span class="attr">status</span>: <span class="string">&#x27;idle&#x27;</span>, <span class="comment">// 当前状态 idle | loading | success | error</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> state = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">    ...defaultState,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 请求成功</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">data</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setData</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">    state.<span class="property">currentPage</span> = data.<span class="property">currentPage</span></span><br><span class="line">    state.<span class="property">pageSize</span> = data.<span class="property">pageSize</span></span><br><span class="line">    state.<span class="property">thePageSize</span> = data.<span class="property">thePageSize</span></span><br><span class="line">    state.<span class="property">totalPages</span> = data.<span class="property">totalPages</span></span><br><span class="line">    state.<span class="property">totalSize</span> = <span class="title class_">Number</span>(data.<span class="property">totalSize</span>)</span><br><span class="line">    state.<span class="property">data</span> = data.<span class="property">data</span></span><br><span class="line">    state.<span class="property">status</span> = <span class="string">&#x27;success&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 请求失败</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> <span class="variable">error</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setError</span> = (<span class="params">error</span>) =&gt; &#123;</span><br><span class="line">    state.<span class="property">data</span> = []</span><br><span class="line">    state.<span class="property">currentPage</span> = <span class="number">1</span></span><br><span class="line">    state.<span class="property">pageSize</span> = <span class="number">0</span></span><br><span class="line">    state.<span class="property">thePageSize</span> = <span class="number">0</span></span><br><span class="line">    state.<span class="property">totalPages</span> = <span class="number">0</span></span><br><span class="line">    state.<span class="property">totalSize</span> = <span class="number">0</span></span><br><span class="line">    state.<span class="property">error</span> = error</span><br><span class="line">    state.<span class="property">status</span> = <span class="string">&#x27;error&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setLoading</span> = (<span class="params"></span>) =&gt; (state.<span class="property">status</span> = <span class="string">&#x27;loading&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setPage</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">    state.<span class="property">currentPage</span> = num</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setReset</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    state.<span class="property">data</span> = []</span><br><span class="line">    state.<span class="property">currentPage</span> = <span class="number">1</span></span><br><span class="line">    state.<span class="property">pageSize</span> = <span class="number">0</span></span><br><span class="line">    state.<span class="property">thePageSize</span> = <span class="number">0</span></span><br><span class="line">    state.<span class="property">totalPages</span> = <span class="number">0</span></span><br><span class="line">    state.<span class="property">totalSize</span> = <span class="number">0</span></span><br><span class="line">    state.<span class="property">error</span> = <span class="literal">null</span></span><br><span class="line">    state.<span class="property">status</span> = <span class="string">&#x27;idle&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params">promise</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!promise || !promise.<span class="property">then</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;请传入 promise 类型数据&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([<span class="string">&#x27;loading&#x27;</span>].<span class="title function_">includes</span>(state.<span class="property">status</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;当前正在请求中&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setLoading</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setData</span>(res.<span class="property">data</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        <span class="title function_">setError</span>(err)</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    run,</span><br><span class="line">    setReset,</span><br><span class="line">    setData,</span><br><span class="line">    setPage,</span><br><span class="line">    setLoading,</span><br><span class="line">    setError,</span><br><span class="line">    state,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​这样的封装体基本适配大部分vue2.x开发的后台管理系统的项目，如果想在项目中使用只需要修改一下<code>setData</code>部分适配一下后端数据即可</p><h3 id="更多的vue-hook函数"><a href="#更多的vue-hook函数" class="headerlink" title="更多的vue hook函数"></a>更多的vue hook函数</h3><p>​hook工具库，<a href="https://vueuse.org/">VueUse</a>，库里面提供了大量的常用方法，掘金上面有该工具库的介绍文章，官网说明该库是兼容vue2文档了</p><h2 id="vue项目应当在什么使用下使用hook"><a href="#vue项目应当在什么使用下使用hook" class="headerlink" title="vue项目应当在什么使用下使用hook"></a>vue项目应当在什么使用下使用hook</h2><h3 id="关于Class-API与Composition-API"><a href="#关于Class-API与Composition-API" class="headerlink" title="关于Class API与Composition API"></a>关于Class API与Composition API</h3><p>​从<code>Class API</code>&#x2F;<code>Option API</code>转变向<a href="https://v3.vuejs.org/guide/composition-api-introduction.html">Composition API</a>的过程中是阵痛的，这2种API在思维方式上存在很大差异</p><p>​对于长时间写Class、vue2.x的人来说，最初接触vue3几乎发现不了非常明显的优点，setup语法不熟练的情况下基本还是按照Class的思维进行编码，无法发挥Hook的优势，导致写一段时间Vue3后的结论是：在单文件中class的代码组织能力几乎完爆setup语法…</p><p>​后来组件有一些项目经验，重新学习了react hook，逐渐对hook有了一些理解；Hook主要完成逻辑与逻辑的分离，在react和vue中使用hook可以实现 <strong>视图与视图的分析，视图与逻辑的分离，逻辑与逻辑的分离</strong>，用这个的方式来实现单一职责，在此基础上完成逻辑与视图的低耦合高内聚代码</p><p>​对于vue2的开发者在而言，可以渐进式的从vue2到vue3，先熟悉hook，在熟悉Composition API</p><h3 id="关于hook与vuex-observable"><a href="#关于hook与vuex-observable" class="headerlink" title="关于hook与vuex | observable"></a>关于hook与vuex | observable</h3><p>​从普遍意义上来说hook是可以替代vuex的，react中的API useContext就提供了类似功能。</p><pre><code> vuex是无法替代hook的，他并不具备闭包的特性，使用vuex的话，那仅仅是拆分逻辑，有多少页面还是要写多少重复逻辑只是重复代码转义到vuex中而已</code></pre><p>​但是刚接触hook不久的新手而言，很容易进入一个误区；将变量，逻辑封装在一个hook中的情况下，又在多个页面中使用，就会在内存中创建多个不共享的内容一致的空间，对于公共变量还是要使用全局状态管理库的。</p><p>​hook风格的全局状态管理库，建议可以试试<a href="https://pinia.esm.dev/">Pinia</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​使用过了一段时间的setup语法之后，对其看法也是慢慢从谨慎疑惑转变成为拥抱hook，Composition API 在逻辑抽象、类型推导、多方面均占优，虽然目前还存在一些小问题，后面的迭代都会解决的，在未来几年Custom Hook将会越来越普及，拥抱Custom Hook,Vue3吧!</p><p>如果使用中遇到了什么问题，请到QQ群 530496237，一起吹吹水</p><p>也可以添加我的微信：carpediem-rollin，加入微信群</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;适应人群： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;项目的vue2.x的版本，&lt;/li&gt;
&lt;li&gt;还没在正式环境使用过composition API&lt;/li&gt;
&lt;li&gt;但是又想享受hook带来的优势&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;​	</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>使用Prettier完成代码提交的自动格式化</title>
    <link href="https://vkcyan.github.io/2021/06/01/%E4%BD%BF%E7%94%A8gitHook%E6%9D%A5%E5%AE%8C%E6%88%90%E4%BB%A3%E7%A0%81%E7%9A%84%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96/"/>
    <id>https://vkcyan.github.io/2021/06/01/%E4%BD%BF%E7%94%A8gitHook%E6%9D%A5%E5%AE%8C%E6%88%90%E4%BB%A3%E7%A0%81%E7%9A%84%E8%87%AA%E5%8A%A8%E6%A0%BC%E5%BC%8F%E5%8C%96/</id>
    <published>2021-05-31T16:00:00.000Z</published>
    <updated>2022-05-23T08:05:05.679Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><ol><li>执行git commit</li><li>代码自动完成我们定制规则的格式化功能，并提交到本地</li></ol><p><img src="https://images.591wsh.com/2021/10/26/thumb_1635216616567.png"></p><h2 id="使用的npm包"><a href="#使用的npm包" class="headerlink" title="使用的npm包"></a>使用的npm包</h2><p><strong>prettier</strong>：功能依赖包</p><p><strong>husky</strong>：提供gitHook相关功能</p><p><strong>lint-staged</strong>：让命令只对发生更改的文件生效</p><h2 id="为什么做（WhyHow）"><a href="#为什么做（WhyHow）" class="headerlink" title="为什么做（WhyHow）"></a>为什么做（WhyHow）</h2><p>​在未建立规范之前，每个人的代码风格都是不一致的，并且开发过程中可能会出现忘记格式化，手误的问题，如果在提交之前，可以自动抹平差异统一多人开发风格，这时候作用就体现出来了</p><p>​代码风格是每一个程序员都要面对的问题，不论是在个人开发还是在团队协作中，都明白较好的代码风格是保证日后可维护性的关键，所以连不懂的开发或许都知道，要注意代码风格</p><h2 id="怎么做（How）"><a href="#怎么做（How）" class="headerlink" title="怎么做（How）"></a>怎么做（How）</h2><p>​到了正在的推进时期，就会面对很多难题，无法确定一个所有人都满意的方案，而就算是少数服从多数，在实际开发中落实也会遇到一大堆问题，例如，编辑器的不同，格式化工具不同，或者说完全没这个习惯，好不容易决定推进了，每次代码审核都需要修改这种细节问题，一来二去就搁置了，实在是头疼，到底该如何将事情完美的落实下去呢？</p><p>​这里我们就需要一个权威的规范来帮助我们约束成为一个风格，Prettier表示我先给一个规范，大家先用起来，保证代码的可读性与可维护性，然后大家都遵循这和规则。</p><p>​而prettier本身是一个<code>An opinionated code formatter</code>的格式化工具，我是一个规矩非常严格的框架，并不会给你很多的配置项，喜欢用就用，不喜欢就不用，绝大部分的编辑器集成了prettier，在编辑器的约束下，大家都遵循这个方案就好了</p><h2 id="具体配置（What）"><a href="#具体配置（What）" class="headerlink" title="具体配置（What）"></a>具体配置（What）</h2><h3 id="Vscode下载插件-prettier"><a href="#Vscode下载插件-prettier" class="headerlink" title="Vscode下载插件 prettier"></a>Vscode下载插件 prettier</h3><p><img src="https://images.591wsh.com/2021/10/25/thumb_1635150615622.png"></p><h3 id="项目按下依赖prettier，按文档完成步骤"><a href="#项目按下依赖prettier，按文档完成步骤" class="headerlink" title="项目按下依赖prettier，按文档完成步骤"></a>项目按下依赖prettier，按文档完成步骤</h3><p><a href="https://prettier.io/">prettier官网</a></p><p><img src="https://images.591wsh.com/2021/10/25/thumb_1635150614848.png"></p><h3 id="配置commit钩子"><a href="#配置commit钩子" class="headerlink" title="配置commit钩子"></a>配置commit钩子</h3><p><img src="https://images.591wsh.com/2021/10/25/thumb_1635150613564.png"></p><p>​安装好之后，会在项目下生成文件<code>.husky</code>，并修改你的<code>package.json</code>，到目前为止，其实已经配置好了，他会在你每次commit之前执行<code>npx lint-staged</code>，这个命令会执行<code>prettier --write</code>，并且只对本次修改的文件生效</p><h2 id="具体命令（躲懒不看文档的看这里-）"><a href="#具体命令（躲懒不看文档的看这里-）" class="headerlink" title="具体命令（躲懒不看文档的看这里~）"></a>具体命令（躲懒不看文档的看这里~）</h2><blockquote><p>当前的prettier版本是2.4.1，如果版本号不一致，建议还是看官网</p></blockquote><ol><li>vscode安装prettier</li><li>项目安装prettier</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev --save-exact prettier</span><br></pre></td></tr></table></figure><ol start="3"><li>创建配置文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#123;&#125;&gt; .prettierrc.json</span><br></pre></td></tr></table></figure><ol start="4"><li>创建说明不需要格式化的文件<ol><li>创建文件<a href="https://prettier.io/docs/en/ignore.html">.prettierignore</a></li><li>写入内容</li></ol></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Ignore artifacts<span class="punctuation">:</span></span><br><span class="line">build</span><br><span class="line">coverage</span><br></pre></td></tr></table></figure><ol start="5"><li><p>执行命令<code>npx prettier --write .</code>,格式化现有代码，测试功能是否正常</p></li><li><p>编写配置文件</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// json文件改为js文件（看个人习惯）写入内容</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 单引号</span></span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">&#x27;es5&#x27;</span>, <span class="comment">// 对象属性最后有 &quot;,&quot;</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">false</span>, <span class="comment">// 是否需要分号</span></span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">110</span>, <span class="comment">// 一行最多120</span></span><br><span class="line">  <span class="attr">jsxSingleQuote</span>: <span class="literal">true</span>, <span class="comment">// jsx使用单引号</span></span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>, <span class="comment">// 一个tab代表几个空格数，默认就是2</span></span><br><span class="line">  <span class="attr">useTabs</span>: <span class="literal">false</span>, <span class="comment">// 不使用缩进符，而使用空格</span></span><br><span class="line">  <span class="attr">jsxBracketSameLine</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>再次执行<code>npx prettier --write .</code>，对格式化规则有建议参考文档对配置进行修改，知道自己满意</li><li>配置gitHook钩子(必须先加入git仓库，不然会无效果)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx mrm@2 lint-staged</span><br></pre></td></tr></table></figure><ol start="9"><li>将代码格式改乱，尝试commit一下，查看功能是否正常（提交之前会被自动格式化）</li></ol><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><h3 id="win电脑-prettierrc-json写入失败"><a href="#win电脑-prettierrc-json写入失败" class="headerlink" title="win电脑.prettierrc.json写入失败"></a>win电脑.prettierrc.json写入失败</h3><p>这个问题在同事电脑上发现的，使用vscode中powershell执行<code>echo &#123;&#125;&gt; .prettierrc.json</code>,会无写入内容，后面执行的命令也会失败，这里请使用电脑的cmd打开目标文件夹，执行该命令，这样测试是可行的</p><h3 id="配置gitHook之后-commit不会自动格式化vue文件"><a href="#配置gitHook之后-commit不会自动格式化vue文件" class="headerlink" title="配置gitHook之后 commit不会自动格式化vue文件"></a>配置gitHook之后 commit不会自动格式化vue文件</h3><p>这里需要修改在<code>package.json</code>中默认写入的lint-staged中的命令</p><blockquote><p>这里根据项目中是否存在eslint，会写入不太一致，但是问题不打</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;*.js&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --cache --fix&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>统一改成</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;*.&#123;js,css,md,vue&#125;&quot;</span><span class="punctuation">:</span> <span class="string">&quot;prettier --write&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这样每次commit的时候就会自动格式化代码了</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​如果查看本文遇到了一些问题，请到QQ群 530496237，一起吹吹水~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;最终效果&quot;&gt;&lt;a href=&quot;#最终效果&quot; class=&quot;headerlink&quot; title=&quot;最终效果&quot;&gt;&lt;/a&gt;最终效果&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;执行git commit&lt;/li&gt;
&lt;li&gt;代码自动完成我们定制规则的格式化功能，并提交到本地&lt;/li&gt;
&lt;/o</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>同域名下通过一级路由区分实现“前端微构架”</title>
    <link href="https://vkcyan.github.io/2021/06/01/%E5%8D%95%E5%9F%9F%E5%90%8D%E4%B8%8B%E9%80%9A%E8%BF%87%E5%AD%90%E8%B7%AF%E7%94%B1%E5%8C%BA%E5%88%86%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/"/>
    <id>https://vkcyan.github.io/2021/06/01/%E5%8D%95%E5%9F%9F%E5%90%8D%E4%B8%8B%E9%80%9A%E8%BF%87%E5%AD%90%E8%B7%AF%E7%94%B1%E5%8C%BA%E5%88%86%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</id>
    <published>2021-05-31T16:00:00.000Z</published>
    <updated>2022-05-23T08:04:01.733Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.vkcyan.top/Fv_xaZmgk57_VFFyKCnmaiIw79LC.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​公司的客户端项目比较庞大，并且由于改动相对频繁，导致更新频率较高，web项目高频率的更新就会引发一系列的问题，例如公众号缓存问题，尤其是ios手机容易出现白屏的情况，访问过程中的用户回退页面会出现白屏的情况，等等很多未知的bug，虽然更新在一瞬间完成，但是还是会影响到部分用户的使用，针对现存的条件以及项目需求</p><p>思考到如下优化方案</p><ol><li>更新时间上尽量选择用户访问量小的时间段</li><li>程序内频繁变化的图片，文字的页面，尽量后台配置装修化，达到减少更新的效果，此处参考<a href="https://juejin.cn/post/6948769022628331550">使用iframe+postMessage通信实现商城多页面可视化装修</a></li><li>项目能否进行拆分，权重不高的页面（例如：活动页面），与主程序分离，达到减少主程序包更新频率</li></ol><h2 id="思考与分析"><a href="#思考与分析" class="headerlink" title="思考与分析"></a>思考与分析</h2><blockquote><p>第一条与第二条非本文重点，只做简要说明</p></blockquote><ul><li><p>更新时间主要参照我们的客户端监控平台提供的检测数据，一般选择用户访问量较小的时候进行更新</p></li><li><p>对于项目中频繁改动，但是数据格式固定的活动页，我们使用装修功能，达到不更新代码，只更新数据的效果</p></li></ul><p>​而项目拆分就是我们本文要说到的重点，在调查过程中也了解过微前端，但是我们的客户端项目是uniapp完成的，考虑到技术难度与改动成本，最终放弃了<strong>微前端</strong>的方案</p><p><strong>要怎么做到一个路径下面的项目拆分呢？</strong></p><p>拆分的项目需要满足一下2个条件</p><ol><li>拆分的项目必须在同域名下，不可出现跨域名的情况，不然就会出现无法共享localStorage的问题</li><li>本次改动不能影响到线上已经存在的业务，不能出现主程序的路由变动</li></ol><p>为了满足以上2个条件，则主程序不能进行任何改动，同时需要在当前域名下，想办法再指向一个项目，在同一个域下，localStorage被共享，虽然是2个项目但是在同一个域下</p><p>最开始一直在思考客户端如何修改实现，但是一直没想到完美方案，后来，我们另辟蹊径，通过nginx实现<strong>通过子路由进行项目区分</strong></p><h2 id="nginx进行一级路由区分"><a href="#nginx进行一级路由区分" class="headerlink" title="nginx进行一级路由区分"></a>nginx进行一级路由区分</h2><p><img src="http://www.vkcyan.top/Fv_xaZmgk57_VFFyKCnmaiIw79LC.png"></p><p>通过nginx进行一级路由的判断实现访问不同的静态资源</p><p>理想情况下方案是可行的，nginx配置也比较简单</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">// .....</span><br><span class="line">    server_name xxxx.com</span><br><span class="line">    // .....</span><br><span class="line">    location / &#123;  </span><br><span class="line">       root /xxx/xxx/xxxx/packageA;</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">     location ~ /activity/ &#123;</span><br><span class="line">       root /xxx/xxx/xxxx/packageB</span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>只要访问的项目路由 xxxx.com&#x2F;activity&#x2F;xxxxx,就会访问到项目包packageB，其他的一级路由都会访问到packageA</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>因为项目activityB的访问路由是确定的，所以我们在webpack的配置中就需要对<code>publicPath</code>进行修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">publicPath: &#x27;/activity/&#x27;,</span><br></pre></td></tr></table></figure><p>​然后我们nginx会去访问项目包下面的index.html，而经过我们上面对<code>publicPath</code>的修改，打包之后的index.html里面的路径应用就变成了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/activity/favicon.ico&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>xxxxx<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;/activity/css/app.xxxx.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/activity/js/chunk-vendors.xxx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/activity/js/app.xxxxx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时打包上线就会遇到资源访问不到的问题，因为webpack编译出来的程序包里面没有activity这个文件夹，所以对<code>indexPath</code>,<code>outputDir</code>也要进行修改</p><p>最终我们的<strong>vue.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/activity/&#x27;</span>, <span class="comment">// 资源路径</span></span><br><span class="line">  <span class="attr">outputDir</span>: <span class="string">&#x27;./dist/activity&#x27;</span>, <span class="comment">// 生产环境构建文件的目录</span></span><br><span class="line">  <span class="attr">indexPath</span>: <span class="string">&#x27;../index.html&#x27;</span>, <span class="comment">// 指定生成的index.html的输出路径</span></span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ..</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，通过一级路由区分项目已经完成了全部配置</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>对项目进行拆分，对于非核心程序的页面，例如活动页面等等，即可与主程序进行区分，上线活动页面不干涉主程序</li><li>项目分离后，单个项目的页面变少，单个代码包打包速度得到提升，增加项目可维护性</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>没办法共享公共逻辑代码，例如支付模块，登录模块，等等模块，因为跨项目了，当然这是有解决办法的，即公共模块打包成为npm包，但是这存在一定的工作量</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>欢迎大家加入qq群吹吹水（群号：530496237）一起成长</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://www.vkcyan.top/Fv_xaZmgk57_VFFyKCnmaiIw79LC.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>轻量化前端更新方案</title>
    <link href="https://vkcyan.github.io/2021/06/01/%E8%BD%BB%E9%87%8F%E5%8C%96%E5%89%8D%E7%AB%AF%E6%9B%B4%E6%96%B0%E6%96%B9%E6%A1%88/"/>
    <id>https://vkcyan.github.io/2021/06/01/%E8%BD%BB%E9%87%8F%E5%8C%96%E5%89%8D%E7%AB%AF%E6%9B%B4%E6%96%B0%E6%96%B9%E6%A1%88/</id>
    <published>2021-05-31T16:00:00.000Z</published>
    <updated>2022-05-23T08:04:51.111Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.591wsh.com/2021/10/18/thumb_1634545950362.png"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​一句话介绍：它是可以一行命令将代码更新到服务器的脚本</p><p>​轻量级更新方案最开始源于掘金的文章，后来我们从零实现了一个更新脚本，并且已在是生产环境中进行使用很长时间，算是非常稳定的版本，个人认为轻量化更新方案是非常使用小型开发团队</p><p>​现在我们切换到了gitlab的CI&#x2F;CD。所以这种方案已经不再是我们的主流方案，但是一路使用过来，非常稳定的解决了更新问题，还是非常不错的</p><p>优点： 快速，稳定，自动备份指定文件夹（灵活性高，但是需要自己实现）</p><p>缺点：需要手动回滚（自动回滚需要编码），相对来说没那么规范，没有留下记录，敏感数据存储在电脑中，配置文件可以<code>git</code>忽略</p><h2 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h2><ol><li>确认并打包项目</li><li>通过<code>node-ssh</code>连接线上服务器</li><li>将打包代码指定名称进行压缩</li><li>备份之前的代码，删除以前的代码包，并解压压缩包</li><li>删除本次打包代码，断开ssh链接</li></ol><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><p><a href="https://github.com/vkcyan/code-fragment/tree/master/%E8%BD%BB%E9%87%8F%E5%8C%96%E5%89%8D%E7%AB%AF%E6%9B%B4%E6%96%B0%E6%96%B9%E6%A1%88">代码地址</a></p><ol><li><p>将仓库文件放入项目</p></li><li><p>安装依赖</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install node-ssh inquirer archiver -D</span><br></pre></td></tr></table></figure><ol start="3"><li>修改<code>upload.config.js</code>内容</li><li>增加脚本命令</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;upload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node build/upload.js&quot;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>运行命名，验证是否功能正常</li></ol><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p><code>build/upload.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">NodeSSH</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;node-ssh&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> archiver = <span class="built_in">require</span>(<span class="string">&#x27;archiver&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">&#x27;inquirer&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).<span class="property">exec</span></span><br><span class="line"><span class="keyword">const</span> ssh = <span class="keyword">new</span> <span class="title class_">NodeSSH</span>()</span><br><span class="line"><span class="keyword">const</span> uploadFun = <span class="built_in">require</span>(<span class="string">&#x27;../upload.js&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取当前平台</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> objName = process.<span class="property">argv</span>[<span class="number">2</span>] <span class="comment">// 更新名字</span></span><br><span class="line"><span class="keyword">let</span> startTime = <span class="literal">null</span> <span class="comment">// 程序开始更新的时间</span></span><br><span class="line"><span class="comment">// 获取上传服务器配置</span></span><br><span class="line"><span class="keyword">let</span> config = <span class="title function_">uploadFun</span>(objName)</span><br><span class="line"><span class="keyword">const</span> verifyList = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;input&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;您正在更新到线上环境,请确认接口域名&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;objName&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line">inquirer.<span class="title function_">prompt</span>(verifyList).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">uploadBuild</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uploadBuild</span>(<span class="params"></span>) &#123;</span><br><span class="line">  startTime = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;objName&#125;</span>开始更新`</span>)</span><br><span class="line">  <span class="keyword">let</span> buildcmd = <span class="title function_">exec</span>(config.<span class="property">buildScript</span>, <span class="function">(<span class="params">error, stdout, stderr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打包完成&#x27;</span>, stdout)</span><br><span class="line">      <span class="title function_">app</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;打包出现错误&#x27;</span>, stderr)</span><br><span class="line">      process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  buildcmd.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>())</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过ssh链接服务器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">app</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ssh</span><br><span class="line">    .<span class="title function_">connect</span>(&#123;</span><br><span class="line">      <span class="attr">host</span>: config.<span class="property">host</span>,</span><br><span class="line">      <span class="attr">username</span>: config.<span class="property">username</span>,</span><br><span class="line">      <span class="attr">password</span>: config.<span class="property">password</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 上传代码压缩包</span></span><br><span class="line">      <span class="title function_">uploadData</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传代码 压缩现有代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">uploadData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建文件输出流</span></span><br><span class="line">  <span class="keyword">let</span> output = fs.<span class="title function_">createWriteStream</span>(<span class="string">`<span class="subst">$&#123;path.join(__dirname, <span class="string">&#x27;../&#x27;</span>)&#125;</span><span class="subst">$&#123;config.buildPath&#125;</span>/<span class="subst">$&#123;config.objname&#125;</span>.zip`</span>)</span><br><span class="line">  <span class="comment">// 设置压缩级别</span></span><br><span class="line">  <span class="keyword">let</span> archive = <span class="title function_">archiver</span>(<span class="string">&#x27;zip&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">zlib</span>: &#123;</span><br><span class="line">      <span class="attr">level</span>: <span class="number">8</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 存档警告</span></span><br><span class="line">  archive.<span class="title function_">on</span>(<span class="string">&#x27;warning&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="string">&#x27;ENOENT&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;stat故障和其他非阻塞错误&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 存档出错</span></span><br><span class="line">  archive.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 通过管道方法将输出流存档到文件</span></span><br><span class="line">  archive.<span class="title function_">pipe</span>(output)</span><br><span class="line">  archive.<span class="title function_">directory</span>(<span class="string">`<span class="subst">$&#123;path.join(__dirname, <span class="string">&#x27;../&#x27;</span>)&#125;</span><span class="subst">$&#123;config.buildPath&#125;</span>/<span class="subst">$&#123;config.buildobj&#125;</span>`</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">  archive.<span class="title function_">finalize</span>()</span><br><span class="line">  <span class="comment">// 文件输出流结束</span></span><br><span class="line">  output.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`总共 <span class="subst">$&#123;(archive.pointer() / <span class="number">1024</span> / <span class="number">1024</span>).toFixed(<span class="number">2</span>)&#125;</span> MB,完成源代码压缩`</span>)</span><br><span class="line">    ssh</span><br><span class="line">      .<span class="title function_">putFile</span>(</span><br><span class="line">        <span class="string">`<span class="subst">$&#123;path.join(__dirname, <span class="string">&#x27;../&#x27;</span>)&#125;</span><span class="subst">$&#123;config.buildPath&#125;</span>/<span class="subst">$&#123;config.objname&#125;</span>.zip`</span>,</span><br><span class="line">        <span class="string">`<span class="subst">$&#123;config.uploadDir&#125;</span>/<span class="subst">$&#123;config.objname&#125;</span>.zip`</span></span><br><span class="line">      )</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;程序zip上传成功,判断线上是否需要备份&#x27;</span>)</span><br><span class="line">        <span class="title function_">runcmd</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行ssh命令 判断当前是否存在备份</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">runcmd</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ssh</span><br><span class="line">    .<span class="title function_">execCommand</span>(<span class="string">&#x27;ls&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">cwd</span>: config.<span class="property">uploadDir</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">stdout</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> fileList = res.<span class="property">stdout</span>.<span class="title function_">split</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (config.<span class="property">objname</span> == config.<span class="property">backObject</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (fileList.<span class="title function_">includes</span>(config.<span class="property">objname</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前更新为线上正常环境,开始进行备份&#x27;</span>)</span><br><span class="line">            <span class="title function_">backupData</span>()</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前更新为线上正常环境,并且是第一次,将跳过备份&#x27;</span>)</span><br><span class="line">            <span class="title function_">cmdunzip</span>()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前为测试环境,无需备份,直接解压上传压缩包&#x27;</span>)</span><br><span class="line">          <span class="title function_">cmdunzip</span>()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.<span class="property">stderr</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;查询指定目录失败&#x27;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;ssh链接发生了错误&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 备份项目</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">backupData</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ssh</span><br><span class="line">    .<span class="title function_">execCommand</span>(<span class="string">`mv <span class="subst">$&#123;config.objname&#125;</span> backup/<span class="subst">$&#123;config.objname&#125;</span>_backup<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()&#125;</span>`</span>, &#123;</span><br><span class="line">      <span class="attr">cwd</span>: config.<span class="property">uploadDir</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">stderr</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;备份发生错误&#x27;</span>, res.<span class="property">stderr</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;完成备份,解压最新代码&#x27;</span>)</span><br><span class="line">        <span class="title function_">cmdunzip</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;备份发生未知链接错误&#x27;</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解压最新代码zip</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cmdunzip</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 解压程序</span></span><br><span class="line">  ssh</span><br><span class="line">    .<span class="title function_">execCommand</span>(</span><br><span class="line">      <span class="string">`rm -rf <span class="subst">$&#123;config.objname&#125;</span> &amp;&amp; unzip -o -d <span class="subst">$&#123;config.uploadDir&#125;</span>/<span class="subst">$&#123;config.objname&#125;</span> <span class="subst">$&#123;config.objname&#125;</span>.zip  &amp;&amp; rm -f <span class="subst">$&#123;config.objname&#125;</span>.zip`</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">cwd</span>: config.<span class="property">uploadDir</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`项目包完成解压,<span class="subst">$&#123;config.objname&#125;</span>项目部署成功了!`</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`项目更新时长<span class="subst">$&#123;(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - startTime.getTime()) / <span class="number">1000</span>&#125;</span>s`</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">deletelocalFile</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;本地缓存zip清除完毕&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      ssh</span><br><span class="line">        .<span class="title function_">execCommand</span>(<span class="string">`rm -rf <span class="subst">$&#123;config.objname&#125;</span>/static/.DS_Store`</span>, &#123;</span><br><span class="line">          <span class="attr">cwd</span>: config.<span class="property">uploadDir</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;线上项目.DS_Store删除完成&#x27;</span>)</span><br><span class="line">          ssh.<span class="title function_">dispose</span>()</span><br><span class="line">          process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;解压出现错误&#x27;</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *删除本地生成的压缩包</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deletelocalFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">unlink</span>(<span class="string">`<span class="subst">$&#123;path.join(__dirname, <span class="string">&#x27;../&#x27;</span>)&#125;</span><span class="subst">$&#123;config.buildPath&#125;</span>/<span class="subst">$&#123;config.objname&#125;</span>.zip`</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><code>upload.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打包核心配置文件</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Available</span> = [<span class="string">&#x27;dist-a&#x27;</span>, <span class="string">&#x27;dist-b&#x27;</span>] <span class="comment">// dist-a 环境a代码包 dist-b 环境b代码包 npm run upload dist-a</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取更新配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; objName 当前更新名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">(<span class="params">objName</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Available</span>.<span class="title function_">includes</span>(objName)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前项目不存在您输入的更新命令,请检查更新名称&#x27;</span>)</span><br><span class="line">    process.<span class="title function_">exit</span>(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;xx.xx.xx.xx&#x27;</span>, <span class="comment">// 服务器地址</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;xxxxxxxxxx&#x27;</span>,</span><br><span class="line">    <span class="attr">buildPath</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 本地打包项目地址(多层路径用这个)</span></span><br><span class="line">    <span class="attr">buildobj</span>: <span class="string">&#x27;dist&#x27;</span>, <span class="comment">// 本地打包文件名称</span></span><br><span class="line">    <span class="attr">uploadDir</span>: <span class="string">&#x27;/xx/xx/xx&#x27;</span>, <span class="comment">// 服务端项目地址</span></span><br><span class="line">    <span class="attr">objname</span>: objName, <span class="comment">// 打包项目名称</span></span><br><span class="line">    <span class="attr">backObject</span>: <span class="string">&#x27;objName&#x27;</span>, <span class="comment">// 备份的文件夹名称</span></span><br><span class="line">    <span class="attr">buildScript</span>: <span class="string">&#x27;npm run build&#x27;</span> <span class="comment">// 更新命令</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="触发命令"><a href="#触发命令" class="headerlink" title="触发命令"></a>触发命令</h2><p>最后在package.json增加一行命令，运行前面的脚本文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">   <span class="comment">// ......</span></span><br><span class="line">   <span class="attr">&quot;upload&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node build/upload.js&quot;</span></span><br><span class="line"> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="依赖版本"><a href="#依赖版本" class="headerlink" title="依赖版本"></a>依赖版本</h2><p>​因为更新脚本是在项目里面的，所以需要额外安装依赖</p><p>推荐版本号</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;node-ssh&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^12.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;inquirer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;archiver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.1&quot;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run upload xxxx // 线上代码文件夹名称</span><br></pre></td></tr></table></figure><p> upload 命令后面的字符串就是服务器上的文件夹名称，这里为了防止更新命名敲错了，需要首先在<code>upload.config.js</code>中进行更新白名单声明，如果配置都正确的情况下，你就可以看到，这就代表成功了~</p><p><img src="https://images.591wsh.com/2021/10/18/thumb_1634545950362.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​脚本文件还存在很高的上限，可以优化一下备份部分的备份代码生成规则，再增加一个回滚代码的脚本，就可以实现线上的无感知回滚了</p><p>​如果使用中遇到了什么问题，请到QQ群 530496237，一起吹吹水</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://images.591wsh.com/2021/10/18/thumb_1634545950362.png&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
