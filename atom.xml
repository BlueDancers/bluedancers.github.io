<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vkcya Blog</title>
  
  
  <link href="https://bluedancers.github.io/atom.xml" rel="self"/>
  
  <link href="https://bluedancers.github.io/"/>
  <updated>2023-03-22T08:28:29.701Z</updated>
  <id>https://bluedancers.github.io/</id>
  
  <author>
    <name>bluedancers</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue3硬核源码解析系列（6） 100行代码 实现mini版ref</title>
    <link href="https://bluedancers.github.io/2023/03/22/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%886%EF%BC%89%20100%E8%A1%8C%E4%BB%A3%E7%A0%81%20%E5%AE%9E%E7%8E%B0mini%E7%89%88ref/"/>
    <id>https://bluedancers.github.io/2023/03/22/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%886%EF%BC%89%20100%E8%A1%8C%E4%BB%A3%E7%A0%81%20%E5%AE%9E%E7%8E%B0mini%E7%89%88ref/</id>
    <published>2023-03-21T16:00:00.000Z</published>
    <updated>2023-03-22T08:28:29.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏前言"><a href="#专栏前言" class="headerlink" title="专栏前言"></a>专栏前言</h2><p>​在上一节，我们完成了<strong>vue3</strong>的<strong>ref</strong>核心源码解读，其实<strong>基础类型的ref的核心逻辑还是非常简单的</strong>，所以在我们的简易版源码环节，我们直接切入基础类型，复杂类型仅做支持，不做讲解。</p><blockquote><p>注：单基础类型场景的ref源码，几乎可以说是整个vue3源码中最简单的一部分，所以这一节的学习难度是最小的</p></blockquote><p><a href="https://github.com/BlueDancers/vue3-mini/tree/ref">mini版vue3仓库地址</a>，还请大家不要吝啬star，下次不迷路~</p><p><strong>仅保留最核心逻辑，极大减低阅读难度，80行代码实现ref</strong>，让我们直接进入源码实现环节！</p><h2 id="逻辑图（基础类型）"><a href="#逻辑图（基础类型）" class="headerlink" title="逻辑图（基础类型）"></a>逻辑图（基础类型）</h2><blockquote><p>完整版ref逻辑图，请看 Vue3硬核源码解析系列（5） ref源码解析</p></blockquote><p><img src="https://www.vkcyan.top/FjE3zqx5l7zpmv0is0_Fusim1mhf.png"></p><h2 id="具体逻辑"><a href="#具体逻辑" class="headerlink" title="具体逻辑"></a>具体逻辑</h2><blockquote><p>如同逻辑图所示，我们简易版源码的具体实现也从 <strong>初始化 依赖收集 依赖触发</strong>三个角度来进行实现</p></blockquote><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><strong>ref</strong>的初始化非常简单，逻辑流程如下</p><ol><li>判断传入对象是否已经是<strong>ref</strong>，如果是，这直接返回，如果不是，则继续运行代码</li><li><strong>ref</strong>的本质就是一个<strong>Class RefImpl</strong></li><li>初始化<strong>RefImpl</strong>的时候，将ref的参数保存到<code>_value</code>，同时将参数的原始值保存到<code>_rawValue</code></li><li>通过<strong>get value</strong>，实现<strong>ref.value</strong>的访问</li><li>使用<strong>set value</strong>，实现<strong>ref.value &#x3D; xx</strong>的更新逻辑</li></ol><p>确定实现逻辑的同时，我们也仿照vue3的源码结构开始输出吧~</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入口函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">value?: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createRef</span>(value, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRef</span>(<span class="params">rawValue: <span class="built_in">unknown</span>, shallow: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 判断是否已经是ref,如果是直接返回其本身</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(rawValue)) &#123;</span><br><span class="line">    <span class="keyword">return</span> rawValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ref本质上就是RefImpl的实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(rawValue, shallow)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T = <span class="built_in">any</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_value</span>: T <span class="comment">// ref每次读取与返回的属性</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_rawValue</span>: T <span class="comment">// ref中value的原始属性</span></span><br><span class="line">  <span class="keyword">public</span> <span class="attr">dep</span>: <span class="title class_">Dep</span> | <span class="literal">undefined</span> <span class="comment">// 当前ref相关effect</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="attr">__v_isRef</span>: <span class="built_in">boolean</span> = <span class="literal">true</span> <span class="comment">// 标记__v_isRef为true,以后将无法在通过isRef()的判断</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isShallow: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = value     <span class="comment">// 赋值原始值</span></span><br><span class="line">    <span class="comment">// ref API中 __v_isShallow,一定为false （__v_isShallow 表示是否浅层代理）</span></span><br><span class="line">    <span class="comment">// value是基础类型,则toReactive返回原值，value是复杂类型,则toReactive会将其处理成为reactive(proxy)再返回,这就意味着,此时的value是一个proxy</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = __v_isShallow ? value : <span class="title function_">toReactive</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实现ref.value能力</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="comment">// 配合effect阶段保存的activeEffect,将依赖收集到this.dep中（依赖收集）</span></span><br><span class="line">    <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="comment">// 返回最新value</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实现ref.value = xx能力</span></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断当前set的value是否存在变化, 有变化则进入if</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChange</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 保存最新的参数原始值，便于下次hasChange判断</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_rawValue</span> = newVal</span><br><span class="line">      <span class="comment">// 如果value是基础类型, 则toReactive返回value本身，否则返回通过toReactive生成的proxy</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(newVal)</span><br><span class="line">      <span class="comment">// 触发get阶段收集在this.dep中的依赖（依赖触发）</span></span><br><span class="line">      <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖收集"><a href="#依赖收集" class="headerlink" title="依赖收集"></a>依赖收集</h3><blockquote><p>ref &#x3D; Class RefImpl</p></blockquote><p>​经过我们上一章的<strong>ref</strong>源码分析我们可以了解到，<strong>ref</strong>的依赖收集，并不是依赖<strong>WeakMap</strong>进行完成，而是其自行完成依赖收集，收集在自身<strong>class</strong>的<strong>dep</strong>中，逻辑大概是这样的</p><ol><li>每次触发<strong>ref</strong>的<strong>get</strong>的时候，都会执行一次<strong>trackRefValue</strong>（trackRefValue的作用是完成依赖收集）</li><li>每次执行<strong>effect</strong>的时候，都会将<strong>effect</strong>本身保存到变量<strong>activeEffect</strong>中（具体请看<a href="https://juejin.cn/post/7202132390549553211">Vue3硬核源码解析系列（3） reactive + effect源码解析</a>）</li><li>如果<strong>RefImpl</strong>的<strong>dep</strong>不存在，则说明是第一次进行依赖收集，将通过<strong>createDep</strong>将<strong>RefImpl.dep</strong>赋值为<strong>Set</strong></li><li>将<strong>activeEffect</strong>，也就是当前正在运行的<strong>effect</strong>，<strong>push</strong>到<strong>RefImpl</strong>的<strong>dep</strong>中，<strong>ref</strong>完成依赖收集</li></ol><p>明确了逻辑之后，我们依旧结合vue3的源码结构，来完成ref依赖收集的代码输出。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ref 依赖收集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackRefValue</span>(<span class="params">ref: RefImpl</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断当前是否存在需要收集的依赖</span></span><br><span class="line">  <span class="keyword">if</span> (activeEffect) &#123;</span><br><span class="line">    <span class="comment">// 判断RefImpl的实例中的dep是否被初始化过</span></span><br><span class="line">    <span class="keyword">if</span> (!ref.<span class="property">dep</span>) &#123;</span><br><span class="line">      <span class="comment">// 如果没有, 则赋值为Set</span></span><br><span class="line">      ref.<span class="property">dep</span> = <span class="title function_">createDep</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将当前effect收集到当前RefImpl实例的dep中, 完成依赖收集</span></span><br><span class="line">    <span class="title function_">trackEffects</span>(ref.<span class="property">dep</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">dep</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackEffects</span>(<span class="params">dep: Dep</span>) &#123;</span><br><span class="line">  dep.<span class="title function_">add</span>(activeEffect!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖触发"><a href="#依赖触发" class="headerlink" title="依赖触发"></a>依赖触发</h3><p>若干时间后，<strong>ref</strong>的<strong>value</strong>被更新，触发<strong>RefImpl</strong>的<strong>set value</strong>，在更新<strong>value</strong>的同时，也会执行其内部的<strong>triggerRefValue</strong>，开始依赖触发逻辑</p><ol><li>获取到当前ref，也就是class <strong>RefImpl</strong>本身的<strong>dep</strong></li><li>循环<strong>dep</strong>中存储的所有<strong>effect</strong>，并执行其<strong>fn</strong>，完成依赖触发。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ref 依赖触发</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerRefValue</span>(<span class="params">ref: RefImpl</span>) &#123;</span><br><span class="line">  <span class="comment">// 当前当前RefImpl实例中是否存在收集的依赖</span></span><br><span class="line">  <span class="keyword">if</span> (ref.<span class="property">dep</span>) &#123;</span><br><span class="line">    <span class="comment">// 触发依赖</span></span><br><span class="line">    <span class="title function_">triggerEffects</span>(ref.<span class="property">dep</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理所有待触发依赖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerEffects</span>(<span class="params">dep: Dep</span>) &#123;</span><br><span class="line">  <span class="comment">// const effects = isArray(dep) ? dep : [...dep]</span></span><br><span class="line">  <span class="keyword">const</span> effects = [...dep]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> effect <span class="keyword">of</span> effects) &#123;</span><br><span class="line">    <span class="title function_">triggerEffect</span>(effect)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 触发执行依赖</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">triggerEffect</span>(<span class="params">effect: ReactiveEffect</span>) &#123;</span><br><span class="line">  effect.<span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，我们的<strong>ref</strong>就具备响应式的能力了，是不是很简单~</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>​这时候肯定有同学要说了，<strong>你这ref不保熟啊</strong>，仅支持基础类型，不支持复杂类型啊，这不是阉割版ref吗？</p><p>​这里必须澄清一下，虽然简易版ref 100行代码不到，但是他是支持复杂类型的响应式的，因为复杂类型的响应式是依赖<strong>reactive</strong>进行完成的，不过<strong>reactive</strong>的源码解读，并不是本文的重点，所以，这里就跳过了，有兴趣的同学，请看这里<a href="https://juejin.cn/post/7202132390549553211">Vue3硬核源码解析系列（3） reactive + effect源码解析</a>，了解<strong>reactive</strong>的响应式实现，再看<a href="https://juejin.cn/post/7212910997778350136">Vue3硬核源码解析系列（5）ref源码解析</a>，了解复杂类型场景下的源码执行逻辑吧。</p><p>​最后，建议大家<a href="https://github.com/BlueDancers/vue3-mini/tree/ref">clone</a>源码到本地实际运行一下，静下心来一步一步调试，将简易版逻辑弄明白，有兴趣的可以在看看正式的vue3源码，然后在简历上留下浓墨重彩的一笔~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏前言&quot;&gt;&lt;a href=&quot;#专栏前言&quot; class=&quot;headerlink&quot; title=&quot;专栏前言&quot;&gt;&lt;/a&gt;专栏前言&lt;/h2&gt;&lt;p&gt;​	在上一节，我们完成了&lt;strong&gt;vue3&lt;/strong&gt;的&lt;strong&gt;ref&lt;/strong&gt;核心源码解读，其</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>chatGPT一些学习记录</title>
    <link href="https://bluedancers.github.io/2023/03/21/%E6%97%A5%E5%B8%B8/chatGPT%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://bluedancers.github.io/2023/03/21/%E6%97%A5%E5%B8%B8/chatGPT%E4%B8%80%E4%BA%9B%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-20T16:00:00.000Z</published>
    <updated>2023-03-22T03:17:16.552Z</updated>
    
    <content type="html"><![CDATA[<h2 id="最早"><a href="#最早" class="headerlink" title="最早"></a>最早</h2><p>​自然语言处理模型，最早出圈的是2018年google发布的bert，他是一个双向Transformer编码的过程（完形填空），可以对一段文本做到深入的理解与分析，并生成高质量的语言表达。</p><p>​那他究竟是什么原理呢？</p><p>​从一段文本中，随机扣掉一部分字，然后模型不断学习此处到底应该填写什么，<strong>所谓学习与训练就是从大量的数据中学习理解复杂的上下文关系。</strong></p><p>​注：学习 无监督学习 训练 有监督学习</p><p>​bert的出现推动了自然语言处理领域的发展，在bert出现之前，我们都是基于规则与浅层神经网络（关键字理解）去解决，bert的出现使得深度学习在自然语言处理上得到了更加广泛的使用。</p><p>​在bert出现之前，openid就出版了GPT1，GPT1也是基于Transformers进行实现，但是gpt没有走双向Transformers的方向，而是走类似单字接龙的方向，由长文单字接龙的自回归所生成，不过GPT1并没有出现bert的惊人效果，所以早期的GPT没啥热度。</p><h2 id="GPT2-GPT3"><a href="#GPT2-GPT3" class="headerlink" title="GPT2 GPT3"></a>GPT2 GPT3</h2><p>​基于bert的成就，大家都看到深度学习在语言模型上的可行性，于是大家都开始各种预训练模型，完形填空，判断题，改错题，GPT2、3也确实是这个思路，开始提升训练数据量，这个成果我们称之为开卷有益（无监督学习）。</p><p>​让chatGPT对海量互联网文本做单字接龙，以扩充模型的词汇量、语言只是、世界的信息与知识。是chatGPT从哑巴鹦鹉变成了脑容量超大的懂王鹦鹉，这个和人类的学习其实很相似，小孩刚刚来到这个解释，就是不断的输入信息。</p><p>​经过巨量的数据训练之后，我们下一步就需要情景学习（<strong>in-context learning</strong>），这两个阶段是NLP模型的基础工作流程，简单来说，就是让chatGPT对优质对话范例做单字接龙，以规范回答的对话模式和对话内容。是chatGPT变成懂规矩的博学鹦鹉，这里的场景标记几个就够了，机器一旦学会了规范，便可以应对此类所有问题。</p><h2 id="关于强化学习（RL）"><a href="#关于强化学习（RL）" class="headerlink" title="关于强化学习（RL）"></a>关于强化学习（RL）</h2><p>​几年前，alpha go击败了柯洁，几乎说明了，经过强化学习，机器可以做到近乎人类极限的程度，但是这样的场景有一个前提，一个非常明确的奖惩机制，alpha go并不理解围棋规则，但是他可以接收到成功、失败的反馈，模型会根据反馈不断调整策略，已达到更多次成功的目的。</p><p>​我们可以看到alpha go的强化学习规则书相对简单的，因为目标明确，而在NLP领域强化学习却很难实现。</p><p>​因为NLP是语言，语言是没有固定的对错，这就意味着无法设定奖惩机制，除非人工来做反馈。</p><p>​openid还就这么干了，这被称之为 <strong>RLHF（Reinforcement Learning from Human Feedback）</strong></p><p>​openid公司找了40家外包公司，不断帮助gpt筛选什么是好的，什么是坏的，通过这种方式构建了一个奖励（reward）模型。</p><p>​这样训练是为了让他学会举一反三的规律，开始出现类似人类的价值价值观与思考模式。</p><p>​于是gpt通过这样奖励模型，开始感知到真实世界，开始了与真实世界的拟合。甚至可以说奖励模型就是gpt的母体，他对人类的理解不取决于世界，而是取决于模型。</p><p>​这样引导学习的方式，在超大模型上出现惊人的效果，gpt在巨量的数据与规范 + 手动标注引导下，变成了看起来有心智的超级人工智能，甚至出现了理解、例子、思维链的能力。</p><p>​这样的方式也是存在缺点的，比如缺点是可能混淆记忆，无法直接查看个更新所学，并且高度依赖学习材料</p><img src="https://www.vkcyan.top/FgOCZQEw2fTJZsn40Q_b5KP5EvZy.png" style="zoom:50%;" /><h2 id="GPT对现今社会的可能影响"><a href="#GPT对现今社会的可能影响" class="headerlink" title="GPT对现今社会的可能影响"></a>GPT对现今社会的可能影响</h2><p>​chatGPT是里程碑的产品，就像流浪地球里面的行星发动机，刚开始大家都都不知道其潜力，经过验证后，地球上迅速出现了几万座行星发动机，并完成了最后的流浪地球，chatGPT这样大语言模型就像最开始几座行星发动机 ，最终也将会形成改变我们生活的推力</p><p>​合理的使用大预言模型，就可以让一个普通人快速准确的触及各行各业的平均知识， 以及具体解法</p><p>​所以我们可以畅想，未来我们也许不在需要学习如何打架，只需要对gpt发号施令，让机器去具体的做事即可</p><p>​除了chatGPT本身具备对人类的能力输出，chatGPT具备我们人类不具备的一点，那就是他可以在语言中学会世界知识。</p><p>​人脑是有限的，寿命是有限，个体死亡，一切都会消失，直到语言的发明，打通了过去与未来，知识以文字作为载体传承至今，一直以来我们通过纸质、或者其他物理形式进行存储，其效率是有限的，直到计算机的出现，我们开始用电子文档替代纸质， 信息传递的效率飞速提升，但是同时也带来了信息处理的巨大成本。</p><p>​所以人工智能领域的自然语言技术应运而生（NLP），其目标就是让机器理解人类的语言，协助人类处理工作，这是人工智能领域非常重要的发展方向，虽然这些年发展缓慢，但是依旧被很多公司加以厚望，因为机器不需要作息，没有情绪，效率极高，可以为企业节省大量的成本。</p><h2 id="与行业结合的可能性"><a href="#与行业结合的可能性" class="headerlink" title="与行业结合的可能性"></a>与行业结合的可能性</h2><ul><li>搜索引擎，帮助用户更加精准的筛选信息</li><li>笔记工作结合，辅助阅读与写作</li><li>办公软件结合，辅助文字处理，数据分析，演示制作</li><li>教育培训结合，指定学习计划，寻找学习资料</li><li>开发工具结合，辅助编写业务代码，调试纠错</li><li>客服系统结合，全天候问答，</li><li>视频会议结合，会议记录，总结，谈话查找</li><li>审核机制结合，少选评论，统计舆论，给出提醒</li><li>行业顾问，提供法律，医疗，健身等等建议</li><li>社交媒体结合，帮助寻找兴趣相投的用户与话题</li><li>与视频音乐结合，个性化推荐视频、音乐、小说、动漫</li><li>游戏剧情结合，让NPC给玩家带来更加灵活的对话体验</li></ul><h2 id="GPT具备对文字行业巨大的改造潜力"><a href="#GPT具备对文字行业巨大的改造潜力" class="headerlink" title="GPT具备对文字行业巨大的改造潜力"></a>GPT具备对文字行业巨大的改造潜力</h2><ul><li>学术界 创造知识</li><li>教育行业 传承知识</li><li>新闻行业 传播知识</li></ul><p>​还有对传统教育行业的巨大挑战，不是GPT可以给学生写作业，而是对现有的人才教育模式存在很大的冲击。</p><p>​按照现在的教育模式（应试教育，传授既有知识）出来的学生，还能应对未来的5-10年的社会需求吗？</p><p>​其实现在已经不太符合了，因为社会变化太快了，以前人们可以通过学习的知识终生受益，现在能满足毕业后5年其实都比较难了，因为知识过时的太快了，人们就需要不断学习新的知识。</p><p>​正因如此，随着互联网时代的到来，终生学习的理念开始被人们推崇，同时教育模式也开始以【培养学习能力与创造能力】为主了，只有这样才能适应不断变化的时代。</p><pre><code> 试想一下你学习了20年，掌握了一些知识，但是GPT却可以瞬间替代你完成你的能力，怎么办？以后人人都有一个熟读人类既有知识的超级大脑，市场不会因为学校的禁用，而集体不使用。</code></pre><p>​任何事物都存在两面性，好的一面是，GPT将方便人来对既有知识进行集成，推进教育去培养高层次人才</p><h2 id="GPT对网络安全的巨大挑战"><a href="#GPT对网络安全的巨大挑战" class="headerlink" title="GPT对网络安全的巨大挑战"></a>GPT对网络安全的巨大挑战</h2><p>​因为GPT的第一阶段，需要大量录入信息，这其中的信息难免会存在一个坏的信息，亦或者军事机密等等信息，所以国家与国家之间很难愿意共享数据，这也意味着，在不就得将来每个有实力的国家都会自己研发大语言模型</p><p>​同时在应用层面，大预言模型将会像口语、文字、电脑、互联网对社会进行再一次改造。</p><h2 id="社会影响"><a href="#社会影响" class="headerlink" title="社会影响"></a>社会影响</h2><p>​只有会工具的人取代不会使用工具的人，没有工具取代人的说法，所以真正需要害怕的是，我们成为无法成为使用工具的人，时代的车轮势不可挡，抵触新工具就意味着落后，学20年干一辈子的时代已经逐渐远去，我们身处加速时期，必须学会终生学习</p><p>​GPT正在改变人类群体应用知识的方式与继承知识的方式，甚至未来可能会形成人机合作的科研，改变人类创造知识的方式，甚至步入下一个文明形态。</p><p>​每个人的学习能力与理解能力，将是驾驭这项技术的瓶颈，也意味着是否可以充分发挥这一技术的优势，</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><p><strong>bert（Bidirectional Encoder Representations from Transformers 双向编码变换器）</strong></p><p>​BERT 基于 Transformers 模型架构，使用双向编码器来训练深度双向表示，并在多项自然语言处理任务上实现了最先进的性能</p><p><strong>浅层神经网络（Shallow Neural Network）</strong></p><p>​浅层神经网络是一种神经网络，它只有一层或几层隐层，通常用于浅层特征学习和分类任务。与深层神经网络相比，浅层神经网络的参数量少，计算速度较快，但也可能会受到学习能力和表示能力的限制。</p><p><strong>【UL】无监督学习（Unsupervised Learning）</strong></p><p>​无监督学习是一种机器学习的范畴，其目的是在没有明确的标签或目标函数的情况下，从数据中发现隐藏的结构和规律。在无监督学习中，模型需要从数据中学习如何将数据分组、降维、聚类等。</p><p><strong>【SL】有监督学习（Supervised Learning）</strong></p><p>​有监督学习是一种机器学习的范畴，其目的是在有标签的训练数据上学习一个模型，使其能够预测新的数据。在有监督学习中，模型需要学习如何将输入映射到输出，并根据标签调整模型参数以提高预测性能。（特定的任务上进行微调，例如情感分析、文本分类、命名实体识别）</p><p><strong>【RL】情景学习（Reinforcement Learning）</strong></p><p>​情景学习是一种机器学习的范畴，其目的是通过试错来学习如何在特定的情景下做出正确的决策。在情景学习中，模型需要学习如何在不断尝试和反馈的过程中最大化累计奖励。</p><p><strong>【NLP】自然语言处理技术（Natural Language Processing）</strong></p><p>​自然语言处理技术是一种人工智能技术，旨在让计算机能够理解和生成自然语言。NLP 技术可以应用于文本分类、情感分析、机器翻译、问答系统等领域。</p><p><strong>【LLM】大语言模型（Large Language Model）</strong></p><p>​大语言模型是一种基于神经网络的自然语言处理模型，它可以处理大量的文本数据，并学习语言的语法和语义。目前的大语言模型通常使用预训练加微调的方式进行训练，并在各种自然语言处理任务中取得了很好的表现。</p><p><strong>【MLLM】多模态大语言模型（Multi modal Large Language Model）</strong></p><p>​多模态大语言模型是一种结合了自然语言处理和计算机视觉等多种模态的模型，旨在解决多模态数据的处理和理解问题。与传统的大语言模型不同，多模态大语言模型可以同时处理文字、图片、声音等不同类型的数据，并学习它们之间的交互和关联，从而提高自然语言处理和视觉任务的性能。</p><p><strong>RLHF（Reinforcement Learning from Human Feedback 从人类反馈中强化学习）</strong></p><p>​这是一种机器学习的方法，旨在通过与人类交互来提高强化学习算法的性能。在 RLHF 中，算法会在执行任务的过程中接收人类反馈，并将其作为一种奖励信号来调整自己的策略。与传统的强化学习不同，RLHF 可以在学习过程中快速地获得关于任务的准确信息，并且更容易被应用于实际场景中，如自动驾驶、机器人控制等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;最早&quot;&gt;&lt;a href=&quot;#最早&quot; class=&quot;headerlink&quot; title=&quot;最早&quot;&gt;&lt;/a&gt;最早&lt;/h2&gt;&lt;p&gt;​	自然语言处理模型，最早出圈的是2018年google发布的bert，他是一个双向Transformer编码的过程（完形填空），可以对一段</summary>
      
    
    
    
    <category term="日常" scheme="https://bluedancers.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="chatGPT" scheme="https://bluedancers.github.io/tags/chatGPT/"/>
    
  </entry>
  
  <entry>
    <title>（3.1）vue3 手摸手实现mini版reactive.md</title>
    <link href="https://bluedancers.github.io/2023/03/13/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89%20200%E8%A1%8C%E4%BB%A3%E7%A0%81%20%E5%AE%9E%E7%8E%B0mini%E7%89%88reactive%20+%20effect/"/>
    <id>https://bluedancers.github.io/2023/03/13/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%884%EF%BC%89%20200%E8%A1%8C%E4%BB%A3%E7%A0%81%20%E5%AE%9E%E7%8E%B0mini%E7%89%88reactive%20+%20effect/</id>
    <published>2023-03-12T16:00:00.000Z</published>
    <updated>2023-03-20T07:10:25.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏前言"><a href="#专栏前言" class="headerlink" title="专栏前言"></a>专栏前言</h2><p>​在上一节，我们完成了<strong>vue3</strong>的<strong>reactive</strong>的核心源码解读，总的来说还是非常复杂，文章的表现能力有限，我想可能有很多同学无法完全理解其精髓，所以在本节，我将带领大家完成mini版本源码的输出。</p><p>​<strong>仅保留最核心逻辑，极大减低阅读难度，200行代码实现reactive + effect</strong>，话不多说，我们直接开始！</p><p><a href="https://github.com/BlueDancers/vue3-mini/tree/reactive">简易版vue3仓库地址</a>，<strong>还请大家不要吝啬star，留个标记，下次迷路~</strong></p><h2 id="逻辑图"><a href="#逻辑图" class="headerlink" title="逻辑图"></a>逻辑图</h2><p><img src="https://www.vkcyan.top/FmPJt0I04Cs834SauJHg3WgJgy5O.png"></p><h2 id="逻辑流程"><a href="#逻辑流程" class="headerlink" title="逻辑流程"></a>逻辑流程</h2><h3 id="reative初始化"><a href="#reative初始化" class="headerlink" title="reative初始化"></a>reative初始化</h3><p>​将<strong>reactive</strong>处理为<strong>proxy</strong>，同时预先声明<strong>set</strong> <strong>get</strong>方法，赋值、取值均通过<strong>Reflect</strong>完成，<strong>get</strong>中存在<strong>track</strong>（依赖收集），<strong>set</strong>中存在<strong>trigger</strong>（依赖触发），完成<strong>reactive</strong>的初始化。</p><h3 id="effect初始化（依赖收集）"><a href="#effect初始化（依赖收集）" class="headerlink" title="effect初始化（依赖收集）"></a>effect初始化（依赖收集）</h3><blockquote><p>cb  &#x3D; callback &#x3D; 回调函数 effect(() &#x3D;&gt; {})   &#x2F;&#x2F; () &#x3D;&gt; {} 就是cb</p></blockquote><p>​初始化<strong>effect</strong>函数，通过一个类<strong>ReactiveEffect</strong>运行其<strong>cb</strong>，同时将当前<strong>cb</strong>存储到公共变量，<strong>cb</strong>中读取了<strong>reactive</strong>的属性，进而触发<strong>proxy</strong>的<strong>get</strong>，同时完成<strong>track</strong>（依赖收集），让<strong>reative</strong>收集到存储在公共变量中的<strong>effect</strong>的<strong>cb</strong>，至此完成依赖收集。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重点：reactive - key - effect // 依赖收集完成后，将会形成这样的从上到下的可追溯关系</span><br></pre></td></tr></table></figure><h3 id="reactive改变（依赖触发）"><a href="#reactive改变（依赖触发）" class="headerlink" title="reactive改变（依赖触发）"></a>reactive改变（依赖触发）</h3><p>​若干时间后，<strong>reactive</strong>属性发生变化，触发<strong>reactive</strong>属性的赋值操作，进而触发<strong>proxy</strong>的<strong>set</strong>事件，同时完成trigger（依赖触发），根据指定的<strong>reative + key</strong>，找到特定<strong>effect</strong>运行，完成依赖触发，形成响应式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">重点：reactive + key 找到指定effect，进而完成触发</span><br></pre></td></tr></table></figure><h2 id="具体逻辑"><a href="#具体逻辑" class="headerlink" title="具体逻辑"></a>具体逻辑</h2><h3 id="proxy处理"><a href="#proxy处理" class="headerlink" title="proxy处理"></a>proxy处理</h3><p>​经过真实的源码分析之后，我们都知道<strong>reactive</strong>实际上就是<strong>proxy</strong>，我们仿照源码的格式，将<strong>reactive</strong>经过<strong>proxy</strong>处理后返回就好了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缓存proxy</span></span><br><span class="line"><span class="keyword">const</span> reactiveMap = <span class="keyword">new</span> <span class="title class_">WeakMap</span>&lt;<span class="built_in">object</span>, <span class="built_in">any</span>&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createReactiveObject</span>(target, mutableHandlers, reactiveMap)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理被代理对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: <span class="built_in">object</span>,</span></span><br><span class="line"><span class="params">  baseHandlers: ProxyHandler&lt;<span class="built_in">object</span>&gt;,</span></span><br><span class="line"><span class="params">  proxyMap: <span class="built_in">WeakMap</span>&lt;<span class="built_in">object</span>, <span class="built_in">any</span>&gt;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果已经被代理过,这直接返回结果</span></span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, baseHandlers)</span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target, proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-set函数编写"><a href="#get-set函数编写" class="headerlink" title="get set函数编写"></a>get set函数编写</h3><p>​以上代码我们完成了变量的<strong>proxy</strong>处理，为了完成后续的响应式，我们需要预先声明好<strong>get set</strong>函数，我们依旧仿照源码格式，并只保留核心逻辑，<strong>get</strong>阶段返回结果，并触发<strong>（依赖收集）track</strong>，<strong>set</strong>阶段通过<strong>Reflect</strong>完成赋值，并触发<strong>（依赖触发）trigger</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="attr">mutableHandlers</span>: <span class="title class_">ProxyHandler</span>&lt;<span class="built_in">object</span>&gt; = &#123;</span><br><span class="line">  get,</span><br><span class="line">  set,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> get = <span class="title function_">createGetter</span>()</span><br><span class="line"><span class="keyword">const</span> set = <span class="title function_">createSetter</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">target: <span class="built_in">object</span>, key: <span class="built_in">string</span>, receiver: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">    <span class="comment">// 核心逻辑: 依赖收集</span></span><br><span class="line">    <span class="title function_">track</span>(target, key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(res)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reactive</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target: <span class="built_in">object</span>, key: <span class="built_in">string</span>, newValue: <span class="built_in">unknown</span>, receiver: <span class="built_in">object</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, newValue, receiver)</span><br><span class="line">    <span class="comment">// 核心逻辑: 依赖触发</span></span><br><span class="line">    <span class="title function_">trigger</span>(target, key, newValue)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="effect实现"><a href="#effect实现" class="headerlink" title="effect实现"></a>effect实现</h3><p><strong>effect</strong>的核心的实现，就是在运行<strong>effect</strong>的时候<strong>保存当前的this</strong>，以便于后续流程中的<strong>依赖收集</strong>，所以其核心代码非常简单，保证一下2点即可。</p><ul><li>运行effect本身</li><li>保存effect的fn到activeEffect即可</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> effect&lt;T = any&gt;(<span class="attr">fn</span>: <span class="function">() =&gt;</span> T) &#123;</span><br><span class="line">  <span class="keyword">const</span> _effect = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(fn)</span><br><span class="line">  _effect.<span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> <span class="attr">activeEffect</span>: <span class="title class_">ReactiveEffect</span> | <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReactiveEffect</span>&lt;T = any&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public fn: () =&gt; T</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      activeEffect = <span class="variable language_">this</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>()</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      activeEffect = <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖收集（track）"><a href="#依赖收集（track）" class="headerlink" title="依赖收集（track）"></a>依赖收集（track）</h3><p>按照时序，<strong>effect</strong>函数初始化阶段会执行，<strong>effect</strong>函数本身也会被保存到<strong>activeEffect</strong>中，同时触发<strong>effect</strong>中的<strong>reactive</strong>中的<strong>get</strong>事件，进而触发<strong>track</strong>，我们在<strong>track</strong>中完成 <strong>reactive- key - effect之间关系的构建</strong>，确保以后可以在<strong>set</strong>阶段找到<strong>指定的effet的fn</strong>即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target: <span class="built_in">object</span>, key: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!activeEffect) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    targetMap.<span class="title function_">set</span>(target, depsMap)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    dep = <span class="title function_">createDep</span>()</span><br><span class="line">    depsMap.<span class="title function_">set</span>(key, dep)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">trackEffects</span>(dep)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trackEffects</span>(<span class="params">dep: Dep</span>) &#123;</span><br><span class="line">  dep.<span class="title function_">add</span>(activeEffect!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="依赖触发（trigger）"><a href="#依赖触发（trigger）" class="headerlink" title="依赖触发（trigger）"></a>依赖触发（trigger）</h3><p>若干时间后，<strong>reative</strong>中的某个属性发生了变化，也就会发生<strong>set</strong>事件，这时候其实就很简单了，我们只需要通过<strong>reactive - key</strong>找到对应的<strong>effect的fn</strong>，然后执行即可。</p><p><strong>这就形成了我们看到的“响应式”</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target: <span class="built_in">object</span>, key: <span class="built_in">string</span>, newValue: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">dep</span>: <span class="title class_">Dep</span> | <span class="literal">undefined</span> = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">triggerEffects</span>(dep)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">triggerEffects</span>(<span class="params">dep: Dep</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> effects = [...dep]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> effect <span class="keyword">of</span> effects) &#123;</span><br><span class="line">    <span class="title function_">triggerEffect</span>(effect)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">triggerEffect</span>(<span class="params">effect: ReactiveEffect</span>) &#123;</span><br><span class="line">  effect.<span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​到此为止，我们简易版的<strong>reactive + effect</strong>的全部源码就完成了，虽然<strong>vue3</strong>的源码很复杂，但是我们抽丝剥茧，仅保留核心逻辑，大幅降低<strong>vue3</strong>源码阅读的难度，让绝大多数的前端开发者都可以读懂核心实现~</p><p>​最后，建议大家<a href="https://github.com/BlueDancers/vue3-mini/tree/reactive">clone</a>源码到本地实际运行一下，静下心来一步一步调试，将简易版逻辑弄明白，有兴趣的可以在看看正式的vue3源码，然后在简历上留下浓墨重彩的一笔~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏前言&quot;&gt;&lt;a href=&quot;#专栏前言&quot; class=&quot;headerlink&quot; title=&quot;专栏前言&quot;&gt;&lt;/a&gt;专栏前言&lt;/h2&gt;&lt;p&gt;​	在上一节，我们完成了&lt;strong&gt;vue3&lt;/strong&gt;的&lt;strong&gt;reactive&lt;/strong&gt;的核心</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://bluedancers.github.io/2023/02/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Vue3%E7%89%88%E5%90%8E%E5%8F%B0%E9%89%B4%E6%9D%83%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E6%96%B9%E6%A1%88%E6%9D%A5%E4%BA%86%EF%BC%81/"/>
    <id>https://bluedancers.github.io/2023/02/20/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/Vue3%E7%89%88%E5%90%8E%E5%8F%B0%E9%89%B4%E6%9D%83%E4%B9%8B%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E6%96%B9%E6%A1%88%E6%9D%A5%E4%BA%86%EF%BC%81/</id>
    <published>2023-02-20T03:50:52.159Z</published>
    <updated>2023-03-14T10:55:37.269Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3版-更简单的后台鉴权-动态路由方案！"><a href="#Vue3版-更简单的后台鉴权-动态路由方案！" class="headerlink" title="Vue3版 更简单的后台鉴权-动态路由方案！"></a>Vue3版 更简单的后台鉴权-动态路由方案！</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​在3年前我发布了一篇vue2后台管理系统动态路由方案，时至今日，vue2已经升级到了vue3，动态路由的实现方案我也做出了一些升级迭代，来帮助开发者更好的完成业务需求。</p><ul><li><strong>更加简单的实现逻辑</strong></li><li><strong>更加便捷的路由配置</strong></li></ul><h2 id="vue2时期采用的技术方案特点"><a href="#vue2时期采用的技术方案特点" class="headerlink" title="vue2时期采用的技术方案特点"></a>vue2时期采用的技术方案特点</h2><ol><li>前端只存储基础的路由树</li><li>根据不同的登录角色，返回其对应的可访问路由树</li><li>前端获取到路由树（JSON）后递归处理，再通过addRouters拼接到基础路由书，完成动态路由</li></ol><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>相当安全，不允许访问的路由直接是不存在的。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>代码中仅保存了基础路由，所有的业务路由都需要前端开发人员手动录入到系统之中，非常繁琐</li><li>客户端逻辑相对复杂，需要递归路由树、addRouters，技术难度相对较大。</li></ul><p>有没有什么办法，可以<strong>既保证系统安全性，也保证代码逻辑的简单性，同时保证前端开发者的便捷性呢？</strong></p><p>话都说到这里了，那肯定是有的了。</p><h2 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h2><p>​通过以上分析，我们首先可以明确一点，动态路由的配置数据是需要放在前端项目中，而不是将路由的全部配置信息录入到系统中，</p><p>​不过动态路由的树形结构还是需要录入到系统中，并进行维护的。</p><p><img src="https://www.vkcyan.top/FtwPoOw9rINtfIO7HSUh7J61DkUC.png"></p><p>当我们的路由树交换给前端项目之后，我们也不需要做addRouters了，从开发者的角度来看，这样很不错。</p><p>那么在这样的前提下，我们如何实现动态路由的方案呢？</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>​首先将我们的全部路由分成2部分，基础路由数组，动态路由数组；</p><p>​我们项目的pinia中维护一个路由权限数组，如果当前用户访问的路由name在数组中，则允许访问，如果当前路由name不在权限数组中，这认为其没有权限访问。</p><ol><li>当触发登录行为的时候，请求服务端，获取当前用户的权限数组（一维），然后权限数组配合动态路由数组，递归出需要显示在侧边栏的路由，同时将权限数组保存到pinia之中。</li><li>路由发生跳转的时候，首先判断是否登录状态，如果不是，这直接重定向到登录页面；如果已经登录，则判断当前跳转的路由name是否在权限数组中，如果存在，则正常跳转，如果存在，则直接进入404页面。</li><li>刷新页面场景，则会重新获取一次权限数组。</li></ol><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="客户端的录入全部路由"><a href="#客户端的录入全部路由" class="headerlink" title="客户端的录入全部路由"></a>客户端的录入全部路由</h3><h3 id="服务端返回登录角色权限数组"><a href="#服务端返回登录角色权限数组" class="headerlink" title="服务端返回登录角色权限数组"></a>服务端返回登录角色权限数组</h3><h3 id="客户端反向for循环，计算出侧边栏菜单"><a href="#客户端反向for循环，计算出侧边栏菜单" class="headerlink" title="客户端反向for循环，计算出侧边栏菜单"></a>客户端反向for循环，计算出侧边栏菜单</h3><h3 id="每次router-beforeEach的进行权限判断"><a href="#每次router-beforeEach的进行权限判断" class="headerlink" title="每次router.beforeEach的进行权限判断"></a>每次router.beforeEach的进行权限判断</h3><h3 id="刷新页面重新获取权限数组"><a href="#刷新页面重新获取权限数组" class="headerlink" title="刷新页面重新获取权限数组"></a>刷新页面重新获取权限数组</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3版-更简单的后台鉴权-动态路由方案！&quot;&gt;&lt;a href=&quot;#Vue3版-更简单的后台鉴权-动态路由方案！&quot; class=&quot;headerlink&quot; title=&quot;Vue3版 更简单的后台鉴权-动态路由方案！&quot;&gt;&lt;/a&gt;Vue3版 更简单的后台鉴权-动态路由方</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>（7）vue3 runtime-dom源码解析</title>
    <link href="https://bluedancers.github.io/2023/02/18/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%887%EF%BC%89vue3%20runtime-dom%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://bluedancers.github.io/2023/02/18/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%887%EF%BC%89vue3%20runtime-dom%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-17T16:00:00.000Z</published>
    <updated>2023-02-18T06:21:38.073Z</updated>
    
    <content type="html"><![CDATA[<p>html叫做DOM节点数</p><p>vdom是正式dom的JavaScript数据结构的描述</p><p>在运行时runtime中，渲染器rerender会遍历整个虚拟dom树，并根据此结构构建正式dom树，这个过程我们称之为mount</p><p>当vnode发生变化的时候，，我们会对比旧的vnode与新的vnode，找出他们的区别，并应用于真实dom上，这个过程我们称之为patch。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;html叫做DOM节点数&lt;/p&gt;
&lt;p&gt;vdom是正式dom的JavaScript数据结构的描述&lt;/p&gt;
&lt;p&gt;在运行时runtime中，渲染器rerender会遍历整个虚拟dom树，并根据此结构构建正式dom树，这个过程我们称之为mount&lt;/p&gt;
&lt;p&gt;当vnode发生</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>通过webpack、vite实现proxy headers的动态设置（高某强看后都要请我吃鱼）</title>
    <link href="https://bluedancers.github.io/2023/02/17/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/webpack%E3%80%81vite%E5%9C%A8proxy%E4%B8%AD%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AEheaders/"/>
    <id>https://bluedancers.github.io/2023/02/17/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/webpack%E3%80%81vite%E5%9C%A8proxy%E4%B8%AD%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AEheaders/</id>
    <published>2023-02-16T16:00:00.000Z</published>
    <updated>2023-02-18T08:16:39.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通过webpack、vite实现proxy-headers的动态设置（高某强看后都要请我吃鱼）"><a href="#通过webpack、vite实现proxy-headers的动态设置（高某强看后都要请我吃鱼）" class="headerlink" title="通过webpack、vite实现proxy headers的动态设置（高某强看后都要请我吃鱼）"></a>通过webpack、vite实现proxy headers的动态设置（高某强看后都要请我吃鱼）</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大家都知道，利用<strong>webpack、vite</strong>的<strong>proxy</strong>可以解决开发环境的跨域问题。</p><p>但是在真实开发场景下，我们可能不仅要面对跨域问题，还有可能面对<strong>动态header</strong>的情况。</p><p>让我们来看如下案例</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>强盛集团开发了一套<strong>多店铺的H5商城系统</strong>，此时小安 小龙 小虎，都想利用这个系统开一个线上商城，我们如何区分他们的店铺呢？</p><p>聪明的同学肯定已经想到了答案，用二级域名进行区分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">小安 -&gt; xa.shop.com</span><br><span class="line">小龙 -&gt; xl.shop.com</span><br><span class="line">小虎 -&gt; xh.shop.com</span><br></pre></td></tr></table></figure><p>接下来让我们把视角聚焦到强盛集团的技术部门。</p><p>面对这样的多店铺商城系统，开发环境肯定无法用ip直接访问了，因为ip无法识别具体是什么店铺。</p><p>这个问题其实也很好解决，修改本地host即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 xa.shop.com</span><br><span class="line">127.0.0.1 xl.shop.com</span><br><span class="line">127.0.0.1 xh.shop.com</span><br></pre></td></tr></table></figure><p>假设我们开发环境的端口是8082，我们想在开发环境访问小安的店铺，则通过<code>xa.shop.com:8082</code>进行访问。</p><p>​直到某一天，安全部门发现了沙海集团的的scrf恶意攻击，决定限制该产品请求发起方的<strong>Origin Header</strong>与<strong>Referer Header</strong>，并且限制了必须是80端口。</p><blockquote><p>这两个请求头的含义是标记来源域名，可以起到防止scrf攻击的目的。</p></blockquote><p>​此时前端开发就麻烦了，因为在开发环境，我们的<strong>Origin Header</strong>与<strong>Referer Header</strong>都是<strong>x.shop.com:8082</strong>，这会被服务端识别为不合法的请求来源，同时因为浏览器安全限制，前端是不具备直接修改<strong>referer</strong>头的能力， 除非将项目端口号改为80端口，但是这并不是一个好办法。</p><p><strong>如果你是强盛集团的前端开发，你会怎么解决以上问题呢？</strong></p><h2 id="后端高某强提供的思路"><a href="#后端高某强提供的思路" class="headerlink" title="后端高某强提供的思路"></a>后端高某强提供的思路</h2><p>​后端开发高某强这时候提供了一个想法，通过本地nginx代理8082端口就好了呀。</p><ol><li>在开发机器本地启动一个<strong>nginx</strong></li><li>通过<strong>nginx</strong>将<strong>x.shop.com</strong>指向<strong>127.0.0.1:8082</strong></li><li>同时配合<strong>host</strong>的修改，实现开发环境去端口的诉求。</li></ol><p>后续，我尝试了这个方案，确实是可以实现的，也在团队中推广并使用了一段时间；</p><p>但是长期使用下就暴露了一些问题</p><ol><li>每次新增一个站点，都需要同时增加host、nginx中的配置，流程复杂。</li><li>并不是每个前端都了解nginx，初级开发非常容易出问题，增加团队内耗。</li></ol><h2 id="proxy解决方案"><a href="#proxy解决方案" class="headerlink" title="proxy解决方案"></a>proxy解决方案</h2><h3 id="Vite解决方案"><a href="#Vite解决方案" class="headerlink" title="Vite解决方案"></a>Vite解决方案</h3><p>​直到某一天，我在<strong>vite</strong>的文档中突然发现一个细节，<strong>server.proxy</strong>的实现依赖<a href="https://github.com/http-party/node-http-proxy">node-http-proxy</a>，而这个库具备<strong>设置请求头的能力</strong></p><p><img src="https://www.vkcyan.top/Fl8GqobFWoDlUT-UZTrUN43npq1H.png"></p><p>​如果是这样，我是否可以在开发环境通过proxy代理请求接口，同时覆写<strong>Origin Header</strong>与<strong>Referer Header</strong>的方式来解决我们遇到的多域名+端口限制问题呢？进而在开发环境规避掉nginx。</p><p>​通过<strong>vite</strong>的问题可以了解到参数<strong>configure</strong>可以编写<strong>http-proxy</strong>相关逻辑，再结合<strong>http-proxy</strong>文档，我们便可以完成相关代码。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server</span>: &#123;</span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/client&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;https://api.xxxx.com&#x27;</span>, <span class="comment">// 需要代理的地址</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">secure</span>: <span class="literal">true</span>, <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">      <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/client/</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">      <span class="attr">configure</span>: <span class="function">(<span class="params">proxy</span>) =&gt;</span> &#123;</span><br><span class="line">        proxy.<span class="title function_">on</span>(<span class="string">&#x27;proxyReq&#x27;</span>, <span class="function">(<span class="params">proxyReq, req, res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// req是当前真实请求的地址 开发环境为：a.shop.com:8082</span></span><br><span class="line">          <span class="keyword">let</span> host = req.<span class="property">headers</span>.<span class="property">host</span>!.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>] <span class="comment">// a.shop.com 动态获取当前请求地址，并去除端口</span></span><br><span class="line">          proxyReq.<span class="title function_">setHeader</span>(<span class="string">&#x27;referer&#x27;</span>, <span class="string">`http://<span class="subst">$&#123;host&#125;</span>`</span>)</span><br><span class="line">          proxyReq.<span class="title function_">setHeader</span>(<span class="string">&#x27;origin&#x27;</span>, <span class="string">`http://<span class="subst">$&#123;host&#125;</span>`</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="comment">// .....</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>​测试结果符合预期，<strong>web</strong>端请求被<strong>proxy</strong>代理，并在代理请求中完成了端口的去除，符合了服务端对<strong>Origin Header</strong>与<strong>Referer Header</strong>的要求。</p><h3 id="Webpack解决方案"><a href="#Webpack解决方案" class="headerlink" title="Webpack解决方案"></a>Webpack解决方案</h3><p>​<strong>vite</strong>测试成功后，我们便开始对<strong>webpack</strong>的<strong>vue2.x</strong>项目<strong>proxy</strong>动态<strong>headers</strong>进行评估；通过<strong>webpack4</strong>的文档，我们可以了解到<strong>webpack4</strong>的<strong>proxy</strong>是基于<a href="https://github.com/chimurai/http-proxy-middleware">http-proxy-middleware</a> 进行实现。</p><p>​接下来我们也顺利在<strong>http-proxy-middleware</strong>文档中找到相关配置</p><p><img src="https://www.vkcyan.top/Fh7xKiiJnus0ciu_JRlUfqO7Wyk9.png"></p><p>我们基于<strong>webpack</strong>与<strong>http-proxy-middleware</strong>的文档，就可以很顺利的做产出了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">  <span class="attr">proxy</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;/client&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">target</span>: <span class="string">&#x27;https://api.xxxx.com&#x27;</span>, <span class="comment">// 需要代理的地址</span></span><br><span class="line">      <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">//是否跨域</span></span><br><span class="line">      <span class="attr">secure</span>: <span class="literal">true</span>, <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">      <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/client&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">      <span class="attr">onProxyReq</span>: <span class="function">(<span class="params">proxyReq, req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> host = req.<span class="property">headers</span>.<span class="property">host</span>.<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">        proxyReq.<span class="title function_">setHeader</span>(<span class="string">&#x27;referer&#x27;</span>, <span class="string">`http://<span class="subst">$&#123;host&#125;</span>`</span>) <span class="comment">//添加请求头</span></span><br><span class="line">        proxyReq.<span class="title function_">setHeader</span>(<span class="string">&#x27;origin&#x27;</span>, <span class="string">`http://<span class="subst">$&#123;host&#125;</span>`</span>) <span class="comment">//添加请求头</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// .....</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>​项目配置完成后，我们便可以在开发环境利用proxy的动态headers完成<strong>a.shop.com:8082</strong>正常访问线上端口了，只需要在本地配置host即可。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>高某强了解到前端部门使用<strong>proxy + 动态headers方案</strong>后，连连称赞，表示请我去他家吃鱼。</p><p>如果你也遇到了类似的问题，快来试试proxy的解决方案吧~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;通过webpack、vite实现proxy-headers的动态设置（高某强看后都要请我吃鱼）&quot;&gt;&lt;a href=&quot;#通过webpack、vite实现proxy-headers的动态设置（高某强看后都要请我吃鱼）&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="日常开发" scheme="https://bluedancers.github.io/categories/%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="关于proxy" scheme="https://bluedancers.github.io/tags/%E5%85%B3%E4%BA%8Eproxy/"/>
    
  </entry>
  
  <entry>
    <title>（6）vue3 reactivity-watch源码解析</title>
    <link href="https://bluedancers.github.io/2023/02/14/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%886%EF%BC%89vue3%20reactivity-watch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://bluedancers.github.io/2023/02/14/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%886%EF%BC%89vue3%20reactivity-watch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-13T16:00:00.000Z</published>
    <updated>2023-03-01T11:59:35.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​上一章我们说完了computed的实现逻辑，今天就让我们来看看他的好兄弟，也是我们经常用的另一个api，watch是如何实现的；</p><p>​watch即为监听的意思：<strong>监听响应式数据，每当状态发生变化，就会触发回调函数</strong>。</p><p>​如果大家对之前的源码分析有所理解的话，我相信大家可以简单猜到watch的实现原理，一定是初始化的时候依赖收集，依赖项发生变化的时候依赖触发。</p><p>​如果能领悟到这一层，那么对vue3的核心实现你已经有所理解啦。</p><p>​接下来就让我们走进watch的世界，让我们看看，vue3是如何实现他的吧。</p><h2 id="带着问题看源码"><a href="#带着问题看源码" class="headerlink" title="带着问题看源码"></a>带着问题看源码</h2><p>起初我刚开始使用vue3 watch的时候，就出现了让我非常迷糊的情况，举个例子</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reactive的案例</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;卖鱼强&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(user, <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一&#x27;</span>, value)) <span class="comment">// 有效</span></span><br><span class="line"><span class="title function_">watch</span>(user.<span class="property">name</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二&#x27;</span>, value)) <span class="comment">// 无效</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> user, <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第三&#x27;</span>, value))<span class="comment">// 无效</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> user.<span class="property">name</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第四&#x27;</span>, value))<span class="comment">// 有效</span></span><br><span class="line"></span><br><span class="line">user.<span class="property">name</span> = <span class="string">&#x27;狂飙强&#x27;</span> <span class="comment">// 修改reactive 期望触发watch</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ref案例</span></span><br><span class="line"><span class="keyword">const</span> user = <span class="title function_">ref</span>(<span class="string">&#x27;卖鱼强&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">watch</span>(user, <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第一个watch&#x27;</span>, value)) <span class="comment">// 有效</span></span><br><span class="line"><span class="title function_">watch</span>(user.<span class="property">value</span>, <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第二个watch&#x27;</span>, value)) <span class="comment">// 无效</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> user, <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第三次watch&#x27;</span>, value)) <span class="comment">// 无效</span></span><br><span class="line"><span class="title function_">watch</span>(<span class="function">() =&gt;</span> user.<span class="property">value</span>, <span class="function"><span class="params">value</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第四次watch&#x27;</span>, value)) <span class="comment">// 有效</span></span><br><span class="line"></span><br><span class="line">user.<span class="property">value</span> = <span class="string">&#x27;狂飙强&#x27;</span> <span class="comment">// 修改reactive 期望触发watch</span></span><br></pre></td></tr></table></figure><p>​以上案例，我相信大部分写vue的同学，都很难在第一时间准确判断有效无效，这样的问题，我们就需要去源码中寻找答案。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>watch的源码并不在reactivity中，而是在runtime-core中</p><h3 id="watch初始化"><a href="#watch初始化" class="headerlink" title="watch初始化"></a>watch初始化</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> watch&lt;T = <span class="built_in">any</span>, <span class="title class_">Immediate</span> <span class="keyword">extends</span> <span class="title class_">Readonly</span>&lt;<span class="built_in">boolean</span>&gt; = <span class="literal">false</span>&gt;(</span><br><span class="line">  <span class="attr">source</span>: T | <span class="title class_">WatchSource</span>&lt;T&gt;,</span><br><span class="line">  <span class="attr">cb</span>: <span class="built_in">any</span>,</span><br><span class="line">  options?: <span class="title class_">WatchOptions</span></span><br><span class="line">): <span class="title class_">WatchStopHandle</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">doWatch</span>(source <span class="keyword">as</span> <span class="built_in">any</span>, cb, options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">WatchOptions</span> &#123;</span><br><span class="line">  immediate?: <span class="built_in">boolean</span></span><br><span class="line">  deep?: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上代码，我们可以了解watch是存在三个参数的</p><ol><li><strong>source</strong> 默认类型为any，这一项就是我们的监听项</li><li><strong>cb</strong>，也就是我们的watch的回调函数</li><li><strong>options</strong> 关于watch的设置，内部存在2个参数<ol><li><strong>immediate</strong> boolean类型 是否首次运行</li><li><strong>deep</strong> boolean类型 是否深度监听</li></ol></li></ol><p>​这些消息和我们通过Vue文档了解到的信息基本一致，然后我们继续往下看，会发现实际返回了一个doWatch函数，并将watch的三个参数传递了进去。</p><p>​doWatch里面的代码比较复杂，所以我们我们将初始化阶段再分为三个阶段，分别于三个参数对应</p><h2 id="监听项分析"><a href="#监听项分析" class="headerlink" title="监听项分析"></a>监听项分析</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">isRef</span>(source)) &#123;</span><br><span class="line">  <span class="comment">// 如果当前source的值是ref, 则处理为() =&gt; source.value 这里注意const num = ref(1) num是ref，num，value不是ref</span></span><br><span class="line">  getter = <span class="function">() =&gt;</span> source.<span class="property">value</span></span><br><span class="line">  forceTrigger = <span class="title function_">isShallow</span>(source) <span class="comment">// 判断是否是浅层的监听</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">isReactive</span>(source)) &#123;</span><br><span class="line">  <span class="comment">// 如果是reactive则,直接处理成() =&gt; source</span></span><br><span class="line">  getter = <span class="function">() =&gt;</span> source</span><br><span class="line">  <span class="comment">// 同时将deep赋值为true 因为reactive可能多层嵌套需要深度递归</span></span><br><span class="line">  deep = <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">isArray</span>(source)) &#123;</span><br><span class="line">  isMultiSource = <span class="literal">true</span> <span class="comment">// 标识为多个监听项</span></span><br><span class="line">  forceTrigger = source.<span class="title function_">some</span>(<span class="function"><span class="params">s</span> =&gt;</span> <span class="title function_">isReactive</span>(s) || <span class="title function_">isShallow</span>(s)) <span class="comment">// 标识是否是浅层监听</span></span><br><span class="line">  <span class="comment">// getter 函数处理为对source的map循环返回结果</span></span><br><span class="line">  getter = <span class="function">() =&gt;</span> </span><br><span class="line">    source.<span class="title function_">map</span>(<span class="function"><span class="params">s</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isRef</span>(s)) &#123;</span><br><span class="line">        <span class="keyword">return</span> s.<span class="property">value</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isReactive</span>(s)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">traverse</span>(s)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">isFunction</span>(s)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">callWithErrorHandling</span>(s, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_GETTER</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        __DEV__ &amp;&amp; <span class="title function_">warnInvalidSource</span>(s)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">callWithErrorHandling</span>(<span class="params">fn,instance,<span class="keyword">type</span>,</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_">isFunction</span>(source)) &#123;</span><br><span class="line">  <span class="comment">// callWithErrorHandling函数实际上就是返回了source函数本身</span></span><br><span class="line">  getter = <span class="function">() =&gt;</span> <span class="title function_">callWithErrorHandling</span>(source, instance, <span class="title class_">ErrorCodes</span>.<span class="property">WATCH_GETTER</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="未知类型"><a href="#未知类型" class="headerlink" title="未知类型"></a>未知类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">NOOP</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line">getter = <span class="variable constant_">NOOP</span> <span class="comment">// 如果watch的第一个参数不是以上类型，这起getter函数为空</span></span><br></pre></td></tr></table></figure><p>第一个参数的目的是为了完成后续的<strong>依赖收集</strong>，所以getter的返回值必须是proxy对象，不能是基础对象，否则将无法完成期望的依赖收集。</p><p>看到这里我们文章开头提出的问题已经有了明确答案，我们回过头来继续看看</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="title function_">reactive</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;卖鱼强&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line">watch user</span><br><span class="line"><span class="comment">// user是reactive，将会被处理为（）=&gt; user，同时deep参数设置为true，reactive中的所有依赖都将会触发依赖收集，watch有效</span></span><br><span class="line">watch user.<span class="property">name</span></span><br><span class="line"><span class="comment">// name是reactive内的基础对象，将会被识别为未知类型，自然watch无效</span></span><br><span class="line">watch () =&gt; user</span><br><span class="line"><span class="comment">// 函数直接返回，并未访问proxy的属性，无法完成依赖收集，所以watch无效</span></span><br><span class="line">watch () =&gt; user.<span class="property">name</span></span><br><span class="line"><span class="comment">// 函数直接返回 而user.name是proxy下的属性，将会触发get，完成依赖收集，所以watch有效</span></span><br></pre></td></tr></table></figure><h2 id="构建ReactiveEffect"><a href="#构建ReactiveEffect" class="headerlink" title="构建ReactiveEffect"></a>构建ReactiveEffect</h2><blockquote><p>这一小节，我们将了解到watch是如何完成依赖触发</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (cb &amp;&amp; deep) &#123;</span><br><span class="line">  <span class="comment">// 如果deep为true,则获取到() =&gt; source</span></span><br><span class="line">  <span class="keyword">const</span> baseGetter = getter</span><br><span class="line">  getter = <span class="function">() =&gt;</span> <span class="title function_">traverse</span>(<span class="title function_">baseGetter</span>()) </span><br><span class="line">  <span class="comment">// traverse函数比较复杂，其作用就是深度递归对象，以此触发reactive中每个属性的get行为</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非数组的情况下isMultiSource一定为false 所以oldValue这里一定是空对象</span></span><br><span class="line"><span class="keyword">let</span> oldValue = isMultiSource ? [] : <span class="variable constant_">INITIAL_WATCHER_VALUE</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// watch的核心实现</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">job</span>: <span class="title class_">SchedulerJob</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 内部逻辑非常复杂，我们这里简化处理</span></span><br><span class="line">  <span class="keyword">const</span> newValue = effect.<span class="title function_">run</span>()</span><br><span class="line">  <span class="comment">// 如果deep为true 或者新旧值不一致则将新旧值传入到cb中（watch的第二个参数）</span></span><br><span class="line">  <span class="keyword">if</span> (deep || <span class="title function_">hasChange</span>(newValue, oldValue)) &#123;</span><br><span class="line">    <span class="title function_">cb</span>(newValue, oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">scheduler</span>: <span class="title class_">EffectScheduler</span></span><br><span class="line"><span class="comment">// flush 回调的刷新时机 </span></span><br><span class="line"><span class="comment">// 默认pre 即组件更新之前调用 queuePreFlushCb</span></span><br><span class="line"><span class="comment">// post 则是组件更新之后调用(可以获取到更新后的dom) queuePostRenderEffect</span></span><br><span class="line"><span class="comment">// 如果是sync则异步调用 job本身</span></span><br><span class="line"><span class="comment">// queuePreFlushCb  queuePostRenderEffect 后续再说</span></span><br><span class="line"><span class="keyword">if</span> (flush === <span class="string">&#x27;sync&#x27;</span>) &#123;</span><br><span class="line">  scheduler = job <span class="keyword">as</span> <span class="built_in">any</span> <span class="comment">// the scheduler function gets called directly</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (flush === <span class="string">&#x27;post&#x27;</span>) &#123;</span><br><span class="line">  scheduler = <span class="function">() =&gt;</span> <span class="title function_">queuePostRenderEffect</span>(job, instance &amp;&amp; instance.<span class="property">suspense</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// default: &#x27;pre&#x27;</span></span><br><span class="line">  scheduler = <span class="function">() =&gt;</span> <span class="title function_">queuePreFlushCb</span>(job)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getter为具备返回响应式能力的函数 scheduler是确定了执行实际的cb函数</span></span><br><span class="line"><span class="keyword">const</span> effect = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(getter, scheduler)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cb) &#123;</span><br><span class="line">  <span class="comment">// 如果immediate为true,则代表默认watch初始化阶段自动执行一次</span></span><br><span class="line">  <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">    <span class="title function_">job</span>() <span class="comment">// job内部也会运行一次effect.run 只不过同时也执行了cb函数 完成了第一次watch的触发</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 关键步骤 执行一次proxy的get行为,将当前除触发watch的监听数据的依赖收集，并将ReactiveEffect与watch的依赖项完成绑定</span></span><br><span class="line">    <span class="comment">// 同时获取一次oldvalue的值（watch变化之前的值）</span></span><br><span class="line">    oldValue = effect.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 返回了effect的stop函数，则意味着，watch api存在返回值，只需要执行一下返回值 就会结束掉watch的监听</span></span><br><span class="line">  effect.<span class="title function_">stop</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖触发"><a href="#依赖触发" class="headerlink" title="依赖触发"></a>依赖触发</h2><h3 id="async"><a href="#async" class="headerlink" title="async"></a>async</h3><h3 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h3><h3 id="post"><a href="#post" class="headerlink" title="post"></a>post</h3><ol><li>watch初始化，生成ReactiveEffect，并将watch的匿名函数（cb）放入ReactiveEffect的scheduler中</li><li>触发一次watch的第一个参数，完成依赖收集（proxy与watch建立联系）</li><li>proxy发生变化，触发watch的ReactiveEffect的scheduler，也就是watch初始化阶段传入的cb</li><li>cb按照指定flush开始执行，完成watch监听函数的触发。</li></ol><p>​其实通过以上流程我们可以发现watch的原理相对来说竟然是最简单的，watch的复杂并不在于核心逻辑的复杂，而是其内部进行了大量兼容性判断，多种类型的第一参数，多种类型的第三参数，导致整体代码的复杂度极高。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>watch的依赖收集是被动触发的</li><li>watch的依赖触发，实际上是调度器scheduler，然后通过不同的flush，达到控制执行顺序、规则的目的。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	上一章我们说完了computed的实现逻辑，今天就让我们来看看他的好兄弟，也是我们经常用的另一个api，watch是如何实现的；&lt;/p&gt;</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3硬核源码解析系列（5）ref源码解析</title>
    <link href="https://bluedancers.github.io/2023/02/03/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89%20ref%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://bluedancers.github.io/2023/02/03/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%885%EF%BC%89%20ref%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-02T16:00:00.000Z</published>
    <updated>2023-03-22T03:17:57.666Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07d7fdd1b1a44560ae1fd052db6e37e0~tplv-k3u1fbpfcp-zoom-crop-mark:1512:1512:1512:851.awebp"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​本文是<a href="https://juejin.cn/column/7199826518570172472"><strong>Vue3硬核源码解析系列</strong></a>的第五篇文章，在之前文章中，我们了解到了<strong>reactive effect</strong>的源码实现原理，并抽丝剥茧输出了<a href="https://juejin.cn/post/7209967260898033722">mini版本的reactive + effect</a>，带领大家充分理解<strong>reactive</strong>的实现原理，同时我们也发现了<strong>reactive</strong>在使用上的一些局限性，比如无法代理基础类型。</p><p>​正因为此，<strong>Vue3</strong>提供了另一个API <strong>ref</strong>，面对<strong>proxy</strong>无法代理基础类型数据的问题，<strong>ref</strong>又是如何实现其响应式的呢，本文将带领大家一起走进vue3源码世界，看看<strong>ref</strong>的实现原理</p><h2 id="逻辑图"><a href="#逻辑图" class="headerlink" title="逻辑图"></a>逻辑图</h2><p>因为<strong>ref</strong>既可以传入<strong>基础类型</strong>，也可以传入<strong>复杂类型</strong>，所以其实现逻辑要比<strong>reactive</strong>更加复杂，并且依赖<strong>reactive</strong>。</p><p><img src="https://www.vkcyan.top/FkmdQj_dyMoiD6Rg7PaH-Lf7FdHO.png"></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><blockquote><p>如果关于class get set已经很了解，请跳过前置知识</p></blockquote><p>为了降低大家理解<strong>ref</strong>源码的难度，我们在正式阅读源码之前，先学习一下JavaScript的 <strong>class</strong>以及修饰符<strong>get set</strong>相关知识点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">  _value = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value的get行为触发&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value的set行为触发&#x27;</span>, val)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Obj</span>()</span><br></pre></td></tr></table></figure><p>get： 被get修饰的方法，允许通过<strong>属性读取</strong>的方式，触发方法</p><p>set： 被set修饰的方法，允许通过<strong>属性赋值</strong>的方式，触发方法</p><p>当访问<code>obj.value</code>的时候，会执行被<strong>get</strong>修饰的<strong>value()<strong>，打印log，并得到返回值</strong>‘张三’</strong></p><p>当我们执行<code>obj.value = ’李四‘</code>，进行赋值的时候，将会执行被<strong>set</strong>修饰的**value()**方法，打印log，并完成变量_value的赋值</p><p>​看到这里，大家是否有点似曾相识的感觉，<strong>访问与赋值触发get set</strong>，和<strong>proxy</strong>代理的对象的<strong>get set</strong>很相似，大家能理解到这一点就足够了。</p><p>​因为ref可以代理<strong>简单类型</strong>，同时也可以代理<strong>复杂类型</strong>，并且这两种情况下的响应式实现逻辑是完全不同的。</p><p>​所以接下来，我们从这两个角度分别解读ref的源码实现，以及其核心逻辑。</p><p>​首先我们看相对简单的基础类型场景，从源码的角度去了解ref是如何实现响应式的。</p><h2 id="基础类型场景"><a href="#基础类型场景" class="headerlink" title="基础类型场景"></a>基础类型场景</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; ref, effect &#125; = <span class="title class_">Vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;卖鱼强&#x27;</span>)</span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">innerText</span> = name.<span class="property">value</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  name.<span class="property">value</span> = <span class="string">&#x27;狂飙强&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>​上述代码现象：</p><ol><li><p>页面初始化的时候显示“卖鱼强”</p></li><li><p>2s之后，<strong>name</strong>发生改变，变成了“狂飙强”。</p></li></ol><p>通过<strong>现象</strong>与我们之前分析<strong>reactive</strong>的经验，这个我们可以将<strong>ref</strong>的实现分为三大模块</p><ol><li><strong>初始化</strong></li><li><strong>读取</strong>（依赖收集）</li><li><strong>赋值</strong>（依赖触发）</li></ol><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><code>packages/reactivity/src/ref.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">value?: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ref 实际上就是createRef</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createRef</span>(value, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRef</span>(<span class="params">rawValue: <span class="built_in">unknown</span>, shallow: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果已经是ref，则直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(rawValue)) &#123;</span><br><span class="line">    <span class="keyword">return</span> rawValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ref API 参数shallow 为 false 含义是 代理是否是浅层的,浅层则只会代理第一层数据</span></span><br><span class="line">  <span class="comment">// ref 就是RefImpl的实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(rawValue, shallow)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_value</span>: T <span class="comment">// 被代理对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_rawValue</span>: T <span class="comment">// 原始对象</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span> <span class="comment">// Dep是reative阶段声明的Set, 内部存放的是ReactiveEffect</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span> <span class="comment">// 将RefImpl实例默认为true, 未来的isRef判断就一定为true</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isShallow: <span class="built_in">boolean</span></span>) &#123; </span><br><span class="line">    <span class="comment">// 寻找原始类型，如果是基础类型不会做任何处理</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = <span class="title function_">toRaw</span>(value) </span><br><span class="line">    <span class="comment">// 如果value是基础类型，toReactive内部不会做任何处理</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    newVal = <span class="title function_">toRaw</span>(newVal)</span><br><span class="line">    <span class="comment">// 判断新旧值是否一致，不一致进入if</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 每次value的值发生修改的时候，都保存一下原始对象</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_rawValue</span> = newVal</span><br><span class="line">     <span class="comment">// 如果value是基础类型 toReactive不会做任何处理</span></span><br><span class="line">     <span class="comment">// 如果value是复杂类型，则重新进行proxy处理</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(newVal)</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 依赖触发，后面单独说</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码分析，我们可以发现，<strong>ref</strong>的本质就是<strong>new RefImpl</strong></p><p>我们ref传入的参数 原始对象被保存到_rawValue，同时将参数（“卖鱼强”）保存到-value中，便于后续的get set</p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>调用<code>name.value</code>的时候，会触发<strong>RefImpl</strong>的**get value()**，方法内部返回最新的_value，完成读取。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// trackRefValue(this) // 依赖收集，后面单独说</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p><code>name.value</code>发生赋值的时候，会触发<strong>RefImpl</strong>的**set value()**方法，方法内部进行_value的赋值，完成数据更新。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断新旧值是否一致，不一致进入if</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">    <span class="comment">// 如果value是基础类型 toReactive不会做任何处理</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(newVal)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// triggerRefValue(this)// 依赖触发，后面单独说</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此为止，<strong>ref</strong>的基础逻辑就完成，我们已经具备给<strong>ref</strong>赋值、读取的能力。</p><p>但是还不具备响应式的能力，接下来就让我们看看，ref的响应式系统是如何实现的。</p><h3 id="依赖收集（trackRefValue）"><a href="#依赖收集（trackRefValue）" class="headerlink" title="依赖收集（trackRefValue）"></a>依赖收集（trackRefValue）</h3><p>​根据我们解读<strong>reactive</strong>的源码经验，我们可以猜到，<strong>ref</strong>一定是在<strong>get</strong>中完成依赖收集的，事实也是如此。</p><p>​而第一次<strong>ref</strong>的<strong>get</strong>是何时触发的呢？</p><p>​答案是初始化时期的<strong>effect</strong>，<strong>effect</strong>触发后，内部<strong>fn</strong>被保存到<strong>activeEffect</strong>中，并触发<strong>fn</strong>，<strong>fn</strong>访问了<code>name.value</code>，触发了<strong>ref</strong>的<strong>get</strong>行为，所以接下来我们前往<strong>RefImpl</strong>的<strong>get</strong>中，看看<strong>ref</strong>是如何完成依赖收集的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// 依赖收集函数 将当前RefImpl实例传入方法</span></span><br><span class="line">  <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackRefValue</span>(<span class="params">ref</span>) &#123;</span><br><span class="line">  <span class="comment">// shouldTrack一定为true，activeEffect在effect执行阶段保存了fn，所以一定存在</span></span><br><span class="line">  <span class="keyword">if</span> (shouldTrack &amp;&amp; activeEffect) &#123;</span><br><span class="line">    <span class="comment">// createDep我们在reactive中见过，含义为创建一个Set</span></span><br><span class="line">    <span class="comment">// 所以这个实际函数是给RefImpl实例的dep赋值为Set，然后在传入trackEffects方法</span></span><br><span class="line">  <span class="title function_">trackEffects</span>(ref.<span class="property">dep</span> || (ref.<span class="property">dep</span> = <span class="title function_">createDep</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackEffects</span>(<span class="params">dep: Dep,</span>) &#123;</span><br><span class="line">  <span class="comment">// 将当前activeEffect，也就是effect的fn，保存到当前RefImpl实例的dep中，effect成功被ref依赖收集到实例的dep中</span></span><br><span class="line"> dep.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上源码，我们可以发现，他们都公用了<strong>activeEffect</strong>部分的逻辑，但是<strong>ref</strong>收集依赖的方式与<strong>reactive</strong>是存在一些差别的</p><ul><li><strong>reactive</strong>的依赖收集通过<strong>WeakMap</strong>完成，实现<strong>属性、变量与effect fn</strong>的绑定关系</li><li><strong>ref</strong>则通过自身实例内部的<strong>dep</strong>变量来保存所有相关的<strong>effect fn</strong></li></ul><h3 id="依赖触发（triggerRefValue）"><a href="#依赖触发（triggerRefValue）" class="headerlink" title="依赖触发（triggerRefValue）"></a>依赖触发（triggerRefValue）</h3><p>若干时间后，<code>name.value</code>的值被修改，触发<strong>RefImpl</strong>的<strong>set value</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断传入值是否与原始值不一致</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">    <span class="comment">// 完成赋值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(newVal)</span><br><span class="line">    <span class="comment">// 依赖触发</span></span><br><span class="line">    <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerRefValue</span>(<span class="params">ref: RefBase&lt;<span class="built_in">any</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (ref.<span class="property">dep</span>) &#123; <span class="comment">// dep为依赖收集阶段收集到的依赖，内部为effect的fn</span></span><br><span class="line">    <span class="title function_">triggerEffects</span>(ref.<span class="property">dep</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerEffects</span>(<span class="params">dep: Dep</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> effects = <span class="title function_">isArray</span>(dep) ? dep : [...dep] <span class="comment">// 转为数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> effect <span class="keyword">of</span> effects) &#123;</span><br><span class="line">    <span class="comment">// 进入依赖触发函数</span></span><br><span class="line">      <span class="title function_">triggerEffect</span>(effect)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">triggerEffect</span>(<span class="params">effect: ReactiveEffect</span>) &#123;</span><br><span class="line">  <span class="comment">// 依次通过run触发被收集的effect的fn，至此完成依赖触发工作</span></span><br><span class="line">  effect.<span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>依赖触发的逻辑就非常简单了，<strong>set value</strong>的同时，获取当前<strong>ref</strong>的<strong>dep</strong>，并遍历<strong>dep</strong>中的依赖，依次执行，完成依赖触发。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​到此为止，我们基础类型场景的<strong>ref</strong>源码解读就结束了，我们简单做一下总结，</p><p>​相比较于<strong>reactive</strong>，该场景下的逻辑要稍微简单一点，相关依赖<strong>（effect fn）</strong>被实例本身的<strong>dep</strong>管理，没有构建复杂的<strong>WeakMap</strong>对象。</p><p><strong>ref</strong>与<strong>reactive</strong>的收集与触发的逻辑也不相同</p><ul><li>ref实际上是一个<strong>class</strong> <strong>RefImpl</strong>的实例</li><li>数据响应并不是通过<strong>proxy</strong>实现，而是通过<strong>class</strong> 的<strong>get</strong> <strong>set</strong>修饰符实现</li><li>依赖收集、触发并不是通过<strong>WeakMap</strong>实现，而是通过<strong>RefImpl</strong>实例中的变量<strong>dep</strong>实现</li></ul><h2 id="复杂类型场景"><a href="#复杂类型场景" class="headerlink" title="复杂类型场景"></a>复杂类型场景</h2><p>​大家都知道<strong>ref</strong>不仅可以实现基础类型的响应式，还可以实现复杂类型的响应式，我们可以说<strong>ref</strong>是<strong>reactive</strong>的超集，那<strong>ref</strong>是如何实现既支持基础类型也支持复杂类型的呢？</p><p>​接下来就让我们看看复杂类型场景下的<strong>ref</strong>是如何完成响应式的吧。</p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; ref, effect &#125; = <span class="title class_">Vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;卖鱼强&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">innerText</span> = obj.<span class="property">value</span>.<span class="property">name</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  obj.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;狂飙强&#x27;</span></span><br><span class="line">&#125;, <span class="number">4000</span>)</span><br></pre></td></tr></table></figure><h3 id="Ref初始化"><a href="#Ref初始化" class="headerlink" title="Ref初始化"></a>Ref初始化</h3><p>首先依旧是进入<strong>ref</strong>函数中，开始<strong>new RefImpl</strong>，前面流程完全一致，所以直接我们进入<strong>RefImpl</strong>内部</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_value</span>: T <span class="comment">// 被代理对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_rawValue</span>: T</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span> <span class="comment">// Dep是reative阶段声明的Set,内部存放的是ReactiveEffect</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span> <span class="comment">// 将RefImpl的实例全部置为true,下次isRef判断就会为true</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isShallow: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = <span class="title function_">toRaw</span>(value) <span class="comment">// toRaw 获取原始数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(value) <span class="comment">// 跳转到toReactive函数中 并且最终会获取到一个proxy对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toReactive = &lt;T <span class="keyword">extends</span> <span class="built_in">unknown</span>&gt;(<span class="attr">value</span>: T): <span class="function"><span class="params">T</span> =&gt;</span></span><br><span class="line">  <span class="title function_">isObject</span>(value) ? <span class="title function_">reactive</span>(value) : value <span class="comment">// value为object，进入reactive(value)逻辑 最终返回一个proxy的对象</span></span><br></pre></td></tr></table></figure><p>​在<strong>constructor</strong>逻辑中，我们可以看到<strong>this._value &#x3D; toReactive(value)<strong>，而</strong>toReactive</strong>函数中，会首先识别<strong>value</strong>类型，如果不是<strong>object</strong>，原路返回，如果是<strong>object</strong>，将会被<strong>reactive</strong>函数处理，所以在该场景下，<strong>value</strong>将被<strong>reactive</strong>函数处理成<strong>proxy</strong>对象。</p><p>​也就是说，此时<strong>ref</strong>内部的**_value<strong>实际上成了</strong>reactive**类型。</p><h3 id="读取-1"><a href="#读取-1" class="headerlink" title="读取"></a>读取</h3><p>​初始化阶段，<strong>effect</strong>触发的时候，将会读取<strong>obj.value.name</strong>，，首先会访问量<strong>obj.value</strong>，触发<strong>ref</strong>的<strong>get</strong>方法。</p><p>​<strong>obj.value</strong>获取完成后，继续去获取<strong>obj.value.name</strong>，而<strong>name</strong>已经在初始化阶段，被<strong>toReactive</strong>处理成了<strong>proxy</strong>，所以接下来，会再触发<strong>reactive</strong>的<strong>get</strong>，来获取<code>name</code></p><p>​也就是说，读取阶段，实际上触发了2次<strong>get</strong>，一次是<strong>ref</strong>的<strong>get value</strong>，一次是<strong>proxy</strong>的<strong>get</strong>，进而完成了变量的读取。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// trackRefValue(this) // 依赖收集，后面单独说</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span> <span class="comment">// 获取到proxy类型的&#123;name: &#x27;张三&#x27;&#125;，进而再次触发proxy的get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值-1"><a href="#赋值-1" class="headerlink" title="赋值"></a>赋值</h3><p>若干时间后，<strong>obj.value.name</strong>发生<strong>set</strong>行为，首先依旧会触发<strong>ref</strong>的<strong>get</strong>，获取<code>obj.value</code>，然后再触发<strong>reactive</strong>的<strong>set</strong>方法，完成<strong>name</strong>的赋值。</p><p>整个赋值过程，实际上分别触发了ref的<strong>get value</strong>，和proxy的<strong>set</strong>，进而完成变量的赋值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ref 本身的set在value为object，并且没有直接修改ref.value的情况下，不会被触发</span></span><br><span class="line"><span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>到此为止，我们了解了ref在处理复杂对象时候的读取与赋值的逻辑。</p><p>读取：<strong>先触发ref的get，再触发proxy的get</strong></p><p>赋值：<strong>先触发ref的get，再触发proxy的set</strong></p><h3 id="依赖收集"><a href="#依赖收集" class="headerlink" title="依赖收集"></a>依赖收集</h3><p>依赖收集是在<strong>get</strong>阶段进行完成，而通过上面的分析我们可以了解到，<strong>ref</strong>的<strong>get</strong>实际上其内部是两次<strong>get</strong>事件，所以我们分开来看。</p><h4 id="ref的依赖收集（trackRefValue）"><a href="#ref的依赖收集（trackRefValue）" class="headerlink" title="ref的依赖收集（trackRefValue）"></a>ref的依赖收集（trackRefValue）</h4><p>effect初始化阶段执行的时候，会读取<code>obj.value.name</code>，首先会触发<strong>ref</strong>的<strong>get</strong>方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// 依赖收集函数 将当前ref本身传入方法</span></span><br><span class="line">  <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ref</strong>的<strong>get</strong>方法触发了<strong>trackRefValue</strong>，会在当前<strong>ref</strong>的<strong>dep</strong>中收集到<strong>effect</strong>，此处逻辑与<strong>ref</strong>为基础类型的逻辑一致。</p><h4 id="proxy的依赖收集（track）"><a href="#proxy的依赖收集（track）" class="headerlink" title="proxy的依赖收集（track）"></a>proxy的依赖收集（track）</h4><p>​<strong>ref</strong>的的<strong>get</strong>完成后，紧接着触发了<strong>reactive</strong>的<strong>get</strong>，然后<strong>get</strong>内部通过<strong>WeakMap</strong>再次完成依赖收集（相关逻辑参考<a href="https://juejin.cn/post/7202132390549553211">Vue3硬核源码解析系列（3） reactive + effect源码解析</a>）。</p><p>​我们会发现，在该阶段，我们内部实际上<strong>触发了2次依赖收集</strong>，<strong>effect fn</strong>被<strong>ref</strong>收集的同时，也被<strong>proxy</strong>收集了。</p><h3 id="依赖触发"><a href="#依赖触发" class="headerlink" title="依赖触发"></a>依赖触发</h3><p>因为ref内部是一个对象，所以赋值也存在多种方式，这依赖触发存在多种方式</p><h4 id="对象属性触发依赖"><a href="#对象属性触发依赖" class="headerlink" title="对象属性触发依赖"></a>对象属性触发依赖</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;狂飙强&#x27;</span></span><br></pre></td></tr></table></figure><p>这种<strong>不会破坏RefImpl初始化阶段其内部构建的proxy</strong>，仅修改已有<strong>proxy</strong>内部变量的值。</p><p>首先触发的是<strong>obj.value</strong>的<strong>get</strong>行为（此时没有<strong>effet</strong>在执行，不会发生依赖收集）。然后<strong>ref</strong>的<strong>get</strong>函数返回<strong>proxy</strong>对象 <code>&#123;name:&#39;卖鱼强&#39;&#125; </code>，紧接着触发<strong>proxy</strong>的<strong>set</strong>，并完成依赖触发（proxy的依赖触发请看这里<a href="https://juejin.cn/post/7202132390549553211">Vue3硬核源码解析系列（3） reactive + effect源码解析</a>）。</p><h4 id="对象触发依赖"><a href="#对象触发依赖" class="headerlink" title="对象触发依赖"></a>对象触发依赖</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">value</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;狂飙强&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方式首先触发<strong>obj.value</strong>的<strong>set</strong>行为，同时替换掉ref的值，<strong>注意这会破坏RefImpl初始化构建的_value的proxy</strong>，进而导致<strong>WeakMap</strong>中已有的<strong>依赖关系断裂</strong></p><p>然后执行<strong>triggerRefValue</strong>，触发，ref本身在get阶段收集了相关effect fn，。</p><p>effect fn被触发后，再次触发<strong>ref的get</strong>，<strong>proxy的get</strong>，并帮助<strong>proxy</strong>又重建了与<strong>effect fn</strong>之间的依赖关系。</p><p>这就是为什么存在依赖收集2次的原因。</p><p>到此为止，我们的<strong>ref</strong>核心源码分析就全部完毕了。</p><h2 id="关于ref的一些问题"><a href="#关于ref的一些问题" class="headerlink" title="关于ref的一些问题"></a>关于ref的一些问题</h2><p><strong>Q：为啥一定要.value，不能干掉吗？</strong></p><p>A：非常遗憾，value是去不掉的，因为ref依赖class get set 进行实现，在当前实现的场景下，可以简写为v，但是无法去除</p><p><strong>Q：我是不是可以完全使用ref，不用reactive？</strong></p><p>A：是的，可以完全使用ref，因为ref会根据你传入的类型，自动识别内部是否需要使用reactive，但是读过源码的同学知道ref在处理响应式系统中，存在重复收集依赖的场景，如果你有极致的性能要求，建议复杂类型依旧使用reactive完成，业务开发场景则无所谓。</p><p>如果还有其他问题，请评论区提问~</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​通过对ref源码的阅读，我们可以察觉到，如果仅仅聚焦基础类型的ref，其实底层实现还是比较简单的，所以建议有兴趣的同学渐进式的阅读源码，先完成基础类型场景的源码解读，再进行复杂类型的源码解读，这样事半功倍~</p><p>​如果有任何问题，请评论区留言~</p><p>​下一个阶段，我将手摸手带大家完成<strong>mini版本vue3 ref API</strong>，帮助大家深入理解<strong>ref</strong>~</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/07d7fdd1b1a44560ae1fd052db6e37e0~tplv-k3u1fbpfcp-zoom-crop-mark:1512:1512:151</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（5）vue3 reactivity-computed源码解析</title>
    <link href="https://bluedancers.github.io/2023/02/03/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%886%EF%BC%89vue3%20computed%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://bluedancers.github.io/2023/02/03/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%886%EF%BC%89vue3%20computed%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-02T16:00:00.000Z</published>
    <updated>2023-03-20T07:10:46.381Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>熟悉<strong>computed</strong>的同学都知道，<strong>computed</strong>会在依赖属性发生变化的时候自动更新结果。</p><p>他有一个重要的特点：<strong>计算值是可缓存的，只有依赖项发生变化的时候，才会重新计算</strong></p><p>​通过之前的文章，我们已经了解了<strong>reactive</strong>，<strong>ref</strong>的实现原理，已经对<strong>vue</strong>响应式机制有所了解，今天我们就来了解一下<strong>computed</strong>是如何实现的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showName = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;我叫&#x27;</span> + obj.<span class="property">name</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">innerText</span> = showName.<span class="property">value</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>​以上代码运行后，我们可以看到如下现象</p><ul><li>页面显示：<strong>我叫张三</strong></li><li>2s后，页面显示<strong>我叫李四</strong></li></ul><p>先让我们看看<strong>computed</strong>内部都做了些什么吧</p><h3 id="computed初始化"><a href="#computed初始化" class="headerlink" title="computed初始化"></a>computed初始化</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> computed&lt;T&gt;(</span><br><span class="line">  <span class="attr">getterOrOptions</span>: <span class="title class_">ComputedGetter</span>&lt;T&gt; | <span class="title class_">WritableComputedOptions</span>&lt;T&gt;) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">getter</span>: <span class="title class_">ComputedGetter</span>&lt;T&gt;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">setter</span>: <span class="title class_">ComputedSetter</span>&lt;T&gt;</span><br><span class="line">  <span class="comment">// 传入的是否是一个方法</span></span><br><span class="line">  <span class="keyword">const</span> onlyGetter = <span class="title function_">isFunction</span>(getterOrOptions)</span><br><span class="line">  <span class="keyword">if</span> (onlyGetter) &#123;</span><br><span class="line">    <span class="comment">// 如果是方法, 则直接赋值到getter</span></span><br><span class="line">    <span class="comment">// 同时屏蔽setter行为</span></span><br><span class="line">    getter = getterOrOptions</span><br><span class="line">    <span class="comment">// dev环境下 set函数给予提示</span></span><br><span class="line">    setter = __DEV__</span><br><span class="line">      ? <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;Write operation failed: computed value is readonly&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      : <span class="variable constant_">NOOP</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不是方法,则认为是对象,将对象中的get set分别赋值到getter setter中</span></span><br><span class="line">    getter = getterOrOptions.<span class="property">get</span></span><br><span class="line">    setter = getterOrOptions.<span class="property">set</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> cRef = <span class="keyword">new</span> <span class="title class_">ComputedRefImpl</span>(getter, setter, onlyGetter || !setter, isSSR)</span><br><span class="line">  <span class="keyword">return</span> cRef</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​入口函数的逻辑还是非常简单的，如果传入的是一个匿名函数，这处理为<strong>getter</strong>，如果传入的是对象，这赋值<strong>getter</strong> <strong>setter</strong>，这部分逻辑符合Vue官方文档的描述。</p><p>​抹平两种传参方式的差异后，<strong>new ComputedRefImpl</strong>，并返回，看来核心实现都在<strong>ComputedRefImpl</strong>中了，我们接下来就进入该类中看看吧。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算属性的响应式也是通过class get set去实现的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ComputedRefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span> <span class="comment">// 依赖收集处(effect)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> _value!: T  <span class="comment">// 存储计算属性结果的值</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="attr">effect</span>: <span class="title class_">ReactiveEffect</span>&lt;T&gt; <span class="comment">// 存储依赖</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span> <span class="comment">// 所有的计算属性也会被识别为ref</span></span><br><span class="line">  <span class="keyword">public</span> _dirty = <span class="literal">true</span> <span class="comment">// 判断是否需要重新计算</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    getter: ComputedGetter&lt;T&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _setter: ComputedSetter&lt;T&gt;,</span></span><br><span class="line"><span class="params">    isReadonly: <span class="built_in">boolean</span>, <span class="comment">// 是否只读,如果存在setter,则为false</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="comment">// 将计算属性的识别为effect，初始化一个ReactiveEffect</span></span><br><span class="line">    <span class="comment">// 初始化阶段仅仅声明 但是却没有触发</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span> = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(getter, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 脏变量（_dirty）的本质就是判断什么时候去触发依赖</span></span><br><span class="line">      <span class="comment">// 脏变量为false的时候才会触发  </span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 触发依赖</span></span><br><span class="line">        <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span>.<span class="property">computed</span> = <span class="variable language_">this</span> <span class="comment">// 赋值ReactiveEffect中的computed为当前this</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;&#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue: T</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​在<strong>ComputedRefImpl</strong>初始化阶段，我们看到了非常熟悉的api，<strong>ReactiveEffect</strong>，在我们的effect源码分析中，我们使用这个api来完成关键步骤<strong>依赖收集</strong>，但是这里却又有点不同，完成声明却没有执行，并且还传入了第二个参数，一个匿名函数，现在还无法发挥它的作用，我们需要后面再说。</p><p>​总的来说，初始化的时候，生成了一个<strong>ReactiveEffect</strong>并保存到当前类的<strong>effect</strong>变量中，忘记<strong>ReactiveEffect</strong>记得去<strong>reactive</strong>章节看看其作用哦。</p><h3 id="computed的get行为"><a href="#computed的get行为" class="headerlink" title="computed的get行为"></a>computed的get行为</h3><p>当我们的实例中的api，<strong>effect</strong>初次执行的时候，我们会触发<code>showName.value</code>的<strong>get</strong>，也就是说，会触发<strong>ComputedRefImpl</strong>的<strong>get</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被读取的时候触发</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// 依赖收集</span></span><br><span class="line">  <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="comment">// 判断是否需要更新，如果需要则进入函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果更新过，这下一次就不需要更新了，</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// effect的run执行，也就是执行computed的fn，将会得到一次计算属性的结果</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="variable language_">this</span>.<span class="property">effect</span>.<span class="title function_">run</span>()! </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回computed的结果</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackRefValue</span>(<span class="params">ref: RefBase&lt;<span class="built_in">any</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="comment">// 首次computed内部的dep是不存在的，会通过createDep生成一个Set</span></span><br><span class="line">  <span class="title function_">trackEffects</span>(ref.<span class="property">dep</span> || (ref.<span class="property">dep</span> = <span class="title function_">createDep</span>()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackEffects</span>(<span class="params">dep: Dep</span>) &#123;</span><br><span class="line">  <span class="comment">// 将activeEffect，此时是effect的fn，收集到computed的dep中</span></span><br><span class="line">  dep.<span class="title function_">add</span>(activeEffect!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​当我们触发<strong>computed</strong>的<strong>get</strong>的时候，首先会触发<strong>trackRefValue</strong>，将当前<strong>activeEffect</strong>收集到类中的<strong>dep</strong>中，这正是依赖收集，这里effect被收集到了computed的dep中，<strong>建立起了computed与其被依赖项的联系</strong>。</p><p>​然后判断**_dirty<strong>是否为</strong>true<strong>，默认是</strong>true<strong>，所以进入判断中，首先将</strong>_dirty<strong>改为</strong>false<strong>，下一次则不会进入判断，直接返回</strong>computed**之前的结果，之后执行初始化阶段声明的ReactiveEffect，也就是我们computed本身。</p><p>​<strong>computed</strong>的<strong>effect.run</strong>一旦触发，<strong>activeEffect</strong>将会被替换当前api <strong>effect的fn</strong> ，并且触发<strong>computed</strong>依赖项<strong>obj.name</strong>的<strong>get</strong>，再次触发proxy的依赖收集，于是<strong>obj.name</strong>成功收集到了<strong>computed</strong>内部的<strong>effect</strong>，<strong>proxy与computed建立了联系</strong>；同时返回了最新的computed结果。</p><p>​<strong>computed的get行为触发的时候，我们发现computed收集了effect，reactive收集了computed，三者之间建立起了联系。</strong></p><p>​而且我们还发现了**_dirty<strong>变量的含义，第一次</strong>get<strong>后，赋值为</strong>false<strong>，下一次就不需要再计算</strong>computed**的结果，实现了数据缓存。</p><img src="http://www.vkcyan.top/FulT2b9ii1-iTvws8zj2z8vEn0Hn.png" style="zoom:33%;" /><h3 id="obj-name触发set，计算属性触发"><a href="#obj-name触发set，计算属性触发" class="headerlink" title="obj.name触发set，计算属性触发"></a>obj.name触发set，计算属性触发</h3><p><strong>2s</strong>后，我们触发了<strong>obj.name</strong>的<strong>set</strong>，所以首先触发<strong>obj.name</strong>的依赖触发，此时我们将可以通过WeakMap会找到之前收集到<strong>computed</strong>，我们直接进入依赖触发的逻辑。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: <span class="built_in">object</span>,</span></span><br><span class="line"><span class="params">  <span class="keyword">type</span>: TriggerOpTypes,</span></span><br><span class="line"><span class="params">  key?: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  newValue?: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  oldValue?: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  oldTarget?: <span class="built_in">Map</span>&lt;<span class="built_in">unknown</span>, <span class="built_in">unknown</span>&gt; | <span class="built_in">Set</span>&lt;<span class="built_in">unknown</span>&gt;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">deps</span>: (<span class="title class_">Dep</span> | <span class="literal">undefined</span>)[] = []</span><br><span class="line">  deps.<span class="title function_">push</span>(depsMap.<span class="title function_">get</span>(key))</span><br><span class="line">  <span class="title function_">triggerEffects</span>(deps[<span class="number">0</span>]) <span class="comment">// 找到了之前收集到的computed中的effect</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按照常理来说，我们找到指定依赖之后，就是触发依赖，但是计算属性有所不同，因为计算属性存在“调度器”</span></span><br><span class="line"><span class="comment">// 还记得computed初始化阶段，new ReactiveEffect传递的第二个参数吗?</span></span><br><span class="line"><span class="comment">// 该参数将会被保存到ReactiveEffect的scheduler(调度器)中</span></span><br><span class="line"><span class="comment">// 所以此时的ReactiveEffect中，fn是computed的匿名函数，scheduler是computed初始化阶段new ReactiveEffect的第二个参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerEffects</span>(<span class="params">dep: Dep | ReactiveEffect[]</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> effects = <span class="title function_">isArray</span>(dep) ? dep : [...dep]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> effect <span class="keyword">of</span> effects) &#123;</span><br><span class="line">    <span class="title function_">triggerEffect</span>(effect, debuggerEventExtraInfo)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">triggerEffect</span>(<span class="params">effect: ReactiveEffect</span>) &#123;</span><br><span class="line"><span class="comment">// 调度器的优先级大于run，所以此时会执行调度器逻辑</span></span><br><span class="line">  <span class="keyword">if</span> (effect.<span class="property">scheduler</span>) &#123;</span><br><span class="line">    effect.<span class="title function_">scheduler</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    effect.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调度器代码</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">effect</span> = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(getter, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 还记得我们get之后将dirty改为false吗？</span></span><br><span class="line">  <span class="comment">// 此时computed的依赖发生变化，将_dirty改为true，表示下次重新计算</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 触发当前computed中收集了相关effect（依赖触发）</span></span><br><span class="line">    <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerRefValue</span>(<span class="params">ref: RefBase&lt;<span class="built_in">any</span>&gt;, newVal?: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 公共依赖触发逻辑</span></span><br><span class="line">  <span class="title function_">triggerEffects</span>(ref.<span class="property">dep</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed的dep中收集的effect触发，再次触发computed的get</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// 依赖项发生变化的时候activeEffect不存在，所以此处收集不到任何依赖</span></span><br><span class="line">  <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="comment">// 刚才依赖项发生了变化，所以dirty为true，表示本次需要更新计算属性的结果</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123;</span><br><span class="line">    <span class="comment">// 计算后dirty改为false 除非依赖项发生变化，否则将不会再重新计算。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 重新计算 computed的结果</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="variable language_">this</span>.<span class="property">effect</span>.<span class="title function_">run</span>()! </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​计算属性的触发逻辑还是非常复杂的，首先<strong>proxy</strong>的set，触发<strong>computed</strong>的<strong>scheduler（调度器）</strong>，<strong>scheduler</strong>通过<strong>computed</strong>的<strong>dep</strong>找到相关<strong>effect</strong>，<strong>effect的fn</strong>执行又会触发<strong>computed</strong>的<strong>get</strong>，<strong>并与首次完成computed的计算，同时缓存最新的computed的结果</strong>，进而再完成effect的全部逻辑。</p><img src="https://www.vkcyan.top/Fu-QElucOgKlCPvYBJuMIQst0Fuo.png" style="zoom:33%;" /><h2 id="代码执行流程"><a href="#代码执行流程" class="headerlink" title="代码执行流程"></a>代码执行流程</h2><h3 id="依赖收集阶段"><a href="#依赖收集阶段" class="headerlink" title="依赖收集阶段"></a>依赖收集阶段</h3><ol><li><strong>computed</strong>初始化阶段，通过<strong>ReactiveEffect</strong>进行初始化，并且生成<strong>scheduler（调度器）</strong></li><li><strong>effect</strong>初始化，触发<strong>computed</strong>的<strong>get</strong>，将当前<strong>activeEffect（effect）</strong>收集到<strong>computed</strong>的<strong>dep</strong>中<strong>（computed将effect收集）</strong></li><li>执行<strong>computed</strong>自身逻辑，刷新全局<strong>activeEffect</strong></li><li>进而触发<strong>proxy</strong>的<strong>get</strong>事件触发，将当前<strong>activeEffect（computed）</strong>收集到<strong>WeakMap</strong>中<strong>（proxy将computed收集）</strong></li><li><strong>proxy</strong>的返回值返回<strong>computed</strong>，完成<strong>computed</strong>的计算逻辑</li><li>获取到<strong>computed</strong>结果，完成<strong>effect</strong></li></ol><h3 id="依赖触发阶段"><a href="#依赖触发阶段" class="headerlink" title="依赖触发阶段"></a>依赖触发阶段</h3><ol><li>触发<strong>proxy</strong>的<strong>set</strong>，<strong>set</strong>行为中触发依赖，触发之前保存的<strong>computed</strong>的<strong>调度器scheduler</strong>（proxy找到computed）</li><li><strong>调度器scheduler</strong>触发，<strong>dirty</strong>改为<strong>true</strong>，同时触发<strong>computed</strong>中保存的依赖，其中都是相关<strong>effec</strong>的<strong>fn</strong>。（computed找到effect）</li><li><strong>effect</strong>触发，<strong>fn</strong>执行，触发<strong>computed</strong>的<strong>get</strong>行为</li><li><strong>dirty</strong>为<strong>true</strong>，首次进行计算属性的重新计算（除非依赖项改变，否则下次不会重新计算），返回最新的<strong>computed</strong>结果，</li><li><strong>effect</strong>执行完成</li></ol><h2 id="回答一些问题"><a href="#回答一些问题" class="headerlink" title="回答一些问题"></a>回答一些问题</h2><h4 id="computed如何实现高性能缓存的？"><a href="#computed如何实现高性能缓存的？" class="headerlink" title="computed如何实现高性能缓存的？"></a>computed如何实现高性能缓存的？</h4><p>​通过<strong>调度器scheduler</strong> + <strong>脏值检查_dirty</strong>，实现依赖项不变化，不进行重新计算，依赖项变化后仅执行一次的逻辑，进而实现高性能缓存。</p><h4 id="为什么访问computed需要-value"><a href="#为什么访问computed需要-value" class="headerlink" title="为什么访问computed需要.value"></a>为什么访问computed需要.value</h4><p>​因为我们访问<strong>computed</strong>实际上是访问<strong>ComputedRefImpl</strong>这个<strong>Class</strong>的实例，他的内部通过<strong>get value</strong>返回被访问值，所以我们必须通过**.value**来访问</p><h4 id="简述computed的实现原理？"><a href="#简述computed的实现原理？" class="headerlink" title="简述computed的实现原理？"></a>简述computed的实现原理？</h4><blockquote><p>vue的响应式api都可以从依赖收集 依赖触发2个角度出发阐述其原理实现</p></blockquote><p>依赖收集阶段：computed通过首次get的完成相关effect的依赖收集，首次计算的时候proxy完成computed的依赖收集。</p><p>依赖触发阶段：computed的依赖项发生变化后，会通过proxy找到computed的调度器 scheduler，触发所有effect，effct中再出发computed的get，首次get将进行一次结果运算（后续不在运算，除非computed依赖项发生变化），effect触发完成</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​到此为止，我们<strong>computed</strong>的核心源码就解读完毕了，虽然总体依旧可以从<strong>依赖收集</strong>和<strong>依赖触发</strong>两个角度去理解实现原理，但是新增加的<strong>scheduler（调度器）</strong>与**_dirty（脏值检查）**机制，让逻辑复杂了很多。</p><p>​大家在理解computed源码的时候，一定要多走几遍流程，多捋几遍逻辑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;熟悉&lt;strong&gt;computed&lt;/strong&gt;的同学都知道，&lt;strong&gt;computed&lt;/strong&gt;会在依赖属性发生变化的</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（3）vue3 reactive源码解析</title>
    <link href="https://bluedancers.github.io/2023/02/01/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%883%EF%BC%89%20reactive%20+%20effect%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://bluedancers.github.io/2023/02/01/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%883%EF%BC%89%20reactive%20+%20effect%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-01-31T16:00:00.000Z</published>
    <updated>2023-02-20T08:19:15.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏前言"><a href="#专栏前言" class="headerlink" title="专栏前言"></a>专栏前言</h2><p>​本文是<strong>vue3源码解析系列</strong>的第三篇文档，在前两篇文章中，我们了解了vue3源码的运行、调试，以及阅读前的一些前置知识点，从本节开始，我们就可以正式的开始<strong>vue3</strong>的源码阅读了。</p><p>​我们首先阅读的模块是@vue&#x2F;reactivity 中的<strong>reactive</strong>以及相关<strong>api</strong>，<strong>effect</strong>的源代码。</p><p>在正文开始之前，我先将本节的简化版源码放出来，有兴趣的同学可以clone到本地，一边debug，一边阅读文章，这样效果更佳~</p><p><a href="https://github.com/BlueDancers/vue3-mini/tree/reactive">https://github.com/BlueDancers/vue3-mini/tree/reactive</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>reactive</strong>的含义如其名称，通过<strong>reactive</strong>创建的对象都是具备响应式的。即<strong>reactive</strong>对象的改变会造成<strong>副作用</strong>。</p><p>于是我们引出<strong>副作用API（effect）</strong>，如果<strong>effect</strong>内部依赖了<strong>reactive</strong>，<strong>则reactive的改变会重新触发effect</strong>。</p><p>现在让我们走进案例与源码，看看究竟是如何实现响应式的。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> &#123; reactive, effect &#125; = <span class="title class_">Vue</span></span><br><span class="line"> <span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;卖鱼强&#x27;</span>,</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">innerText</span> = obj.<span class="property">name</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&#x27;狂飙强&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>以上测试案例，我们涉及到了三个重要的阶段</p><ol><li>reactive初始化</li><li>effect初始化</li><li>reactive发生修改</li></ol><p>最后形成了effect的自动触发，我们就从以上三个角度去切入源码实现。</p><h2 id="reactive初始化"><a href="#reactive初始化" class="headerlink" title="reactive初始化"></a>reactive初始化</h2><blockquote><p>为了方便阅读与理解，以下仅贴出核心源码</p></blockquote><p><code>packages/reactivity/src/reactive.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createReactiveObject</span>(</span><br><span class="line">    target, <span class="comment">// reactive里面的值</span></span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    mutableHandlers,</span><br><span class="line">    mutableCollectionHandlers,</span><br><span class="line">    reactiveMap</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params">target, isReadonly, baseHandlers, collectionHandlers, proxyMap</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断是否已经被代理过了，如果是，则获取缓存中的值，并直接返回</span></span><br><span class="line">  <span class="comment">// 我们这里第一次指定，必然是不存在的，所以跳过这个</span></span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对reactive中的变量进行代理，我们这里的target类型是obejct，targetType为common，所以接下来进入baseHandlers逻辑</span></span><br><span class="line">  <span class="comment">// 而baseHandlers从reactive被当做参数传递过来的，实际执行的是mutableHandlers</span></span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    baseHandlers</span><br><span class="line">  )</span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target, proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive中变量类型为object场景下，proxy的监听逻辑会走到这里</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutableHandlers = &#123;</span><br><span class="line">  get, </span><br><span class="line">  set,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​通过源码 我们可以看得出来，使用<strong>reactive</strong>，内部实际执行的是<strong>createReactiveObject</strong>，函数就是新建了<strong>proxy</strong>，并最终返回。</p><p>​不过要注意一点的是，经过<strong>reactive</strong>处理过的对象，都会以<strong>target</strong>为<strong>WeakMap</strong>键，<strong>proxy</strong>为值，进行一次缓存，这样同一个值再次进行<strong>reactive</strong>的时候就会读取缓存中的值。</p><img src="https://www.vkcyan.top/Fo-SnMAmNY3ZCNiZ_GONRZTFVefm.png" style="zoom:50%;" /><p>​接下来，让我们进入初始化阶段的<strong>mutableHandlers</strong>，也就是<strong>proxy</strong>中核心的<strong>get set</strong>函数，看看内部做了些什么。</p><h3 id="初始化读取（get）"><a href="#初始化读取（get）" class="headerlink" title="初始化读取（get）"></a>初始化读取（get）</h3><p>当触发<strong>obj.name</strong>的读取行为的时候，就会触发代理对象的<strong>get</strong>函数</p><p><code>packages/reactivity/src/baseHandlers.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> get = <span class="title function_">createGetter</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver) <span class="comment">// 读取被代理对象</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 核心逻辑(track)：依赖收集，后续单独看</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前值是reactive则递归proxy处理</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(res)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reactive</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get内部的逻辑很简单，通过<strong>Reflect</strong>完成被代理对象的读取操作。</p><p>如果被读取对象的属性是<strong>object</strong>则会再次进入<strong>reactive</strong>逻辑中进行<strong>proxy</strong>处理，确保嵌套对象的响应式。</p><blockquote><p>也许有的人会说了proxy不是自身就实现了对象的拦截了吗？为什么我们还是要递归处理嵌套obj呢？</p><p>这里我给大家解释一下，proxy确实会拦截到所有操作，但是他也只能拦截当前层级的。</p><p>如果没有递归处理， obj.name.abc &#x3D; 123的时候，只会触发obj.name的get事件，但是不会触发obj.name.abc的set事件。</p></blockquote><h3 id="初始化修改（set）"><a href="#初始化修改（set）" class="headerlink" title="初始化修改（set）"></a>初始化修改（set）</h3><p>当触发<code>obj.name</code>的修改行为，将会触发代理对象的<strong>set</strong>函数</p><p><code>packages/reactivity/src/baseHandlers.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="title function_">createSetter</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span>(<span class="params">shallow = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">    <span class="comment">// 修改被代理数据，完成数据更新</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心逻辑(trigger)：依赖触发，后续单独看</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<strong>Reflect</strong>完成被代理对象值的更新，最后返回本次Reflect.set的结果，完成逻辑。</p><p>总体就是对proxy的简单利用，还是很简单的嘛</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​以上代码是去除所有边界判断，以及响应式逻辑后，reactive的核心代码；我们可以发现，其实就是<strong>proxy + Reflect</strong>的基础使用。</p><p>​目前数据已经具备响应式，但是数据变化后，引用数据的<strong>effect</strong>如何实现自动执行呢？接下来我们就去看看effect初始化的时候究竟做了什么。</p><h2 id="effect初始化"><a href="#effect初始化" class="headerlink" title="effect初始化"></a>effect初始化</h2><h3 id="读取-依赖收集（track）"><a href="#读取-依赖收集（track）" class="headerlink" title="读取 - 依赖收集（track）"></a>读取 - 依赖收集（track）</h3><p>​我们回到测试demo中，根据我们使用<strong>vue3</strong>的预期，在初始化完成后，<strong>effect</strong>会触发一次，若干时间后，<strong>setTimeout</strong>内<strong>set</strong>触发，依赖<code>obj.name</code>的 <strong>effect</strong>的函数还会被触发一次，这又是如何实现的呢？</p><p>​这里我要提到Vue3中第一个非常非常非常重要的概念，<strong>依赖收集（track）</strong>，整个reactivity都利用到了这个概念。</p><p>​接下来，我们就要通过源码去了解，<strong>effect</strong>的初始化的时候，到底发生了什么，Vue3在此阶段是如何完成<strong>依赖收集</strong>的。</p><p><code>packages/reactivity/src/effect.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前被执行的effect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> <span class="attr">activeEffect</span>: <span class="title class_">ReactiveEffect</span> | <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _effect = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(fn) <span class="comment">// 首先执行new ReactiveEffect，所以我们跳转到ReactiveEffect中</span></span><br><span class="line">  _effect.<span class="title function_">run</span>() <span class="comment">// 并立刻执行了run方法，run方法内实际执行的就是effect内部函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReactiveEffect</span> &#123;</span><br><span class="line">  <span class="attr">parent</span>: <span class="title class_">ReactiveEffect</span> | <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    public fn: () =&gt; T, <span class="comment">// 这里的fn就是effect内部的匿名函数</span></span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      activeEffect = <span class="variable language_">this</span> <span class="comment">// 将effect对象，也就是new ReactiveEffect的结果，保存到activeEffect</span></span><br><span class="line">      shouldTrack = <span class="literal">true</span> <span class="comment">// 表示开始依赖收集</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>() <span class="comment">// 这里的fn，实际上就是effect内部的匿名函数 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>vue3的依赖收集几乎都是通过ReactiveEffect进行完成的，简单来说就是ReactiveEffect.run一旦运行后，就会将当前正在运行的匿名函数保存到内存中，以便于proxy get事件触发的时候，收集保存在内存中的匿名函数，进而完成依赖收集。</p></blockquote><p>​effect方法内部，首先<strong>new ReactiveEffect</strong> 最终执行了一次<strong>fn</strong>，但是在执行之前，将activeEffect赋值为this，<strong>将自身保存到了公共变量activeEffect之中</strong>。</p><p>让我们来看看此时运行的fn是什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">innerText</span> = obj.<span class="property">name</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​匿名函数的内部读取了<strong>obj.name</strong>，<strong>触发了被代理对象obj的get方法</strong>.</p><p>​所以接下来我们回到get方法中，查看之前忽略的依赖收集逻辑。</p><p><code>packages/reactivity/src/baseHandlers.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span>(<span class="params">isReadonly = <span class="literal">false</span>, shallow = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">target: Target, key: string | symbol, receiver: object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver) <span class="comment">// 读取被代理对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isReadonly) &#123; <span class="comment">// obj为可读代码 所以isReadony一定为false 进入if中</span></span><br><span class="line">      <span class="title function_">track</span>(target, <span class="title class_">TrackOpTypes</span>.<span class="property">GET</span>, key) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 依赖收集</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, type, key</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shouldTrack &amp;&amp; activeEffect) &#123; <span class="comment">// 在effect中执行run方法的时候，我们确保了shouldTrack为true activeEffect 存在值，所以进入判断</span></span><br><span class="line">    <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target) <span class="comment">// targetMap是一个全局变量，实际上是一个new WeakMap 首次depsMap肯定是不存在的</span></span><br><span class="line">    <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">      <span class="comment">// 这里的target为被代理对象，&#123;name: &#x27;张三&#x27;&#125;，该值做为key，Map作为value</span></span><br><span class="line">      targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key) <span class="comment">// 当前key为name 首次也是不存在的</span></span><br><span class="line">    <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">      <span class="comment">// depsMap是一个Map结构，key是name value是createDep()的返回值，我们进入createDep</span></span><br><span class="line">      depsMap.<span class="title function_">set</span>(key, (dep = <span class="title function_">createDep</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将dep作为参数传递到trackEffects中，此时的dep为Set</span></span><br><span class="line">    <span class="title function_">trackEffects</span>(dep, <span class="literal">undefined</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createDep</span> = (<span class="params">effects?</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Set</span>(effects) <span class="comment">// 实际上就是生成了Set结构（Set我们简单理解为元素不可重复的数组）</span></span><br><span class="line">  dep.<span class="property">w</span> = <span class="number">0</span></span><br><span class="line">  dep.<span class="property">n</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> dep</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackEffects</span>(<span class="params"></span></span><br><span class="line"><span class="params">  dep: Dep,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 一系列边界判断，合法的情况下shouldTrack为true</span></span><br><span class="line">  <span class="keyword">if</span> (shouldTrack) &#123;</span><br><span class="line">    dep.<span class="title function_">add</span>(activeEffect!) </span><br><span class="line">    <span class="comment">// 将全局变量activeEffect（包含effect的匿名函数）加入到dep（Set）中</span></span><br><span class="line">    <span class="comment">// 到这里 我们将响应式数据与effect函数建立起了联系 标志着我们完成了依赖收集</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<strong>effect</strong>内部的<strong>fn</strong>被触发，<strong>fn</strong>执行中触发了<strong>obj</strong>的<strong>get</strong>，<strong>get</strong>内部触发了<strong>依赖收集（track）</strong>，<strong>track</strong>内部通过构建<strong>targetMap</strong>，来维护<strong>变量</strong>与<strong>effect</strong>之间的关系，进而实现所谓的<strong>依赖收集</strong>。</p><p>​我们来梳理一下他的数据结构</p><ul><li><p><strong>WeakMap</strong></p><ul><li><strong>key：被代理对象（{name:’张三’}）</strong></li><li><strong>value：Map对象</strong><ul><li><strong>key：响应式对象的指定属性（name）</strong></li><li><strong>value：指定对象的指定属性的使用函数（effect的匿名函数）</strong></li></ul></li></ul><p><img src="https://www.vkcyan.top/Fq7ZRGhuv98fGixwhk7L8UMWEiRr.png"></p></li></ul><p>在<strong>WeakMap</strong>中，我们不仅仅收集了<strong>effect</strong>的匿名函数，还将<strong>effect</strong>与<strong>effect中具体读取的变量建立起了联系</strong>。</p><p>在未来的依赖触发逻辑中，weakMap将会发挥巨大作用。</p><p>到此为止，<strong>effect</strong>内的匿名函数执行完毕，同时我们也完成了重要的<strong>依赖收集</strong>。</p><h2 id="修改-依赖触发（trigger）"><a href="#修改-依赖触发（trigger）" class="headerlink" title="修改 - 依赖触发（trigger）"></a>修改 - 依赖触发（trigger）</h2><p>继续回到demo中，2s后，<strong>obj.name</strong>赋值为<strong>狂飙强</strong>，此时的现象是<strong>effect</strong>中的函数自动执行了，这又是如何实现的呢？</p><p>此处首先一定是触发了代理对象<strong>obj.name</strong>的<strong>set</strong>，所以我们由此处开始分析。</p><p><code>packages/reactivity/src/baseHandlers.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span>(<span class="params">shallow = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>): boolean &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver) <span class="comment">// 完成被代理对象的赋值操作</span></span><br><span class="line"><span class="title function_">trigger</span>(target, <span class="title class_">TriggerOpTypes</span>.<span class="property">SET</span>, key, value, oldValue)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, type, key?, newValue?, oldValue?, oldTarget?</span>) &#123;</span><br><span class="line">  <span class="comment">// 通过全局变量targetMap（weakMap）获取value</span></span><br><span class="line">  <span class="comment">// 在依赖收集阶段我们收集到了当前target，所以这时候 depsMap存在值 值为Map Map的key为name 值为Set Set内部是effect的fn</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  </span><br><span class="line"> <span class="title function_">triggerEffects</span>(depsMap.<span class="title function_">get</span>(key))</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerEffects</span>(<span class="params">dep, debuggerEventExtraInfo?</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> effects = <span class="title function_">isArray</span>(dep) ? dep : [...dep] <span class="comment">// 将set处理为数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> effect <span class="keyword">of</span> effects) &#123;</span><br><span class="line">    <span class="title function_">triggerEffect</span>(effect, debuggerEventExtraInfo)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">triggerEffect</span>(<span class="params"></span></span><br><span class="line"><span class="params">  effect: ReactiveEffect, <span class="comment">// 每一个effect都是ReactiveEffect，内部的fn都是effect的fn</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 此时的activeEffect为undefined，一定进入if中</span></span><br><span class="line">  <span class="keyword">if</span> (effect !== activeEffect || effect.<span class="property">allowRecurse</span>) &#123;</span><br><span class="line"> effect.<span class="title function_">run</span>() <span class="comment">// effect的run方法就是effect的fn，完成执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过以上代码，我们可以了解到，<strong>obj.name</strong>的改变在触发了<strong>proxy</strong>的<strong>set</strong>方法的同时，也触发了<strong>依赖触发（trigger）</strong>。</p><p><strong>trigger</strong>中，我们首先通过**{name: ‘狂飙强’}<strong>，找到了</strong>Map<strong>，再通过</strong>name<strong>找到</strong>Set<strong>，最终找到对应的</strong>effect<strong>的</strong>fn**，并进行匿名函数的执行，于是我们便看到了effect函数自动触发。</p><p>到此为止完成了整个响应式过程。</p><h2 id="reactive源码总结"><a href="#reactive源码总结" class="headerlink" title="reactive源码总结"></a>reactive源码总结</h2><p>我们简单总结一下，reactive中<strong>依赖收集</strong>与<strong>依赖触发</strong>的过程</p><ol><li>通过<strong>proxy</strong>处理<strong>reactive</strong>包裹的对象，被返回<strong>proxy</strong>代理对象</li><li><strong>effect</strong>初始化，生成了类<strong>ReactiveEffect</strong>，并执行了其<strong>run</strong>方法</li><li><strong>run</strong>方法执行后，当前<strong>effect的fn函数本身</strong>被保存到了<strong>activeEffect(公共变量)<strong>，随后执行了</strong>effect的fn</strong></li><li><strong>effect的fn</strong>触发，函数内使用到了<strong>obj.name</strong>，触发了代理对象的<strong>get</strong></li><li><strong>get</strong>方法内部触发了<strong>依赖收集（track）</strong>，配合保存到局部的<strong>activeEffect</strong>，最终通过<strong>WeakMap</strong>，建立了<strong>effect的fn</strong>与当前<strong>get的属性</strong>的联系，完成了依赖收集。</li><li>若干时间后，<strong>obj.name &#x3D; ‘狂飙强’<strong>，触发</strong>proxy</strong>的<strong>set</strong>，同时触发了<strong>依赖触发（trigger）</strong></li><li><strong>trigger</strong>内部通过<strong>当前代理对象</strong>以及<strong>具体修改的属性</strong>，在依赖收集阶段保存的<strong>WeakMap</strong>中，找到所有需要触发的<strong>effect的fn</strong>。</li><li>触发<strong>effect的fn函数</strong>，完成响应式。</li></ol><p>最后反映在我们眼前，就是<strong>obj.name</strong>改变的同时，所有使用到<strong>obj.name</strong>的<strong>effet</strong>都被自动触发其匿名函数，完成响应式。</p><h2 id="关于vue3-reactive的面试题"><a href="#关于vue3-reactive的面试题" class="headerlink" title="关于vue3 reactive的面试题"></a>关于vue3 reactive的面试题</h2><h4 id="为什么Vue3的响应式使用WeakMap实现？"><a href="#为什么Vue3的响应式使用WeakMap实现？" class="headerlink" title="为什么Vue3的响应式使用WeakMap实现？"></a>为什么Vue3的响应式使用WeakMap实现？</h4><p>​还记得我们前一篇文章谈到的<strong>WeakMap</strong>吗，一旦被代理对象被置为null，<strong>weakMap</strong>中该<strong>key</strong>将会被垃圾回收，达到性能最大化的目的</p><h4 id="简述Vue3的响应式的核心实现逻辑？"><a href="#简述Vue3的响应式的核心实现逻辑？" class="headerlink" title="简述Vue3的响应式的核心实现逻辑？"></a>简述Vue3的响应式的核心实现逻辑？</h4><p>​通过proxy递归代理对象，然后在get中完成依赖收集，在set中完成依赖触发</p><h4 id="Vue3的reactive为什么不能代理简单类型？"><a href="#Vue3的reactive为什么不能代理简单类型？" class="headerlink" title="Vue3的reactive为什么不能代理简单类型？"></a>Vue3的reactive为什么不能代理简单类型？</h4><p>​reactive底层依赖proxy，但是proxy只能代理对象，无法代理基础类型。</p><h4 id="为什么reactive解构会失去响应式？"><a href="#为什么reactive解构会失去响应式？" class="headerlink" title="为什么reactive解构会失去响应式？"></a>为什么reactive解构会失去响应式？</h4><p>​这里要明确一点，只有解构出来的变量是基础类型的时候，才会失去响应式，失去响应式的主要原因是基础类型无法被proxy代理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​到此为止，我们的vue3中的响应式模块的第一个API，reactive源码解读就完成了；</p><p>​总的来说逻辑还是比较复杂的，尽管我已经很努力的去反复修改与简化，但是还是能可以感觉到，有些东西很难用文字讲清楚。</p><p>​也不知道是否可以帮助到正在阅读文章的你，如果你觉得还不错的话，还麻烦你动动小手点个赞，关注专栏，这是我输出优质文章最大的动力。</p><p>​如果有小伙伴存在视频教程诉求的话，请评论区告诉我，我会评估出几期视频的必要性~</p><p>​下一站，我们将前往ref。</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏前言&quot;&gt;&lt;a href=&quot;#专栏前言&quot; class=&quot;headerlink&quot; title=&quot;专栏前言&quot;&gt;&lt;/a&gt;专栏前言&lt;/h2&gt;&lt;p&gt;​	本文是&lt;strong&gt;vue3源码解析系列&lt;/strong&gt;的第三篇文档，在前两篇文章中，我们了解了vue3源码的运行、</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（2）Object.defineProperty vs proxy</title>
    <link href="https://bluedancers.github.io/2023/01/30/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89Object.defineProperty%20VS%20proxy/"/>
    <id>https://bluedancers.github.io/2023/01/30/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%882%EF%BC%89Object.defineProperty%20VS%20proxy/</id>
    <published>2023-01-29T16:00:00.000Z</published>
    <updated>2023-02-18T07:25:03.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏前言"><a href="#专栏前言" class="headerlink" title="专栏前言"></a>专栏前言</h2><p>本文是<strong>vue3源码解析系列</strong>的第二篇文章，这一章我们主要学习<strong>vue3</strong>源码中涉及到的一些核心<strong>api</strong>。</p><p>后续的源码解读是非常复杂的，所以相关基础知识一定要牢固哦~</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>大部分使用过<strong>vue3</strong>的同学都知道，<strong>vue3</strong>的底层的响应式实现由<strong>Object.defineProperty</strong>更换成了<strong>Proxy</strong>。</p><p><strong>为什么vue3要更换呢？proxy相对于前者又有何优势呢？</strong></p><p>接下来让我们通过案例去一探究竟吧！</p><p>​</p><h2 id="当响应式不存在"><a href="#当响应式不存在" class="headerlink" title="当响应式不存在"></a>当响应式不存在</h2><p>我们先看一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shoes = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = shoes.<span class="property">num</span> * shoes.<span class="property">price</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total) <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line">shoes.<span class="property">num</span> = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total)  <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>第二次打印依旧是<strong>30</strong>，虽然我们的<strong>num</strong>发生了变化，但是下一次获取<strong>total</strong>的值依旧是之前的值，因为<strong>total</strong>已经被运算过了。</p><p>那应该怎么做，才能实时的获取到当前最新的<strong>total</strong>呢？</p><p>也很简单，我们每次获取之间，<strong>手动重新计算</strong>一次就好了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shoes = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  total = shoes.<span class="property">num</span> * shoes.<span class="property">price</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>() <span class="comment">// 重新计算</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total) <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line">shoes.<span class="property">num</span> = <span class="number">5</span></span><br><span class="line"><span class="title function_">effect</span>() <span class="comment">// 重新计算</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total) <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><p>​我们增加<strong>effect</strong>方法来手动触发依赖，这样我们实现了需求。</p><p>​但是这样手动触发的方式，在真实业务中过于繁琐，难以维护，本质上依旧是命令式思维。</p><p>​<strong>如何实现值的修改，后续逻辑的自动执行呢？</strong></p><h2 id="vue2的解决方案"><a href="#vue2的解决方案" class="headerlink" title="vue2的解决方案"></a>vue2的解决方案</h2><p>通过<strong>Object.defineProperty</strong>来对字段进行代理，<strong>通过set，get方法，完成逻辑的自动触发</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> shoes = &#123;</span><br><span class="line">  <span class="attr">num</span>: num,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始计算&#x27;</span>, shoes)</span><br><span class="line">  total = shoes.<span class="property">num</span> * shoes.<span class="property">price</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 被代理的值无法不可再get中使用了 因为会触发ett的死循环</span></span><br><span class="line"><span class="comment">// 所以,必须增加一个变量来做被代理的值,所以我们监听shoes.num的get set内部实际修改和读取的都是num</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(shoes, <span class="string">&#x27;num&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    num = newVal</span><br><span class="line">    <span class="title function_">effect</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​我们再以上代码，再次修改shoes.num，将触发代理中的set，进而触发effect，实现依赖的自动触发，vue2的底层也正是如此实现的，这样看起来我们的需求已经解决了，那为何vue3有放弃了<strong>Object.defineProperty</strong>呢？</p><p>​接下来我们就要聊聊他的缺陷。</p><h2 id="Object-defineProperty的缺陷"><a href="#Object-defineProperty的缺陷" class="headerlink" title="Object.defineProperty的缺陷"></a>Object.defineProperty的缺陷</h2><p>该API确实满足了我们上面提到的案例，但是他在一些场景也存在很多问题。</p><p>比如大家一定都遇到过的问题</p><ol><li>object中新增字段 没有响应性</li><li>array中指定下标的方式增加字段 没有响应性的</li></ol><p>为什么会这样呢？vue的官方解释是</p><p>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。</p><p>尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。</p><p><strong>那JavaScript到底限制了什么呢？</strong></p><p>​<strong>object.defineProperty</strong>只能监听到指定对象的<strong>指定属性的get set</strong>，这些工作其实是vue初始化阶段完成，所以指定对象的指定元素发生变化的时候，我们可以监听到变化，vue中也确实是这么表现的；</p><p>​但是如果，我们在指定对象上面新增属性，<strong>object.defineProPerty</strong>是无法监听到的，无法监听则无法处理被新增的字段，自然字段就不具备响应式；</p><p>​在vue2中，如果想解决以上问题，需要使用<strong>Vue.$set</strong>进行手动增加响应式字段，解决无法监听到字段新增的问题。</p><h2 id="vue3的解决方案"><a href="#vue3的解决方案" class="headerlink" title="vue3的解决方案"></a>vue3的解决方案</h2><p><strong>vue3</strong>中改用了<strong>proxy</strong>，为什么响应式核心api做了修改，<strong>proxy</strong>是什么？我们先实现一个类似<strong>vue2</strong>的案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shoes = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shoesProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(shoes, &#123;</span><br><span class="line">  <span class="comment">// target 被代理对象 key 本次修改的对象中的键 newValue 修改后的值 receiver 代理对象</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, newValue, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了写入事件&#x27;</span>)</span><br><span class="line">    shoes[key] = newValue</span><br><span class="line">    <span class="title function_">effect</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// target 被代理对象 key 本次读取的值 receiver 代理对象</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">tartget, key, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了获取事件&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> shoes[key]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始计算&#x27;</span>, shoes)</span><br><span class="line">  <span class="comment">// 如果使用被代理对象本身shoes,这不会触发</span></span><br><span class="line">  <span class="comment">// 如果使用代理对象shoesProxy,则这里会触发proxy的get事件</span></span><br><span class="line">  total = shoes.<span class="property">num</span> * shoes.<span class="property">price</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上代码，我们可以看到一些差别</p><p><strong>object.defineproperty</strong></p><ul><li><p>代理的并非对象本身，而是对象中的属性</p></li><li><p>只能监听到对象被代理的指定属性，无法监听到对象本身的修改</p></li><li><p>修改对象属性的时候，是对原对象进行修改的，原有属性，则需要第三方的值来充当代理对象</p></li></ul><p><strong>proxy</strong></p><ul><li>proxy针对对象本身进行代理</li><li>代理对象属性的变化都可以被代理到</li><li>修改对象属性的时候，我们针对代理对象进行修改</li></ul><p>无论是逻辑的可读性，还是API能力上，<strong>proxy</strong>都比<strong>object.defineProPerty</strong>要强很多，这也是vue3选择proxy的原因。</p><h2 id="proxy的好兄弟Reflect"><a href="#proxy的好兄弟Reflect" class="headerlink" title="proxy的好兄弟Reflect"></a>proxy的好兄弟Reflect</h2><p>​在<strong>vue3</strong>的源码中的**@vue&#x2F;reactivity<strong>中，</strong>我们会经常看到在proxy的set、get中存在Reflect的身影<strong>，但是从我们上面对</strong>proxy<strong>的使用来看，赋值 读取都实现了，为什么</strong>vue3<strong>中使用了</strong>Reflect**呢？</p><p>首先我们了解一下<strong>Reflect</strong>是干嘛的</p><p>官方解释：<strong>Reflect</strong> 是一个内置的对象，它提供拦截 JavaScript 操作的方法。</p><p>似乎比较难理解，我们举个例子吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">num</span>:<span class="number">10</span> &#125;</span><br><span class="line">obj.<span class="property">num</span> <span class="comment">// 10</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(obj,<span class="string">&#x27;num&#x27;</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>这么来看，似乎这个api很普通啊，反而把简单的读取值写复杂了。</p><p>这时候我们就要提一下Reflect.get 的第三个参数了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propertyKey, receiver]) <span class="comment">// receiver 如果target对象中指定了propertyKey，receiver则为getter调用时的this值。</span></span><br></pre></td></tr></table></figure><p>这次我们知道了，第三个参数receiver具有强制修改this指向的能力，接下来我们来看一个场景</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;12岁&#x27;</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">useinfo</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性被读取&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dataProxy.<span class="property">useinfo</span>)</span><br></pre></td></tr></table></figure><p>打印情况如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性被读取</span><br><span class="line">张三12岁</span><br></pre></td></tr></table></figure><p>​<strong>dataProxy.useinfo</strong>的get输出的值是正常的，但是get只被触发了一次，这是不正常的；</p><p>​因为useinfo里面还读取了被代理对象<strong>data</strong>的<strong>name</strong>、<strong>age</strong>，理想情况应当是<strong>get</strong>被触发三次。</p><p>​为什么会出现这样的情况呢，这是因为调用<strong>userinfo</strong>的时候，<strong>this指向了data，实际执行的是data.userinfo，此时的this指向data，而不是dataProxy</strong>，此时get自然是监听不到name、age的get了。</p><p>​这时候我们就用到了Reflect的第三个参数，<strong>来重置get set的this指向</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性被读取&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver) <span class="comment">// this强制指向了receiver</span></span><br><span class="line">    <span class="comment">// return target[key]</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印情况如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">属性被读取</span><br><span class="line">属性被读取</span><br><span class="line">属性被读取</span><br><span class="line">张三12岁</span><br></pre></td></tr></table></figure><p>现在打印就正常了，<strong>get</strong>被执行的3次，此时的<strong>this</strong>指向了<strong>dataProxy</strong>，<strong>Reflect</strong>很好的解决了以上的this指向问题。</p><p>​通过以上案例，我们可以看到使用<strong>target[key]<strong>有些情况下是不符预期的，比如案例中的被代理对象this指向问题，而使用</strong>Reflect</strong>则可以更加稳定的解决这些问题，在vue3源码中也确实是这么用的。</p><h2 id="补充章节（WeakMap）"><a href="#补充章节（WeakMap）" class="headerlink" title="补充章节（WeakMap）"></a>补充章节（WeakMap）</h2><p>​通过以上文章，我们了解到了<strong>object.defineproperty</strong>相较于<strong>proxy</strong>的劣势，以及搭配<strong>proxy</strong>同时出现的<strong>Reflect</strong>的原因，这是<strong>vue3</strong>最核心的<strong>api</strong>。</p><p>​但是仅仅知道理解<strong>proxy+reflect</strong>，还不太够，为了尽量轻松的阅读<strong>Vue3</strong>源码，我们还要学习一个<strong>原生API</strong>，那就是<strong>WeakMap</strong>。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">WeakMap MDN中文文档地址</a></p><p>​<strong>weakMap</strong>和<strong>map</strong>一样都是<strong>key value</strong>格式，但是他们还是存在一些差别。</p><ul><li><strong>weakMap</strong>的<strong>key</strong>必须是对象，并且是<strong>弱引用</strong>关系</li><li><strong>Map</strong>的<strong>key</strong>可以是任何值（基础类型+对象），但是key所引用的对象是<strong>强引用</strong>关系</li></ul><p>​通过查阅MDN我们可以发现，<strong>weakMap</strong>可以实现的功能，<strong>Map</strong>也是可以实现的，那为什么<strong>Vue3</strong>内部使用了<strong>WeakMap</strong>呢，问题就在<strong>引用关系</strong>上</p><p><strong>强引用：不会因为引用被清除而失效</strong></p><p><strong>弱引用：会因为引用被清除而自动被垃圾回收</strong></p><p>概念似乎还无法体现其实际作用，我们通过以下案例即可明白</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">map.<span class="title function_">set</span>(obj, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">obj = <span class="literal">null</span> <span class="comment">// obj的引用类型被垃圾回收</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map) <span class="comment">// map中key obj依旧存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WeakMap</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line">map.<span class="title function_">set</span>(obj, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">obj = <span class="literal">null</span> <span class="comment">// obj的引用类型被垃圾回收</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map) <span class="comment">// weakMap中key为obj的键值对已经不存在</span></span><br></pre></td></tr></table></figure><p>通过以上案例我们可以了解到</p><ul><li>弱引用在<strong>对象与key共存</strong>场景存在优势，<strong>作为key的对象被销毁的同时，WeakMap中的key value也自动销毁了</strong>。</li><li>弱引用也解释了为什么<strong>weakMap</strong>的<strong>key</strong>不能是基础类型，因为基础类型存在栈内存中，不存在弱引用关系；</li></ul><p>在vue3的依赖收集阶段，源码中用到了WeakMap，具体什么作用？我们下一节进行解答。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​通过本篇文章，我们认识到了<strong>object.defineproperty</strong>相较于<strong>proxy</strong>的劣势，以及搭配<strong>proxy</strong>同时出现的<strong>Reflect</strong>的原因，还有一个<strong>Map</strong>的原生的<strong>API</strong>，<strong>WeakMap</strong>的作用。</p><p>​接下来我们就可以正式走进<strong>vue3</strong>源码的世界~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏前言&quot;&gt;&lt;a href=&quot;#专栏前言&quot; class=&quot;headerlink&quot; title=&quot;专栏前言&quot;&gt;&lt;/a&gt;专栏前言&lt;/h2&gt;&lt;p&gt;本文是&lt;strong&gt;vue3源码解析系列&lt;/strong&gt;的第二篇文章，这一章我们主要学习&lt;strong&gt;vue3&lt;/st</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（1.1）搭建属于自己的vue3</title>
    <link href="https://bluedancers.github.io/2023/01/29/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://bluedancers.github.io/2023/01/29/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/Vue3%E7%A1%AC%E6%A0%B8%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E7%B3%BB%E5%88%97%EF%BC%881%EF%BC%89%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</id>
    <published>2023-01-28T16:00:00.000Z</published>
    <updated>2023-02-14T03:28:05.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​我们本次源码的目的是最终完成一个简化版的vue3，我们将他称为vue3-mini，本节我们就开始项目的搭建工作。</p><h3 id="生成项目"><a href="#生成项目" class="headerlink" title="生成项目"></a>生成项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h3 id="引入ts"><a href="#引入ts" class="headerlink" title="引入ts"></a>引入ts</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -init</span><br></pre></td></tr></table></figure><p>tsconfig.json范本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 编辑器配置 </span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 根目录</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 严格模式标志</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 指定类型脚本如何从给定的模块说明符查找文件。</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// https://www.typescriptlang.org/tsconfig#esModuleInterop </span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// JS 语言版本</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许未读取局部变量</span></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许未读取的参数</span></span><br><span class="line">    <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许解析 json</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 支持语法迭代:https://www.typescriptlang.org/tsconfig#downlevelIteration </span></span><br><span class="line">    <span class="attr">&quot;downlevelIteration&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许使用隐式的 any 类型(这样有助于我们简化 ts 的复杂度，从而更加专注于逻辑本身 </span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 模块化</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 转换为 JavaScript 时从 TypeScript 文件中删除所有注释。</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 禁用 sourceMap</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// https://www.typescriptlang.org/tsconfig#lib</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置路径映射</span></span><br><span class="line">    <span class="comment">// 设置后ts在打包过程中也会自动完成路径映射,需要其他地方再次设置</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@vue/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;packages/*/src&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;packages/*/src&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="引入代码格式化"><a href="#引入代码格式化" class="headerlink" title="引入代码格式化"></a>引入代码格式化</h3><p>vscode下载插件prettier</p><p>创建文件.prettierrc.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 单引号</span></span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">&#x27;es5&#x27;</span>, <span class="comment">// 对象属性最后有 &quot;,&quot;</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">false</span>, <span class="comment">// 是否需要分号</span></span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">110</span>, <span class="comment">// 一行最多120</span></span><br><span class="line">  <span class="attr">jsxSingleQuote</span>: <span class="literal">true</span>, <span class="comment">// jsx使用单引号</span></span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>, <span class="comment">// 一个tab代表几个空格数，默认就是2</span></span><br><span class="line">  <span class="attr">useTabs</span>: <span class="literal">false</span>, <span class="comment">// 不使用缩进符，而使用空格</span></span><br><span class="line">  <span class="attr">jsxBracketSameLine</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建文件.prettierignore</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Ignore artifacts:</span><br><span class="line">dist</span><br><span class="line">build</span><br><span class="line">coverage</span><br><span class="line">common</span><br><span class="line">tsconfig.json</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><p>后续的代码格式化工具上选择prettier即可</p><p>我们这里不使用eslint，不做非常强制的代码校验</p><h3 id="创建相关文件"><a href="#创建相关文件" class="headerlink" title="创建相关文件"></a>创建相关文件</h3><p>按照vue3源码中的结构进行创建，暂时只创建packages文件夹</p><h3 id="引入打包工具"><a href="#引入打包工具" class="headerlink" title="引入打包工具"></a>引入打包工具</h3><p>全局安装rollup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global rollup</span><br></pre></td></tr></table></figure><p>项目创建rollup配置文件rollup.config.js</p><blockquote><p>output中的name暂时不生效</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-node-resolve&#x27;</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-commonjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-typescript&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认导出一个数组,数组中,每个对象都是独立导出项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;packages/vue/src/index.ts&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: [</span><br><span class="line">      <span class="comment">// 导出iife的包(自动执行 适用于script标签)</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&#x27;iife&#x27;</span>,</span><br><span class="line">        <span class="attr">sourcemap</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">file</span>: <span class="string">&#x27;./packages/vue/dist/vue.js&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>, <span class="comment">// 指定打包后的全局变量名（如果被打包代码，没有任何导出，将不存在导出名称）</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="comment">// 让rollup 支持打包ts代码,并可以指定ts代码打包过程中的相关配置</span></span><br><span class="line">      <span class="title function_">typescript</span>(&#123;</span><br><span class="line">        <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 与webpack不同的是,rollup并不知道如何寻找路径以外的依赖,比如node_module中的</span></span><br><span class="line">      <span class="comment">// 帮助程序可以在项目依赖中找到对应文件</span></span><br><span class="line">      <span class="title function_">resolve</span>(),</span><br><span class="line">      <span class="comment">// rollup默认仅支持es6的模块,但是还存在很多基于commonjs的npm模块,这就需要改插件来完成读取工作</span></span><br><span class="line">      <span class="title function_">commonjs</span>(),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>package.json中增加打包命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;rollup -c&quot;</span></span><br></pre></td></tr></table></figure><p>执行打包命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>然后我们在<code>packages/vue/src/index.ts</code>编写测试代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; isArray &#125; from &#x27;@vue/shared&#x27; // ts部分我们配置了paths选项</span><br><span class="line"></span><br><span class="line">console.log(isArray([]))</span><br></pre></td></tr></table></figure><p>不出意外的话，这里肯定是正常打包了，并且会生成sourceMap文件。</p><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><p>package的script中增加一个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;rollup -c -w&quot;</span><br></pre></td></tr></table></figure><p>至此，基础的vue3框架环境我们就搭建完成了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​	我们本次源码的目的是最终完成一个简化版的vue3，我们将他称为vue3-mini，本节我们就开始项目的搭建工作。&lt;/p&gt;
&lt;h3 id=</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（1）vue3 源码解读前的准备工作</title>
    <link href="https://bluedancers.github.io/2023/01/28/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%881%EF%BC%89vue3%20%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://bluedancers.github.io/2023/01/28/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%881%EF%BC%89vue3%20%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</id>
    <published>2023-01-27T16:00:00.000Z</published>
    <updated>2023-02-18T06:22:06.001Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​在22年下半年就有想阅读vue3源码的想法了，但是因为很多不可抗力原因，一直在不断拖延。</p><p>​23年年初下定决心，一定要在半年内完成vue3的核心源码的解读，所有源码的阅读记录我都讲输出到本专栏中，目测可能有10片以上的文章，在输出中，我会尽力保证文字的简单易懂；</p><p>​话不多说，我们直接开始吧！</p><h3 id="下载vue3源码"><a href="#下载vue3源码" class="headerlink" title="下载vue3源码"></a>下载vue3源码</h3><p>仓库地址：<a href="https://github.com/vuejs/core">https://github.com/vuejs/core</a></p><p>本专栏版本为3.2.37，地址：<a href="https://github.com/vuejs/core/releases/tag/v3.2.37">https://github.com/vuejs/core/releases/tag/v3.2.37</a></p><p>克隆仓库地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vuejs/core</span><br></pre></td></tr></table></figure><h3 id="打包与运行vue3源码"><a href="#打包与运行vue3源码" class="headerlink" title="打包与运行vue3源码"></a>打包与运行vue3源码</h3><p><strong>vue3</strong>采用<strong>monorepo</strong>进行包管理，而<strong>monorepo</strong>由<strong>pnpm</strong>提供，所以需要一定要预先安装<strong>pnpm</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pnpm</span><br></pre></td></tr></table></figure><p><strong>pnpm</strong>安装完成后，开始安装<strong>vue3</strong>的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install</span><br></pre></td></tr></table></figure><p>依赖安装完成后，开始<strong>vue3</strong>源码的打包工作，该步骤可能花费较长时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>​打包完成后，将会在<code>packages/vue/dist</code>，路径下生成打包后的vue3的代码，接下来我们去<code>packages/vue/examples</code>官方提供的案例中运行打包后代码，在目标html文件通过<strong>vscode启动live server</strong>，即可完成vue3示例的运行。</p><h3 id="打包vue3源码可能遇到的问题"><a href="#打包vue3源码可能遇到的问题" class="headerlink" title="打包vue3源码可能遇到的问题"></a>打包vue3源码可能遇到的问题</h3><h4 id="Error-Command-failed-with-exit-code-128-git-rev-parse-HEAD"><a href="#Error-Command-failed-with-exit-code-128-git-rev-parse-HEAD" class="headerlink" title="Error: Command failed with exit code 128: git rev-parse HEAD"></a>Error: Command failed with exit code 128: git rev-parse HEAD</h4><p>运行<code>build</code>之后，出现以上错误，原因是因为<strong>build</strong>的过程中，会读取了当前<strong>git</strong>的<strong>commit id</strong>，如果当前目录下没有**.git**文件，相关逻辑就会出错，所以需要注释掉<code>scripts/build.js</code>中以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">line34 const commit = execa.sync(&#x27;git&#x27;, [&#x27;rev-parse&#x27;, &#x27;HEAD&#x27;]).stdout.slice(0, 7)</span><br><span class="line">line97 `COMMIT:$&#123;commit&#125;`</span><br></pre></td></tr></table></figure><p><strong>跳过获取commitID相关逻辑代码，即可正确打包。</strong></p><h4 id="vue3示例中源码未支持SourceMap"><a href="#vue3示例中源码未支持SourceMap" class="headerlink" title="vue3示例中源码未支持SourceMap"></a>vue3示例中源码未支持SourceMap</h4><p>当我们完成上文的打包后，我们运行一个<strong>example</strong>，运行后就会发现一个问题，我们使用Vue3源码是打包后的代码，没有sourceMap，这样是无法调试源码的。</p><p><strong>vue3</strong>源码内提供了打开<strong>sourceMap</strong>的能力，修改打包命令<code>package.json</code>中的line7，即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node scripts/build.js -s</span><br></pre></td></tr></table></figure><p>为什么这个改动呢？我们还要从<code>rollup.config.js</code>入手</p><p>在<code>rollup.config.js</code>的<strong>line94</strong> 我们可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output.sourcemap = !!process.env.SOURCE_MAP // 反向取反，获取其对应的boolean类型的值</span><br></pre></td></tr></table></figure><p>要开启sourcemap首先需要修改process.env.SOURCE_MAP，而这个值来源于<code>scripts/build</code></p><p><code>scripts/build.js</code>中的<strong>line103</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sourceMap ? `SOURCE_MAP:true` : ``</span><br></pre></td></tr></table></figure><p>而这里的sourceMap来源于命令行后缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const args = require(&#x27;minimist&#x27;)(process.argv.slice(2))</span><br><span class="line">const sourceMap = args.sourcemap || args.s</span><br></pre></td></tr></table></figure><p><strong>所以我们只需要在脚本命令后增加<code>-s</code>即可开启sourcemap。</strong></p><p>至此为止，我们便可以在vue源码环境中进行阅读与调试了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​	在22年下半年就有想阅读vue3源码的想法了，但是因为很多不可抗力原因，一直在不断拖延。&lt;/p&gt;
&lt;p&gt;​	23年年初下定决心，一定要在</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（0）vue3源码解读前的准备工作</title>
    <link href="https://bluedancers.github.io/2023/01/26/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%880%EF%BC%89vue3%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://bluedancers.github.io/2023/01/26/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%880%EF%BC%89vue3%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</id>
    <published>2023-01-25T16:00:00.000Z</published>
    <updated>2023-02-18T06:22:01.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令式VS声明式"><a href="#命令式VS声明式" class="headerlink" title="命令式VS声明式"></a>命令式VS声明式</h2><h3 id="命令式"><a href="#命令式" class="headerlink" title="命令式"></a>命令式</h3><p>​我们的前端代码中，大部分都是命令式思维，这种思维与我们现实是具备一定的一致性的，也就是说他不抽象，这也是为什么JavaScript是一门容易入门的语言。</p><p>​比如我们想获取Dom1中的Dom2中的Dom3，并给其赋值“你好”，则我们的流程是</p><ol><li>获取dom1</li><li>获取dom1中的dom2</li><li>获取dom2中的dom3</li><li>给dom3赋值你好</li></ol><p>​命令式编程相对于结果更加强调过程，非常好理解，但是命令式也有他的缺点，那就是一旦命令很长，代码也会非常难以维护。</p><p>​</p><h3 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h3><p>​而声明式则更多关注结果，究竟是什么样的过程，这并不是开发者需要关心。</p><p>​我们依旧使用上面的例子，我们只需要在Dom3中进行<code>&#123;&#123; msg &#125;&#125;</code>声明，然后只关心何时更新其具体的值即可，msg是如何更新，这并不是开发者关心的问题，一般来说这些工作我们都是交给框架进行完成的。</p><h3 id="如何评价？"><a href="#如何评价？" class="headerlink" title="如何评价？"></a>如何评价？</h3><p>评价一个框架的好坏，我们一般从2个角度出发</p><ol><li>性能</li><li>可维护性</li></ol><p>命令式编程是JavaScript自带的编程方式，毫无疑问性能是最好多，声明式则需要我们内部进行一些运算，但是在可维护性的角度上来说，声明式的代码要更加简单、直观，项目越复杂，越能体现声明式的可维护性</p><p>总结一下</p><p>性能：命令式 &gt; 声明式（项目越大，差距越小）</p><p>可维护性：声明式 &gt; 命令式（项目越大，差距越大）</p><h3 id="企业应用的开发与设计原则"><a href="#企业应用的开发与设计原则" class="headerlink" title="企业应用的开发与设计原则"></a>企业应用的开发与设计原则</h3><p>企业开发中，公司关注的无非就是以下2点</p><ul><li>项目成本：就是开发周期的控制，如何更快更稳定的完成开发工作是首要目标</li><li>开发体验：开发体验式开发者的第一诉求（开发、维护难度），但是也符合公司诉求，因为好的开发体验可以加速开发进度</li></ul><p>所以在企业纬度，可维护性是非常看重的一点，所以企业更加愿意使用声明式的开发方式</p><p>但是在性能的角度来说，命令式是一定高于声明式的，难道性能就不重要吗？</p><h3 id="框架的取舍"><a href="#框架的取舍" class="headerlink" title="框架的取舍"></a>框架的取舍</h3><ul><li>在可维护性的角度 声明式 &gt; 命令式</li><li>从性能的角度 命令式 &gt;  声明式</li></ul><p>​所以框架设计上就希望可以兼顾两者，既要声明式，又要尽可能的保持性能不会太差，在性能与可维护性的基础上寻找一个平衡点，这就是框架的核心目标。</p><h3 id="声明式框架的实现要素"><a href="#声明式框架的实现要素" class="headerlink" title="声明式框架的实现要素"></a>声明式框架的实现要素</h3><p>​声明式框架需要提前在html中进行声明，这并不符合html的规范，所以我们的vue中的HTMl代码其实并非真实的代码，而是通过内部的编译后，形成一个真实运行的代码。</p><p>​而这在内部实现上，存在2个步骤</p><pre><code>1. 编译（compiler）1. 运行（runtime） </code></pre><p><img src="https://www.vkcyan.top/Fh1DxEJ7LsjiwdRXo92cGSOxSjJ_.png"></p><h3 id="编译时"><a href="#编译时" class="headerlink" title="编译时"></a>编译时</h3><blockquote><p>将模板代码编译为一种浏览器可读格式</p></blockquote><p>​框架为了开发体验，经常会提供一些更加人性化的写法，这些人性化的写法便于人类阅读，但是不利于机器阅读，所以需要将我们编写的代码编译为机器便于阅读的代码，在vue中，compile函数用于编译template为render函数认识的代码。</p><p>​</p><h3 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h3><blockquote><p>将vnode转变为当前平台实际运行的代码</p></blockquote><p>​在运行时阶段有两个非常重要的函数<strong>h render</strong>，h函数用于生成虚拟dom，也就是vnode，render函数则负责解析与渲染vnode到特定的平台，如果是web平台，则渲染为dom。</p><h3 id="vue为何采用编译时-运行时"><a href="#vue为何采用编译时-运行时" class="headerlink" title="vue为何采用编译时 + 运行时"></a>vue为何采用编译时 + 运行时</h3><ol><li>编译时+运行时的代码实现中，我们规避了直接操作dom，而是引入了vnode的概念，让我们对html的逻辑变成了对js的逻辑，运行速度大大增加</li><li>使用编译时 + 运行时可以将每个流程更加彻底的解耦合，使更多语言可以被编译，可以被运行到更多平台。</li></ol><h3 id="为什么vue3对ts支持更加友好？"><a href="#为什么vue3对ts支持更加友好？" class="headerlink" title="为什么vue3对ts支持更加友好？"></a>为什么vue3对ts支持更加友好？</h3><p><strong>首先vue3对ts支持友好并不是仅仅因为ts写的</strong>，这是一个片面的回答，vue3有用良好的类型校验与格式存在2种原因</p><ol><li>大量编写type类型文件，让vue3+ts代码非常严谨</li><li>api设计的前期就考虑到了这一点，尽管DSL实现类型推到非常麻烦，但是vue团队还是实现了</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;命令式VS声明式&quot;&gt;&lt;a href=&quot;#命令式VS声明式&quot; class=&quot;headerlink&quot; title=&quot;命令式VS声明式&quot;&gt;&lt;/a&gt;命令式VS声明式&lt;/h2&gt;&lt;h3 id=&quot;命令式&quot;&gt;&lt;a href=&quot;#命令式&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue3-配置环境</title>
    <link href="https://bluedancers.github.io/2023/01/19/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/vue3-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>https://bluedancers.github.io/2023/01/19/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/vue3-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</id>
    <published>2023-01-18T16:00:00.000Z</published>
    <updated>2023-01-20T08:54:02.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​使用vue3也有一年半的时间的，原本打算在22年的9月开始源码阅读的，一方面是作为一个前端人应当去了解技术原理，其二也是想通过源码解读来回答一些我心中对vue3的疑惑；但是后面因为公司业务相关事宜，实在是静不下心来完成源码学习的工作；转眼之间又来到了23年春节，赋闲在家，是一个难得的学习的机会，所以打算在2月中旬之前，完成vue3源码的学习与分析工作。那我们废话就不多说了，直接开始吧。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h4 id="vue2与vue3的对比"><a href="#vue2与vue3的对比" class="headerlink" title="vue2与vue3的对比"></a>vue2与vue3的对比</h4><ul><li>对Typescript支持不友好</li><li>大量的api都挂载在Vue的原型上，难以实现tree shaking</li><li>架构上对跨平台开发支持较差</li><li>composition-api 收到react hook的启发</li><li>对虚拟dom进行重写，对模板编译进行优化</li></ul><h4 id="monorepo介绍"><a href="#monorepo介绍" class="headerlink" title="monorepo介绍"></a>monorepo介绍</h4><ul><li>一种将多个package包打包到一个仓库的技术</li></ul><h4 id="monorepo环境搭建"><a href="#monorepo环境搭建" class="headerlink" title="monorepo环境搭建"></a>monorepo环境搭建</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	使用vue3也有一年半的时间的，原本打算在22年的9月开始源码阅读的，一方面是作为一个前端人应当去了解技术原理，其二也是想通过源码解读来</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>一个5年前端er的“前世今生”（前传）</title>
    <link href="https://bluedancers.github.io/2023/01/11/%E6%97%A5%E5%B8%B8/%E4%B8%80%E4%B8%AA5%E5%B9%B4%E5%89%8D%E7%AB%AFer%E7%9A%84%E2%80%9C%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%E2%80%9D%EF%BC%88%E5%89%8D%E4%BC%A0%EF%BC%89/"/>
    <id>https://bluedancers.github.io/2023/01/11/%E6%97%A5%E5%B8%B8/%E4%B8%80%E4%B8%AA5%E5%B9%B4%E5%89%8D%E7%AB%AFer%E7%9A%84%E2%80%9C%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%E2%80%9D%EF%BC%88%E5%89%8D%E4%BC%A0%EF%BC%89/</id>
    <published>2023-01-10T16:00:00.000Z</published>
    <updated>2023-01-13T11:42:06.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​我是一名18年下半年工作的一名前端开发，现在是一家规模不大的公司的<strong>前端组长 + C端产品经理</strong>，今年是我进入前端岗位的第五个年头，做C端产品经理的第一年；22年外部环境较差，技术岗位似乎也不再狂热，也看到了很多同学面对技术岗位的疑问，<strong>前端是否还值得学？</strong>，<strong>我适不适合学编程？</strong>，23年初亦是一个改天换日的节骨眼，借此机会，我也重新审视一下自己。希望我的经历可以为大家答疑解惑，为大家的职业选择提供一些参考。</p><p>​篇幅较长，打算分两篇文章，前传写我是如何一步一步走向前端，以及学习开发的过程给我带来了怎样的改变。</p><p>​对应的是<strong>16年9月到18年6月</strong>，也就是我进入大学之后，进入工作岗位之前的时间。</p><p>​</p><h2 id="2016年"><a href="#2016年" class="headerlink" title="2016年"></a>2016年</h2><p>​我是一名没参加过高考的同学，因为高三期间已经我确定了本科无望，决定在16年春天专科的自主招生中提前走，当时对专业的选择很清晰，因为一直以来特喜欢研究电子产品，对计算机很有兴趣的，所以专业方向很明确。为了求稳，最后选择了相对冷门的“物联网技术与应用”专业，这个专业其实和计算机技术与应用差不多，2016年3月20号考试，300分卷子，考了280分。</p><p>​考试完成后，在家休息了10天，耐不住寂寞，就想出去挣钱，没想到意外开始了长达5个月的打工时光，那时候尚且未成年，9月还要上学，能找到一份有薪水的工作，且一个月有1600（对于当时的我来说，已然是一笔巨款），实属老天保佑，虽然是厂里面。这也是我人生中第一次进厂打工，那段日子，对我后来在大学中坚定学习信念产生的很大的影响，如果读者们兴趣的话，到时候再更新吧，我们回到主线故事。</p><p>​转眼就到了<strong>16年9月</strong>，大学生活正式开始了，大一上学期简直就是一塌糊涂，学校教的第一门编程语言是C，可能天赋不够，第二节课就听不懂了，<strong>那一年基本玩过来的，其实内心已经很焦虑，但是又找不到方向。</strong></p><p>​面对C语言课程，我的表情大概是这样的。</p><p><img src="https://www.vkcyan.top/Fm0KRR607hVdwAyCYhs6qju1nUqu.png"></p><p>​后来到了<strong>16年冬天</strong>，学长给我看了一个表白主题的H5，依稀记得是用canvas实现的，代码那时候肯定是看不懂的，但是还是无师自通的发现了可以用记事本全局替换文字，发现这个秘密后，我打算给刚谈恋爱不久的同学一个惊喜（直男行为，请勿模仿），把里面的名字，替换成我和她的名字，项目里面很多文件，我估摸着用记事本一个一个替换至少花了三小时，后来被人家踹了。大一上学期就这样在学生会、游戏、恋爱，网吧中荒废。。</p><p>​转眼到了<strong>17年春节</strong>，走亲访友下午回来后，一般都很闲，可能真的是太无聊了，竟然想学习一下之前的表白H5，学长告诉我，先学HTML+CSS，于是我就去了慕课网（imooc），学习了HTML+CSS的初级课程。不得不说，慕课网的课程做的很好，简单的同时，又充满了成就感，大约花了7天的时间，认认真真的把课程学完了，那时候还用本子做笔记，可惜本子现在找不到，要不然一定拍出来给大家看看。学习半个月后，我根据当时的全部知识，在2小时内使用Hbuilder临摹了百度的搜索首页，真的是成就感满满啊。</p><h2 id="2017年"><a href="#2017年" class="headerlink" title="2017年"></a>2017年</h2><p>​后来就到了大一的下学期，开始讲Java了，说实话，我也不清楚是老师问题，还是我的问题，我依旧上课听不懂。那时候已经不想荒废时间了，于是我上课就自己临摹网页，比如淘宝PC站点、网易新闻首页，看到啥就临摹啥。也算是认真学习了。还瞎折腾在阿里云上买了轻量级服务器和域名，配合wordpress，搭建个人博客；因为第一次接触阿里云，很多地方都无从下手，全靠自己摸索，一弄就是几个小时，急的我满头大汗，当然最终我还是部署成功了，<strong>回头来看，【折腾的过程】又何尝不是一种财富呢</strong>。</p><p>​随着临摹的网页越来越多，html+css也愈发熟练，我开始进入JavaScript的神奇世界，那大概是<strong>17年5月</strong>。看的是网易云课堂的李炎恢老师的JavaScript教程；虽然课程有年头了，但是老师教的很不错。JavaScript难度比html大多了，最终还是坚持下来了，完成了第一遍学习，到了这个阶段，真的已经学入迷了，<strong>每天晚上我都和狗皮膏药一样跟着准备竞赛的室友找一间没人的办公室学习</strong>。</p><p>​<strong>17年6月下旬</strong>，暑假前夕，在室友的引荐下，终于被竞赛老师注意到了，竞赛老师姓蔡，我们私下都叫他老蔡。</p><p>​我对竞赛是充满期待的，同时也意识到了这是一次非常难得的机会，可惜谈话并不顺利，我和老师非常充分了的说明了我想参加比赛的决心，老师也和我聊了老半天。但是对于比赛这件事，却让我再学习学习，扔了几本书给我打发走了。我记得其中有一本《JavaScript设计模式》，完全看不懂。最后在大学图书馆重新找了本JavaScript入门数据。而进入竞赛组的学生都去北京培训了，我不止一次的表示也想去培训，但是老师委婉的表示，没有前端培训，你暑假自己学学吧，说起来还挺失落的。</p><p>​比赛结束了我才知道，老师当时认定我不是正经人，其一是当时染了黄毛，其二是参加了学生会，其三是没有参加高考。</p><p>​<strong>17年的暑假</strong>，只能回家啦。在之前的工厂继续打工，还好工厂里面可以接触到电脑，一边打工一边继续学习css、临摹网页，暑假就这样过去了，这次的工资后来成了我校内生意的启动资金，帮我赚到了半年的生活费，这个也有空再聊吧。</p><p>​<strong>17年9月</strong>大二开始了，长期的学习已经让我铁了心想走前端路线了。自然不想把时间浪费在课程上了。我和老师请求能不能不上课，去没有人的教室自己学习，我们安卓老师比较好说话，说明情况后，老师让我和安卓竞赛组的学生一起学习，时至今日，依旧想说一声，感谢你，赵老师；</p><p>​大概就这样保持高强度学习到了9月底，机会终于来了，蔡老师的云计算竞赛组中，web + docker位置一直存在空缺，本届没有合适的学生，上一届同学已经功成名不想继续参加了，蔡老师最终还是给了我试一试的机会，<strong>10月7号，正式进入云计算竞赛组。</strong></p><p>​<strong>17年的10月初</strong>，进入实验室前夕，还朋友去南京玩了一圈，逛逛夫子庙、南京博物馆，与自由做一个告别。回来当晚就进入实验室。云计算竞赛组的规矩非常严格，作息时间：<strong>8:30 - 11:00&#x2F;14:00 - 18:00&#x2F;19:00 - 22:30，周一到周日全年无休，堪比互联网行业9107</strong>，但是对我来说这是得之不易的机会，因为兴趣，所以快乐。</p><p>​进来之后，蔡老师就给我定了目标，一个月之内搞定web项目，起初还是有信心的，但看到这个所谓的web项目实际上是java的SSH项目时，我懵了。</p><p>​整个项目web占比并不多，反而java开发量占比巨大，那个阶段我只会HTML CSS JavaScript（ES5），并且仅限静态页面的水平，web前端，HTTP，前后端交互完全不了解，更别说java了，<strong>相当于10级萌新直接挑战60级boss</strong>。初期异常困难，把ajax都写到java里面去了，还不知道为什么编译器报错，急的我天天都睡不着，好在整个10月学长一直对我进行指导，帮助我消化java部分，加上之前前端基础比较扎实，将绝大部分处理逻辑移到了前端侧后，11月初终于把ssh项目全部搞明白了，在实验室留了下来。</p><p>​后面<strong>11月、12月</strong>都是日复一日的不断的学习，也进入了高速学习阶段，linux、docker、mysql、git，都是竞赛的一部分，肯定需要学习的。于此同时，私下也在继续深入前端领域，开始进入前端工程化的世界，学习<strong>Vue</strong>，之前一直写的都是原生或者jquery，编码思维上是面向过程的，刚开始接触Vue，很蒙圈，也很新奇，此外也逐渐进入了大前端领域，包括webpack scss typescript nodejs，还有github npm，琳琅满目的框架与工具，进一步的让我感受到了技术的魅力。</p><p>​当然JavaScript不能放弃，那段时间把冴羽老师的JavaScript深入系列，专题系列认真看了一遍，当时只能看懂40%，但是依旧给了我莫大的帮助，对JavaScript的理解提升了一个档次，还有其他很多老师们的博客以及教学视频，非常感谢前辈们无私的奉献，有你们，技术世界会变得更好。</p><p>​一转眼就放寒假了，我们竞赛组留在在学校，17年冬天很冷，鹅毛大雪，宿舍门口杯口粗的树干都压断了，为了增加学习时间。我也搬到实验室住了；</p><img src="https://www.vkcyan.top/Fh7mSutfrTnszLkF5HrxcJJvco1f.png" style="zoom:33%;" /><p>​这里我重点说一下，我们云计算实验室，听起来很高大上，其实上环境非常差，没有空调，到处都是机房的线，墙壁发黄并且起壳；是我们睡觉 + 吃饭 + 学习的地方，同时还是我们老师的办公室，而且还是顶楼，窗户也关不严，冬天风嗖嗖的，夏天墙壁被晒得发烫又像烤箱。<strong>不过我不在乎，燕雀亦有鸿鹄之志</strong>。我们在过年的前三天回家了，学校还发了坚果之类的慰问品，咱们学校还是很不错的。我家距离学校并不远，都在一个城市，但是这却是我时隔半年，第一次回家；临走前，学长给我丢了一本书《深入理解ES6》，让我过年在家继续学习。</p><p>​动荡的2017年就这么过去了，年初还键盘都敲不利索的学习html css，而年底已经可以做一些独立开发，这一年经历了太多，从对未来的焦虑到对未来的兴奋，从荒废到废寝忘食的学习，，得到了竞赛老师的认可，进入了学习氛围浓厚的实验室，这是独一无二的一年。</p><h2 id="2018年"><a href="#2018年" class="headerlink" title="2018年"></a>2018年</h2><p>​<strong>18年春节</strong>，农历初五返回学校继续学习，在家的一个星期中也没歇着，加紧时间将《深入理解ES6》的全部内容看完，知识点很多，<strong>let、箭头函数、解构赋值、模板字符串、等等</strong>，受益匪浅，ES6是革命性的武器，后面我又断断续续学习 ES6 2年，足可见ES6的重要性，对了，深入ES6主要学习了《你不知道的JavaScript》，我们继续回到主线故事吧。</p><p>​18年上半年只有一个旋律，<strong>职业技能大赛</strong>，<strong>18年3月中旬</strong>进行安徽区的省赛，前三名可以参与5月下旬深圳举办的国赛，蔡老师慎重思考后，决定暂时不让我上，让上一届的学长参加省赛。我可以理解，竞赛老师要为比赛结果负责，而我资历最浅，自然风险最高。最终兄弟们在安徽芜湖的芜湖职业技术学院拿到了<strong>省赛第一名，顺利进入国赛</strong>。</p><p>​在比赛练习的间隙，我依旧保持了不断学习前端技术的习惯，具体学习方法是不断的看技术教程文章与视频、不断的写代码加深理解，那段时间经常看慕课网的付费Vue课程，老师们精彩的课程，在我理解现代前端上起到了很大的作用，另外就是技术胖老师的一些免费大前端课程，非常感谢老师们。同时也开始尝试写博客，进行输出，希望可以像帮助过我的前辈们一样，用我的能力帮助到更多前端人。</p><p>​省赛之后，老师找我聊天，和我说会尽力为我争取国赛上场的资格，对与这件事，我很感动，因为校领导是不希望我上场的，我的学长能力更强，并且已经有一年参赛经验，能抗大旗，<strong>最后是蔡老师和校领导拍桌子，将一起责任担在自己肩上</strong>，才争取到了我国赛上场的机会，这些事情都是比赛结束之后才知道的，因为老师怕我比赛心理压力太大。其实蔡老师没理由这样，他的立场和校领导一样，只是蔡老师想尽自己所能，尽力为每一个追梦赤子带来回报，哪怕承受巨大的外界压力，真乃恩师也。</p><p>​<strong>18年5月下旬</strong>，我们踏着初夏的晴日，带着8个月日日夜夜的努力，踏上了前往深圳的路程。到深圳的时候，已经是半夜2点，第二天8点无论是老师还是学生，依旧准时起床，做比赛前的最后冲刺，艰苦环境打不到意志坚定的人。</p><p>​我们在深圳的宾馆练习到最后一刻；5月26号，正式开始比赛，我们早早的进入了比赛场地，对机器进行最后的调试。</p><p>​真的进场了，到了最后一刻，其实也不紧张了，比赛时间2小时，因为我准备充分，我的题目都非常快速的完成了，拿到了可以拿的所有分数，团队中后期出现一些问题，但是最终都妥善解决了，没记错的话，最后存在小部分题目没有完成，但是这已经非常非常好了。</p><img src="https://www.vkcyan.top/Fk-hsPAXam6uf15klt06j4FvLjIc.png" style="zoom:30%;" /><p>​响铃，比赛结束，键盘敲击声逐渐停歇，人们开始根据引导逐步走出赛场，我的眼眶已经湿润，这一路太辛苦；从小我就爱玩，小学去游戏厅，中学去黑网吧，从来不好好学习，最后上了专科，其实不是不想学，只是因为一直断档，导致无法跟上学习节奏，随着年纪的增加，内心也越来越焦虑与自责，对未来充满迷茫，也愧对父母这么多年的养育之恩，<strong>但那一刻，我成了自己的英雄</strong>。</p><p>​我们小组另外2个人因为没有拿到满分，似乎心情不太好，情绪没有渲染到位，我又把眼泪憋回去了，冷静下来后，仔细分析了一下，因为有一些题目没完成，内心还是比较担忧的，怕辜负了老师和大家这么久的努力。当天晚上成绩出来了，我们在全国88支队伍里面，排名第3，前10名国赛一等奖，我们成功了！。</p><img src="https://www.vkcyan.top/Fm7PwRSnBjGt3ZZDE32zxgscHLCI.png" style="zoom: 30%;" /><p>​成绩出来当晚，原本打算去看看深圳世界之窗，但是因为和校领导喝酒应酬，没去成，至今也没去成，回去的路上蔡老师和我们说了很多，包括强行让我上场和校领导的翻脸，以及这么多年搞比赛，做竞赛指导老师的艰辛；恩师难求，我们亦没有辜负蔡老师的期望。</p><p>​第二天领奖仪式后，我们下午便启程返回合肥，学校专车过来拉横幅、送鲜花给我们拍照纪念，那种感觉还挺奇妙的。后来回到学校实验室后，也许真的是太开心了，紧绷的神经突然松开，似乎陷入到了一段甜蜜梦境，所以啊，那一段记忆怎么也回想不起来了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​我偶尔会想，如果在另一个宇宙，我与蔡老师擦肩而过，是否还能走到前端这条路，会不会毕业就去工厂，亦或者毕业后花费几万元去培训，这些都是更加难走的路线。不过现在我有了答案，无论是何路线，都将走向现在技术岗位。</p><p>​因为决定性的钥匙已经被我捏在手中，那就是<strong>兴趣</strong>。</p><p>​这也是我想送给大家的答案，技术岗位似乎已经不像几年前那样火热，内卷非常严重，大厂开始裁员，互联网这么多年的发展似乎已经走到了尽头，不是这样的，可以独挡一面的开发，始终是稀缺的；但如果是奔着待遇来的，那么大概率拿不到高工资，并且职业上限很有限。<strong>只有兴趣，只有发自性的去做自己认定的事情，无论什么样的风雪都吹不灭的意志，才能带你突破重围，一定要不断思考自己，去探究本我，寻找自己的闪光点，然后不问结果的去做，直到最后一刻。如果历尽千辛万苦依旧失败，不必气馁，因为这一路的历练与坚持，会帮助你下一个的选择，如果成功了，将是人生的转折，就像《肖申克的救赎》中，Andy凭借超凡的信念与毅力，爬过长达500米的下水道，重获自由。</strong></p><p>​前传大概就到这里，后面还有坎坷的<strong>求职、专升本，</strong>那是一段与大学完全不同的经历，篇幅有限，下一篇我们再见吧！👋🏻</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	我是一名18年下半年工作的一名前端开发，现在是一家规模不大的公司的&lt;strong&gt;前端组长 + C端产品经理&lt;/strong&gt;，今年是我</summary>
      
    
    
    
    <category term="日常" scheme="https://bluedancers.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="记录" scheme="https://bluedancers.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>阅读、游历和爱情</title>
    <link href="https://bluedancers.github.io/2023/01/10/%E9%98%85%E8%AF%BB/%E9%98%85%E8%AF%BB%E3%80%81%E6%B8%B8%E5%8E%86%E5%92%8C%E7%88%B1%E6%83%85/"/>
    <id>https://bluedancers.github.io/2023/01/10/%E9%98%85%E8%AF%BB/%E9%98%85%E8%AF%BB%E3%80%81%E6%B8%B8%E5%8E%86%E5%92%8C%E7%88%B1%E6%83%85/</id>
    <published>2023-01-09T16:00:00.000Z</published>
    <updated>2023-01-24T09:54:08.409Z</updated>
    
    <content type="html"><![CDATA[<p>​这是梁永安老师的22年的初版的一本书，也是我第一次了解到老师，读了一部分，说实话，我觉得这本书写的还不错，虽然有些人会说，梁老师对某件事物的评价，都是套公式一样的废话，听了就像没听一样，说实话，我不这么认为，《阅读、游戏和爱情》这本书，有些文字确实存在看似“废话”的句子，但是人间的道理，不就是这么一回事吗，人类不就是需要在外力的引导下与自己和解吗？</p><p>​读了三章，挺不错的，能看得出来，梁老师是一个热爱生活同时存在沉淀的人，他的文字具有让年轻人坐下来看看仅仅阅读的力量。</p><p>好了，废话就说这么多了，下面我会针对每个小节，写一些自己的想法，做一些积累与分享吧！</p><h2 id="自我"><a href="#自我" class="headerlink" title="自我"></a>自我</h2><p>​我们这一代，很多人是没有自我的，因为我们是中国第一代多元社会的经历者，我们大多数人带着传统思维来都这个多元的社会，一下子就陷入了一种迷茫，传统的思想不断受到挑战，甚至开始否定自我；在认识自我之前，我首先想说的是，要认识本我，很多人因为收到了家庭、社会、朋友的影响，开始分不清自我与本我，这可能会让一个人定位迷失，活在自己想象的世界里面，在寻找本我的过程中其实就是寻找自己在这个社会中的定位与坐标。</p><p>​而我们现代社会因为历史阶段的复杂性，一方面我们没能脱离小农经济的影响，一方面我们需要像游牧民族那样快速适应，而中国社会本身有啥一个层叠社会，导致我们国家的价值观不是一元的，是有多重标准的，这都导致年轻去认识自我存在难度。</p><p>​在这样的纷杂的大环境中，年轻人应该如何真正的认识自我呢，梁老师的答案是经历与突破，我们原生家庭带来的准则未必是符合现代的，倒是那些符合，那些又不符合呢？这个就需要当下的年轻人自己去经历，去沉淀，最后形成完整自我，完成对自身的突破。</p><p>​有一句话是，世界上只有一种英雄主义，那就是看清了生活的真相后依然选择热爱他，其实这就是经历并且形成完整自我的结果，这个过程是艰难、挣扎、困惑的。</p><p>​最后，想谈论一点，那就是坚定自己，其实在我这几年的经历里面，我也与都了很多对人格的冲击，从几十年来的固有观念的冲击，甚至对自身的准则产生怀疑，其实这是对自己认识不充分的体现，而现代生活又是如此多元化，坚定自己就显得极其珍贵，这里的坚定自己并不是顽固的坚持自己，而是接受世界，思考，批判，最后形成更加立体的自我。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>​现代社会中，我们大部分人拥有了选择生活的机会，却又没有选择自己想要生活的权利，这有两方面的原因，一是固有观念的影响，二是社会本身的影响，我们现代社会是一个高度分工的社会，并且大家自由寻找的社会，其实这也是残酷的，因为岗位有好有坏，并且每隔10年也许就会发生变化，这样的环境充分的激发的大家的积极性，但是也加深了整个社会的焦虑；</p><p>​有些朋友可能还没有找到让自己满意的工作，其实越是这样的情况下，越是需要大家先去做，去深刻的体验，只有这样才能找到希望，找到自己的目标，如果一份工作你用尽全力依旧无法感受到自己的价值，那时候再带着这份工作带来的宝贵经验，再次出发，未必不是一件好事。</p><p>​关于“摸鱼文化”，梁老师提出了很多很有价值的想法，一方面我们认同这种“亚文化”的出现，年轻人并非不努力，而是无可奈何，并且我们也没有形成让年轻人发泄的文化，最后形成了“躺平文化”，而这主要是两个因素的影响，一是层叠社会，二是我国的发展阶段，我们的父辈在改革开放的大环境下，是激发潜能，能人辈出的年代，他们在这边土地通过自己的打拼获得了回报，大家都看到了努力的价值，另外我国国情目前达到了非常关键的中等收入进入高等收入阶段，整个国家都在奋起前进，但是这样的环境中，我们年轻人是后来者，我们实际上是被裹挟在大环境的，我们从小直接自由主义的熏陶，但是通过了，却发现工作没有自由，所以这一切都是很合理的，年轻人陷入了迷茫，他们嘲笑自己躺平，实际上都是对生活的一种思考，这是积极向上的体现，我相信很多年轻人在挣扎与思考后都会发现，我能发挥自己的能力去让这个世界变得更好，去解决问题、探索答案，却不是仅仅抱怨问题。</p><p>​肯定工作的价值，哪怕是阶段性的重复并且无聊的工作也未必就毫无价值，梁老师给了我们两个建议，第一是保持好奇，现代社会，前路是不可预测的，保持好奇才能更上脚步；第二是走出舒适圈，在新的领域寻找可能性，我们要去感受这个世界，人类，自然，情感，了解的多了，内心才能开阔，见识才能增长。</p><p>​关于最后的斜杠青年，梁老师的观点我非常认同感，可以斜杠，但是不能太斜杠，太斜杠就不算斜杠了，那又如何找到值得斜杠的技能呢，梁老师的答案百分百真诚，百分百坚持的做一件事，如果我们没有到深入的程度，我们就无法值得一件事是否适合我们，哪怕最后结果不好，过程的宝贵经验也是非常重要的财富，帮助我们再次上路。</p><h2 id="人格"><a href="#人格" class="headerlink" title="人格"></a>人格</h2><p>​人心是复杂的，好人与坏人也是界定不清晰的，现代社会的起点是文艺复兴，而文艺复兴最大的要点，就是释放人的本性亦或者说是欲望，人心这个社会是如此的多元化，也是如此的复杂，在这样大环境如何评价一个人格好与坏？这并没有答案，对于新鲜事物的好与坏的评价社会是存在一个缓慢的接纳过程的，就像“涂鸦文化”，早些年是一种反抗运动是坏的，但是几十年后，这成为了一种个性的表达，成了一种象征，我们无法用传统的人本主义去判断在这个“多元”社会发生的事情。</p><p>​而发生在我们身边，对好人的界定依旧是复杂，书中提到了一个例子，我觉得非常经典，《挪威的森林》中，男主是放荡并且热爱自由的人，而女主却将男主当做唯一，这给男主造成了巨大的压力，以至于男主一直做出在女主看来很坏的事情，这是男主对自己自由的捍卫，对男主而言，这是好的，你看不同视角来看，就是不一样的，很难有一个道德标准去评价人的好与坏。</p><p>​那倒是什么是好人呢？书中给了一个我很赞同的答案，身处迷茫的人，因为迷茫意味着思考，意味着自己探测，只有不断思考，接纳这个队员的社会，并去理解他，王阳明曾说：”知行合一，致良知“，做一个不断思考与接纳的好人。</p><h2 id="躺平与幸福"><a href="#躺平与幸福" class="headerlink" title="躺平与幸福"></a>躺平与幸福</h2><p>​躺平是不是坏事？其实这几年，躺平文化，确实是越来越被大众所熟知，我们已经进入了现代社会，自然不可用农业社会的道德标准去看待，农业社会中，日出而作日落而息，生活是规律性的，这自然是不允许躺平，而现代社会是细化分工的，是无规律的，年轻人具备了去躺平的条件，而躺平不是对生活的放弃，而是对迷茫生活的一种思考，对压力的一种宣泄方式，但是因为我们独有的内卷教育体系，我们无法像欧美国家那样，发展出摇滚，朋克文化，形成了我们独有的文化，就是躺平。</p><p>​所以躺平不仅不是年轻人对生活的放弃，而是对现阶段社会的反抗与反思，在躺平中，人们开始思考我追求的究竟是什么，我如何过好我的一生，这都是一个人极其重要的组成部分，去认识到这个世界的高度，与自己的无知，去了解过去发生在这片土地的故事，然后再站起来，追求自己的幸福。</p><p>​以上很多只是我有感而发，并非文中的想法，梁老师想告诉我们，远比我上面描述的要多的多，也更加体系化，总而言之，躺平不是不可取的，不是不被允许的，但是躺平之后要想想，好好体会一下，深入的思考一下，然后继续出发。</p><h2 id="女性文化"><a href="#女性文化" class="headerlink" title="女性文化"></a>女性文化</h2><p>​这是一个很新鲜的话题，因为历史原因，女性在历史上是被压迫的存在，结婚后，就要离开原生家庭成为漂泊的人，成为别人的拥有物，这就需要女性对自己进行封闭，封建社会对女性的异化是非常严重的，也不断的压迫女性追求自由的权利，直到工业革命的出现，劳动力开始稀缺，女性得到走向前台的机会，并且在某些领域做的比男性更加好，从此女性获得了劳动回报“工资”，则意味着女人不再必须依赖男人才能活下去，拥有资本则拥有权利，但是女性文化的进步亦是曲折的，因为早期资本的介入，女性被按照男人的想法塑造出来，最后变成了追逐金钱的游戏，比如经济泡沫之前的日本，年轻女性被资本教育成了“如果没有拥有一个名牌包包就白活”。</p><p>​女性文化真正的追求的是突破对自由的束缚，不仅是行为，更加是观念上的自由，不被封建思想左右，不被小农思维左右，去深度的思考突破不应存在的限制，这一点与追求完善的人格具有一定的相似性。</p><h2 id="谈女性写作"><a href="#谈女性写作" class="headerlink" title="谈女性写作"></a>谈女性写作</h2><p>​女性写作最早最早起源与工业革命，因为工厂进入城市，大量贵族进入乡下，将一些古典贵族特有的习惯带入到乡绅，其中便有读书，女性开始了更大范围的阅读，这位后面女性的创作提供了基础。</p><p>​女性的小说，相对与男性的宏达诗篇，冒险游记，其内容侧重点要更加细腻，以微观与心理描写为主，这也和女性的性格与生产环境存在一定的关系，而这些又深受工业革命背景下女性的喜爱；</p><p>​科学研究表示，女性的表达欲望是男性的三倍，并且更加注重情绪交换，但是这并不代表女性可以更加轻松的成为一名作家，写作是需要天分的，属于艺术范畴，我们一般认为这是一种突破常理的，虽然写作似乎很难，但是我们希望大家去尝试，也许这是自己被埋没的天赋，也许在这个多元世界受到新的启发后，就会产生一些第一五二的想法，去探索、探寻内心世界与思想的解放，其实这不论男女，都应该这样。</p><h2 id="我们为何相爱相杀"><a href="#我们为何相爱相杀" class="headerlink" title="我们为何相爱相杀"></a>我们为何相爱相杀</h2><p>​我倒是觉得，这并不是坏事，工业革命之后，女性开始拥有人权，打破了几千年来的男尊女卑，女性得到了快速的进步，也开始兴起女性权利斗争运行，这在几百年前都是无法想象的事情，正是女性地位的上升，男女的差异才得以释放。</p><p>​那么在现代社会，男女又应该如何相处呢，其实这一点我也经验尚欠，但是我赞成梁永安老师的想法，两个人在一起的价值就是一起创造独一无二的生活，相爱是存量的，而相杀的感情的增量，正是因为勇敢的相杀，彼此才能成长，而不是功利的去看待男女关系。</p><p>​另外还要再多说一点，两个人再一起，不仅要向内走，更加要向外看，寻求更大的精神空间，现代社会是复杂的，多元的，我们现在的生活也非常向美国20世纪20年代，大量的年轻人成了无根的人，人的思想在不同环境中被影响与塑造，产生了很多选择，正是这些选择让人们活的很纠结，很累，这样的环境下，大家都想找一个可以帮助自己减负的人，婚姻就变成了解决问题的方式，但是在剩下的人生中，我们还会遇到比物质匮乏更加难的问题，精神的匮乏，人的异化，这都不是功利可以解决的。</p><p>​最后，我想写单身并没有罪，我们90后身处传统意识与现代社会的交融点，是复杂的一代，一方面我们追求精神自由，一方面却无法摆脱传统思维，我亦是如此，观念上跨不过去，虚妄的恐惧统治了自己，希望后来者积极探索不一样的可能性。</p><h2 id="谈爱情"><a href="#谈爱情" class="headerlink" title="谈爱情"></a>谈爱情</h2><p>​读到这里，我基本确定了，梁老师这本书的基调，是以中国社会、世界文明的研究作为一切观点的基础，然后再延伸到各个方面，爱情、工作、关系。</p><p>​未来的世界一定是更加开源，更加自由的社会，我们身处的时代要比国外更加复杂，我们短短几十年完成了工业化，同时存在农耕时代、工业时代、网络时代，我们身处自由之中，却被旧时紧固，这样的环境下，爱情就变成了一个非常复杂的命题，应该遵循传统，还是跟随内心，究竟是主动出击，还是听从安排，其实问题答案大家心里大部分都有数，现代社会重人权的，自然一切从自身出发，但是历史快速转变的背景下，又有几个可以做到突破镣铐呢。</p><p>​爱一个人，万不可停留在臆想中，然后自以为找到了理想，一旦臆想逐渐破裂，就会形成巨大的悲剧，所以我们已经要走追求美好的勇气，也许要真正的看清自己看清您一半与拒绝一段感情的勇气。</p><p>​最后，跟随本我，用实践去理解爱情，勇敢的去学习与接受这个世界，去打破固有观念的限制，保持学习，培养自己抓住一瞬间的能力。</p><p>​</p><h2 id="谈孤独"><a href="#谈孤独" class="headerlink" title="谈孤独"></a>谈孤独</h2><p>​人类需要孤独，因为孤独，人们才有审视自己的机会，因为孤独人们才有体会到感情的可贵，如果人人都在漂流，又如何去了解自己呢。</p><p>​现今时代确实是一个纠结的时代，一方面是我们受到传统观念中一切寻求安稳与规律的影响，一方面我们接触这几十年改革开放，多元文化的快速进入，很多年轻人在安稳与自由之间举棋不定，因为自由伴随着困难与孤独，而安稳则无趣且不自由，这是两个完全不同的思想。</p><p>​从古至今，所有有思想的人都是孤独的，因为他们具有超乎时代的能力，这对社会其实是一种反叛，自然探索者都是孤独的，而对于现代的年轻人来说，其实孤独并不是坏事，我们身处历史的转折点，需要很多的时间，去看清我们与历史、未来的关系，没有孤独则没有思考，没有思考在无法了解自己，无法审视自己，何谓自己的追求，在这个自由社会，我是否真正的自由了，这都需要我们静下心来，跳出现有框架，去俯瞰自己，一直活着浮华之中，只会让内在空空如也。</p><p>​梁永安老师说，如果一个人完全忍受不了孤独那就出现大问题了，其实我不是很同意这个观点，其实这与很多因素有关，有些人的生长环境已经达到了自己的想象，甚至超越了，这就成了孤独最大的障碍，因为她当下没有理由去抛弃这一切，放弃现有的优待，去从零开始另一种生活无疑是困难的，这是一种生活态度，长远来看，也许懂得越少，活的越快乐呢，人活的成功，深度并不是唯一标准，</p><p>​但是请不要抗拒孤独，不要荒废孤独，孤独其实是奢侈的，可以放心自己的机会不常有，去静静的思考，去阅读，去感受自身独一无二的特性，思想的深度将会帮助你活的更加精彩。</p><h2 id="谈读书"><a href="#谈读书" class="headerlink" title="谈读书"></a>谈读书</h2><p>​书籍是人类智慧的结晶，是独特的人类立足世界的基础，通过书籍，我们得到了和世界、时空对话的机会，年轻人们需要去多读书，去链接自己与世界，梁永安老师对读书有一些更加深层次的理解，就是寻找自己的生命之书，以及书籍具有改变命运的能力，历史中有很多非常伟大的人物，都与书籍有密不可分的关系，例如历史上的拿破仑，他一路增长欧亚大陆都带着《少年维特的烦恼》，这本书给予了拿破仑很大的精神支持，让人们在纷乱的世界中保持清醒。</p><p>​另外梁老师谈到了一点我非常赞同，并且我去做了的事情，就是细读，我读书的速度一直都是慢于平均速度的，因为当我看一本书的时候，我会从，历史背景、作者背景、描述方式，等等多个角度去分析与欣赏一个作品，这让我每看一本书都受益匪浅。</p><p>​第二个要谈的话题是，读书可以激发一个人的灵性，回想儿时，其实我一直都爱读书，作为独生子女一代，我的童年的独孤，是童话故事、拓展阅读，然后是作文范文，在之后是意林，但是因为客观因素，我接触到的书其实并不多；让我第一次感受到“读书”的魅力的书，是一本家喻户晓的书《活着》，我第一次意识到我们的世界并不是一层不变的，这个世界既有广度也有深度，于是书籍成了我重要的信息窗口，读书的同时让我沉浸在自己的反思中，获得更加有价值的提升，这是一件极其美妙的事情。</p><p>​关于如何验证读书的作用，梁老师的观点是“写作”，除了这个观点之外，我还想说另一点，“交谈”能力，我近五年是认知提升，几乎都是读书带给我的，读书，让我的思想有了深度，让我有看到一件事更加底层的能力，以及对同龄人的观点输出能力，所以想验证读书的左右，除了写作，不妨也可以多试试深度交流，可以是你的群友、你的上级，甚至老板，而观点的碰撞，又会产生新的价值，这是非常宝贵的。</p><p>​我们的时代，是适合读书的一代，我们的父辈被工业时代和尚不丰富的物质生活裹挟，并且大多存在兄弟姐妹，他们大部分没有反思自己，没有去读书的几乎，但是我们95后，是非常不同的一代，独生子女+现代社会，让我们每个人都是成了个体，社会关系逐渐变淡，我们有更多时间，和反思自己的机会，如何去反思？我认为读书是最好的选择，书籍让我们有了一场精神交流，去探究生活更加深层次的意义，读书会让我们收获良多。</p><h2 id="谈生活"><a href="#谈生活" class="headerlink" title="谈生活"></a>谈生活</h2><p>​我们这一代年轻人其实是充满疑问的，因为我们是第一届无法循规蹈矩的一代，父母也好，父母的父母也好，他们都是一代继承一代，但是现在这个方法行不通了，我们的生活失去了最基本的框架，在现代社会，原本的价值观已经被打破，我们的生活出现了多样性，失去的同时，我们也获得了我们往上任何一代都不具备的选择权利，所以首当其冲的就是，了解我们可以拥有怎样的生活。</p><p>​上上一代在温饱线挣扎，上一代被住房压住，而我们这一代，已经没有了以上烦恼，我们这一代一定是在文化上有更多的需求，按照梁老师的说话，我们应当打开想象，不要局限在一种日出而作日落而息的生活中，去外面把好的感觉带回来，我们年轻人还有很大的成长空间，多样的生活已经在我们眼前，但是我们还没有积极的去获取，我们的电影，书籍还有很大的市场，自由的文明与中华文明的结合，需要我们去努力场次独一无二的种子，希望大家在生活上可以跳开父辈的惯性生活，走出去看看，也走进自己的类型看看，用好我们独一无二的财富“自由”，一个好的人生，一定是具备深度的，即在岸上，也在水里。</p><h2 id="谈社交"><a href="#谈社交" class="headerlink" title="谈社交"></a>谈社交</h2><p>​我们这一代的人的社交，是不同前人的，我们创造了属于我们的独特文化，例如“宅文化”“躺平文化”，我们引导如何看待现代的社交方式，我们需要谈两个关键因素，家庭 社会，家庭是我们最初的社交场，也会对我们的人生产生非常深远的影响，而我们这一代，大部分都是独生子女，并且父母多半是工业阶段，在家庭感情上投入甚少，所以我们90后其实大部分是孤独的一代；这样环境进入社会，自然也很难形成大规模的社交群体，每个人更加停留在自己的舒适圈中。</p><p>​而到了社会的第二阶段，我们逐渐融入社会，按理说应该会有所突破，但是实际上也没有，因为我们这一代是规模化教育，每个的人经历大致相同，人与人之间很难产生灿烂的火花，于此同时，互联网短视频，游戏的不断发展，助长了断社交是趋势，没有社交，大家依旧可以过得更好，最后再说一个梁老师的观点，就是传统文化对我们的隐形影响，中国自古以来强调自给自足，关起门来过自己的日子，久而久之便失去了社交性，自然我们骨子里蒙蔽了交流的价值，进而形成了我们现代的“宅文化”。</p><p>​梁老师是阅历丰富的人，他凭借敏锐的情感与经历，感受到了社交的价值，并且对中国先进社会的社交气氛有所反思，意识到了人想在这个社会生存下去，就需要与他人交流，通过整个市场将自己和他人连接起来，自有这样多方面才能全面发展，进而构成脱离小家小户的社会心态，我觉得，我们已经快做到了，我们有部分年轻人是有这样的趋势。</p><p>​另外还要说一点，就是无效社交，如果老朋友见面就是吃吃喝喝玩玩，这样是无法形成内心深处的情感交流，这样的社交无法让两个人形成更加深层次的链接，我们便永远无法拉进彼此的距离，需要大家尽可能的去输出与输出，寻找精神上的共鸣。</p><p>​社交是为了生活，从社会发展层面分析，我们的父辈，更多的投入到国家，公共事业之中，每个人都是国家的螺丝钉，个人的精神追求与国家深度绑定，虽然生活很艰苦，但是大部分人是具有一个相对可预见的未来的，但是我们这一代经历了改革开放后，私营企业承担了大部分就业，以前遍地都是的价值感，便需要我们自己去获取，所以现代大部分都是”自私”的，为自己而奋斗，其实这是很合理的事情，现在我们为资本打工，生活确实越来越好了，但是我们的精神也越发贫瘠，这不是社会可以解决的，需要自己我们去探索了，其实有价值的社交，就是探索的一种方式，所以不然让我们离开舒适区，对于土地，与风土人情，与朋友们进行一次更加深层次的交流吧。</p><h2 id="谈修养"><a href="#谈修养" class="headerlink" title="谈修养"></a>谈修养</h2><p>​我们这一代年轻人是很有修养的，我们接受了以往任何一代都没有的通识教育，接受到了来自全球的人文精神的影响，但是我们这一代是挑战巨大的，因为我们不断面临各种异化，资本主义，家庭，在现今社会，道德修养就显得尤为重要，因为你的行为取决于你的修养，这是我们每一个年轻人都需要去深入思考与提升到地方，梁老师给出了他的建议。</p><p>热爱自然 热爱人类 热爱生命这些修养然后我们形成自己的道德标准，</p><p>热爱自然比较好理解，就是认识到人类与自然的关系，然后从本初出发的道德准则</p><p>热爱人类是指我们不可丧失人性，回到人类本身，而不是功利的去看待这个世界。</p><p>热爱生命是人类是很多人难以做到的，包括我自己，我的理解就是对生命要充满敬畏，对自己的人生负责，去思考，去勇敢的做出自己的选择，不进行外界因素的拖鞋，不辜负生命，给自己的定制一个有点难度的目标，去充实自己，也去释放自己的，人就这样语法具有深度，语法理解休养的价值</p><p>除了以上三点，我再说一下我的关键，就是深度阅读能力，在深度阅读的过程中，会逐渐形成属于自己的更加深厚的修养，将会潜移默化的让个人具备超乎同龄人的思想高度。</p><p>​最后是尊重，尊重从何而来，如何评判是否应该被尊重，这些其实是源于个人的修养，这都是相辅相成的关系，坚持自己的价值与原则，判断不应来源外界的肯定与否定，而是源自你的内心。</p><h2 id="谈美"><a href="#谈美" class="headerlink" title="谈美"></a>谈美</h2><p>​什么是美？这其实是一个主观的认识，传统社会的人们认为男人雄壮是美，女人好生育是美，现代自然是另一个看法，还有其他国家呢，我们的审美进入现代社会后从实用化趋向于个人化，只是没有问题的，因为90后一代是开创性的一代，自然社会面的审美发生变化也是很合理的，但是这些都是表面的，</p><p>​所以我们不能从表面去评价什么美，这是片面且经不起推敲的，那对于你我来说，如何去评判何谓真正的美呢，我仔细的思考了梁老师的话，实践就是美，美即使真知；在纷乱复杂的社会中，只有实践才能理解美的含义，充满困惑依旧一往无前难道不是一种美？坚守底线不畏舆论也是一种美，这些都需要在实践中去理解。</p><p>​除了审美 作者也谈了审丑，我理解的审丑，其实即使审视自己，只有我们把那些荒诞的事情摆在我们眼前的时候，我们哈哈大笑的之后，才会发现其实我们是在笑自己，这又何尝不是发现美的途径呢。</p><h2 id="谈艺术"><a href="#谈艺术" class="headerlink" title="谈艺术"></a>谈艺术</h2><p>​何谓艺术？艺术就是打破有限，打破固有，正是如此，所以艺术可以带给人精神的宽度。</p><p>​我一直对这些虚无缥缈的因素很有兴趣，他有什么直接价值吗，甚至于所谓艺术接触的当时，我都无法理解，为何这是艺术？更多成分可能是不明觉厉。</p><p>​作为前端开发工程师，我可以通过编程创造性的解决问题，作为一名产品经理，我亦想创造性的满足用户需求，我们身处世界最前沿，虽然前路一片朦胧，但是却充满机遇，我们也获得了创造的权利，如果我们不把艺术局限于文学、绘画、舞蹈领域，你我未尝不是行动艺术家。</p><p>​我们上一辈的人，其实不理解艺术的价值，中国是一个务实的国家，我们强调传统意义上的价值，强调国有意志。所以我们中国可以产出如此多优秀的管理者，但是且很少做出革命性的事情，而现如今，我们之间意识到了艺术的价值，艺术充满了未知性，并且艺术无法用现在的价值标准去评判，古代大哲学家苏格拉底经常与当代哲学家一起探讨生存的意义，这些事情如果从那时的框架去思考是毫无意义的，但是却给后人带来了深远的影响，启发了一代又一代人，所以无用还是有用，我们再现有价值框架很难平淡，但是我们从历史来看，艺术给人类的发展做出了巨大的贡献。</p><p>​我认为的年轻人学习艺术，我所说的艺术，不仅是是传统艺术，自由、创造对我而言就是艺术，其实就是打破固有观念，关注自身正式的想法，人活着不仅仅只是肉体上的吃吃喝喝，精神也是需要喂养的，父母给了我们肉体活下去的机会，而我们自己则需要给自己活下去的机会。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​起初吸引我的是引言中对生活的描写，只言片语中，我真切感受到了梁老师对生活的热爱与时代的沉淀，这是我们当代年轻人最缺乏的2点，前者的匮乏来源与快速转折的社会，后者则来源与经历与反思。阅读的过程中，我仿佛看到了梁老师坐在我的面前，时而温声细语，时而语重心长，谈论了很多与每个人都息息相关的点，我们不必将梁老师的话作为绝对正确的答案，我们需要聆听与反思，找到自己的答案。</p><p>​通读全文，我认为最底层最重要是以下几点，<strong>自由 热爱 求知</strong>，这三把钥匙，帮助我们打开答案之门，我对梁老师口中的层叠社会概念受益匪浅，我作为一名95后，几乎一直活在现代社会，我本能性的认为这个世界是平面的，并且惯性的只向前看，而没想到，不知古，怎知今。</p><p>​通过层叠社会的发展规律，我们可以在宏观层面解释现如今社会层面的很多现象，再向前一点还是文艺复兴、工业革命，这都是人类历史重要的节点，真正理解了历史，看世界的角度就会高出了很多，也能够解释很多以前的疑虑，受益匪浅，谁说作为一个合订本，内容上存在一切重复，但是作为一名初读者，可以反复理解案例也未必不是一件好事，总体是非常推荐大家阅读的，走进梁老师的理想世界。</p><p><strong>2023-01-24完</strong></p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	这是梁永安老师的22年的初版的一本书，也是我第一次了解到老师，读了一部分，说实话，我觉得这本书写的还不错，虽然有些人会说，梁老师对某件事物的评价，都是套公式一样的废话，听了就像没听一样，说实话，我不这么认为，《阅读、游戏和爱情》这本书，有些文字确实存在看似“废话”的句子</summary>
      
    
    
    
    <category term="阅读-2023" scheme="https://bluedancers.github.io/categories/%E9%98%85%E8%AF%BB-2023/"/>
    
    
    <category term="阅读" scheme="https://bluedancers.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>更加优雅的web端上传文件</title>
    <link href="https://bluedancers.github.io/2023/01/03/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%9B%B4%E5%8A%A0%E4%BC%98%E9%9B%85%E7%9A%84web%E7%AB%AF%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>https://bluedancers.github.io/2023/01/03/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%9B%B4%E5%8A%A0%E4%BC%98%E9%9B%85%E7%9A%84web%E7%AB%AF%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</id>
    <published>2023-01-02T16:00:00.000Z</published>
    <updated>2023-01-11T10:10:19.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​大家一起回想一下，我们在使用Element、Antd的时候，是如何实现图片、文件上传功能。</p><img src="http://www.vkcyan.top/FkmvkuGX712E-A7FFkPMnBuwOUkg.png" style="zoom: 33%;" /><p>​antd就不截图了，使用方法差不多，相信写过相关代码的同学，都会感觉比较繁琐。</p><ul><li>既要改html，还需要写JavaScript，开发效率低。</li><li>组件API复杂，很多时候，并不需要那么多功能，心智负担重。</li><li>等等</li></ul><p>​这时候，写过微信小程序的同学，心里肯定会想，小程序的上传图片API开发体验还可以，逻辑上也很直观，通过事件触发函数，函数内实现上传图片的逻辑，我们web端能否也能拥有类似的开发体验呢？</p><h2 id="npm地址"><a href="#npm地址" class="headerlink" title="npm地址"></a>npm地址</h2><p><strong>以下内容为实现思路以及关键代码，如果您仅仅想使用的话，请直接到<a href="https://www.npmjs.com/package/choose-to-file">npmjs</a></strong></p><p>文档地址：<a href="https://github.com/vkcyan/choose-to-file#readme">https://github.com/vkcyan/choose-to-file#readme</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i choose-to-file</span><br></pre></td></tr></table></figure><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>首先，web端使用文件上传功能，一般使用input标签进行实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">&quot;file&quot;</span> <span class="attr">onchange</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>最后在<code>onchange</code>callback中，获取本次的结果。</p><p>我们会发现，上传文件必须通过特定的标签才能触发。这么来看似乎与函数式相违背。</p><p>但这并不是死路一条，我们可以通过<code>input.click()</code>，自动指定点击事件，核心逻辑就是这样。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul><li>创建<code>input</code>标签</li><li>触发<code>&lt;input /&gt;</code>的<code>click</code>事件</li><li>监听上传结果，并作为结果返回，同时对临时数据进行销毁。</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>实现不与具体框架做绑定，我们基于原生逻辑进行开发，天然兼容web端框架。</p><p><strong>理想使用方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadImg</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">chooseToFile</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;file&#x27;</span>， res)</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来开始实现<code>chooseToFile</code>，首先我们创建input标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">input.<span class="property">type</span> = <span class="string">&#x27;file&#x27;</span></span><br></pre></td></tr></table></figure><p>创建完成后，立刻执行自动点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input.<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><p>然后监听<code>input</code>的<code>onchange</code> callback，并通过<code>Promise resolve</code>进行返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input.<span class="property">onchange</span> = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">removeInput</span>(input) <span class="comment">// 删除dom</span></span><br><span class="line">  <span class="keyword">let</span> &#123; files &#125; = evt.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">resolve</span>(files)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们的核心逻辑就完成了，还是很简单的~</p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="初始化阶段调用无效，并且会弹出警告。"><a href="#初始化阶段调用无效，并且会弹出警告。" class="headerlink" title="初始化阶段调用无效，并且会弹出警告。"></a>初始化阶段调用无效，并且会弹出警告。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File chooser dialog can only be shown with a user activation. </span><br></pre></td></tr></table></figure><p>​这是因为浏览器的安全限制，不允许用户在没有任何”激活行为“的情况下，JavaScript调用窗口，针对此问题官网有详细的说明<a href="https://developer.chrome.com/blog/user-activation/">user-activation</a>。</p><p>​也就是说这是不允许的，大家开发中要规避这种行为。</p><h3 id="无取消上传callback"><a href="#无取消上传callback" class="headerlink" title="无取消上传callback"></a>无取消上传callback</h3><p>​当用户点击文件进行上传的时候，我们可以通过onchange组件进行获取，但是如果用户关闭了上传文件弹窗，或者点击”取消“按钮，input并未提供响应的回调函数。</p><p>​如果无法监听取消上传，逻辑将不知道何时销毁临时标签input，查阅了一些资料后，找到了解决方案。</p><p>​无论用户是否上传，只要当前用户有操作，上传行为结束，都会重新聚焦到body本身，也就会触发全局的focus方法，如果用户上传了文件则在onchange callback中将fileCancle赋值为false；</p><p>​之后focus事件触发的时候则不会进入if内逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileCancle = <span class="literal">true</span> <span class="comment">// 是否未上传文件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&#x27;focus&#x27;</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (fileCancle) &#123;</span><br><span class="line">        <span class="title function_">removeInput</span>(input)</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;upload canceled&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><ul><li><p>调用函数，打开文件管理器</p><ul><li><p>用户上传文件：.then触发，收到上传的文件信息</p></li><li><p>用户取消上传：.catch触发，收到无文件上传错误</p></li></ul></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​功能的实现并不复杂，因为作者工作上vue用的较多，所以可以保证Vue是没问题，理论上React也是没问题的，欢迎大家体验，在使用中有任何问题，请评论区留言。</p><p>​祝你开发愉快。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	大家一起回想一下，我们在使用Element、Antd的时候，是如何实现图片、文件上传功能。&lt;/p&gt;
&lt;img src=&quot;http://w</summary>
      
    
    
    
    <category term="JavaScript-2023" scheme="https://bluedancers.github.io/categories/JavaScript-2023/"/>
    
    
    <category term="JavaScript" scheme="https://bluedancers.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>羊了个羊，怎么突然爆火了？</title>
    <link href="https://bluedancers.github.io/2022/09/19/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E7%88%86%E7%81%AB%EF%BC%8C%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://bluedancers.github.io/2022/09/19/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E7%88%86%E7%81%AB%EF%BC%8C%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2022-09-18T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.079Z</updated>
    
    <content type="html"><![CDATA[<p>中秋节后的几天内，每个互联网人都主动或被动地了解到了一个现象级小游戏<strong>羊了个羊</strong> ，该小游戏在一个星期内火速出圈，高频制造热点话题，火速出现大量梗图，段子，可以说一举一动都引发巨大话题热点。</p><p><img src="https://www.vkcyan.top/image-20220916193952997.png" alt="https://www.vkcyan.top/image-20220916193952997.png"></p><p>当我在各大平台看到这个关键字的时候，我的脑子里面只有一句话“发生了什么？”，直到9月15号铺天盖地的信息才让我意识到了他的火爆程度。</p><h2 id="微信指数-x2F-抖音指数"><a href="#微信指数-x2F-抖音指数" class="headerlink" title="微信指数&#x2F;抖音指数"></a>微信指数&#x2F;抖音指数</h2><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461351.png" alt="Untitled"></p><p>截止9月16号，其热度在微信与抖音都出现了指数级爆炸，同时在微博多次荣登热搜第一，以及多个热点话题，可能还有其他作者不知道的平台，微博 抖音 微信三个国民级app，已经包含了全国几乎所有的网民，这也为他后面的爆火埋下了伏笔，那他又是如何制造话题的呢？</p><h2 id="信息传播"><a href="#信息传播" class="headerlink" title="信息传播"></a>信息传播</h2><p>让我们坐上时间机器，回到中秋之前，羊了个羊刚刚上线的时间</p><p>9-9号 其官方账号在微博发布了一篇推文</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461352.png" alt="Untitled"></p><p>在随后的时间里面，发布了<strong>老师vs学生 打击作弊 服务器崩掉 再次崩掉</strong>等等一连串的话题，而根据微博指数显示13号开始，热点趋势开始疯狂增加，这也就表明9号到13号是第一波启动用户。</p><p>除了微博外，也在抖音进行短视频宣传，可惜抖音趋势无法显示14号之前的数据，但是我们可以推测得出来，其热点也是爆炸增长的。</p><p>而这个过程中其宣传的切入点，<strong>过关率极低，不睡觉也要玩</strong>网友热评等等口碑宣传也起到了早期非常重要的推波助澜作用，让我们来深入分析一下吧。</p><h3 id="价值冲突"><a href="#价值冲突" class="headerlink" title="价值冲突"></a>价值冲突</h3><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461353.png" alt="Untitled"></p><p>在不知道游戏内容的情况下，如何吸引用户进入游戏？羊了个羊在做出符合Z时代用户游戏界面的同时，创造了额外的动机<strong>。狼人VS吸血鬼 五仁VS莲蓉 学生VS老师 省份VS省份</strong>，一旦出现了站队，游戏便不仅仅是游戏，还包含个人价值是否被认同，如果你喜欢吃五仁，看待五仁落于下风，便存在内在动机去参与游戏进行支持，如果你喜欢吃莲蓉，便会进入胜利者的自嗨状态参与游戏寻求碾压对手。</p><p>一只羊一旦进入羊群，他便不仅仅是一只羊，而是羊群的一份子，自然带上了集体荣誉的帽子，排名靠前，自豪 快乐，排名靠后 焦虑 失望 甚至自责，无论如何，这都增加了玩游戏的动机。</p><h3 id="人类是天生的冒险家"><a href="#人类是天生的冒险家" class="headerlink" title="人类是天生的冒险家"></a>人类是天生的冒险家</h3><p>如果我告诉你，这一款消消乐游戏很好玩，音乐很魔性，你可能大概率会说我没兴趣，但是如果我告诉<strong>这个消消乐游戏，你第二关都过不去</strong>，是不是有试一试的冲动了？</p><p>还记得羊了个羊的官方简介吗？</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461354.png" alt="Untitled"></p><p>小游戏以简单休闲出名，很多玩家被极低的通关率所刺激，好奇心促使起主动打开小程序本着试试看的心态进行游戏。教学关卡确实非常简单，甚至会给人一种，后面的关卡也会这么简单的错觉，同时经过教学关卡的无脑通关，玩家也更加确定自己可以成为那0.1%的人。</p><p>结果大家都知道了，第二关的难度极大，在将上层较多的消除后，便进入极难的阶段，而到达这一步玩家已经在不知不觉中付出的大量的时间成本 心智成本，便有了足够的动机去看广告，然后复活，再用完所有道具，然后再次失败。</p><p>而人类天生爱好挑战，<strong>也很难接受与心理预期的巨大差距，也梦想在圈子种脱颖而出</strong>，明明是很简单的三消游戏，我怎么就过不了？便产生了再试一局的心态，<strong>游戏结束会显示今日挑战了多少次</strong>，结果越玩越久，又投入了更大的时间成本 心智成本，便更加不愿意放弃，开始自己和自己较劲（是不是很像拼多多的邀请好友获得100元）。</p><h3 id="情绪引导"><a href="#情绪引导" class="headerlink" title="情绪引导"></a>情绪引导</h3><p>游戏会在很多关键的裂变阶段下足了心思。</p><p>羊了个羊的分享文案几乎都是激发玩家胜负欲的主题加上非常魔性的，符合Z时代风格的分享图，事实证明一种方案确实很管用，在不假思索的情况下，我会有很大的概率去点击，尤其是圈子内的分享，例如室友圈 班级圈 好友圈。</p><p>而游戏通过给予道具的形式引导玩家进行分享，大部分首次观看广告复活的玩家再次面对困难的时候，便有了足够的动机去分享给朋友，这样每个玩家便会产生三次分享。</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461355.png" alt="Untitled"></p><p>在你道具用完，游戏失败的时候同样进行引导，可以说是精准了抓住了用户的心理</p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461356.png" alt="Untitled" style="zoom:33%;" /><p>我们可以看到，除了外部话题营销的爆火之外，产品类的裂变也在玩家的私域圈子内形成最直接的近距离触达，进而引发了指数级别的爆炸。</p><h3 id="小程序的“天然优势”"><a href="#小程序的“天然优势”" class="headerlink" title="小程序的“天然优势”"></a>小程序的“天然优势”</h3><p>小程序触达路径极短，app内打开，无需下载，即点即玩，登录流程短，借助平台能力即可实现一键登录，这些特性显著<strong>降低了使用门槛</strong>。</p><p>推广能力强，传播渠道多，抖音视频，公众号文章，微信视频，用户可能在多个场景下触发。</p><p>开发、上线成本低，没有类似版号的限制</p><p>也难怪国内各大app都做小程序生态，从商业的角度上，小程序的优点实在是太多。</p><h2 id="一些tips"><a href="#一些tips" class="headerlink" title="一些tips"></a>一些tips</h2><h3 id="登门槛效应"><a href="#登门槛效应" class="headerlink" title="登门槛效应"></a>登门槛效应</h3><p>也被称给得寸进尺效应，是指一个人一旦接受了他人一个微不足道的要求，为了避免认知上的不协调，或者想给对方前后一致的印象，就有可能接受更大的要求</p><p>回想羊了个羊的关卡设计中第一关极度简单，随便点点就过了，而来自固有观念的路径依赖，会让用户产生后面也会很简单的想法，结果第二关直接地狱难度，与用户的期望结果出现偏差，此时用户为了证明自己，便会走进死胡同。</p><p>还有用户首次获得道具需要进行分享，之后再想获取道具便需要看视频，相对于看视频必然分享更加低成本，当用户第二次在想获得道具需要他看广告的时候，因为玩家已经有了分享获取道具的动作，这时候再让用户看广告获取道具便不会让用户非常抗拒。</p><h3 id="羊群效应"><a href="#羊群效应" class="headerlink" title="羊群效应"></a>羊群效应</h3><p>经济学里面经常用“羊群”效应来描述经济个体从众跟风心理，同时从众心理也会也会导致盲从，进而陷入骗局或者遭受失败。</p><p>不可否认高难度折叠类三消游戏确实好玩，但是在我看到开发方是非常恶趣味的，完成第二关的就可以加入羊群，成为“领头羊”，如果某位幸运儿过了第二关，那一定会大肆宣传，满足自己的社交情绪，殊不知最大受益者正式游戏方本身，因为你的榜样，更多的人开始盲目跟风，攀比，争取加入盐羊群，于是便开始不断挑战高难度第二关。等到小羊们反应过来的时候，游戏方早已赚得盆满钵满，潇洒离去。</p><p>而游戏的爆火也顺带其“周边产业”的爆火，</p><h3 id="上瘾模型分析"><a href="#上瘾模型分析" class="headerlink" title="上瘾模型分析"></a>上瘾模型分析</h3><p>我们使用经典的上瘾模型进行分析，看看羊了个羊是如何让用户成为”犟驴”的</p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461357.png" alt="Untitled" style="zoom:33%;" /><p><strong>触发</strong></p><p>外部触发：微博 抖音多平台 微信分享文案 切入0.01%过关率 话题营销 好友分享 Z时代画风</p><p>内部触发：人类的好奇心 胜负欲 社交需要</p><p><strong>行动</strong></p><p>行动 &#x3D; 动机 + 行为 + 触发</p><p>动机：好奇心 胜负欲 社交需要 话题PK 三消游戏的趣味性</p><p>行动：年轻群体 + 三线用户具备时间充裕，追求快乐的属性</p><p>触发：小程序无需下载，打开即玩的特点极大地降低了触发难度</p><p><strong>多变的酬赏</strong></p><ol><li>游戏内每次三消带来的正向反馈</li><li>游戏话题热度带来的大量奶头乐信息</li></ol><p><strong>投入</strong></p><ol><li>当前场次，今日已经挑战场次的时间、精力成本的投入</li><li>社交关系的投入</li></ol><p>而投入最终也成为用户下一次触发的原因，亦或者不服输的驴脾气，亦或者身边的社交唤醒，形成了上瘾模型的闭环。</p><p>但是我们可以看到酬赏环节相对薄弱，如果用户一直无法过关，便最终失去兴趣，而话题营销保质期是有限的，并且其游戏内部实现已经被扒了个底朝天，负面消息充斥互联网平台，可以预见在15天内，其流量会跌回他原本的高度（猜测是最高点的10%-20%）。</p><h2 id="目标人群"><a href="#目标人群" class="headerlink" title="目标人群"></a>目标人群</h2><p>作者是9月15号知晓的时候，已经是产品最火的时候了，我们可以发挥想象简单分析一下，作者经过反复的外部触发，才打开小程序，很明显高强度上班族不是他的目标客户，9号到13号的用户才算是他的第一批用户，<strong>而他的第一批用户是时间较多的大学生，工作强度不大的年轻人为主，</strong>这部分人时间多，并且喜爱追热点话题。</p><p>而开发商也精准了抓住了目标用户的特点，从<strong>传播</strong>切入点 <strong>分享</strong>切入点 <strong>游戏画风</strong>等多方面进行针对性开发与策划，保证准确挠到目标用户的痒点，从这个角度看，其实羊了个羊小游戏火起来是存在实力的，不是一个简单的demo产品，大家也不要把他的爆火完全归功于传播营销，产品能力也是其热度持续引爆的原因之一。</p><p>非常遗憾在巨量算数中都无法看到9-13号的用户数据，无法验证结论，只能看看14号之后的数据。</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461358.png" alt="Untitled"></p><p>从巨量数据来看，越年轻的用户越频繁触发关键词，而31-40岁的用户虽然也非常多，但是TGI数值已经非常低，基本是符合我们推测的结论的。</p><h2 id="潮起与潮落"><a href="#潮起与潮落" class="headerlink" title="潮起与潮落"></a>潮起与潮落</h2><p>9月16号是热度的转折点，不夸张的说，三天内（14-16）号，全国几乎所有网民都听说了一个新名词“羊了个羊”，凭借魔性的画风以及超难的第二关而破圈，而热度也伴随争议随之而来，抄袭，游戏无解，骗人看广告还赚了几百万。</p><p>流量的双刃剑已经挥下，这些消息也火速在网上传播开来，也让很多人意识到，原来玩家自己才是“羊”，自然羊群效应带来的用户也火速消失，如果没有这些争议点，也许该游戏可以多保持几天热度，截至19号，微博数据已经下跌了80%-90%，抖音也出现了大幅度的下滑，微信因为社交关系的原因稍微平稳一点，但是可以预见，最多半个月，便会回归到正常的水平，而这几天开发商已经赚的盆满钵满，开始研究下一个热点小游戏。</p><p>而微信 抖音，也等到开发商们为其带来下一个热点。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我们大多数人从小大到接受的是非常正向的教育理念，相信正义一定打败邪恶，游戏一定是给人带来快乐，哪怕类似《茶杯头》《坐在罐子里面的男人》都仅仅是极大的游戏难度，很难，看似无解，但是本质上都是有解的，但是羊了个羊在实现上采用伪真随机的方式进行打乱，导致游戏无法保证一定有解，也就是说很多时候注定是玩不过去的，也就是说就算你是三消游戏的天才，你也要看广告，他这样的目的是利用玩家的不愿放弃沉没成本、渴望社交酬赏、赌徒心理诱导你看广告而已。</p><p>而这样畸形的游戏却能火起来值得我们深思。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;中秋节后的几天内，每个互联网人都主动或被动地了解到了一个现象级小游戏&lt;strong&gt;羊了个羊&lt;/strong&gt; ，该小游戏在一个星期内火速出圈，高频制造热点话题，火速出现大量梗图，段子，可以说一举一动都引发巨大话题热点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://w</summary>
      
    
    
    
    <category term="产品经理" scheme="https://bluedancers.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="产品分析" scheme="https://bluedancers.github.io/tags/%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>vue3相对于vue2做了什么？</title>
    <link href="https://bluedancers.github.io/2022/09/18/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/vue3%E7%9B%B8%E5%AF%B9%E4%BA%8Evue2%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://bluedancers.github.io/2022/09/18/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/vue3%E7%9B%B8%E5%AF%B9%E4%BA%8Evue2%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2022-09-17T16:00:00.000Z</published>
    <updated>2023-01-19T03:01:31.318Z</updated>
    
    <content type="html"><![CDATA[<p>vue3.0更加注重模块上的拆分，在2.0版本中所有vue相关的逻辑都相互耦合在一起，就算仅仅使用vue的一小部分，也需要引入完成的vue，造成了空间的浪费，而vue3则在模块层面上进行拆分，通过tree-shaking实现按需导入，减少用户打包体积，同时每个项目单独管理，单独发布，更加具备稳定性</p><p>​模块拆分成npm包，独立使用，独立发布</p><p>虽然底层出现大量改动，但是顶层设计理念没有发生改变，依旧是声明式架构。</p><h3 id="Monorepo："><a href="#Monorepo：" class="headerlink" title="Monorepo："></a>Monorepo：</h3><ul><li>一个仓库下可以维护多个模块</li><li>方便版本管理，依赖管理，模块间引用。</li></ul><p><img src="https://www.vkcyan.top/image-20220914110426629.png"></p><h2 id="搭建vue3仓库"><a href="#搭建vue3仓库" class="headerlink" title="搭建vue3仓库"></a>搭建vue3仓库</h2><h4 id="通过pnpm初始化项目"><a href="#通过pnpm初始化项目" class="headerlink" title="通过pnpm初始化项目"></a>通过pnpm初始化项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure><h4 id="创建Monorepo仓库环境"><a href="#创建Monorepo仓库环境" class="headerlink" title="创建Monorepo仓库环境"></a>创建Monorepo仓库环境</h4><p>新建文件夹<code>packages</code></p><p>新建文件<code>pnpm-workspace.yaml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">packages:</span><br><span class="line">  - &#x27;packages/*&#x27; // 含义为怕package目录下的每个文件都是一个单独的仓库</span><br></pre></td></tr></table></figure><p>安装公共依赖</p><p>项目根目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install vue -w // w 为workspace-root的缩写，代表该包为全局依赖</span><br></pre></td></tr></table></figure><p>幽灵依赖</p><p>​vue依赖了abc包，我们下载vue的时候abc包就被下载到项目，我们可以直接使用abc，但是vue可能在某一个版本就不再使用abc，这就会造成依赖丢失，这些依赖就被成为幽灵依赖</p><h2 id="生成相关配置信息"><a href="#生成相关配置信息" class="headerlink" title="生成相关配置信息"></a>生成相关配置信息</h2><p>创建packages内部的package环境</p><p>通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm tsc --init</span><br></pre></td></tr></table></figure><p>生成ts默认配置文件</p><p>并且增加配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line"><span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@vue/*&quot;</span>: [<span class="string">&quot;packages/*/src&quot;</span>] <span class="comment">// 引入库关系映射</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现构建流程"><a href="#实现构建流程" class="headerlink" title="实现构建流程"></a>实现构建流程</h2><ol><li>编写每个组件的package.json</li><li>编写公共打包文件，可以打包packages中的所有库</li><li>编写esbuild打包代码</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue3.0更加注重模块上的拆分，在2.0版本中所有vue相关的逻辑都相互耦合在一起，就算仅仅使用vue的一小部分，也需要引入完成的vue，造成了空间的浪费，而vue3则在模块层面上进行拆分，通过tree-shaking实现按需导入，减少用户打包体积，同时每个项目单独管理，</summary>
      
    
    
    
    <category term="Javascript-2022" scheme="https://bluedancers.github.io/categories/Javascript-2022/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
