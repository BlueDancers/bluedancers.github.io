<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vkcya Blog</title>
  
  
  <link href="https://vkcyan.github.io/atom.xml" rel="self"/>
  
  <link href="https://vkcyan.github.io/"/>
  <updated>2022-12-11T14:13:13.867Z</updated>
  <id>https://vkcyan.github.io/</id>
  
  <author>
    <name>vkcyan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2022年终总结</title>
    <link href="https://vkcyan.github.io/2022/12/31/%E6%97%A5%E5%B8%B8/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://vkcyan.github.io/2022/12/31/%E6%97%A5%E5%B8%B8/2022%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2022-12-30T16:00:00.000Z</published>
    <updated>2022-12-11T14:13:13.867Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;</summary>
      
    
    
    
    <category term="日常" scheme="https://vkcyan.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="记录" scheme="https://vkcyan.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="输出" scheme="https://vkcyan.github.io/tags/%E8%BE%93%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>羊了个羊，怎么突然爆火了？</title>
    <link href="https://vkcyan.github.io/2022/09/19/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E7%88%86%E7%81%AB%EF%BC%8C%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://vkcyan.github.io/2022/09/19/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E7%88%86%E7%81%AB%EF%BC%8C%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2022-09-18T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.079Z</updated>
    
    <content type="html"><![CDATA[<p>中秋节后的几天内，每个互联网人都主动或被动地了解到了一个现象级小游戏<strong>羊了个羊</strong> ，该小游戏在一个星期内火速出圈，高频制造热点话题，火速出现大量梗图，段子，可以说一举一动都引发巨大话题热点。</p><p><img src="https://www.vkcyan.top/image-20220916193952997.png" alt="https://www.vkcyan.top/image-20220916193952997.png"></p><p>当我在各大平台看到这个关键字的时候，我的脑子里面只有一句话“发生了什么？”，直到9月15号铺天盖地的信息才让我意识到了他的火爆程度。</p><h2 id="微信指数-x2F-抖音指数"><a href="#微信指数-x2F-抖音指数" class="headerlink" title="微信指数&#x2F;抖音指数"></a>微信指数&#x2F;抖音指数</h2><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461351.png" alt="Untitled"></p><p>截止9月16号，其热度在微信与抖音都出现了指数级爆炸，同时在微博多次荣登热搜第一，以及多个热点话题，可能还有其他作者不知道的平台，微博 抖音 微信三个国民级app，已经包含了全国几乎所有的网民，这也为他后面的爆火埋下了伏笔，那他又是如何制造话题的呢？</p><h2 id="信息传播"><a href="#信息传播" class="headerlink" title="信息传播"></a>信息传播</h2><p>让我们坐上时间机器，回到中秋之前，羊了个羊刚刚上线的时间</p><p>9-9号 其官方账号在微博发布了一篇推文</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461352.png" alt="Untitled"></p><p>在随后的时间里面，发布了<strong>老师vs学生 打击作弊 服务器崩掉 再次崩掉</strong>等等一连串的话题，而根据微博指数显示13号开始，热点趋势开始疯狂增加，这也就表明9号到13号是第一波启动用户。</p><p>除了微博外，也在抖音进行短视频宣传，可惜抖音趋势无法显示14号之前的数据，但是我们可以推测得出来，其热点也是爆炸增长的。</p><p>而这个过程中其宣传的切入点，<strong>过关率极低，不睡觉也要玩</strong>网友热评等等口碑宣传也起到了早期非常重要的推波助澜作用，让我们来深入分析一下吧。</p><h3 id="价值冲突"><a href="#价值冲突" class="headerlink" title="价值冲突"></a>价值冲突</h3><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461353.png" alt="Untitled"></p><p>在不知道游戏内容的情况下，如何吸引用户进入游戏？羊了个羊在做出符合Z时代用户游戏界面的同时，创造了额外的动机<strong>。狼人VS吸血鬼 五仁VS莲蓉 学生VS老师 省份VS省份</strong>，一旦出现了站队，游戏便不仅仅是游戏，还包含个人价值是否被认同，如果你喜欢吃五仁，看待五仁落于下风，便存在内在动机去参与游戏进行支持，如果你喜欢吃莲蓉，便会进入胜利者的自嗨状态参与游戏寻求碾压对手。</p><p>一只羊一旦进入羊群，他便不仅仅是一只羊，而是羊群的一份子，自然带上了集体荣誉的帽子，排名靠前，自豪 快乐，排名靠后 焦虑 失望 甚至自责，无论如何，这都增加了玩游戏的动机。</p><h3 id="人类是天生的冒险家"><a href="#人类是天生的冒险家" class="headerlink" title="人类是天生的冒险家"></a>人类是天生的冒险家</h3><p>如果我告诉你，这一款消消乐游戏很好玩，音乐很魔性，你可能大概率会说我没兴趣，但是如果我告诉<strong>这个消消乐游戏，你第二关都过不去</strong>，是不是有试一试的冲动了？</p><p>还记得羊了个羊的官方简介吗？</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461354.png" alt="Untitled"></p><p>小游戏以简单休闲出名，很多玩家被极低的通关率所刺激，好奇心促使起主动打开小程序本着试试看的心态进行游戏。教学关卡确实非常简单，甚至会给人一种，后面的关卡也会这么简单的错觉，同时经过教学关卡的无脑通关，玩家也更加确定自己可以成为那0.1%的人。</p><p>结果大家都知道了，第二关的难度极大，在将上层较多的消除后，便进入极难的阶段，而到达这一步玩家已经在不知不觉中付出的大量的时间成本 心智成本，便有了足够的动机去看广告，然后复活，再用完所有道具，然后再次失败。</p><p>而人类天生爱好挑战，<strong>也很难接受与心理预期的巨大差距，也梦想在圈子种脱颖而出</strong>，明明是很简单的三消游戏，我怎么就过不了？便产生了再试一局的心态，<strong>游戏结束会显示今日挑战了多少次</strong>，结果越玩越久，又投入了更大的时间成本 心智成本，便更加不愿意放弃，开始自己和自己较劲（是不是很像拼多多的邀请好友获得100元）。</p><h3 id="情绪引导"><a href="#情绪引导" class="headerlink" title="情绪引导"></a>情绪引导</h3><p>游戏会在很多关键的裂变阶段下足了心思。</p><p>羊了个羊的分享文案几乎都是激发玩家胜负欲的主题加上非常魔性的，符合Z时代风格的分享图，事实证明一种方案确实很管用，在不假思索的情况下，我会有很大的概率去点击，尤其是圈子内的分享，例如室友圈 班级圈 好友圈。</p><p>而游戏通过给予道具的形式引导玩家进行分享，大部分首次观看广告复活的玩家再次面对困难的时候，便有了足够的动机去分享给朋友，这样每个玩家便会产生三次分享。</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461355.png" alt="Untitled"></p><p>在你道具用完，游戏失败的时候同样进行引导，可以说是精准了抓住了用户的心理</p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461356.png" alt="Untitled" style="zoom:33%;" /><p>我们可以看到，除了外部话题营销的爆火之外，产品类的裂变也在玩家的私域圈子内形成最直接的近距离触达，进而引发了指数级别的爆炸。</p><h3 id="小程序的“天然优势”"><a href="#小程序的“天然优势”" class="headerlink" title="小程序的“天然优势”"></a>小程序的“天然优势”</h3><p>小程序触达路径极短，app内打开，无需下载，即点即玩，登录流程短，借助平台能力即可实现一键登录，这些特性显著<strong>降低了使用门槛</strong>。</p><p>推广能力强，传播渠道多，抖音视频，公众号文章，微信视频，用户可能在多个场景下触发。</p><p>开发、上线成本低，没有类似版号的限制</p><p>也难怪国内各大app都做小程序生态，从商业的角度上，小程序的优点实在是太多。</p><h2 id="一些tips"><a href="#一些tips" class="headerlink" title="一些tips"></a>一些tips</h2><h3 id="登门槛效应"><a href="#登门槛效应" class="headerlink" title="登门槛效应"></a>登门槛效应</h3><p>也被称给得寸进尺效应，是指一个人一旦接受了他人一个微不足道的要求，为了避免认知上的不协调，或者想给对方前后一致的印象，就有可能接受更大的要求</p><p>回想羊了个羊的关卡设计中第一关极度简单，随便点点就过了，而来自固有观念的路径依赖，会让用户产生后面也会很简单的想法，结果第二关直接地狱难度，与用户的期望结果出现偏差，此时用户为了证明自己，便会走进死胡同。</p><p>还有用户首次获得道具需要进行分享，之后再想获取道具便需要看视频，相对于看视频必然分享更加低成本，当用户第二次在想获得道具需要他看广告的时候，因为玩家已经有了分享获取道具的动作，这时候再让用户看广告获取道具便不会让用户非常抗拒。</p><h3 id="羊群效应"><a href="#羊群效应" class="headerlink" title="羊群效应"></a>羊群效应</h3><p>经济学里面经常用“羊群”效应来描述经济个体从众跟风心理，同时从众心理也会也会导致盲从，进而陷入骗局或者遭受失败。</p><p>不可否认高难度折叠类三消游戏确实好玩，但是在我看到开发方是非常恶趣味的，完成第二关的就可以加入羊群，成为“领头羊”，如果某位幸运儿过了第二关，那一定会大肆宣传，满足自己的社交情绪，殊不知最大受益者正式游戏方本身，因为你的榜样，更多的人开始盲目跟风，攀比，争取加入盐羊群，于是便开始不断挑战高难度第二关。等到小羊们反应过来的时候，游戏方早已赚得盆满钵满，潇洒离去。</p><p>而游戏的爆火也顺带其“周边产业”的爆火，</p><h3 id="上瘾模型分析"><a href="#上瘾模型分析" class="headerlink" title="上瘾模型分析"></a>上瘾模型分析</h3><p>我们使用经典的上瘾模型进行分析，看看羊了个羊是如何让用户成为”犟驴”的</p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461357.png" alt="Untitled" style="zoom:33%;" /><p><strong>触发</strong></p><p>外部触发：微博 抖音多平台 微信分享文案 切入0.01%过关率 话题营销 好友分享 Z时代画风</p><p>内部触发：人类的好奇心 胜负欲 社交需要</p><p><strong>行动</strong></p><p>行动 &#x3D; 动机 + 行为 + 触发</p><p>动机：好奇心 胜负欲 社交需要 话题PK 三消游戏的趣味性</p><p>行动：年轻群体 + 三线用户具备时间充裕，追求快乐的属性</p><p>触发：小程序无需下载，打开即玩的特点极大地降低了触发难度</p><p><strong>多变的酬赏</strong></p><ol><li>游戏内每次三消带来的正向反馈</li><li>游戏话题热度带来的大量奶头乐信息</li></ol><p><strong>投入</strong></p><ol><li>当前场次，今日已经挑战场次的时间、精力成本的投入</li><li>社交关系的投入</li></ol><p>而投入最终也成为用户下一次触发的原因，亦或者不服输的驴脾气，亦或者身边的社交唤醒，形成了上瘾模型的闭环。</p><p>但是我们可以看到酬赏环节相对薄弱，如果用户一直无法过关，便最终失去兴趣，而话题营销保质期是有限的，并且其游戏内部实现已经被扒了个底朝天，负面消息充斥互联网平台，可以预见在15天内，其流量会跌回他原本的高度（猜测是最高点的10%-20%）。</p><h2 id="目标人群"><a href="#目标人群" class="headerlink" title="目标人群"></a>目标人群</h2><p>作者是9月15号知晓的时候，已经是产品最火的时候了，我们可以发挥想象简单分析一下，作者经过反复的外部触发，才打开小程序，很明显高强度上班族不是他的目标客户，9号到13号的用户才算是他的第一批用户，<strong>而他的第一批用户是时间较多的大学生，工作强度不大的年轻人为主，</strong>这部分人时间多，并且喜爱追热点话题。</p><p>而开发商也精准了抓住了目标用户的特点，从<strong>传播</strong>切入点 <strong>分享</strong>切入点 <strong>游戏画风</strong>等多方面进行针对性开发与策划，保证准确挠到目标用户的痒点，从这个角度看，其实羊了个羊小游戏火起来是存在实力的，不是一个简单的demo产品，大家也不要把他的爆火完全归功于传播营销，产品能力也是其热度持续引爆的原因之一。</p><p>非常遗憾在巨量算数中都无法看到9-13号的用户数据，无法验证结论，只能看看14号之后的数据。</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461358.png" alt="Untitled"></p><p>从巨量数据来看，越年轻的用户越频繁触发关键词，而31-40岁的用户虽然也非常多，但是TGI数值已经非常低，基本是符合我们推测的结论的。</p><h2 id="潮起与潮落"><a href="#潮起与潮落" class="headerlink" title="潮起与潮落"></a>潮起与潮落</h2><p>9月16号是热度的转折点，不夸张的说，三天内（14-16）号，全国几乎所有网民都听说了一个新名词“羊了个羊”，凭借魔性的画风以及超难的第二关而破圈，而热度也伴随争议随之而来，抄袭，游戏无解，骗人看广告还赚了几百万。</p><p>流量的双刃剑已经挥下，这些消息也火速在网上传播开来，也让很多人意识到，原来玩家自己才是“羊”，自然羊群效应带来的用户也火速消失，如果没有这些争议点，也许该游戏可以多保持几天热度，截至19号，微博数据已经下跌了80%-90%，抖音也出现了大幅度的下滑，微信因为社交关系的原因稍微平稳一点，但是可以预见，最多半个月，便会回归到正常的水平，而这几天开发商已经赚的盆满钵满，开始研究下一个热点小游戏。</p><p>而微信 抖音，也等到开发商们为其带来下一个热点。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我们大多数人从小大到接受的是非常正向的教育理念，相信正义一定打败邪恶，游戏一定是给人带来快乐，哪怕类似《茶杯头》《坐在罐子里面的男人》都仅仅是极大的游戏难度，很难，看似无解，但是本质上都是有解的，但是羊了个羊在实现上采用伪真随机的方式进行打乱，导致游戏无法保证一定有解，也就是说很多时候注定是玩不过去的，也就是说就算你是三消游戏的天才，你也要看广告，他这样的目的是利用玩家的不愿放弃沉没成本、渴望社交酬赏、赌徒心理诱导你看广告而已。</p><p>而这样畸形的游戏却能火起来值得我们深思。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;中秋节后的几天内，每个互联网人都主动或被动地了解到了一个现象级小游戏&lt;strong&gt;羊了个羊&lt;/strong&gt; ，该小游戏在一个星期内火速出圈，高频制造热点话题，火速出现大量梗图，段子，可以说一举一动都引发巨大话题热点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://w</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="产品分析" scheme="https://vkcyan.github.io/tags/%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>vue3相对于vue2做了什么？</title>
    <link href="https://vkcyan.github.io/2022/09/18/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/vue3%E7%9B%B8%E5%AF%B9%E4%BA%8Evue2%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://vkcyan.github.io/2022/09/18/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/vue3%E7%9B%B8%E5%AF%B9%E4%BA%8Evue2%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2022-09-17T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.083Z</updated>
    
    <content type="html"><![CDATA[<pre><code>vue3.0更加注重模块上的拆分，在2.0版本中所有vue相关的逻辑都相互耦合在一起，就算仅仅使用vue的一小部分，也需要引入完成的vue，造成了空间的浪费，而vue3则在模块层面上进行拆分，通过tree-shaking实现按需导入，减少用户打包体积，同时每个项目单独管理，单独发布，更加具备稳定性</code></pre><p>​模块拆分成npm包，独立使用，独立发布</p><p>虽然底层出现大量改动，但是顶层设计理念没有发生改变，依旧是声明式架构。</p><h3 id="Monorepo："><a href="#Monorepo：" class="headerlink" title="Monorepo："></a>Monorepo：</h3><ul><li>一个仓库下可以维护多个模块</li><li>方便版本管理，依赖管理，模块间引用。</li></ul><p><img src="https://www.vkcyan.top/image-20220914110426629.png"></p><h2 id="搭建vue3仓库"><a href="#搭建vue3仓库" class="headerlink" title="搭建vue3仓库"></a>搭建vue3仓库</h2><h4 id="通过pnpm初始化项目"><a href="#通过pnpm初始化项目" class="headerlink" title="通过pnpm初始化项目"></a>通过pnpm初始化项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure><h4 id="创建Monorepo仓库环境"><a href="#创建Monorepo仓库环境" class="headerlink" title="创建Monorepo仓库环境"></a>创建Monorepo仓库环境</h4><p>新建文件夹<code>packages</code></p><p>新建文件<code>pnpm-workspace.yaml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">packages:</span><br><span class="line">  - &#x27;packages/*&#x27; // 含义为怕package目录下的每个文件都是一个单独的仓库</span><br></pre></td></tr></table></figure><p>安装公共依赖</p><p>项目根目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install vue -w // w 为workspace-root的缩写，代表该包为全局依赖</span><br></pre></td></tr></table></figure><p>幽灵依赖</p><p>​vue依赖了abc包，我们下载vue的时候abc包就被下载到项目，我们可以直接使用abc，但是vue可能在某一个版本就不再使用abc，这就会造成依赖丢失，这些依赖就被成为幽灵依赖</p><h2 id="生成相关配置信息"><a href="#生成相关配置信息" class="headerlink" title="生成相关配置信息"></a>生成相关配置信息</h2><p>创建packages内部的package环境</p><p>通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm tsc --init</span><br></pre></td></tr></table></figure><p>生成ts默认配置文件</p><p>并且增加配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line"><span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@vue/*&quot;</span>: [<span class="string">&quot;packages/*/src&quot;</span>] <span class="comment">// 引入库关系映射</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现构建流程"><a href="#实现构建流程" class="headerlink" title="实现构建流程"></a>实现构建流程</h2><ol><li>编写每个组件的package.json</li><li>编写公共打包文件，可以打包packages中的所有库</li><li>编写esbuild打包代码</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;pre&gt;&lt;code&gt;vue3.0更加注重模块上的拆分，在2.0版本中所有vue相关的逻辑都相互耦合在一起，就算仅仅使用vue的一小部分，也需要引入完成的vue，造成了空间的浪费，而vue3则在模块层面上进行拆分，通过tree-shaking实现按需导入，减少用户打包体积，同时每</summary>
      
    
    
    
    <category term="Javascript-2022" scheme="https://vkcyan.github.io/categories/Javascript-2022/"/>
    
    
    <category term="Vue" scheme="https://vkcyan.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>现代心理学七种观点</title>
    <link href="https://vkcyan.github.io/2022/08/15/%E5%BF%83%E7%90%86%E5%AD%A6%E4%B8%8E%E7%94%9F%E6%B4%BB/%E7%8E%B0%E4%BB%A3%E5%BF%83%E7%90%86%E5%AD%A6%E4%B8%83%E7%A7%8D%E8%A7%82%E7%82%B9/"/>
    <id>https://vkcyan.github.io/2022/08/15/%E5%BF%83%E7%90%86%E5%AD%A6%E4%B8%8E%E7%94%9F%E6%B4%BB/%E7%8E%B0%E4%BB%A3%E5%BF%83%E7%90%86%E5%AD%A6%E4%B8%83%E7%A7%8D%E8%A7%82%E7%82%B9/</id>
    <published>2022-08-14T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="心理动力学观点"><a href="#心理动力学观点" class="headerlink" title="心理动力学观点"></a>心理动力学观点</h3><p>​行为是由强大的内部力量驱使或者激发，这种观点认为，人的行为是由先天的本本和生物驱力产生，而且试图解决个人需要和社会要求之间的冲突。剥夺状态，生理唤起以及冲突都为行动提供了力量，就像煤为蒸汽机供应燃料一样，在这个模型中，当机体的需要得到了满足而驱力降低时，机体就会停止反应。行为的主要目的是降低紧张度。</p><h3 id="行为主义观点"><a href="#行为主义观点" class="headerlink" title="行为主义观点"></a>行为主义观点</h3><p>​寻求理解特定环境刺激如何控制特定类型的行为，首先行为主义者分析向前的环境条件，他们把反应行作为主要研究对象，是为想要理解，预测和控制的行为</p><h3 id="人本主义观点"><a href="#人本主义观点" class="headerlink" title="人本主义观点"></a>人本主义观点</h3><p>​人们既不是如弗洛伊德主义者假设的由强大本能理想所驱使，也不是如行为主义提出的由环境因素所操纵，相反人是具有能动性的生物，本性善良而且具有选择能力。</p><h3 id="认知观点"><a href="#认知观点" class="headerlink" title="认知观点"></a>认知观点</h3><p>​人的思维以及所有的认识过程，注意、思考、记忆和理解。从认识的观点看，人们行动是因为他们思考，而人们思考是因为他们是人类，处于大脑的精细构造</p><h3 id="生物学观点"><a href="#生物学观点" class="headerlink" title="生物学观点"></a>生物学观点</h3><p>​在基因、大脑、神经系统以及内分泌系统中寻找行为的原因，心理现象与社会现象能够最终依据生物化学过程加以理解：及时最复杂的现象，也能够通过被分析或简化为更小、更具体的单位来理解。</p><h3 id="进化论观点"><a href="#进化论观点" class="headerlink" title="进化论观点"></a>进化论观点</h3><p>​能更好的适应环境的有机体，倾向于比那些适应性较差的有机体更能成功的产生后代，经过很多时代，物种朝着更具适应性的方向发展</p><p>​</p><h3 id="社会文化观点"><a href="#社会文化观点" class="headerlink" title="社会文化观点"></a>社会文化观点</h3><p>​研究行为的原因和结果中跨文化差异。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;心理动力学观点&quot;&gt;&lt;a href=&quot;#心理动力学观点&quot; class=&quot;headerlink&quot; title=&quot;心理动力学观点&quot;&gt;&lt;/a&gt;心理动力学观点&lt;/h3&gt;&lt;p&gt;​	行为是由强大的内部力量驱使或者激发，这种观点认为，人的行为是由先天的本本和生物驱力产生，而且试图</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>pinia源码分析【5】- 150行代码实现mini版pinia</title>
    <link href="https://vkcyan.github.io/2022/07/29/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%905%E3%80%91-%20150%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0mini%E7%89%88pinia/"/>
    <id>https://vkcyan.github.io/2022/07/29/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%905%E3%80%91-%20150%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0mini%E7%89%88pinia/</id>
    <published>2022-07-28T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码解析系列文章"><a href="#源码解析系列文章" class="headerlink" title="源码解析系列文章"></a>源码解析系列文章</h2><p><a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a></p><p><a href="https://juejin.cn/post/7117131804229763079">Pinia源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831">pinia源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>别人还在学习使用pinia，看过文章的你直接了解核心原理，无论是实际使用，还是面试都将更上一层楼~</p></blockquote><p>​前段时间完成了对<code>pinia</code>核心源码的解读，因为源码存在难度，也间接到了分析文章具有较高的阅读门槛，为了解决这一问题，可以让更多人参与到pinia的源码阅读中，所以今天给大家带来一个mini版pinia的核心实现，核心代码压缩到100行左右，极大了降低了源码阅读难度。</p><p>​mini版pinia实现了<strong>state，getters，action，$patch，$reset，$dispose</strong>；居家旅行<strong>面试</strong>常备~</p><p>​同时为了降低阅读门槛，方便TypeScript不熟练的同学，本版本全部使用any，话不多说我们直接开始！</p><p>​mini版pinia开源地址：<a href="https://github.com/vkcyan/mini-pinia">https://github.com/vkcyan/mini-pinia</a></p><h2 id="mini版逻辑流程图"><a href="#mini版逻辑流程图" class="headerlink" title="mini版逻辑流程图"></a>mini版逻辑流程图</h2><p><img src="https://www.vkcyan.top/image-20220729092737403.png" alt="image-20220729092737403"></p><h2 id="简单版实现"><a href="#简单版实现" class="headerlink" title="简单版实现"></a>简单版实现</h2><p>我们在代码结构上尽量与正式源码保持一致，仅仅做一些逻辑上的简化与压缩，保证核心实现的质量。</p><h3 id="注册到vue"><a href="#注册到vue" class="headerlink" title="注册到vue"></a>注册到vue</h3><blockquote><p>这里主要参照官方实现，如果不清楚effectScope，请看<a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a>，如果想深入了解createPinia，请看<a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建Pinia</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createPinia</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建响应空间</span></span><br><span class="line">  <span class="keyword">const</span> scope = <span class="title function_">effectScope</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> state = scope.<span class="property">run</span>&lt;<span class="title class_">Ref</span>&lt;<span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">StateTree</span>&gt;&gt;&gt;(<span class="function">() =&gt;</span></span><br><span class="line">    ref&lt;<span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">StateTree</span>&gt;&gt;(&#123;&#125;)</span><br><span class="line">  )!;</span><br><span class="line">  <span class="comment">// markRaw使其不具备响应式</span></span><br><span class="line">  <span class="keyword">const</span> pinia = <span class="title function_">markRaw</span>(&#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app: App</span>) &#123;</span><br><span class="line">      <span class="comment">// 注入pinia</span></span><br><span class="line">      app.<span class="title function_">provide</span>(piniaSymbol, pinia);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">use</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">_s</span>: <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">StoreGeneric</span>&gt;(), <span class="comment">// 保存处理后的store数据全部数据</span></span><br><span class="line">    state, <span class="comment">// 保存可访问state</span></span><br><span class="line">    <span class="attr">_e</span>: scope, <span class="comment">// 相应空间</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> pinia;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现defineStore"><a href="#实现defineStore" class="headerlink" title="实现defineStore"></a>实现defineStore</h3><p>实现一个基础功能的pinia，简单来说，我们只需要做最核心的两件事</p><ol><li><strong>将state转为ref，使其具有响应式</strong></li><li><strong>将getters处理为computed</strong></li><li>如果需要实现$Action还需要对action中所有事件进行拦截处理（mini版不实现$Action）</li></ol><h3 id="defineStore"><a href="#defineStore" class="headerlink" title="defineStore"></a>defineStore</h3><blockquote><p>defineStore中的useStore主要做一些初始化判断，如果是store第一次被使用，则需要初始化，进入createOptionsStore，非第一次直接获取_s中已被处理好的缓存。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建store（仅支持单对象创建方式）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">options</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defineStore</span>(<span class="params">options: &#123;</span></span><br><span class="line"><span class="params">  id: string;</span></span><br><span class="line"><span class="params">  state: any;</span></span><br><span class="line"><span class="params">  getters: any;</span></span><br><span class="line"><span class="params">  actions: any;</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; id &#125; = options;</span><br><span class="line">  <span class="comment">// 实际运行函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentInstance = <span class="title function_">getCurrentInstance</span>(); <span class="comment">// 获取实例</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">pinia</span>: any;</span><br><span class="line">    <span class="keyword">if</span> (currentInstance) &#123;</span><br><span class="line">      pinia = <span class="title function_">inject</span>(piniaSymbol); <span class="comment">// 获取install阶段的pinia</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pinia) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;super-mini-pinia在mian中注册了吗?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pinia.<span class="property">_s</span>.<span class="title function_">has</span>(id)) &#123;</span><br><span class="line">      <span class="comment">// 第一次会不存在，单例模式</span></span><br><span class="line">      <span class="title function_">createOptionsStore</span>(id, options, pinia);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> store = pinia.<span class="property">_s</span>.<span class="title function_">get</span>(id); <span class="comment">// 获取当前store的全部数据</span></span><br><span class="line">    <span class="keyword">return</span> store;</span><br><span class="line">  &#125;</span><br><span class="line">  useStore.<span class="property">$id</span> = id;</span><br><span class="line">  <span class="keyword">return</span> useStore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createOptionsStore"><a href="#createOptionsStore" class="headerlink" title="createOptionsStore"></a>createOptionsStore</h3><blockquote><p><strong>使用ref处理state，使用computed处理getters</strong>，但是此处尚未运行，将setup函数作为参数传值到createSetupStore。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理state getters</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">id</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">options</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">pinia</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createOptionsStore</span>(<span class="params">id: string, options: any, pinia: any</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; state, actions, getters &#125; = options;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    pinia.<span class="property">state</span>.<span class="property">value</span>[id] = state ? <span class="title function_">state</span>() : &#123;&#125;; <span class="comment">// pinia.state是Ref</span></span><br><span class="line">    <span class="keyword">const</span> localState = <span class="title function_">toRefs</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[id]);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">      localState, <span class="comment">// 被ref处理后的state</span></span><br><span class="line">      actions, <span class="comment">// store的action</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(getters || &#123;&#125;).<span class="title function_">reduce</span>(<span class="function">(<span class="params">computedGetters, name</span>) =&gt;</span> &#123;</span><br><span class="line">        computedGetters[name] = <span class="title function_">markRaw</span>(</span><br><span class="line">          <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> store = pinia.<span class="property">_s</span>.<span class="title function_">get</span>(id)!;</span><br><span class="line">            <span class="keyword">return</span> getters![name].<span class="title function_">call</span>(store, store);</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> computedGetters;</span><br><span class="line">      &#125;, &#123;&#125; <span class="keyword">as</span> <span class="title class_">Record</span>&lt;string, <span class="title class_">ComputedRef</span>&gt;) <span class="comment">// 将getters处理为computed</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> store = <span class="title function_">createSetupStore</span>(id, setup, pinia);</span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createSetupStore"><a href="#createSetupStore" class="headerlink" title="createSetupStore"></a>createSetupStore</h3><blockquote><p>​声明当前store的方法，并且运行上一个函数组建的setup函数，其中包含state，getters，我们将其响应式存储到pinia._e中，便于后面对数据变化进行监听，以及统一管理。</p><p>​最后将setup返回的对象与存放方法的partialStore对象进行assign，完成store的全部初始化逻辑，并将其加入_s，下次使用该store则直接取值，最后返回当前store。全部逻辑结束。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理action以及配套API将其加入store</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">$id</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">setup</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">pinia</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetupStore</span>(<span class="params">$id: string, setup: any, pinia: any</span>) &#123;</span><br><span class="line">  <span class="comment">// 所有pinia的methods</span></span><br><span class="line">  <span class="keyword">let</span> partialStore = &#123;</span><br><span class="line">    <span class="attr">_p</span>: pinia,</span><br><span class="line">    $id,</span><br><span class="line">    <span class="attr">$reset</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reset&quot;</span>), <span class="comment">// 该版本不实现</span></span><br><span class="line">    <span class="attr">$patch</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;patch&quot;</span>), <span class="comment">// 该版本不实现</span></span><br><span class="line">    <span class="attr">$onAction</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onAction&quot;</span>), <span class="comment">// 该版本不实现</span></span><br><span class="line">    <span class="attr">$subscribe</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;subscribe&quot;</span>), <span class="comment">// 该版本不实现</span></span><br><span class="line">    <span class="attr">$dispose</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dispose&quot;</span>), <span class="comment">// 该版本不实现</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将effect数据存放如pinia._e、setupStore</span></span><br><span class="line">  <span class="keyword">let</span> scope!: <span class="title class_">EffectScope</span>;</span><br><span class="line">  <span class="keyword">const</span> setupStore = pinia.<span class="property">_e</span>.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    scope = <span class="title function_">effectScope</span>();</span><br><span class="line">    <span class="keyword">return</span> scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> <span class="title function_">setup</span>());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并methods与store</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">store</span>: any = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title function_">toRaw</span>(&#123;&#125;), partialStore, setupStore)</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 将其加入pinia</span></span><br><span class="line">  pinia.<span class="property">_s</span>.<span class="title function_">set</span>($id, store);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​我们nimi版pinia的核心实现便完成了，真实的pinia源码中存在许多边际判断，为了方便阅读作者仅仅保留核心逻辑，剔除ts，简化分叉流程，极大的降低了了解pinia核心实现的门槛。</p><h3 id="增加一些方法"><a href="#增加一些方法" class="headerlink" title="增加一些方法"></a>增加一些方法</h3><blockquote><p>$Action $subscribe因为涉及到<strong>订阅发布模块</strong>，所以代码量比较大，mini版就忽略了，对其原理有兴趣的请看<a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p></blockquote><h4 id="patch"><a href="#patch" class="headerlink" title="$patch"></a>$patch</h4><blockquote><p>将状态补丁应用于当前状态</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$patch</span>(<span class="params">partialStateOrMutator: any</span>) &#123;</span><br><span class="line">    <span class="comment">// mini版实现仅支持传入function</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> partialStateOrMutator === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">partialStateOrMutator</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[$id]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reset"><a href="#reset" class="headerlink" title="$reset"></a>$reset</h4><blockquote><p>初始化state</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="property">$reset</span> = <span class="keyword">function</span> <span class="title function_">$reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newState = state ? <span class="title function_">state</span>() : &#123;&#125;; <span class="comment">// 通过闭包获取最初定义的state</span></span><br><span class="line">    <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">$state: any</span>) =&gt;</span> &#123; <span class="comment">// 借用$patch完成state数据的替换</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>($state, newState);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="dispose"><a href="#dispose" class="headerlink" title="$dispose"></a>$dispose</h4><blockquote><p>停止store的所有effect，并且删除其注册信息</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">    scope.<span class="title function_">stop</span>(); <span class="comment">// effect作用于停止</span></span><br><span class="line">    pinia.<span class="property">_s</span>.<span class="title function_">delete</span>($id); <span class="comment">// 删除effectMap结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h3><p>我们首先将实现的函数导出出去</p><p><code>src\super-mini-pinia\index.ts</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &quot;./createPinia&quot;;</span><br><span class="line">import &#123; defineStore &#125; from &quot;./store&quot;;</span><br><span class="line"></span><br><span class="line">export &#123; createPinia as myCreatePinia, defineStore &#125;;</span><br></pre></td></tr></table></figure><p>在项目中的main.ts进行注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; myCreatePinia &#125; <span class="keyword">from</span> <span class="string">&quot;./super-mini-pinia/index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App-super-mini.vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">myCreatePinia</span>());</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>在页面增加一些测试代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;state.num:&#123;&#123; useStore.num &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;getters.dnum:&#123;&#123; useStore.dnum &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;addNum&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; watchEffect &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useCounterStore &#125; from &quot;./super-mini-store/counter&quot;;</span><br><span class="line"></span><br><span class="line">const useStore = useCounterStore();</span><br><span class="line"></span><br><span class="line">watchEffect(() =&gt; &#123;</span><br><span class="line">  console.log(useStore.num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function addNum() &#123;</span><br><span class="line">  useStore.addNum();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>预期效果</p><ol><li>action正常触发</li><li>num与dnum随着action的触发更新UI</li></ol><h2 id="mini版pinia测试"><a href="#mini版pinia测试" class="headerlink" title="mini版pinia测试"></a>mini版pinia测试</h2><p><img src="https://www.vkcyan.top/59mhu-59cji.gif" alt="59mhu-59cji"></p><p>​ 到此为止，我们便完成了mini版pinia的开发，代码虽少，但是核心逻辑五脏俱全，看懂了mini版pinia便是了解了pinia最核心的实现逻辑。</p><p>​ 我已将mini版pinia的开源到<a href="https://github.com/vkcyan/mini-pinia">github</a>，如果你对pinia核心实现有兴趣，欢迎fock、clone，有任何问题请评论区留言。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​到此为止pinia源码解读系列便全部结束了，总体来说难度不算太大，作者前前后后花费了半个月时间，从零开始搭建环境，逐步深入阅读，读懂pinia源码的也让作者vue3 reactivity核心响应机制，闭包，订阅发布有了更深入的理解，值得阅读；也欢迎大家一起阅读源码，交流讨论~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;源码解析系列文章&quot;&gt;&lt;a href=&quot;#源码解析系列文章&quot; class=&quot;headerlink&quot; title=&quot;源码解析系列文章&quot;&gt;&lt;/a&gt;源码解析系列文章&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/71242790610350</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Pinia" scheme="https://vkcyan.github.io/tags/Pinia/"/>
    
  </entry>
  
  <entry>
    <title>pinia源码分析【3】- defineStore</title>
    <link href="https://vkcyan.github.io/2022/07/18/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%903%E3%80%91-%20defineStore/"/>
    <id>https://vkcyan.github.io/2022/07/18/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%903%E3%80%91-%20defineStore/</id>
    <published>2022-07-17T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏导航"><a href="#专栏导航" class="headerlink" title="专栏导航"></a>专栏导航</h2><p><a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a></p><p><a href="https://juejin.cn/post/7117131804229763079">Pinia源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831">pinia源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章参考源码<code>pinia V2.0.14</code></p><p>源码分析记录：<a href="https://github.com/vkcyan/goto-pinia">https://github.com/vkcyan/goto-pinia</a></p><p>在上一节，我们完成了<code>createPinia</code>相关逻辑的源码解读，了解了<code>pinia</code>注册到<code>vue</code>的阶段具体做了哪些工作，以及<code>pinia</code>核心对象的生成逻辑，本文我们就要一起解读<code>pinia</code>中最重要的方法<strong>defineStore</strong>的实现原理</p><p><img src="https://www.vkcyan.top/image-20220718114312824.png" alt="image-20220718114312824"></p><h2 id="关于store的初始化"><a href="#关于store的初始化" class="headerlink" title="关于store的初始化"></a>关于store的初始化</h2><h3 id="三种创建方法"><a href="#三种创建方法" class="headerlink" title="三种创建方法"></a>三种创建方法</h3><p><img src="https://www.vkcyan.top/image-20220708105442886.png" alt="image-20220708105442886"></p><p>源码中对<code>defineStore</code>的三种类型描述便解释了为何我们可以用以上三种方式创建。</p><p>在<code>defineStore</code>声明中，我们需要传入三种的参数。</p><ul><li><strong>id</strong>：定义<code>store</code>的唯一id，单独传参或者通过<code>options.id</code>进行传参</li><li><strong>options</strong>：具体配置信息包含如果传参是对象，则可以传，<code>state</code>，<code>getters</code>，<code>action</code>，<code>id</code>，例如上图1 2 种声明方式；如果传参是<code>Function</code>，则自主声明变量方法，例如上图第三种声明方式</li><li><strong>storeSetup</strong>：仅限第三种<code>store</code>的声明方式，传入函数</li></ul><h3 id="defineStore执行逻辑"><a href="#defineStore执行逻辑" class="headerlink" title="defineStore执行逻辑"></a>defineStore执行逻辑</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defineStore</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="comment">// <span class="doctag">TODO:</span> add proper types from above</span></span></span><br><span class="line"><span class="params">  idOrOptions: any,</span></span><br><span class="line"><span class="params">  setup?: any,</span></span><br><span class="line"><span class="params">  setupOptions?: any</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">StoreDefinition</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">id</span>: string;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">options</span>: <span class="comment">// ....</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 对三种store创建形式进行兼容。</span></span><br><span class="line">  <span class="keyword">const</span> isSetupStore = <span class="keyword">typeof</span> setup === <span class="string">&quot;function&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> idOrOptions === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    id = idOrOptions;</span><br><span class="line">    options = isSetupStore ? setupOptions : setup;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    options = idOrOptions;</span><br><span class="line">    id = idOrOptions.<span class="property">id</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params">pinia?: Pinia | <span class="literal">null</span>, hot?: StoreGeneric</span>): <span class="title class_">StoreGeneric</span> &#123;</span><br><span class="line">      <span class="comment">//.....下面单独分析</span></span><br><span class="line">  &#125;</span><br><span class="line">  useStore.<span class="property">$id</span> = id;</span><br><span class="line">  <span class="comment">// 将useStore执行结果返回，在该store在使用之前被返回函数不会执行。</span></span><br><span class="line">  <span class="comment">// 所以defineStore早于在Vue种注册pinia也不会出现错误。</span></span><br><span class="line">  <span class="keyword">return</span> useStore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​通过对<code>defineStore</code>的源码大致分析可以得知，只有在<code>store</code>被执行的时候才会运行被返回的函数<code>useStore</code>，<code>useStore</code>才是核心store的创建逻辑，我们接下便要重点分析其实现原理。</p><h2 id="useStore逻辑分析"><a href="#useStore逻辑分析" class="headerlink" title="useStore逻辑分析"></a>useStore逻辑分析</h2><h3 id="useStore之前的逻辑执行顺序"><a href="#useStore之前的逻辑执行顺序" class="headerlink" title="useStore之前的逻辑执行顺序"></a>useStore之前的逻辑执行顺序</h3><p>我们在<code>App.vue</code>中使用我们创建的<code>store</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> useCounter1 = <span class="title function_">useCounterStore1</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>main</code> <code>createPinia</code> <code>defineStore</code> <code>useStore</code>初始化处增加日志</p><p><img src="https://www.vkcyan.top/image-20220708145541424.png" alt="image-20220708145541424"></p><ol><li><code>defineStore</code>初始化</li><li>main.ts -&gt; createPinia -&gt; vue.use -&gt; install（注册逻辑）</li><li>执行useStore（页面逻辑）</li></ol><p>代码执行与我们想象的一致，<code>defineStore</code>是一个函数，会在引用阶段执行，并返回未执行函数<code>useStore</code>，之后便是一连串的初始化，最后是页面中使用<code>pinia</code>而运行的<code>useStore</code>。</p><h3 id="useStore准备工作"><a href="#useStore准备工作" class="headerlink" title="useStore准备工作"></a>useStore准备工作</h3><p><img src="https://www.vkcyan.top/image-20220718112122831.png" alt="image-20220718112122831"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useStore接受两个参数，一个是pinia的实例，另一个与热更新相关。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params">pinia?: Pinia | <span class="literal">null</span>, hot?: StoreGeneric</span>): <span class="title class_">StoreGeneric</span> &#123;</span><br><span class="line"><span class="comment">// 首先会通过getCurrentInstance获取当前组件实例，并处理参数pinia，组件实例可以被正常获取，接下来通过inject(piniaSymbol)获取pinia实例（在install阶段保存）。</span></span><br><span class="line">    <span class="keyword">const</span> currentInstance = <span class="title function_">getCurrentInstance</span>();</span><br><span class="line">    pinia =</span><br><span class="line">        (__TEST__ &amp;&amp; activePinia &amp;&amp; activePinia.<span class="property">_testing</span> ? <span class="literal">null</span> : pinia) ||</span><br><span class="line">        (currentInstance &amp;&amp; <span class="title function_">inject</span>(piniaSymbol));</span><br><span class="line">    <span class="comment">// 设置当前活跃的pinia，如果存在多个pinia实例，方便后续逻辑获取当前pinia实例</span></span><br><span class="line">    <span class="keyword">if</span> (pinia) <span class="title function_">setActivePinia</span>(pinia);</span><br><span class="line">    <span class="comment">// 在dev环境并且全局变量activePinia获取不到当前pinia实例，则说明未全局注册，抛出错误</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; !activePinia) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">            <span class="string">`[🍍]: getActivePinia was called with no active Pinia. Did you forget to install pinia?\n`</span> +</span><br><span class="line">            <span class="string">`\tconst pinia = createPinia()\n`</span> +</span><br><span class="line">            <span class="string">`\tapp.use(pinia)\n`</span> +</span><br><span class="line">            <span class="string">`This will fail in production.`</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取最新pinia，并断言pinia一定存在（猜测这里主要为了断言，此时两个变量就是一个值）</span></span><br><span class="line">    pinia = activePinia!;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="核心store创建"><a href="#核心store创建" class="headerlink" title="核心store创建"></a>核心store创建</h3><p><img src="https://www.vkcyan.top/image-20220718112358146.png" alt="image-20220718112358146"></p><p>​当我们第一次运行<code>store</code>的时候，才会进行相关逻辑的执行，通过单例模式创建，未来再次使用该<code>store</code>将会直接从<code>pinia._s</code>中获取已经被处理过的store并返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params">pinia?: Pinia | <span class="literal">null</span>, hot?: StoreGeneric</span>): <span class="title class_">StoreGeneric</span> &#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="comment">// 如果是第一次使用创建store逻辑，后面则跳过</span></span><br><span class="line">    <span class="keyword">if</span> (!pinia.<span class="property">_s</span>.<span class="title function_">has</span>(id)) &#123;</span><br><span class="line">        <span class="comment">// 如果defineStore的时候第二个参数是函数则为true，否则为false</span></span><br><span class="line">        <span class="keyword">if</span> (isSetupStore) &#123;</span><br><span class="line">            <span class="title function_">createSetupStore</span>(id, setup, options, pinia);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">createOptionsStore</span>(id, options <span class="keyword">as</span> any, pinia);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从_s中获取当前id对应的store信息</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">store</span>: <span class="title class_">StoreGeneric</span> = pinia.<span class="property">_s</span>.<span class="title function_">get</span>(id)!;</span><br><span class="line"><span class="comment">// 这里返回的值实际上就是我们实际获取到值</span></span><br><span class="line">    <span class="keyword">return</span> store <span class="keyword">as</span> any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useStore</code>的大致逻辑比较简单，我们假设第一次使用，并且通过非Function进行传参，进入<strong>createOptionsStore</strong>函数。</p><h3 id="createOptionsStore"><a href="#createOptionsStore" class="headerlink" title="createOptionsStore"></a>createOptionsStore</h3><p><code>defineStore</code>的第二个参数使用非<code>Function</code>进行声明将会走入该逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> createOptionsStore&lt;</span><br><span class="line">  <span class="title class_">Id</span> <span class="keyword">extends</span> string,</span><br><span class="line">  S <span class="keyword">extends</span> <span class="title class_">StateTree</span>,</span><br><span class="line">  G <span class="keyword">extends</span> _GettersTree&lt;S&gt;,</span><br><span class="line">  A <span class="keyword">extends</span> _ActionsTree</span><br><span class="line">&gt;(</span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">Id</span>, <span class="comment">// storeid</span></span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">DefineStoreOptions</span>&lt;<span class="title class_">Id</span>, S, G, A&gt;, <span class="comment">// state action getters</span></span><br><span class="line">  <span class="attr">pinia</span>: <span class="title class_">Pinia</span>, <span class="comment">// 当前store实例</span></span><br><span class="line">  hot?: boolean</span><br><span class="line">): <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; state, actions, getters &#125; = options;</span><br><span class="line">  <span class="comment">// 获取state中是否已经存在该store实例</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">initialState</span>: <span class="title class_">StateTree</span> | <span class="literal">undefined</span> = pinia.<span class="property">state</span>.<span class="property">value</span>[id];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;initialState&quot;</span>, initialState);</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">store</span>: <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!initialState &amp;&amp; (!__DEV__ || !hot)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isVue2) &#123;</span><br><span class="line">        <span class="title function_">set</span>(pinia.<span class="property">state</span>.<span class="property">value</span>, id, state ? <span class="title function_">state</span>() : &#123;&#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将数据存储到state中，因为state时通过ref进行创建</span></span><br><span class="line">        pinia.<span class="property">state</span>.<span class="property">value</span>[id] = state ? <span class="title function_">state</span>() : &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 避免在 pinia.state.value 中创建状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>, pinia.<span class="property">state</span>.<span class="property">value</span>[id]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">22</span>, <span class="title function_">toRefs</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[id]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> localState =</span><br><span class="line">      __DEV__ &amp;&amp; hot</span><br><span class="line">        ? <span class="comment">// 使用 ref() 来解开状态 TODO 中的 refs：检查这是否仍然是必要的</span></span><br><span class="line">          <span class="title function_">toRefs</span>(<span class="title function_">ref</span>(state ? <span class="title function_">state</span>() : &#123;&#125;).<span class="property">value</span>)</span><br><span class="line">        : <span class="title function_">toRefs</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[id]);</span><br><span class="line">    <span class="comment">// 经过toRefs的处理后，localState.xx.value 就等同于给state中的xx赋值</span></span><br><span class="line">    <span class="keyword">let</span> aa = <span class="title function_">assign</span>(</span><br><span class="line">      localState, <span class="comment">// state =&gt; Refs(state)</span></span><br><span class="line">      actions, <span class="comment">//</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(getters || &#123;&#125;).<span class="title function_">reduce</span>(<span class="function">(<span class="params">computedGetters, name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__ &amp;&amp; name <span class="keyword">in</span> localState) &#123;</span><br><span class="line">          <span class="comment">// 如果getters名称与state中的名称相同，则抛出错误</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with &quot;<span class="subst">$&#123;name&#125;</span>&quot; in store &quot;<span class="subst">$&#123;id&#125;</span>&quot;.`</span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// markRow 防止对象被重复代理</span></span><br><span class="line">        computedGetters[name] = <span class="title function_">markRaw</span>(</span><br><span class="line">          <span class="comment">// 使用计算属性处理getters的距离逻辑，并且通过call处理this指向问题</span></span><br><span class="line">          <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">setActivePinia</span>(pinia);</span><br><span class="line">            <span class="comment">// 它是在之前创建的</span></span><br><span class="line">            <span class="keyword">const</span> store = pinia.<span class="property">_s</span>.<span class="title function_">get</span>(id)!;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// allow cross using stores</span></span><br><span class="line">            <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">            <span class="keyword">if</span> (isVue2 &amp;&amp; !store.<span class="property">_r</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// @ts-expect-error</span></span><br><span class="line">            <span class="comment">// return getters![name].call(context, context)</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> avoid reading the getter while assigning with a global variable</span></span><br><span class="line">            <span class="comment">// 将store的this指向getters中实现getters中this的正常使用</span></span><br><span class="line">            <span class="keyword">return</span> getters![name].<span class="title function_">call</span>(store, store);</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> computedGetters;</span><br><span class="line">      &#125;, &#123;&#125; <span class="keyword">as</span> <span class="title class_">Record</span>&lt;string, <span class="title class_">ComputedRef</span>&gt;)</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aa&quot;</span>, aa);</span><br><span class="line">    <span class="keyword">return</span> aa;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用createSetupStore创建store</span></span><br><span class="line">  store = <span class="title function_">createSetupStore</span>(id, setup, options, pinia, hot, <span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 重写$store方法</span></span><br><span class="line">  store.<span class="property">$reset</span> = <span class="keyword">function</span> <span class="title function_">$reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newState = state ? <span class="title function_">state</span>() : &#123;&#125;;</span><br><span class="line">    <span class="comment">// 我们使用补丁将所有更改分组到一个订阅中</span></span><br><span class="line">    <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">$state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">assign</span>($state, newState);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> store <span class="keyword">as</span> any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<code>createOptionsStore</code>函数在获取<code>defineStore</code>声明的数据后，在其内部构建了<strong>setup函数</strong>，该函数将<strong>option形式的state</strong>与<strong>getters</strong>分别转化为<strong>ref</strong>与<strong>computed</strong>，这样就与<strong>setup形式</strong>声明的<code>store</code>保持一致。</p><p>​<strong>这一块代码非常核心，初步解释了为何state具备响应式，为何getters具备computed的效果</strong></p><p>​最后不论是<strong>option</strong>方式创建还是<strong>setup</strong>的形式创建，最后都统一通过<code>createSetupStore</code>完成对<code>store</code>最后的处理</p><h3 id="createSetupStore"><a href="#createSetupStore" class="headerlink" title="createSetupStore"></a>createSetupStore</h3><p><img src="https://www.vkcyan.top/image-20220718112449354.png" alt="image-20220718112449354"></p><blockquote><p>无论是何种<code>defineStore</code>创建方式，最终都会走向<code>createSetupStore</code>，在这里进行最终store的生成以及相关methods的实现。</p><p>注：这一块代码实在是复杂，关于$reset $patch等API，我们放下一个系列文章</p></blockquote><p>​经过<code>createOptionsStore</code>的处理，已经将<strong>option</strong>形式的字段全部转化为<strong>setup</strong>形式进行返回，现在无论何种创建方式，执行此处的setup函数，都会得到同一个结果。</p><p><img src="https://www.vkcyan.top/image-20220715170700824.png" alt="image-20220715170700824"></p><p>以上三种创建方式，内部运行setup函数都会得到如下结果</p><p><img src="https://www.vkcyan.top/image-20220715170712733.png" alt="image-20220715170712733"></p><p>接下来，我们就需要对其数据进行处理，获取到所有变量与方法，并对action通过wrapAction进行处理，便于实现后续的订阅发布模式 methods<code>$Action</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setupStore = pinia.<span class="property">_e</span>.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    scope = <span class="title function_">effectScope</span>();</span><br><span class="line">    <span class="keyword">return</span> scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> <span class="title function_">setup</span>());</span><br><span class="line">&#125;)!;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> setupStore) &#123;</span><br><span class="line">    <span class="keyword">const</span> prop = setupStore[key];</span><br><span class="line">    <span class="keyword">if</span> ((<span class="title function_">isRef</span>(prop) &amp;&amp; !<span class="title function_">isComputed</span>(prop)) || <span class="title function_">isReactive</span>(prop)) &#123;</span><br><span class="line">    <span class="comment">// 如果当前props是ref并且不是计算属性与reative</span></span><br><span class="line">        <span class="keyword">if</span> (!isOptionsStore) &#123;</span><br><span class="line"><span class="comment">// option结构已经在createOptionsStore将其加入pinia</span></span><br><span class="line">            <span class="keyword">if</span> (isVue2) &#123;</span><br><span class="line">                <span class="title function_">set</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[$id], key, prop);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pinia.<span class="property">state</span>.<span class="property">value</span>[$id][key] = prop;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> prop === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果当前函数是fun</span></span><br><span class="line">        <span class="comment">// wrapAction 会将当前prop也就是函数增加调用错误与正常的回调函数</span></span><br><span class="line">        <span class="keyword">const</span> actionValue = __DEV__ &amp;&amp; hot ? prop : <span class="title function_">wrapAction</span>(key, prop);</span><br><span class="line">        <span class="keyword">if</span> (isVue2) &#123;</span><br><span class="line">            <span class="title function_">set</span>(setupStore, key, actionValue);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setupStore[key] = actionValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将其函数同步到optionsForPlugin中</span></span><br><span class="line">        optionsForPlugin.<span class="property">actions</span>[key] = prop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​经过以上逻辑处理后，<code>setupStore</code>方式进行创建的<code>store</code>也会被添加到<code>pinia.state</code>中，而所有的<code>function</code>都会被<code>wrapAction</code>进行包装处理。</p><p>​对state，action进行处理的同时，还需要对当前<code>store</code>可调用API进行处理，例如<code>$reset</code>，<code>$patch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> partialStore = &#123;</span><br><span class="line">    <span class="attr">_p</span>:pinia,</span><br><span class="line">    $id,</span><br><span class="line">    $Action,</span><br><span class="line">    $patch,</span><br><span class="line">    $reset,</span><br><span class="line">    $subscribe,</span><br><span class="line">    $dispose</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">store</span>: <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt; = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title function_">assign</span>(</span><br><span class="line">        __DEV__ &amp;&amp; <span class="variable constant_">IS_CLIENT</span></span><br><span class="line">        ? <span class="comment">// devtools custom properties</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">_customProperties</span>: <span class="title function_">markRaw</span>(<span class="keyword">new</span> <span class="title class_">Set</span>&lt;string&gt;()),</span><br><span class="line">            _hmrPayload,</span><br><span class="line">        &#125;</span><br><span class="line">        : &#123;&#125;,</span><br><span class="line">        partialStore</span><br><span class="line">        <span class="comment">// must be added later</span></span><br><span class="line">        <span class="comment">// setupStore</span></span><br><span class="line">    )</span><br><span class="line">) <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...将变量 方法合并到store中</span></span><br><span class="line"><span class="title function_">assign</span>(<span class="title function_">toRaw</span>(store), setupStore);</span><br></pre></td></tr></table></figure><p>​最终将相关<code>methods</code>与<code>store</code>内的数据进行合并，存储以当前store的id为key的<code>Map</code>中，<code>createSetupStore</code>的核心逻辑便全部结束了。</p><h2 id="useStore后续逻辑"><a href="#useStore后续逻辑" class="headerlink" title="useStore后续逻辑"></a>useStore后续逻辑</h2><p>我们再回到<code>defineStore</code>的逻辑中，获取到<code>createSetupStore</code>最后放入<code>pinia._s</code>中的当前store被处理后的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ....</span></span><br><span class="line"><span class="comment">// 从_s中获取当前store的effect数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">store</span>: <span class="title class_">StoreGeneric</span> = pinia.<span class="property">_s</span>.<span class="title function_">get</span>(id)!;</span><br><span class="line"><span class="comment">// StoreGeneric cannot be casted towards Store</span></span><br><span class="line"><span class="keyword">return</span> store <span class="keyword">as</span> any;</span><br></pre></td></tr></table></figure><p>​最后将通过<code>createSetupStore</code>处理后的数据进行返回，我们便得到了使用当前<code>store</code>中变量与方法以及各种方法的能力。</p><p><img src="https://www.vkcyan.top/312434234234.png" alt="img"></p><h2 id="拓展：为什么访问defineStore创建的state不需要-value"><a href="#拓展：为什么访问defineStore创建的state不需要-value" class="headerlink" title="拓展：为什么访问defineStore创建的state不需要.value"></a>拓展：为什么访问defineStore创建的state不需要.value</h2><p>​通过以上源码分析可以得知，state的数据都会被处理为ref，那访问ref自然是需要.value，但是我们日常使用pinia似乎从来没有.value。</p><p>我们先看一个小例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="string">&quot;24&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = <span class="title function_">reactive</span>(&#123; name, age &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>); <span class="comment">// 张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">age</span>); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><p>​简单来说就是reactive中嵌套ref的时候，修改reactive内的值不需要.value</p><p>​在官方文档（<a href="https://vuejs.org/api/reactivity-core.html#reactive%EF%BC%89%E4%B8%AD%EF%BC%8C%E6%88%91%E4%BB%AC%E4%B9%9F%E8%83%BD%E6%89%BE%E5%88%B0%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E">https://vuejs.org/api/reactivity-core.html#reactive）中，我们也能找到相关说明</a></p><blockquote><p>注意：reactive嵌套ref的场景下，对象与数组格式存在差异，有兴趣可以了解一下</p></blockquote><p><img src="https://www.vkcyan.top/image-20220716160727154.png" alt="image-20220716160727154"></p><p>根据文档我们简单的翻阅了一下vuejs&#x2F;core&#x2F;…&#x2F;baseHandlers.ts的源码</p><blockquote><p>源码地址：<a href="https://github.com/vuejs/core/blob/main/packages/reactivity/src/baseHandlers.ts">https://github.com/vuejs/core/blob/main/packages/reactivity/src/baseHandlers.ts</a></p></blockquote><p><strong>line 131 - 134 createGetter()</strong></p><p><img src="https://www.vkcyan.top/image-20220716161515875.png" alt="image-20220716161515875"></p><p><strong>line 131 - 134 createSetter()</strong></p><p><img src="https://www.vkcyan.top/image-20220716161502977.png" alt="image-20220716161502977"></p><p>可以发现，逻辑实现与文档描述相符。</p><p>最后再看一下我们的pinia源码中<code>createSetupStore</code>函数中<code>store</code>声明的那一段函数，这便解释了为什么在使用<code>pinia</code>修改值、读取值的时候都不需要进行.value了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">store</span>: <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt; = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title function_">assign</span>(</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">      partialStore</span><br><span class="line">    )</span><br><span class="line">  ) <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line"><span class="keyword">if</span> (isVue2) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">assign</span>(<span class="title function_">toRaw</span>(store), setupStore); <span class="comment">// 将defineStore的数据合并到reactive声明的store中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​<strong>虽然代码量比较大，但是核心逻辑就是将state处理为ref，将getters处理为computed，将action进行二次封装，提供若干方法，最后组合对象存储到Pinia中。</strong></p><p>​在这一章我们完成了最核心<code>store</code>创建流程的源码分析，但是通过<code>partialStore</code>增加的方法我们还没有一一了解。下一篇我们将会重点介绍<code>store</code>相关<code>Methods</code>的具体实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏导航&quot;&gt;&lt;a href=&quot;#专栏导航&quot; class=&quot;headerlink&quot; title=&quot;专栏导航&quot;&gt;&lt;/a&gt;专栏导航&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7124279061035089927&quot;&gt;分析pinia源码</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Pinia" scheme="https://vkcyan.github.io/tags/Pinia/"/>
    
  </entry>
  
  <entry>
    <title>pinia源码分析【4】- Pinia Methods</title>
    <link href="https://vkcyan.github.io/2022/07/18/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%904%E3%80%91-%20Pinia%20Methods/"/>
    <id>https://vkcyan.github.io/2022/07/18/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%904%E3%80%91-%20Pinia%20Methods/</id>
    <published>2022-07-17T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏导航"><a href="#专栏导航" class="headerlink" title="专栏导航"></a>专栏导航</h2><p><a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a></p><p><a href="https://juejin.cn/post/7117131804229763079">Pinia源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831">pinia源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章参考源码<code>pinia V2.0.14</code></p><p>源码分析仓库：<a href="https://github.com/vkcyan/goto-pinia">https://github.com/vkcyan/goto-pinia</a></p><p>​上一章我们对<code>store</code>的核心流程完成了分析，从而了解了一个<code>store</code>从定义到被使用的实现逻辑，但是<code>store</code>相关的方法，我们还未进行分析，本章我们就重点分析分析<code>store</code>自带的<strong>Methods</strong></p><h2 id="onAction"><a href="#onAction" class="headerlink" title="$onAction"></a>$onAction</h2><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>订阅当前<code>store</code>所有<code>action</code>操作，每当<code>action</code>被执行的时候，便会触发该方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  useCounter1.$onAction(<span class="function">(<span class="params">option</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; after, onError, args, name, store &#125; = option;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    useCounter1.<span class="property">counter</span>++;</span><br><span class="line">    <span class="comment">// useCounter1.increment();</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h4><p>在<code>$Action</code>声明的地方，我们可以看到一段这样的函数</p><blockquote><p>第一个参数传<code>null</code>，则不改变this指向，并且在后续的调用依旧是该this。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> partialStore = &#123;</span><br><span class="line">  <span class="attr">$onAction</span>: addSubscription.<span class="title function_">bind</span>(<span class="literal">null</span>, actionSubscriptions), <span class="comment">// action事件注册函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​也就是说，当我们使用<code>store.$Action</code>的时候实际上触发的是<code>addSubscription</code>函数，并将我们<code>$Action</code>中的回调函数传入<code>createSetupStore</code>中的<code>actionSubscriptions</code>中，<strong>也就是订阅了我们的callback</strong></p><p>​运行<code>store.$Action</code>后得到了<code>addSubscription</code>方法的返回值<code>removeSubscription</code>方法，让我们可以执行其返回值，达到取消订阅的目的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> addSubscription&lt;T <span class="keyword">extends</span> _Method&gt;(</span><br><span class="line">  <span class="attr">subscriptions</span>: T[], <span class="comment">// createSetupStore中的actionSubscriptions</span></span><br><span class="line">  <span class="attr">callback</span>: T, <span class="comment">// 我们传入的callback</span></span><br><span class="line">  detached?: boolean, <span class="comment">// 如果为true，则该$Action在页面销毁之后依旧有效</span></span><br><span class="line">  <span class="attr">onCleanup</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span> = noop</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// 使用$Action的时候就会触发本函数</span></span><br><span class="line">  subscriptions.<span class="title function_">push</span>(callback)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">removeSubscription</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> idx = subscriptions.<span class="title function_">indexOf</span>(callback)</span><br><span class="line">    <span class="keyword">if</span> (idx &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      subscriptions.<span class="title function_">splice</span>(idx, <span class="number">1</span>)</span><br><span class="line">      <span class="title function_">onCleanup</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!detached &amp;&amp; <span class="title function_">getCurrentInstance</span>()) &#123;</span><br><span class="line">    <span class="comment">// 如果detached参数不存在，则在当前页面卸载的时候，去除该订阅事件</span></span><br><span class="line">    <span class="title function_">onUnmounted</span>(removeSubscription)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> removeSubscription</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="触发订阅"><a href="#触发订阅" class="headerlink" title="触发订阅"></a>触发订阅</h4><p>​在<code>useStore</code>中对<code>action</code>进行处理的逻辑中，存在这样的一段代码，这段代码中的hot在正常使用的业务场景下都是undefined，所以会走后面的逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actionValue =  <span class="title function_">wrapAction</span>(key, prop) <span class="comment">// hot为undefined的情况下</span></span><br></pre></td></tr></table></figure><p><img src="https://www.vkcyan.top/image-20220720184122095.png" alt="image-20220720184122095"></p><p>​所有的<code>action</code>在初始化阶段都会被<code>wrapAction</code>方法拦截，也就代表我们执行<code>action</code>的时候，实际上执行的是<code>wrapAction</code>函数，那就让我们就看看，在<code>wrapAction</code>中究竟发生了什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 包装一个action来处理订阅</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> <span class="variable">name</span> - store的名称</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> <span class="variable">action</span> - 需要被包装的action</span></span><br><span class="line"><span class="comment">* <span class="doctag">@returns</span> a wrapped action to handle subscriptions</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wrapAction</span>(<span class="params">name: string, action: _Method</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="variable language_">this</span>: any</span>) &#123;</span><br><span class="line">        <span class="title function_">setActivePinia</span>(pinia);</span><br><span class="line">        <span class="comment">// 获取当前action的参数</span></span><br><span class="line">        <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="attr">afterCallbackList</span>: <span class="title class_">Array</span>&lt;<span class="function">(<span class="params">resolvedReturn: any</span>) =&gt;</span> any&gt; = [];</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">onErrorCallbackList</span>: <span class="title class_">Array</span>&lt;<span class="function">(<span class="params">error: unknown</span>) =&gt;</span> unknown&gt; = [];</span><br><span class="line">        <span class="comment">// 声明after方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">after</span>(<span class="params">callback: _ArrayType&lt;<span class="keyword">typeof</span> afterCallbackList&gt;</span>) &#123;</span><br><span class="line">            <span class="comment">// 将after的call放入list中</span></span><br><span class="line">            afterCallbackList.<span class="title function_">push</span>(callback);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 声明error方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">onError</span>(<span class="params">callback: _ArrayType&lt;<span class="keyword">typeof</span> onErrorCallbackList&gt;</span>) &#123;</span><br><span class="line">            onErrorCallbackList.<span class="title function_">push</span>(callback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @ts-expect-error</span></span><br><span class="line">        <span class="comment">// 触发actionSubscriptions中订阅的store.$Action的全部回调函数,并将参数传入</span></span><br><span class="line">        <span class="comment">// 此时store.$Action的callback已经执行,但是after onError的回调函数尚未执行</span></span><br><span class="line">        <span class="title function_">triggerSubscriptions</span>(actionSubscriptions, &#123;</span><br><span class="line">            args,</span><br><span class="line">            name,</span><br><span class="line">            store,</span><br><span class="line">            after,</span><br><span class="line">            onError,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">ret</span>: any; <span class="comment">// ret为action的返回值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ret = action.<span class="title function_">apply</span>(<span class="variable language_">this</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">$id</span> === $id ? <span class="variable language_">this</span> : store, args);</span><br><span class="line">            <span class="comment">// handle sync errors</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="comment">// 如果action执行出错,则直接执行错误回调,终止函数</span></span><br><span class="line">            <span class="title function_">triggerSubscriptions</span>(onErrorCallbackList, error);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果ret是promise,则当前结果未知，会通过上方的try catch，但是会在action结尾增加then catch进行结果捕捉</span></span><br><span class="line">        <span class="keyword">if</span> (ret <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">triggerSubscriptions</span>(afterCallbackList, value);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">triggerSubscriptions</span>(onErrorCallbackList, error);</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// allow the afterCallback to override the return value</span></span><br><span class="line">        <span class="comment">// 如果try catch 通过，并且当前action不是Promise，则逻辑进行到此处，触发所有 触发真正的after函数，并将当前action的返回值传入其中，至此完成对action触发的监听。</span></span><br><span class="line">        <span class="title function_">triggerSubscriptions</span>(afterCallbackList, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​之前在<code>$Action</code>中的回调函数在此处发挥了作用，每当一个<code>action</code>触发的都会遍历之前订阅的所有<code>$Action</code>的回调函数，其内部执行<code>action</code>方法，<code>action</code>执行正常在触发<code>after</code>的<code>callback</code>，执行异常则触发<code>onError</code>的<code>callback</code>。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://www.vkcyan.top/image-20220721143852948.png" alt="image-20220721143852948"></p><p>本质上来说$Action就是一个订阅发布模式。</p><p><strong>$Action 订阅者</strong></p><p><strong>store.action 发布者</strong></p><p><strong>actionSubscriptions - 事件注册中心</strong></p><p><strong>triggerSubscriptions - 调度中心</strong></p><p>​通过<strong>订阅者（$Action）</strong>把对<strong>发布者（action）</strong>的订阅注册到<strong>事件注册中心（actionSubscriptions）</strong>中，当<strong>发布者（action）</strong>触发时，通知<strong>调度中心（triggerSubscriptions）</strong>，<strong>调度中心（triggerSubscriptions）</strong>触发事件注册中心中的所有订阅。</p><h2 id="subscribe"><a href="#subscribe" class="headerlink" title="$subscribe"></a>$subscribe</h2><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>​订阅当前<code>store</code>中的<code>state</code>的变化，<code>state</code>发生任意更改都会触发其回调函数，他还会返回一个用来删除的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> abc = useCounter1.$subscribe(</span><br><span class="line">    <span class="function">(<span class="params">option, state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过store.num = xxxx修改，type为direct</span></span><br><span class="line">        <span class="comment">// 通过store.$patch(&#123; num: &#x27;xxx&#x27; &#125;)修改，type为directpatchObject</span></span><br><span class="line">        <span class="comment">// 通过store.$patch((state) =&gt; num.name=&#x27;xxx&#x27;)修改，type为patchFunction</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// storeId为当前store的id</span></span><br><span class="line">        <span class="comment">// events 当前改动说明</span></span><br><span class="line">        <span class="keyword">let</span> &#123; events, storeId, type &#125; = option;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(events, storeId, type, state);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">detached</span>: <span class="literal">false</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><p>当我们使用<code>$subscribe</code>并传入<code>callback</code>的时候，首先会将当前的<code>callback</code>加入注册中心中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> removeSubscription = <span class="title function_">addSubscription</span>(</span><br><span class="line">    subscriptions, <span class="comment">// 事件注册中心</span></span><br><span class="line">    callback, <span class="comment">// $subscribe传入的callback</span></span><br><span class="line">    options.<span class="property">detached</span>, <span class="comment">// 页面卸载的时候是否取消监听</span></span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">stopWatcher</span>() <span class="comment">// 执行stopWatcher实际上执行的是scope.run返回的watch，而执行watch的返回函数，也就是停止当前watch</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​前三个参数经过对<code>$Action</code>的分析后已经比较熟悉，这里我们重点说明一下第四个参数</p><p>​<code>stopWatcher</code>是当前<code>store</code>中的<code>effectScope</code>，我们将对当前<code>state</code>的<code>watch</code>放入<code>scope</code>中，以便于销毁<code>store</code>的时候统一处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stopWatcher = scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span></span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">        <span class="function">() =&gt;</span> pinia.<span class="property">state</span>.<span class="property">value</span>[$id] <span class="keyword">as</span> <span class="title class_">UnwrapRef</span>&lt;S&gt;, <span class="comment">// 监听state的变化</span></span><br><span class="line">        <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 在不使用$patch的情况下，则两个参数都为true，callback一定会执行</span></span><br><span class="line">            <span class="keyword">if</span> (options.<span class="property">flush</span> === <span class="string">&quot;sync&quot;</span> ? isSyncListening : isListening) &#123;</span><br><span class="line">                <span class="title function_">callback</span>(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">storeId</span>: $id, <span class="comment">// </span></span><br><span class="line">                        <span class="attr">type</span>: <span class="title class_">MutationType</span>.<span class="property">direct</span>,</span><br><span class="line">                        <span class="attr">events</span>: debuggerEvents <span class="keyword">as</span> <span class="title class_">DebuggerEvent</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    state</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">assign</span>(&#123;&#125;, $subscribeOptions, options)</span><br><span class="line">    )  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="https://www.vkcyan.top/image-20220722170139137.png" alt="image-20220722170139137"></p><p>​<code>$subscribe</code>主要依赖<code>vue3</code>的<code>watch</code>进行实现，在<code>subscriptions</code>中注册<code>callback</code>，但是注册的<code>callback</code>不通过<code>triggerSubscriptions</code>进行触发，仅仅作为保存，<code>watch</code>的触发函数中通过闭包触发<code>$subscribe</code>中的<code>callback</code>，达到<code>store</code>中任意值发生变化的时候都执行<code>callback</code>的目的</p><p>​在<code>addSubscription</code>的返回值<code>removeSubscription</code>中，不仅会在<code>subscriptions</code>(注册中心)删除订阅，同时也会执行<code>() =&gt; stopWatcher()</code>，停止<code>watch</code>监听。达到完全停止监听的目的。</p><h2 id="patch"><a href="#patch" class="headerlink" title="$patch"></a>$patch</h2><h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><p>直接更新当前<code>state</code>，可以通过传入<strong>对象</strong>与<strong>callback</strong>两种方式进行<code>state</code>更新，允许传递嵌套值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line">useCounter1.$patch(&#123; <span class="attr">counter</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="comment">// function</span></span><br><span class="line">useCounter1.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">counter</span> = <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><p>​<code>$patch</code>的主体逻辑不算很复杂，针对不同的参数类型进行分别处理，其中<code>partialStateOrMutator</code>是传入的方法，我们将当前<code>store</code>传入其中，通过其<code>callback</code>直接完成<code>state</code>的修改，而传入类型为<code>object</code>的时候，则通过<code>mergeReactiveObjects</code>进行处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$patch</span>(<span class="params">stateMutation: (state: UnwrapRef&lt;S&gt;) =&gt; <span class="built_in">void</span></span>): <span class="built_in">void</span>; <span class="comment">// Fun传参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">$patch</span>(<span class="params">partialState: _DeepPartial&lt;UnwrapRef&lt;S&gt;&gt;</span>): <span class="built_in">void</span>; <span class="comment">// 对象传参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">$patch</span>(<span class="params"></span></span><br><span class="line"><span class="params">partialStateOrMutator:</span></span><br><span class="line"><span class="params"> | _DeepPartial&lt;UnwrapRef&lt;S&gt;&gt;</span></span><br><span class="line"><span class="params"> | ((state: UnwrapRef&lt;S&gt;) =&gt; <span class="built_in">void</span>)</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">subscriptionMutation</span>: <span class="title class_">SubscriptionCallbackMutation</span>&lt;S&gt;;</span><br><span class="line">    isListening = isSyncListening = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// reset the debugger events since patches are sync</span></span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        debuggerEvents = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果参数是方法，走以下处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> partialStateOrMutator === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">partialStateOrMutator</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[$id] <span class="keyword">as</span> <span class="title class_">UnwrapRef</span>&lt;S&gt;);</span><br><span class="line">        subscriptionMutation = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">MutationType</span>.<span class="property">patchFunction</span>,</span><br><span class="line">            <span class="attr">storeId</span>: $id,</span><br><span class="line">            <span class="attr">events</span>: debuggerEvents <span class="keyword">as</span> <span class="title class_">DebuggerEvent</span>[],</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果参数是对象，走以下处理逻辑</span></span><br><span class="line">        <span class="title function_">mergeReactiveObjects</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[$id], partialStateOrMutator);</span><br><span class="line">        subscriptionMutation = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">MutationType</span>.<span class="property">patchObject</span>,</span><br><span class="line">            <span class="attr">payload</span>: partialStateOrMutator,</span><br><span class="line">            <span class="attr">storeId</span>: $id,</span><br><span class="line">            <span class="attr">events</span>: debuggerEvents <span class="keyword">as</span> <span class="title class_">DebuggerEvent</span>[],</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> myListenerId = (activeListener = <span class="title class_">Symbol</span>());</span><br><span class="line">    <span class="title function_">nextTick</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activeListener === myListenerId) &#123;</span><br><span class="line">            isListening = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    isSyncListening = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 在上方逻辑中，我们将isListening isSyncListening 重置为false，不会触发$subscribe中的callback，所以需要手动进行订阅发布</span></span><br><span class="line">    <span class="title function_">triggerSubscriptions</span>(</span><br><span class="line">        subscriptions,</span><br><span class="line">        subscriptionMutation,</span><br><span class="line">        pinia.<span class="property">state</span>.<span class="property">value</span>[$id] <span class="keyword">as</span> <span class="title class_">UnwrapRef</span>&lt;S&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $patch传入参数为Object的处理逻辑</span></span><br><span class="line"><span class="keyword">function</span> mergeReactiveObjects&lt;T <span class="keyword">extends</span> <span class="title class_">StateTree</span>&gt;(</span><br><span class="line">  <span class="attr">target</span>: T,</span><br><span class="line">  <span class="attr">patchToApply</span>: _DeepPartial&lt;T&gt;</span><br><span class="line">): T &#123;</span><br><span class="line">  <span class="comment">// no need to go through symbols because they cannot be serialized anyway</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> patchToApply) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!patchToApply.<span class="title function_">hasOwnProperty</span>(key)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">const</span> subPatch = patchToApply[key];</span><br><span class="line">    <span class="keyword">const</span> targetValue = target[key];</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="title function_">isPlainObject</span>(targetValue) &amp;&amp;</span><br><span class="line">      <span class="title function_">isPlainObject</span>(subPatch) &amp;&amp;</span><br><span class="line">      target.<span class="title function_">hasOwnProperty</span>(key) &amp;&amp;</span><br><span class="line">      !<span class="title function_">isRef</span>(subPatch) &amp;&amp;</span><br><span class="line">      !<span class="title function_">isReactive</span>(subPatch)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// 如果被修改的值 修改前修改后都是object类型并且不是Function类型、并且不是ref 不是isReactive，则递归mergeReactiveObjects达到修改嵌套object的目的</span></span><br><span class="line">      target[key] = <span class="title function_">mergeReactiveObjects</span>(targetValue, subPatch);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// @ts-expect-error: subPatch is a valid value</span></span><br><span class="line">      <span class="comment">// 如果是简单类型 则直接进行state的修改，这里的target为pinia.state.value[$id]</span></span><br><span class="line">      <span class="comment">// 按我们的示例来实际分析：pinia.state.value[$id].counter = 2</span></span><br><span class="line">      target[key] = subPatch;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​完成对<code>mergeReactiveObjects</code>的分析后，<code>$patch</code>的核心逻辑就全部结束了，但是还有一点我们没完成，就是通过<code>$patch</code>修改的<code>state</code>，<code>$subscribe</code>是否可以监听到。</p><h3 id="patch触发-subscribe"><a href="#patch触发-subscribe" class="headerlink" title="$patch触发$subscribe"></a>$patch触发$subscribe</h3><p>​在<code>$patch</code>执行的中，我们会修改当前<code>store</code>中的<code>state</code>，<code>$subscribe</code>中的<code>watch</code>在<code>flush=&#39;sync&#39;</code>的情况下可以立刻监听到，但是也无法执行<code>callback</code>，因为<code>$patch</code>函数最开始的地方将<code>isListening，isSyncListening</code>置为<code>false</code></p><p>​在对值完成修改后，我们将<code>isSyncListening</code>置为true，并且手动订阅<code>$subscribe</code>的<code>callback</code>，达到通过<code>$patch</code>修改<code>state</code>也能被<code>$subscribe</code>监听到的目的。</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>​<code>$patch</code>的源码相对来说比较简单，但是关于触发<code>$subscribe</code>的部分代码逻辑比较复杂，尤其是当<code>$subscribe</code> <code>option</code>设置中的<code>flush</code>为sync的时候，修改<code>state</code>立刻就会触发<code>$subscribe</code>的<code>watch</code>，虽然最终呈现出来的结果是一致的，但是内部对不同情况的兼容没有看起来那么简单。</p><p><img src="https://www.vkcyan.top/image-20220723162542035.png" alt="image-20220723162542035"></p><h2 id="dispose"><a href="#dispose" class="headerlink" title="$dispose"></a>$dispose</h2><p>调用该方法后将会注销当前<code>store</code></p><p><code>scope</code>中存储当前<code>store</code>中的相关反应，当前<code>state</code>的<code>watch</code>，<code>ref</code>，等等<code>effect</code>都通过<code>scope.run</code>创建，就是为了方便统一处理，这里调用<code>scope.stop()</code>所有的<code>effect</code>便被全部注销了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">  scope.<span class="title function_">stop</span>();</span><br><span class="line">  subscriptions = []; <span class="comment">// $subscribe注册中心</span></span><br><span class="line">  actionSubscriptions = []; <span class="comment">// $Action的注册中心</span></span><br><span class="line">  pinia.<span class="property">_s</span>.<span class="title function_">delete</span>($id); <span class="comment">// 删除effectMap结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reset"><a href="#reset" class="headerlink" title="$reset"></a>$reset</h2><p>调用该方法可以将当前<code>state</code>重置为初始化的状态</p><p>但是有点需要注意，如果<code>defineStore</code>通过<code>setup类型</code>声明，则无法调用该函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $reset = __DEV__</span><br><span class="line">? <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">            <span class="string">`🍍: Store &quot;<span class="subst">$&#123;$id&#125;</span>&quot; is built using the setup syntax and does not implement $reset().`</span></span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line">: noop; <span class="comment">// noop为空函数</span></span><br></pre></td></tr></table></figure><p>如果通过<code>option类型</code>进行声明，则会<strong>重写$reset</strong>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="property">$reset</span> = <span class="keyword">function</span> <span class="title function_">$reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// state通过闭包机制获得最初state定义的状态</span></span><br><span class="line">    <span class="keyword">const</span> newState = state ? <span class="title function_">state</span>() : &#123;&#125;;</span><br><span class="line">    <span class="comment">// 通过$patch完成对state中数据的更新</span></span><br><span class="line">    <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">$state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">assign</span>($state, newState);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​至此，我们就完成了对<code>pinia</code>所有方法的源码解读，而<code>pinia</code>源码解读系列文章也将告一段落，我们从<code>pinia</code>的初始化到了解如何实现<strong>state，getters</strong>的响应式，最后完成对<code>pinia metnods</code>的全部解读，也算是完全了解了其核心实现，最后我们将会实现一个<strong>mini版的pinia</strong>，仅仅保留核心实现，降低阅读门槛，让大多数人可以轻松了解pinia的核心实现原理~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏导航&quot;&gt;&lt;a href=&quot;#专栏导航&quot; class=&quot;headerlink&quot; title=&quot;专栏导航&quot;&gt;&lt;/a&gt;专栏导航&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7124279061035089927&quot;&gt;分析pinia源码</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Pinia" scheme="https://vkcyan.github.io/tags/Pinia/"/>
    
  </entry>
  
  <entry>
    <title>Pinia源码分析【2】- createPinia</title>
    <link href="https://vkcyan.github.io/2022/07/07/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%902%E3%80%91-%20createPinia/"/>
    <id>https://vkcyan.github.io/2022/07/07/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%902%E3%80%91-%20createPinia/</id>
    <published>2022-07-06T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏导航"><a href="#专栏导航" class="headerlink" title="专栏导航"></a>专栏导航</h2><p><a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a></p><p><a href="https://juejin.cn/post/7117131804229763079">Pinia源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831">pinia源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考源码<code>pinia V2.0.14</code></p><p>源码分析仓库：<a href="https://github.com/vkcyan/goto-pinia">https://github.com/vkcyan/goto-pinia</a></p><p>上一篇文章我们主要介绍了如何搭建一个pinia源码阅读环境；本文主要介绍pinia在vue3初始化阶段相关逻辑，以及如何构建pinia对象。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>根据官方文档，我们使用<code>pinia</code>首先需要是将它注册到<code>vue</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br></pre></td></tr></table></figure><p><code>createPinia</code>阶段究竟做了什么，他又是如何被注册到vue中呢？我们要从<code>createPinia</code>中寻找答案。</p><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p>我们通过<code>pinia\src\index.ts</code>找到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;./createPinia&#x27;</span> <span class="comment">// `pinia\src\createPinia.ts为源码文件`</span></span><br></pre></td></tr></table></figure><h3 id="createPinia函数"><a href="#createPinia函数" class="headerlink" title="createPinia函数"></a>createPinia函数</h3><p>​在函数的最开头，我们就可以看到通过<code>effectScope</code>声明了一个<code>ref</code>，并赋值给了<strong>state</strong>，这里的<code>effectScope</code>是高级API，未来会单独介绍，有兴趣的同学可以看一下<a href="https://vuejs.org/api/reactivity-advanced.html#effectscope">官方文档</a>，我们将其<strong>简单理解为声明了一个ref并赋值给state</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createPinia</span>(<span class="params"></span>): <span class="title class_">Pinia</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> scope = <span class="title function_">effectScope</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> state = scope.<span class="property">run</span>&lt;<span class="title class_">Ref</span>&lt;<span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">StateTree</span>&gt;&gt;&gt;(<span class="function">() =&gt;</span></span><br><span class="line">       ref&lt;<span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">StateTree</span>&gt;&gt;(&#123;&#125;)</span><br><span class="line">    )!;</span><br><span class="line">    <span class="comment">// 简化理解</span></span><br><span class="line">    <span class="comment">// const state = ref(&#123;&#125;)</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​<code>pinia</code>通过<code>markRaw</code>进行包装，将其<strong>标记为不会转化为响应式</strong>，最终<code>pinia</code>对象被<code>createPinia</code>函数返回，执行<code>vue.use(pinia)</code>的时候便会执行<code>pinia</code>对象中的<code>install</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createPinia</span>(<span class="params"></span>): <span class="title class_">Pinia</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">_p</span>: <span class="title class_">Pinia</span>[<span class="string">&quot;_p&quot;</span>] = []; <span class="comment">// 所有需要安装的插件</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">toBeInstalled</span>: <span class="title class_">PiniaPlugin</span>[] = []; <span class="comment">// install之前保存的待安装插件</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用markRaw标记pinia使其不会被响应式</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">pinia</span>: <span class="title class_">Pinia</span> = <span class="title function_">markRaw</span>(&#123;</span><br><span class="line">    <span class="comment">// vue.use实际执行逻辑</span></span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app: App</span>) &#123;</span><br><span class="line">      <span class="title function_">setActivePinia</span>(pinia); <span class="comment">// 设置当前使用的 pinia</span></span><br><span class="line">      <span class="keyword">if</span> (!isVue2) &#123; <span class="comment">// 如果是vue2，全局注册已经在PiniaVuePlugin完成，所以这段逻辑将跳过</span></span><br><span class="line">        pinia.<span class="property">_a</span> = app; <span class="comment">// 保存app实例</span></span><br><span class="line">        app.<span class="title function_">provide</span>(piniaSymbol, pinia); <span class="comment">// 通过provide传递pinia实例，提供给后续使用</span></span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$pinia</span> = pinia; <span class="comment">// 设置全局属性 $pinia</span></span><br><span class="line">        toBeInstalled.<span class="title function_">forEach</span>(<span class="function">(<span class="params">plugin</span>) =&gt;</span> _p.<span class="title function_">push</span>(plugin)); <span class="comment">// 处理未执行插件</span></span><br><span class="line">        toBeInstalled = [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">use</span>(<span class="params">plugin</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_a</span> &amp;&amp; !isVue2) &#123; <span class="comment">// 如果use阶段为初始化完成则暂存toBeInstalled中</span></span><br><span class="line">        toBeInstalled.<span class="title function_">push</span>(plugin);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _p.<span class="title function_">push</span>(plugin);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    _p, <span class="comment">// 所有pinia的插件</span></span><br><span class="line">    <span class="attr">_a</span>: <span class="literal">null</span>, <span class="comment">// app实例，在install的时候会被设置</span></span><br><span class="line">    <span class="attr">_e</span>: scope, <span class="comment">// pinia的作用域对象，每个store都是单独的scope</span></span><br><span class="line">    <span class="attr">_s</span>: <span class="keyword">new</span> <span class="title class_">Map</span>&lt;string, <span class="title class_">StoreGeneric</span>&gt;(),  <span class="comment">// store缓存 key为pinia的id value为pinia的对外暴露数据</span></span><br><span class="line">    state, <span class="comment">// pinia所有state的合集 key为pinia的id value为store下的所有state（所有可访问变量）</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> pinia;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回值的含义以及作用"><a href="#返回值的含义以及作用" class="headerlink" title="返回值的含义以及作用"></a>返回值的含义以及作用</h3><p><img src="https://www.vkcyan.top/image-20220713153012540.png" alt="image-20220713153012540"></p><p>​初始化的逻辑相对比较简单，只需要了解<code>effectScope</code> <code>markRaw</code>便能完全读懂，<code>install</code>阶段组成的<code>pinia</code>对象被<code>setActivePinia</code>保存了下来，而这个对象贯穿<code>pinia</code>整个生命周期，每个字段的作用在后面的源码解读中都会有所体现。</p><h2 id="关于Vue2"><a href="#关于Vue2" class="headerlink" title="关于Vue2"></a>关于Vue2</h2><p>​通过<code>pinia</code>官网，我们可以了解到<code>pinia</code>支持<code>vue2</code>，不过<code>vue2</code>环境需要在使用<code>createPinia</code>之前，预先安装插件<code>PiniaVuePlugin</code>，通过<code>pinia</code>的入口文件了解到<code>PiniaVuePlugin</code>的源码入口为<code>pinia\src\vue2-plugin.ts</code></p><p>​<code>PiniaVuePlugin</code>是<code>vue2</code>插件比较主流的实现方式，<strong>获取Vue实例，通过mixin实现数据共享</strong>。如果了解过<code>vuex</code>的源码，相信对以下代码会十分熟悉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">PiniaVuePlugin</span>: <span class="title class_">Plugin</span> = <span class="keyword">function</span> (<span class="params">_Vue</span>) &#123;</span><br><span class="line">    <span class="comment">// Equivalent of</span></span><br><span class="line">    <span class="comment">// app.config.globalProperties.$pinia = pinia</span></span><br><span class="line">    <span class="comment">// pinia在vue2中的注册逻辑与vuex核心逻辑几乎一致，</span></span><br><span class="line">    <span class="comment">// 注入全局mixin的beforeCreate</span></span><br><span class="line">    _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">        <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> options = <span class="variable language_">this</span>.<span class="property">$options</span>;</span><br><span class="line">            <span class="comment">// 在根节点通过vue.use中注册了pinia</span></span><br><span class="line">            <span class="keyword">if</span> (options.<span class="property">pinia</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> pinia = options.<span class="property">pinia</span> <span class="keyword">as</span> <span class="title class_">Pinia</span>;</span><br><span class="line">                <span class="comment">// defineProperty版provided实现</span></span><br><span class="line">                <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">as</span> any).<span class="property">_provided</span>实现) &#123;</span><br><span class="line">                    <span class="keyword">const</span> provideCache = &#123;&#125;;</span><br><span class="line">                    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, <span class="string">&quot;_provided&quot;</span>, &#123;</span><br><span class="line">                        <span class="attr">get</span>: <span class="function">() =&gt;</span> provideCache,</span><br><span class="line">                        <span class="attr">set</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(provideCache, v),</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                (<span class="variable language_">this</span> <span class="keyword">as</span> any).<span class="property">_provided</span>[piniaSymbol <span class="keyword">as</span> any] = pinia;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 首次注册变量不存在，进行存储</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">$pinia</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">$pinia</span> = pinia;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 保存Vue实例</span></span><br><span class="line">                pinia.<span class="property">_a</span> = <span class="variable language_">this</span> <span class="keyword">as</span> any;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable constant_">IS_CLIENT</span>) &#123;</span><br><span class="line">                    <span class="title function_">setActivePinia</span>(pinia);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">$pinia</span> &amp;&amp; options.<span class="property">parent</span> &amp;&amp; options.<span class="property">parent</span>.<span class="property">$pinia</span>) &#123;</span><br><span class="line">                <span class="comment">// 所有子组件/页面都继承上一层的pinia</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$pinia</span> = options.<span class="property">parent</span>.<span class="property">$pinia</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">_pStores</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="关于devTool"><a href="#关于devTool" class="headerlink" title="关于devTool"></a>关于devTool</h2><p>在<code>createPinia</code>中存在这样一段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__DEV__ &amp;&amp; <span class="variable constant_">IS_CLIENT</span> &amp;&amp; !__TEST__) &#123;</span><br><span class="line">    pinia.<span class="title function_">use</span>(devtoolsPlugin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是开发环境，并且是浏览器环境，并且不是测试环境，就会向pinia注册<code>devtoolsPlugin</code>，也就是将<code>pinia</code>注册到浏览器插件<strong>Vue.js devtools</strong>中。</p><p><img src="https://www.vkcyan.top/image-20220713170645056.png" alt="image-20220713170645056"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​<strong>createPinia</strong>的源码解读就全部结束了，现在我们已经了解初始化的具体流程，以及生成的pinia对象中存在什么参数，这些参数在运行阶段都会发挥它应用的价值。</p><p>​下一章我们将要解析<strong>创建以及使用pinia</strong>的相关源码，<code>defindStore</code>函数实现逻辑，在<code>defindStore</code>中我们将会了解到<code>install</code>阶段每个字段的实际用途，以及pinia的核心响应原理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏导航&quot;&gt;&lt;a href=&quot;#专栏导航&quot; class=&quot;headerlink&quot; title=&quot;专栏导航&quot;&gt;&lt;/a&gt;专栏导航&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7124279061035089927&quot;&gt;分析pinia源码</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Pinia" scheme="https://vkcyan.github.io/tags/Pinia/"/>
    
  </entry>
  
  <entry>
    <title>Pinia源码分析【1】- 源码分析环境搭建</title>
    <link href="https://vkcyan.github.io/2022/07/06/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%901%E3%80%91-%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://vkcyan.github.io/2022/07/06/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%901%E3%80%91-%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-07-05T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏导航"><a href="#专栏导航" class="headerlink" title="专栏导航"></a>专栏导航</h2><p><a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a></p><p><a href="https://juejin.cn/post/7117131804229763079">Pinia源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831">pinia源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​经过<code>vue3</code>从<code>beta版本</code>走向默认版本，<code>vue2.x</code>更新最后一个版本<code>Naruto</code>，全局状态管理也从<code>vuex</code>慢慢走向更加易用更加契合<code>vue3</code>的<code>pinia</code>。</p><p>本系列文章将会带领大家从<strong>源码角度</strong>去理解下一代vue全局状态管理库 pinia 的<strong>实现原理</strong>。</p><p>参考源码<code>pinia V2.0.14</code></p><p>源码分析仓库：<a href="https://github.com/vkcyan/goto-pinia">https://github.com/vkcyan/goto-pinia</a></p><p>工欲善其事，必先利其器，我们应该如何去阅读pinia的源码呢？</p><p>本文将手摸手教大家如何<strong>在vue3环境搭建pinia的源码阅读环境。</strong></p><h2 id="创建源码分析环境"><a href="#创建源码分析环境" class="headerlink" title="创建源码分析环境"></a>创建源码分析环境</h2><p>我们使用vue3开箱即用的CLI初始化一个项目，创建项目非常简单，不做过多赘述。</p><p><a href="https://vuejs.org/guide/quick-start.html">https://vuejs.org/guide/quick-start.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><h2 id="pinia源码入口分析"><a href="#pinia源码入口分析" class="headerlink" title="pinia源码入口分析"></a>pinia源码入口分析</h2><p>先去<code>pinia</code>的官方仓库下载源码</p><p>源码地址：<a href="https://github.com/vuejs/pinia%EF%BC%8C%E6%88%91%E4%BB%AC%E5%B0%86%E5%85%B6clone%E5%88%B0%E6%9C%AC%E5%9C%B0">https://github.com/vuejs/pinia，我们将其clone到本地</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vuejs/pinia.git</span><br></pre></td></tr></table></figure><p>首先分析<code>pinia</code>仓库的打包文件，寻找源代码位置</p><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p>​在<code>pinia/packages/package.json</code>中，我们找到了打包命令，打包命令中可以得知，打包文件为<code>../../rollup.config.js</code></p><p><img src="https://www.vkcyan.top/image-20220706112404074.png" alt="image-20220706112404074"></p><p><img src="https://www.vkcyan.top/image-20220706112113981.png" alt="image-20220706112113981"></p><p>​在打包文件中，我们找到了被打包源码的入口文件，即为<code>pinia/packages/pinia/src/index.ts</code></p><h3 id="仓库依赖"><a href="#仓库依赖" class="headerlink" title="仓库依赖"></a>仓库依赖</h3><p>​在打包文件<code>rollup.config.js</code>中<code>line121</code>标注了依赖文件，不过我们通过CLI生成的项目中已经包含了以下依赖文件，所以这一步我们不需要额外操作。</p><p><img src="https://www.vkcyan.top/image-20220706100633575.png" alt="image-20220706100633575"></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>​源码中存在大量环境变量注入代码，具体配置在<code>rollup.config.js</code>中<code>line121</code>；如果缺失环境变量声明，会导致源码无法正常运行。</p><p>​所以在源码阅读环境，我们需要添加合适的环境变量，让源码正常运行起来。</p><p><img src="https://www.vkcyan.top/image-20220706102739081.png" alt="image-20220706102739081"></p><h2 id="环境适配"><a href="#环境适配" class="headerlink" title="环境适配"></a>环境适配</h2><p>将<code>pinia/packages/pinia</code>目录下的所有文件复制到我们之前通过CLI生成项目的<code>/src</code>中。</p><p>并根据我们通过源码入口分析获取的信息进行环境变量补全。</p><h3 id="在vite-config-ts增加环境变量"><a href="#在vite-config-ts增加环境变量" class="headerlink" title="在vite.config.ts增加环境变量"></a>在vite.config.ts增加环境变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">define</span>: &#123;</span><br><span class="line"><span class="attr">__DEV__</span>: <span class="string">&quot;true&quot;</span>, <span class="comment">// 是否开发环境</span></span><br><span class="line"><span class="attr">__TEST__</span>: <span class="string">&quot;false&quot;</span>, <span class="comment">// 是否测试环境</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="全局环境变量报错"><a href="#全局环境变量报错" class="headerlink" title="全局环境变量报错"></a>全局环境变量报错</h3><p>​我们在vite的配置文件中向运行环境注入了pinia必要的环境变量，但是<code>TypeScript</code>并不认识相关全局变量，便会发出警告。</p><p><img src="https://www.vkcyan.top/image-20220706113750507.png" alt="image-20220706113750507"></p><p>​我们需要将源码中的<code>pinia/packages/pinia/src/global.d.ts</code>文件内的声明复制到项目中的<code>env.d.ts</code>即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;vite/client&quot; /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Global compile-time constants</span></span><br><span class="line">declare <span class="keyword">var</span> <span class="attr">__DEV__</span>: boolean;</span><br><span class="line">declare <span class="keyword">var</span> <span class="attr">__TEST__</span>: boolean;</span><br><span class="line">declare <span class="keyword">var</span> <span class="attr">__FEATURE_PROD_DEVTOOLS__</span>: boolean;</span><br><span class="line">declare <span class="keyword">var</span> <span class="attr">__BROWSER__</span>: boolean;</span><br><span class="line">declare <span class="keyword">var</span> <span class="attr">__CI__</span>: boolean;</span><br><span class="line">declare <span class="keyword">var</span> <span class="attr">__VUE_DEVTOOLS_TOAST__</span>: <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  message: string,</span></span></span><br><span class="line"><span class="params"><span class="function">  type?: <span class="string">&quot;normal&quot;</span> | <span class="string">&quot;error&quot;</span> | <span class="string">&quot;warn&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> <span class="keyword">void</span>;</span><br></pre></td></tr></table></figure><p>至此，我们解决了项目静态检查阶段中所有报错信息，接下来我们启动项目。</p><h3 id="浏览器控制台报错’…ComputedRef’"><a href="#浏览器控制台报错’…ComputedRef’" class="headerlink" title="浏览器控制台报错’…ComputedRef’"></a>浏览器控制台报错’…ComputedRef’</h3><p>​启动项目后，在浏览器控制台收获了一个报错信息</p><p><img src="https://www.vkcyan.top/image-20220706104253811.png" alt="image-20220706104253811"></p><p>我们找到报错代码<code>type.ts</code>进行分析</p><p><img src="https://www.vkcyan.top/image-20220706104358605.png" alt="image-20220706104358605"></p><p>​错误提示已经非常贴心，可以得知是<code>tsconfig.json</code>配置问题，我们根据报错信息修改配置</p><blockquote><p>出现报错的原因是因为这里vue CLI生成的代码自带一份配置文件，此文件与pinia源码的tsconfig部分配置发生了冲突。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@vue/tsconfig/tsconfig.web.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;env.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;importsNotUsedAsValues&quot;</span><span class="punctuation">:</span> <span class="string">&quot;remove&quot;</span><span class="punctuation">,</span> <span class="comment">// 默认被设置为error error情况下类型导入必须增加前缀type 以区分类型 改成remove即可</span></span><br><span class="line">    <span class="attr">&quot;preserveValueImports&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span> <span class="comment">// 对于类型，在同时启用了 &quot;preserveValueImports&quot; 和 &quot;isolatedModules&quot; 时，必须使用仅类型导入进行导入；改成false即可</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">&quot;references&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./tsconfig.config.json&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="源码分析环境测试"><a href="#源码分析环境测试" class="headerlink" title="源码分析环境测试"></a>源码分析环境测试</h3><p>在源码处增加打印，测试pinia源码是否正常运行。</p><p><img src="https://www.vkcyan.top/image-20220706105740320.png" alt="image-20220706105740320"></p><p><img src="https://www.vkcyan.top/image-20220706105829188.png" alt="image-20220706105829188"></p><p>log被正常打印，说明pinia源码已经被正常运行。</p><p>​如果感觉搭建环境过于繁琐，又想阅读pinia源码，可以直接clone项目，<a href="https://github.com/vkcyan/goto-pinia%EF%BC%8C%E5%BC%80%E7%AE%B1%E5%8D%B3%E7%94%A8">https://github.com/vkcyan/goto-pinia，开箱即用</a>~</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​至此，我们便完成了万里长征第一步；植入的源码文件被正常运行，我们便可以通过<strong>log debug</strong>的方式来进行逻辑观测，接下来我们将正式开始pinia核心实现的探索之旅~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏导航&quot;&gt;&lt;a href=&quot;#专栏导航&quot; class=&quot;headerlink&quot; title=&quot;专栏导航&quot;&gt;&lt;/a&gt;专栏导航&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7124279061035089927&quot;&gt;分析pinia源码</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Pinia" scheme="https://vkcyan.github.io/tags/Pinia/"/>
    
  </entry>
  
  <entry>
    <title>分析pinia源码之前必须知道的API</title>
    <link href="https://vkcyan.github.io/2022/07/05/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E5%88%86%E6%9E%90pinia%E6%BA%90%E7%A0%81%E4%B9%8B%E5%89%8D%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84API/"/>
    <id>https://vkcyan.github.io/2022/07/05/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/%E5%88%86%E6%9E%90pinia%E6%BA%90%E7%A0%81%E4%B9%8B%E5%89%8D%E5%BF%85%E9%A1%BB%E7%9F%A5%E9%81%93%E7%9A%84API/</id>
    <published>2022-07-04T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏导航"><a href="#专栏导航" class="headerlink" title="专栏导航"></a>专栏导航</h2><p><a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a></p><p><a href="https://juejin.cn/post/7117131804229763079">Pinia源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831">pinia源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​在pinia源码中有一些业务场景下不常用的vue3 api，如果没有预先了解将会给源码解读带来较大困难，建议先搞清楚相关API，阅读代码将会事半功倍~</p><h2 id="effectScope"><a href="#effectScope" class="headerlink" title="effectScope"></a>effectScope</h2><p>​在<code>createPinia</code>中的遇到的第一行就是不认识的vue3 API，打开官网看了一下，最上方info中写道 <strong>effect作用域是一个高阶API，专为库作者服务</strong>。</p><p>​他的作用是创建一片单独的<code>effect</code>空间，该空间内的<code>effect</code>将可以一起被处理，有点类似<code>docker</code>与<code>k8s</code>的关系，例如<code>ref computed watchEffect</code> 都是<code>docker</code>中的容器，而<code>effectScope</code>就是<code>k8s</code>，它可以统一管理<code>effect</code>集群。</p><p>类型：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">effectScope</span>(<span class="params">detached?: <span class="built_in">boolean</span></span>): <span class="title class_">EffectScope</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">EffectScope</span> &#123;</span><br><span class="line">  run&lt;T&gt;(<span class="attr">fn</span>: <span class="function">() =&gt;</span> T): T | <span class="literal">undefined</span> <span class="comment">// 如果这个域不活跃则为 undefined</span></span><br><span class="line">  <span class="title function_">stop</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​通过官网的类型可以看到，<code>effectScope</code>存在一个<code>boolean</code>类型的参数，但是在<code>vue3</code>文档中并未找到参数说明，而在<a href="https://github.com/vuejs/rfcs/blob/master/active-rfcs/0041-reactivity-effect-scope.md">RFC</a>中找到了更加详细的文档。接下来为<code>effectScope</code>的相关API说明。</p><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><blockquote><p>接受一个函数并返回该函数的返回值</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scope = <span class="title function_">effectScope</span>();</span><br><span class="line"><span class="keyword">const</span> counter = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> setupStore = scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> doubled = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> counter.<span class="property">value</span> * <span class="number">2</span>);</span><br><span class="line">  <span class="title function_">watch</span>(doubled, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;doubled&#x27;</span>,doubled.<span class="property">value</span>));</span><br><span class="line">  <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count:&quot;</span>, doubled.<span class="property">value</span>));</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    doubled,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印 &#x27;count 2&#x27; watchEffect触发</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(setupStore!.<span class="property">counter</span>.<span class="property">value</span>); <span class="comment">// 打印&#x27;1&#x27;,可以正常访问返回值</span></span><br><span class="line">setupStore!.<span class="property">counter</span>.<span class="property">value</span> = <span class="number">2</span>; <span class="comment">// 打印 &#x27;doubled 4&#x27; &#x27;count: 4&#x27;  counter修改触发watch与watchEffect</span></span><br></pre></td></tr></table></figure><h3 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h3><blockquote><p>递归结束所有effect，包括后代effectScope</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setupStore = scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> counter = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> doubled = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> counter.<span class="property">value</span> * <span class="number">2</span>);</span><br><span class="line">  nestedScope = <span class="title function_">effectScope</span>(<span class="literal">true</span> <span class="comment">/* detached */</span>);</span><br><span class="line">  nestedScope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">watch</span>(counter, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doubled&quot;</span>, counter.<span class="property">value</span> * <span class="number">2</span>));</span><br><span class="line">    <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count:&quot;</span>, counter.<span class="property">value</span>*<span class="number">2</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter,</span><br><span class="line">    doubled,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">scope.<span class="title function_">stop</span>();</span><br><span class="line">setupStore!.<span class="property">counter</span>.<span class="property">value</span> = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 打印 doubled 4 count: 4 </span></span><br><span class="line"><span class="comment">// 因为nestedScope被指定为true，所以就算父级被销毁，nestedScope依旧存在反应。</span></span><br><span class="line"><span class="comment">// 如果想结束nestedScope，需要手动进行销毁nestedScope.stop()</span></span><br></pre></td></tr></table></figure><h3 id="detached"><a href="#detached" class="headerlink" title="detached"></a>detached</h3><p>表示是否在分离模式下创建，该参数默认为<code>false</code>；当为<code>true</code>的时候，父级被停止，子集也不会受影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scope = <span class="title function_">effectScope</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="attr">nestedScope</span>: any;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setupStore = scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> counter = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> doubled = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> counter.<span class="property">value</span> * <span class="number">2</span>);</span><br><span class="line">  nestedScope = <span class="title function_">effectScope</span>(<span class="literal">true</span> <span class="comment">/* detached */</span>);</span><br><span class="line">  nestedScope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">watch</span>(counter, <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doubled&quot;</span>, counter.<span class="property">value</span> * <span class="number">2</span>));</span><br><span class="line">    <span class="title function_">watchEffect</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;count:&quot;</span>, counter.<span class="property">value</span> * <span class="number">2</span>));</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter,</span><br><span class="line">    doubled,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">scope.<span class="title function_">stop</span>();</span><br><span class="line">setupStore!.<span class="property">counter</span>.<span class="property">value</span> = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// 打印 doubled 4 count: 4</span></span><br><span class="line"><span class="comment">// 因为nestedScope被指定为true，所以就算父级被销毁，nestedScope依旧存在反应。</span></span><br><span class="line"><span class="comment">// 如果想结束nestedScope，需要手动进行销毁nestedScope.stop()</span></span><br><span class="line">nestedScope.<span class="title function_">stop</span>();</span><br><span class="line">setupStore!.<span class="property">counter</span>.<span class="property">value</span> = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// 不会出现任何打印</span></span><br></pre></td></tr></table></figure><h2 id="markRaw"><a href="#markRaw" class="headerlink" title="markRaw"></a>markRaw</h2><p>标记一个对象，使其永远不会转换为 <code>proxy</code>。返回对象本身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="title function_">markRaw</span>(&#123;&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(<span class="title function_">reactive</span>(foo))) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套在其他响应式对象中时也可以使用</span></span><br><span class="line"><span class="keyword">const</span> bar = <span class="title function_">reactive</span>(&#123; foo &#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(bar.<span class="property">foo</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>markRaw</code>在<code>pinia</code>源码中非常常见，主要用于优化pinia的自身性能。</p><h2 id="toRaw"><a href="#toRaw" class="headerlink" title="toRaw"></a>toRaw</h2><blockquote><p>toRaw可以获取一个响应式对象的原始属性</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> reactiveFoo = <span class="title function_">reactive</span>(foo);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;toRaw&quot;</span>, <span class="title function_">toRaw</span>(reactiveFoo) === foo); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> refFoo1 = <span class="title function_">ref</span>(foo1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;toRaw&quot;</span>, <span class="title function_">toRaw</span>(refFoo1.<span class="property">value</span>) === foo1); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在<code>pinia</code>源码中用于获取<code>reactive</code>的原始数据，并添加字段到其中</p><h2 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h2><p>​<code>toRefs</code>比较常见，简单来说：结果中的每个对象都指向原始属性；在实际开发中常用于reactive的解构。</p><p>​在<code>pinia</code>的源码中，针对<code>store</code>中的<code>state</code>的处理用到了<code>toRefs</code>，不过它解构的是<code>state（ref类型）</code>对象，如果解构的是普通对象将不具备响应式。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​以上就是<code>pinia</code>源码中使用较多的<code>vue3 api</code>，还有些非常基础的例如<code>ref reactive</code>，就不做过多赘述了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏导航&quot;&gt;&lt;a href=&quot;#专栏导航&quot; class=&quot;headerlink&quot; title=&quot;专栏导航&quot;&gt;&lt;/a&gt;专栏导航&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7124279061035089927&quot;&gt;分析pinia源码</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Pinia" scheme="https://vkcyan.github.io/tags/Pinia/"/>
    
  </entry>
  
  <entry>
    <title>关于我使用Hexo搭建个人博客这档子事</title>
    <link href="https://vkcyan.github.io/2022/06/30/%E5%85%B3%E4%BA%8E%E5%BC%80%E6%BA%90/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%99%E6%A1%A3%E5%AD%90%E4%BA%8B/"/>
    <id>https://vkcyan.github.io/2022/06/30/%E5%85%B3%E4%BA%8E%E5%BC%80%E6%BA%90/%E5%85%B3%E4%BA%8E%E6%88%91%E4%BD%BF%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%99%E6%A1%A3%E5%AD%90%E4%BA%8B/</id>
    <published>2022-06-29T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​在我刚工作的那年，便搭建过一次Hexo静态站点到github Pages，那时候输出不多，几乎全都是技术类文章，于是我便把学习记录、文章都放在github仓库中，也会把精品文章发布到掘金；这样的情况下，自建博客没有被维护下去。</p><p>​时间来到2022年，随着输出类型越来越多，自然便需要一个空间来存储所有的输出，调研了很多在线文档工具，比如语雀，飞书，Notion，都是非常不错的，不过我个人非常喜欢用Typora，也不太习惯其他文档工具，同时作者也是比较喜欢自由的人，思来想去还是自建博客吧，这便是再次搭建github Pages的原因。</p><p>​博客搭建过程也花费了一些时间，遇到了若干小问题，希望后来人不要踩前人已经踩过的坑，这也是这篇文章的由来，希望借此可以帮到大家。</p><p>​接下来就让我们正式开始吧。</p><h2 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h2><ul><li>爱折腾、爱自由的开发者</li><li>需要一个美观的空间来存储各类文章的开发者</li><li>通过个人博客让面试加分的开发者</li></ul><h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><p>​<a href="https://link.zhihu.com/?target=https://hexo.io/zh-cn/">Hexo</a>是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://link.zhihu.com/?target=http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。即把用户的markdown文件，按照指定的主题解析成静态网页。</p><h2 id="githubPages介绍"><a href="#githubPages介绍" class="headerlink" title="githubPages介绍"></a>githubPages介绍</h2><p>​GitHub Pages 是一种静态站点托管服务，它直接从 GitHub 上的存储库获取 HTML、CSS 和 JavaScript 文件，可选择通过构建过程运行文件，然后发布网站。您可以在<a href="https://github.com/collections/github-pages-examples">GitHub Pages 示例集合</a>中查看 GitHub Pages 站点示例。</p><p>​通过上面的介绍我们便可以得到一个结论：<strong>githubPages + Hexo &#x3D; 个人博客</strong>，下面让我们正式开始搭建个人博客吧！</p><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>nodejs环境</li><li>安装git并</li><li>注册github账号，并已经将当前电脑的ssh秘钥添加到了Github（相当于告诉github，这台电脑有权操作你的github数据）</li></ul><h2 id="创建github-Pages仓库"><a href="#创建github-Pages仓库" class="headerlink" title="创建github Pages仓库"></a>创建github Pages仓库</h2><p><img src="https://www.vkcyan.top/image-20220630092811787.png" alt="image-20220630092811787"></p><p>最后点击下方的<code> Create repository </code>，完成创建即可。</p><h2 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>首先全局安装hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>然后创建存放站点资源的文件夹，在你认为合适的目录下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init 文件夹名称 // 建议username.github.io</span><br><span class="line"><span class="built_in">cd</span> username.github.io // 刚才创建的文件夹</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>install完成后，在该文件夹下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s // hexo server的缩写</span><br></pre></td></tr></table></figure><p>正常情况下会看到以下信息</p><p><img src="http://www.vkcyan.top/Fr5GDqqz86brApdn8L_jCkRQETWT.png"></p><p>然后我们访问<code>http://localhost:4000/</code>,便可以看到hexo生成的站点</p><p><img src="https://www.vkcyan.top/FnYUcxkH02d8-kUCfbjfA6wISWdw.png"></p><p>能到这一步就算搭建成功了，接下来我们需要认识hexo生成文件中的配置，来个性化定制我们的个人站点</p><h3 id="hexo文件说明"><a href="#hexo文件说明" class="headerlink" title="hexo文件说明"></a>hexo文件说明</h3><h4 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h4><blockquote><p>一定要仔细看每一项配置哦，比如语言，博客简介，等等</p></blockquote><p>非常重要的文件，配置网站的基本信息信息，比如名称 描述 分页 主题等信息。具体含义看这里 <a href="https://hexo.io/zh-cn/docs/configuration">配置参数</a></p><h4 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h4><p>​第三方网站主题存放目录，后面我们会用到</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><p>​该文件夹是存放站点文章的地方，_post目录为文章存放处，除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 &#x2F; 文件夹和隐藏的文件将会被忽略。</p><h4 id="public"><a href="#public" class="headerlink" title="public"></a>public</h4><p>​所有打包生产的文件都会被输出到public中，其中<code>MD</code> <code>html</code>文件将会被解析再存放在其中，其他文件会被拷贝进去。</p><h3 id="将文章发布到Hexo中"><a href="#将文章发布到Hexo中" class="headerlink" title="将文章发布到Hexo中"></a>将文章发布到Hexo中</h3><blockquote><p>可以将搬运到hexo，但是需要修改&#x2F;增加文章头部的配置信息，让hexo得以自动化归类</p></blockquote><p>我们在<code>_post</code>中增加一个<code>md</code>文件，然后文章开头处写入以下信息，使用过<code>wordPress</code>的同学应该很熟悉，这是对当前文章的属性描述，具体配置可以看<a href="https://hexo.io/zh-cn/docs/front-matter">官方配置</a>，之后便是填入文章内容，还记得我们通过<code>hexo s</code>启动的本地服务器吗，文章编写完成后，让我们去看看是是否存在变化。</p><p><img src="https://www.vkcyan.top/image-20220630104617165.png" alt="image-20220630104617165"></p><p>不出意外的话应该可以看到我们刚才写的文章出现在网页中了,如果这里未显示可以尝试重启服务</p><p>在文章头部编写的<strong>categories</strong>，<strong>tags</strong>字段，hexo会按照关键字自动生成索引。</p><p><img src="https://www.vkcyan.top/image-20220628135401927.png" alt="image-20220628135401927"></p><p>下一步我们便要将其发布到github Pages中，让所有人都可以访问到。</p><h2 id="将hexo发布到githubPages"><a href="#将hexo发布到githubPages" class="headerlink" title="将hexo发布到githubPages"></a>将hexo发布到githubPages</h2><p>​我们之前已经处理过了git本地环境与仓库，hexo的部署十分简单</p><ol><li>安装快速部署脚本</li></ol><p>该脚本会在你的目录下生成<code>.deploy_git/</code>执行更新命令的时候就会将该文件夹下的所有文件上传到指定的仓库中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><ol start="2"><li>填写相关配置</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/username/username.github.io</span> <span class="string">//</span> <span class="string">替换这里的username</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="string">//</span> <span class="string">填写部署的GitHub分支，默认为gh-pages</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">&#x27;&#x27;</span> <span class="string">//</span> <span class="string">提交信息，存在默认值，可以不填写</span></span><br></pre></td></tr></table></figure><ol start="3"><li>部署到仓库</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean // 清除缓存文件 db.json与public/ (建议每次部署之前清除缓存)</span><br><span class="line">hexo d //  deploy的缩写，读取yml中deploy的配置并部署</span><br></pre></td></tr></table></figure><p><img src="http://www.vkcyan.top/image-20220628143934942.png"></p><p>看到以上日志则说明部署成功</p><p>接下来我们前往仓库，就会发现仓库master分支中已经存在代码，再设置一下github Pages的分支，让博客资源文件可以被正常读取。</p><p><img src="https://www.vkcyan.top/image-20220630105611019.png" alt="image-20220630105611019"></p><p>最后点击<code>Action</code>查看部署任务是否正常完成，正常情况下<code>Action</code>会在60s左右完成，部署完成后我们便可以访问线上站点了，<a href="https://username.github.io/">https://username.github.io/</a></p><p><img src="http://www.vkcyan.top/image-20220628144123522.png"></p><p><img src="https://www.vkcyan.top/image-20220628145010327.png" alt="image-20220628145010327"></p><p>只要可以看到我们的文章，便是部署成功了~（可能访问速度还有些慢，我们后面再优化）</p><p>这里肯定有好奇的小伙伴要问了，为什么你的样子和我部署的不一样？</p><p>这就是下面要说的，自定义主题。</p><h2 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h2><p>​一个风格优美的博客可以为读者带来更好的体验，也是作者个性的一种表达，这也是自建博客的优势所在， hexo中存在大量官方提供 + 个人维护的<a href="https://hexo.io/themes/">Themes</a></p><p><img src="https://www.vkcyan.top/image-20220628182610145.png" alt="image-20220628182610145"></p><p>​如果出现Hexo官网的Themes无法正常访问，可以在github中搜索<a href="https://github.com/search?q=hexo-theme">hexo-theme</a>，同样可以看到受欢迎的hexo主题，每个主题都会有使用文档，只需要仔细阅读文档并进行配置即可使用主题，感谢开源大佬们，别忘记给他们一个Star。</p><p>​主题文件都存在在项目的<strong>themes</strong>文件夹中，并且需要将根目录的<code>_config.yml</code>的<strong>themes</strong>字段改为主题名称。</p><h2 id="插件功能"><a href="#插件功能" class="headerlink" title="插件功能"></a>插件功能</h2><p>​自建博客的虽然不存在后端服务，但是借助第三方服务依旧可以实现交互能力，例如评论系统，统计系统，等等非常有趣的插件，常见的插件第三方主题的README中都会有相关介绍，本文就不做过多赘述了，建议大家看专门介绍相关内容的文章。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="站点很慢"><a href="#站点很慢" class="headerlink" title="站点很慢"></a>站点很慢</h3><p>​github Pages访问很慢，绝大部分原因都是因为JS脚本加载阻塞问题，在不加任何异步属性的情况下，script的下载和执行都会阻塞dom的渲染。</p><p>​例如项目依赖了jQuery，但是其CDN因为某些原因加载缓慢甚至超时失败，都会导致页面的长时间白屏，这会非常影响访问者的用户体验，以及作者的创作热情。</p><p>​如果出现此类情况，我们就打开<strong>Chrome devTool</strong>查看<strong>NetWork</strong>中<strong>加载缓慢</strong>的脚本文件，然后复制其名称，在hexo源码中找到，再百度搜索国内的高速CDN替换掉即可。（注意不要修改打包后代码）</p><h3 id="点击菜单404"><a href="#点击菜单404" class="headerlink" title="点击菜单404"></a>点击菜单404</h3><p>​有些第三方主题自带的一些菜单点击可能会出现白屏的情况，这是因为没有建立标签页</p><p><img src="https://www.vkcyan.top/image-20220628163232358.png" alt="image-20220628163232358"></p><p>执行以下命令建立不存在的页面即可，新建的md具体内容还是需要参考使用的主题文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page books // </span><br></pre></td></tr></table></figure><h3 id="缓存问题"><a href="#缓存问题" class="headerlink" title="缓存问题"></a>缓存问题</h3><p>​修改了一篇文章，但是打包到github Pages依旧没有被删除，类似这样的缓存问题怎么办？</p><p>​我们只需要在每次push到github之前清除hexo生成的缓存文件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><h3 id="部署报错"><a href="#部署报错" class="headerlink" title="部署报错"></a>部署报错</h3><p>执行<code>hexo d</code>，得到错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">&#x27;https://github.com/username/username.github.io/&#x27;</span>: OpenSSL SSL_read: Connection was reset, errno 10054</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (xxx\username.github.io\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:390:28)</span><br><span class="line">      at ChildProcess.cp.emit (xxx\username.github.io\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:290:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something<span class="string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span></span><br></pre></td></tr></table></figure><p>​网络问题，重试即可。</p><h2 id="其他静态构建工具"><a href="#其他静态构建工具" class="headerlink" title="其他静态构建工具"></a>其他静态构建工具</h2><h3 id="Vuepress"><a href="#Vuepress" class="headerlink" title="Vuepress"></a>Vuepress</h3><p>​Vue出品的静态站点生成工具，用来写文档非常不错，但是如果你对个性化要求较高，可能他不是很适合你。</p><h3 id="jekyll"><a href="#jekyll" class="headerlink" title="jekyll"></a>jekyll</h3><p>​非常老牌的静态网站生成工具，使用Ruby语言进行开发，这就意味着使用jekyll需要安装Ruby环境，据说构建速度相对较慢，相对于Hexo未发现明显优势，喜欢的小伙伴可以试用一下。</p><h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h3><p>​基于Go语言开发的静态网站构建工具，不过它并不需要Go环境，对于非前端开发者还是不错的选择，他号称是最快的构建框架；在搭建完hexo后才看到hugo，感觉有点意思，喜欢折腾的朋友可以试用一下，目前拥有59.8k的Star，是静态构建工具中最受欢迎的项目。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​搭建好github Pages并不是一件很困难的事情，但是保持输出习惯却是一件有难度的事情，通过这篇文章成功搭建起了个人博客，非常恭喜，你完成了万里长征非常重要的第一步，希望你可以坚持输出，从小的知识点开始做起，保持对可输出点的敏感嗅觉，并将其输出，逐渐搭建起自己的知识库，这对知识积累，将来跳槽也有很大的帮助。</p><p>​如果一个正在被使用的技术方案当事人却无法教会别人，这便不算完全掌握，浅尝辄止是技术岗位的大忌。在输出的过程中，也是重新梳理的过程，在过程中会发现一些开发中未注意到潜在问题，逻辑漏洞，而为了完成输出，便会自我驱动解决遇到的问题；</p><p>​用输入驱动输出，用输出倒逼输入，将复杂的知识通过简单平实的话说出来，并教会别人，才是完全掌握，这也是输出的意义，这也是个人博客的意义。</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	在我刚工作的那年，便搭建过一次Hexo静态站点到github Pages，那时候输出不多，几乎全都是技术类文章，于是我便把学习记录、文章</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Hexo" scheme="https://vkcyan.github.io/tags/Hexo/"/>
    
    <category term="个人博客" scheme="https://vkcyan.github.io/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>关于消费降级</title>
    <link href="https://vkcyan.github.io/2022/06/28/%E9%9A%8F%E6%83%B3/%E5%85%B3%E4%BA%8E%E6%B6%88%E8%B4%B9%E9%99%8D%E7%BA%A7/"/>
    <id>https://vkcyan.github.io/2022/06/28/%E9%9A%8F%E6%83%B3/%E5%85%B3%E4%BA%8E%E6%B6%88%E8%B4%B9%E9%99%8D%E7%BA%A7/</id>
    <published>2022-06-27T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.096Z</updated>
    
    <content type="html"><![CDATA[<p>当我们买东西的时候，我们支付的不是钱。</p><p>我们支付的是我们生命中，去挣这笔钱所花掉的时间。</p><p>在我们创造的消费性社会，它还会持续不断的增长。</p><p>每当无法增长的时候，变成了悲剧。</p><p>我们为自己造了一座名叫【需求过剩】的大山。</p><p>你得不停的购买然后抛弃，在这个过程中，你却买不来生命，生命只会逝去。</p><p>浪费生命，失去自由是非常糟糕的</p><p>要懂得知足，不要给自己过重的负担，保持内心的幸福，否则你将一事无成。</p><p>出自《人类Human》（2015）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;当我们买东西的时候，我们支付的不是钱。&lt;/p&gt;
&lt;p&gt;我们支付的是我们生命中，去挣这笔钱所花掉的时间。&lt;/p&gt;
&lt;p&gt;在我们创造的消费性社会，它还会持续不断的增长。&lt;/p&gt;
&lt;p&gt;每当无法增长的时候，变成了悲剧。&lt;/p&gt;
&lt;p&gt;我们为自己造了一座名叫【需求过剩】的大山。&lt;/</summary>
      
    
    
    
    <category term="杂谈" scheme="https://vkcyan.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    
    <category term="价值观" scheme="https://vkcyan.github.io/tags/%E4%BB%B7%E5%80%BC%E8%A7%82/"/>
    
  </entry>
  
  <entry>
    <title>移动端兼容性那些事儿</title>
    <link href="https://vkcyan.github.io/2022/06/24/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
    <id>https://vkcyan.github.io/2022/06/24/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</id>
    <published>2022-06-23T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="低版本IOS系统Promise不存在finally事件"><a href="#低版本IOS系统Promise不存在finally事件" class="headerlink" title="低版本IOS系统Promise不存在finally事件"></a>低版本IOS系统Promise不存在finally事件</h3><p>​这是几年前生产环境发生的问题，通过错误监控看到了该错误，并且集中出现在ios10.0.x版本中，出现了，网上也有开发者遇到了IOS 10 Promise不存在问题，我们没遇到该情况，如果Promise对象不存在，则引入Promise的polyfill，如果仅仅是finally函数不存在则只需要手动补充即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">callback: any</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> P = <span class="variable language_">this</span>.<span class="property">constructor</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">        <span class="function">(<span class="params">value</span>) =&gt;</span> P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value),</span><br><span class="line">        <span class="function">(<span class="params">reason</span>) =&gt;</span></span><br><span class="line">        P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason</span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="IOS时间戳兼容性问题"><a href="#IOS时间戳兼容性问题" class="headerlink" title="IOS时间戳兼容性问题"></a>IOS时间戳兼容性问题</h3><p>​在ios无法解析使用<code>-</code>分割的时间字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022-6-27 12:00:00&#x27;</span>).<span class="title function_">getTime</span>() <span class="comment">// Android 正常获取 IOS NaN</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2022/6/27 12:00:00&#x27;</span>).<span class="title function_">getTime</span>() <span class="comment">// 均正常</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1656302400000</span>) <span class="comment">// 均正常</span></span><br></pre></td></tr></table></figure><p>​在移动端开发中建议统一采用时间戳记录时间，具体格式交给时间处理函数即可。</p><h3 id="移动端1px问题"><a href="#移动端1px问题" class="headerlink" title="移动端1px问题"></a>移动端1px问题</h3><h3 id="点击事件300ms延时问题"><a href="#点击事件300ms延时问题" class="headerlink" title="点击事件300ms延时问题"></a>点击事件300ms延时问题</h3><p>​因为历史原因，移动浏览器会在touch和click事件之间增加300ms等待时间，来判断用户是否会进行双击手势来缩放页面，自然该特性也会影响到单击事件，后来在Chrome团队的推动下，该问题逐渐有了清晰的<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=169642">解决方案</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&quot; /&gt; // 窗口自动调整到设备宽度，并禁止用户缩放页面</span><br></pre></td></tr></table></figure><p>​随着响应式设计的逐步推进，开发者们已经根据设备本身的尺寸对站点进行了优化，也就逐渐淘汰了诸如双击缩放的约定。</p><h3 id="移动端长按识别二维码无效"><a href="#移动端长按识别二维码无效" class="headerlink" title="移动端长按识别二维码无效"></a>移动端长按识别二维码无效</h3><p>​有些移动端开发者在使用类似uniapp这样的框架在开发H5应用中的，长按识别二维码的时候会出现不触发识别的情况，这是因为，长按识别图片信息仅仅在img标签生效，所以只需要使用原生img标签即可。</p><h3 id="微信小程序按钮边框无法覆盖问题"><a href="#微信小程序按钮边框无法覆盖问题" class="headerlink" title="微信小程序按钮边框无法覆盖问题"></a>微信小程序按钮边框无法覆盖问题</h3><p>​非常常见的问题，button的边框无法被css中的border正常覆盖掉，那是因为自带的边框是通过伪类实现的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">button</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IOS-input标签type为search时候右边有放大镜"><a href="#IOS-input标签type为search时候右边有放大镜" class="headerlink" title="IOS input标签type为search时候右边有放大镜"></a>IOS input标签type为search时候右边有放大镜</h3><p>​在ios中input的type值为search的时候，会自带一个搜索icon，而安卓则没有此icon，为了保证一致性，我们需要删除ios自带的搜索icon</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;search&quot;</span>]</span>&#123;-webkit-appearance:none;&#125; </span><br><span class="line"><span class="selector-tag">input</span>::-webkit-search-cancel-button &#123;<span class="attribute">display</span>: none;&#125;</span><br></pre></td></tr></table></figure><h3 id="公众号登录路由栈无法去除问题"><a href="#公众号登录路由栈无法去除问题" class="headerlink" title="公众号登录路由栈无法去除问题"></a>公众号登录路由栈无法去除问题</h3><h3 id="IOS系统微信公众号location跳转后，回退页面不刷新"><a href="#IOS系统微信公众号location跳转后，回退页面不刷新" class="headerlink" title="IOS系统微信公众号location跳转后，回退页面不刷新"></a>IOS系统微信公众号location跳转后，回退页面不刷新</h3><h3 id="Vue2-x-报错Cannot-read-property-‘-wrapper’-of-undefined"><a href="#Vue2-x-报错Cannot-read-property-‘-wrapper’-of-undefined" class="headerlink" title="Vue2.x 报错Cannot read property ‘_wrapper’ of undefined"></a>Vue2.x 报错Cannot read property ‘_wrapper’ of undefined</h3><p>​这个错误原则上也不算移动端错误了，但是这个报错信息确实会让人摸不着头脑，堆栈信息也无法明确看到具体报错位置，但是出现这个错误八成是因为@click事件在methods中未定义</p><h3 id="vue2-x-排序key值问题"><a href="#vue2-x-排序key值问题" class="headerlink" title="vue2.x 排序key值问题"></a>vue2.x 排序key值问题</h3><h3 id="如果JSON-stringify进行深拷贝时，一些引用类型的异常情况。"><a href="#如果JSON-stringify进行深拷贝时，一些引用类型的异常情况。" class="headerlink" title="如果JSON.stringify进行深拷贝时，一些引用类型的异常情况。"></a>如果JSON.stringify进行深拷贝时，一些引用类型的异常情况。</h3><h3 id="replaceAll兼容问题"><a href="#replaceAll兼容问题" class="headerlink" title="replaceAll兼容问题"></a>replaceAll兼容问题</h3><h3 id="uniappv3版本开发小程序-textarea事件绑定错乱"><a href="#uniappv3版本开发小程序-textarea事件绑定错乱" class="headerlink" title="uniappv3版本开发小程序 textarea事件绑定错乱"></a>uniappv3版本开发小程序 textarea事件绑定错乱</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;低版本IOS系统Promise不存在finally事件&quot;&gt;&lt;a href=&quot;#低版本IOS系统Promise不存在finally事件&quot; class=&quot;headerlink&quot; title=&quot;低版本IOS系统Promise不存在finally事件&quot;&gt;&lt;/a&gt;低版本IO</summary>
      
    
    
    
    <category term="日常开发" scheme="https://vkcyan.github.io/categories/%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="移动端" scheme="https://vkcyan.github.io/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    <category term="兼容性" scheme="https://vkcyan.github.io/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript设计模式</title>
    <link href="https://vkcyan.github.io/2022/06/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://vkcyan.github.io/2022/06/18/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-17T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript设计模式基础"><a href="#JavaScript设计模式基础" class="headerlink" title="JavaScript设计模式基础"></a>JavaScript设计模式基础</h2><p>JavaScript是一门经典动态类型语言，对变量类型的宽容给实际编码带来了很大灵活性。由于无需进行类型检测，我们可能尝试调用对象的任何方法，而无需去考虑它原本是否被设计拥有该方法。</p><p>​这一切都建立在鸭子类型的概念上，鸭子类型：如果它走起路来像鸭子，叫起来像鸭子，那他就是鸭子</p><p>​利用鸭子类型，我们就不必借助类型的帮助，实现一个动态语言专有原则：面向接口编程，而不是面向实现变成，例如一个对象，具备length属性，那我们就可以将其视为数组，而不需要关心它的实际类型。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>​同一个操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果</p><p>​例如：小狗汪汪叫 小猫喵喵叫 他们都是动物，都会发生，但是各自发出的声音并不一样</p><p>​其背后的思想是将“做什么”于“谁去做以及怎么样”分离开来，也就是将“不变的事物”于“变化的事物”分离开来。这给予了我们拓展程序的能力，程序看起来是可生长的，也是符合开放封闭原则的，相对于修改代码，增加代码显然优雅安全的多。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sound</span>(<span class="params">animal</span>) &#123;</span><br><span class="line">  animal.<span class="title function_">sound</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Dog</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sound</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;汪汪汪&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Cat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sound</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;喵喵喵&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Dog</span>().<span class="title function_">sound</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Cat</span>().<span class="title function_">sound</span>()</span><br></pre></td></tr></table></figure><p>如果是强类型语言就需要借助继承来实现<strong>向上转型</strong>，从狗可以发出叫声转变为动物可以发出叫声，从而避免我们指定了发出声音对象是某一个类型，他就不可能被替换成为另一个类型。</p><p>​多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装的目的是将信息隐藏，封装应该被视为“任何形式的封装”，也就是说，封装不仅仅是隐藏数据，还包括隐藏实现细节，设计细节以及隐藏对象的类型。</p><h3 id="原型编程"><a href="#原型编程" class="headerlink" title="原型编程"></a>原型编程</h3><p>JavaScript本身就是基于原型的面向对象语言，它的对象系统就是使用原型模式来搭建的，在这里称之为原型编程范型业务更加合适。</p><p>​在JavaScript中不存在类的概念，对象也并非从类中创建出来，所有的JavaScript对象都是从某个对象上复制出来的。</p><p>​原型编程存在一个重要特性，即当对象无法响应某个请求的时候，就会把该请求委托给自己的原型；这里更好的说法是把请求委托给它的构造器的原型</p><p>​在JavaScript中，一个function并不一定仅仅是一个普通函数，也可以是一个函数构造器，当使用new运算符来调用函数的时候，此时函数就是一个构造器。使用new运算符来创建对象的过程，实际上也只是先克隆<code>Object.prototype</code>，再进行一些其他额外操作的过程。</p><h4 id="原型链查找对象的过程"><a href="#原型链查找对象的过程" class="headerlink" title="原型链查找对象的过程"></a>原型链查找对象的过程</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> = &#123; <span class="attr">name</span>: <span class="string">&quot;sven&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><ol><li>首先尝试遍历对象b中的所有属性，但是没有找到name这个属性</li><li>查找name属性的请求被委托到对象b的构造器原型，它被<code>b._proto_</code>记录并指向B.prototype，而B.prototype又直线new A()创建的对象</li><li>再该对象中依旧没有找到name属性，于是请求又被委托到这个对象的构造器的原型A.prototype</li><li>在A.prototype中找到了name属性，返回值</li></ol><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="闭包案例"><a href="#闭包案例" class="headerlink" title="闭包案例"></a>闭包案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ff = <span class="title function_">func</span>();</span><br><span class="line"><span class="title function_">ff</span>();</span><br><span class="line"><span class="title function_">ff</span>();</span><br><span class="line"><span class="title function_">ff</span>();</span><br></pre></td></tr></table></figure><p>​局部变量在函数执行结束后将会被销毁，但是以上的例子中，局部变量a并没有消失，而是似乎一直在某个地方存活着。这是因为当执行func的时候，func返回了一个匿名函数的引用，它可以访问到func被调用时产生的环境，而局部变量所在的环境一直处于这个环境中。既然局部变量所处的环境还能被外界访问，这个局部变量就有了不被销毁的理由；在这样的闭包结构中，局部变量实现了生命的延续。</p><h4 id="闭包与面向对象"><a href="#闭包与面向对象" class="headerlink" title="闭包与面向对象"></a>闭包与面向对象</h4><p><strong>过程与数据的结合</strong>是形容面向对象中的<strong>对象</strong>时常用的表达</p><p>对象以方法的形式包含了过程，而闭包则是在过程中以环境的形式包含了数据</p><p>通常用面向对象实现的功能，用闭包也能实现，反之亦然。</p><p>闭包版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">call</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      value++;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">App</span> = <span class="title function_">app</span>();</span><br><span class="line"><span class="title class_">App</span>.<span class="title function_">call</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="title class_">App</span>.<span class="title function_">call</span>(); <span class="comment">// 2</span></span><br><span class="line"><span class="title class_">App</span>.<span class="title function_">call</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="对象版本"><a href="#对象版本" class="headerlink" title="对象版本"></a>对象版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">call</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 1</span></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 2</span></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="类版本"><a href="#类版本" class="headerlink" title="类版本"></a>类版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">App</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">App</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">App</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 1</span></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 2</span></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数是指最少满足下列条件之一的函数</p><ul><li>函数可以作为参数被传递</li><li>函数可以作为返回值输出</li></ul><p>​JavaScript语言的函数显然满足高阶函数，在实际开发中将函数作为参数进行传递，让函数的执行结果返回一个另一个函数都是非常普遍的情况，例如函数执行的callback函数。</p><p>​通过高阶特性，我们可以实现AOP，也就是面向切面编程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面向切面编程</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">before</span> = <span class="keyword">function</span> (<span class="params">beforeFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        beforeFn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 执行before本身</span></span><br><span class="line">        <span class="keyword">return</span> _self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 返回函数本身</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span> (<span class="params">afterFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> ret = _self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 先执行before</span></span><br><span class="line">        afterFn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 最后执行after</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">func = func</span><br><span class="line">    .<span class="title function_">before</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">after</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">func</span>();</span><br></pre></td></tr></table></figure><ul><li>首先执行<code>before</code>，打印‘before’，然后执行<code>after</code>，打印‘after’</li><li>执行func()，开始执行after，进入after闭包中，然后执行ret，进入before</li><li>before中首先执行了自己beforeFn，打印‘1’，然后执行func本身，打印‘2’，并返回本身</li><li>ret执行结束，开始执行afterFn，打印‘3’，返回func本身</li></ul><h4 id="高阶应用-函数柯里化"><a href="#高阶应用-函数柯里化" class="headerlink" title="高阶应用 - 函数柯里化"></a>高阶应用 - 函数柯里化</h4><p>​柯里化又被称为部分求值，一个柯里化函数首先会接受一些参数，接收参数后不会立刻求职而是继续返回当前函数，之前传入的值在函数形成的闭包种被保存了起来。待函数真正需要求值的时候，之前传入的所有参数都会被一次性求值。</p><p>​例如实现一个计算每个月花费多少钱的函数，但是在实现中，我们并不关心吗，每天花费了多少，只想知道月底花掉了多少，实际上只需要计算一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> res = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">            args = [];</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [].<span class="property">push</span>.<span class="title function_">apply</span>(args, <span class="variable language_">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>; <span class="comment">// 当前正在执行的函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cost = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> money = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="variable language_">arguments</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">            money += <span class="variable language_">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> cost = <span class="title function_">currying</span>(cost);</span><br><span class="line"><span class="title function_">cost</span>(<span class="number">100</span>)(<span class="number">100</span>)(<span class="number">100</span>)(<span class="number">100</span>);</span><br><span class="line"><span class="title function_">cost</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cost</span>()); <span class="number">500</span></span><br><span class="line"><span class="title function_">cost</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cost</span>()); <span class="number">600</span></span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>​要实现一个单例模式并不复杂，无非是用一个变量来标志是否已经为某个类创建过对象，如果是，则下一次获取该类的实例，直接返回之前创建的对象。</p><blockquote><p>vue2.x 中的vuex在页面与组件中进行挂载使用的就是单例模式</p></blockquote><h3 id="使用代理实现单例模式"><a href="#使用代理实现单例模式" class="headerlink" title="使用代理实现单例模式"></a>使用代理实现单例模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createDiv = <span class="keyword">function</span> (<span class="params">html</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">html</span> = html;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">&#125;;</span><br><span class="line">createDiv.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">html</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxySingletonCreateDiv = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">html</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title function_">createDiv</span>(html);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">proxySingletonCreateDiv</span>(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">proxySingletonCreateDiv</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript的单例模式"><a href="#JavaScript的单例模式" class="headerlink" title="JavaScript的单例模式"></a>JavaScript的单例模式</h3><p>​单例模式的核心是确保只有一个实例，比提供全局访问。在JavaScript中很多都会通过全局变量进行实现，但是JavaScript的全局变量并不是非常好的特性，在中大型项目中会存在命名冲突问题，所以应当尽量使用命名空间。</p><h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><p>​在未使用之前，相关逻辑不会被创建，并且只有第一次使用的时候才会创建，同时我们别忘记了单一职责原则</p><p>​在下面的代码中，我们将创建单例与具体单例逻辑进行分离，这两个方法独立变化而且互不影响，这样避免了下次出现其他元素，我们需要将整个单例函数都复制一遍的情况，而是只需要创建对应的创建函数即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSingle</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result || (result = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLoginLayer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="string">&quot;我是登录弹窗&quot;</span>;</span><br><span class="line">    div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingLoginLayer = <span class="title function_">getSingle</span>(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;loginBtn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = <span class="title function_">createSingLoginLayer</span>();</span><br><span class="line">    loginLayer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​单例模式是一种简单，但是非常实用的模式，特别是惰性单例技术，在合适的时候再去创建对象，并且只创建唯一一个，同时我们将创建对象与管理单例的职责分开到不同方法中，这样的模式更加体验单例模式的优势。</p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>​策略模式：定义一系列的算法，把它们一个个的封装起来，并且使它们可以相互替换。</p><p>​案例：某个公司年终奖方式为基础工资乘以效绩等级，S为基础工资的4倍，A为基础工资的3倍，我们实用策略模式进行实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performatceS = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;; <span class="comment">// 效绩为S 工资算法</span></span><br><span class="line">performatceS.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> performatceA = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;; <span class="comment">// 效绩为A 工资算法</span></span><br><span class="line">performatceA.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Bonus</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = <span class="literal">null</span>; <span class="comment">// 基础工资</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">strategy</span> = <span class="literal">null</span>; <span class="comment">// 具体算法</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setSalary</span> = <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = salary;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setStrategy</span> = <span class="keyword">function</span> (<span class="params">strategy</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">strategy</span> = strategy;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getBonus</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">strategy</span>.<span class="title function_">calculate</span>(<span class="variable language_">this</span>.<span class="property">salary</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bonus1 = <span class="keyword">new</span> <span class="title class_">Bonus</span>();</span><br><span class="line">bonus1.<span class="title function_">setSalary</span>(<span class="number">10000</span>);</span><br><span class="line">bonus1.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title function_">performatceS</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;效绩为A&quot;</span>, bonus1.<span class="title function_">getBonus</span>()); <span class="comment">// 40000</span></span><br><span class="line"></span><br><span class="line">bonus1.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title function_">performatceA</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;效绩为A&quot;</span>, bonus1.<span class="title function_">getBonus</span>()); <span class="comment">// 30000</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript中策略模式的体现"><a href="#JavaScript中策略模式的体现" class="headerlink" title="JavaScript中策略模式的体现"></a>JavaScript中策略模式的体现</h3><p>以上是类的实现方法，在JavaScript中我们可以通过函数进行实现，代码将会简洁很多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> srtategies = &#123;&#125;;</span><br><span class="line">srtategies.<span class="property">S</span> = <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line">srtategies.<span class="property">A</span> = <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> calclateBonus = <span class="keyword">function</span> (<span class="params">level, salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> srtategies[level](salary);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;效绩为S&quot;</span>, <span class="title function_">calclateBonus</span>(<span class="string">&quot;S&quot;</span>, <span class="number">10000</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;效绩为A&quot;</span>, <span class="title function_">calclateBonus</span>(<span class="string">&quot;A&quot;</span>, <span class="number">10000</span>));</span><br></pre></td></tr></table></figure><h3 id="多态在策略模式中的体现"><a href="#多态在策略模式中的体现" class="headerlink" title="多态在策略模式中的体现"></a>多态在策略模式中的体现</h3><p>​通过使用策略模式，我们可以消除程序中大量的ifelse语句，并将我们将具体逻辑与实际执行函数进行分离，执行函数没有计算能力，而是委托某个策略对象来完成奖金计算，这正是多态性的体现。</p><h3 id="策略模式在表单校验的应用"><a href="#策略模式在表单校验的应用" class="headerlink" title="策略模式在表单校验的应用"></a>策略模式在表单校验的应用</h3><p>​在通过JavaScript表单校验的场景中,我们可以通过ifelse进行校验判断，但是这种方式不符合单一职责，开放封闭原则，我们可以通过策略模式来优化他，将通用的校验逻辑与具体校验条件进行解耦合。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 校验逻辑</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果同时设置了required与verify，将会忽略required</span></span><br><span class="line"><span class="comment"> * verify为自定义校验函数 可以理解为一旦写了verify,其他参数都不需要写了</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 被校验对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> validate 校验规则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isOne 是否校验到错误就立刻返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">starValidate</span>(<span class="params">data, validate, isOne</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">errBack</span>: any[] = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (validate[key]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (validate[key].<span class="property">verify</span>) &#123;</span><br><span class="line">        validate[key].<span class="title function_">verify</span>(&#123; <span class="attr">data</span>: data[key], <span class="attr">allData</span>: data &#125;, <span class="function">(<span class="params">errMsg</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (errMsg) &#123;</span><br><span class="line">            errBack.<span class="title function_">push</span>(errMsg)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errBack.<span class="title function_">push</span>(validate[key].<span class="title function_">callback</span>(data))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 开启校验</span></span><br><span class="line">        <span class="keyword">if</span> (validate[key].<span class="property">required</span>) &#123;</span><br><span class="line">          <span class="comment">// 数据不存在</span></span><br><span class="line">          <span class="keyword">if</span> (!data[key]) &#123;</span><br><span class="line">            errBack.<span class="title function_">push</span>(validate[key].<span class="title function_">callback</span>(data))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isOne &amp;&amp; errBack.<span class="property">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;处理结果&#x27;</span>, errBack)</span><br><span class="line">  <span class="keyword">if</span> (errBack.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isOne) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(errBack[<span class="number">0</span>])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(errBack)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验条件</span></span><br><span class="line"><span class="keyword">const</span> validateRules = &#123;</span><br><span class="line">  <span class="attr">cashingInstructions</span>: &#123;</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">callback</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">selector</span>: <span class="string">&#x27;.open_prize&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入字段cashingInstructions&#x27;</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">lotteryDescription</span>: &#123;</span><br><span class="line">    <span class="attr">verify</span>: <span class="function">(<span class="params">&#123; data &#125;, err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data == <span class="string">&#x27;[]&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">err</span>(&#123;</span><br><span class="line">          <span class="attr">selector</span>: <span class="string">&#x27;.launch_total&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;请输入字段lotteryDescription&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line"><span class="attr">cashingInstructions</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">lotteryDescription</span>:<span class="string">&#x27;[]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现表单校验</span></span><br><span class="line"> <span class="title function_">starValidate</span>(data, validateRules, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="策略模式的优缺点"><a href="#策略模式的优缺点" class="headerlink" title="策略模式的优缺点"></a>策略模式的优缺点</h3><p>优点</p><ul><li>策略模式利用组合，委托和多态等技术与思想，可以有效避免多重条件选择语句</li><li>策略模式符合开放封闭原则，将具体逻辑单独封装，使其易于理解易于拓展</li><li>策略模式的策略函数可以再多项目之间复用，避免复制粘贴工作</li></ul><p>缺点</p><ul><li>相对于ifelse，策略模式的整体代码量会有所增加</li><li>调用者需要对策略细节可能了解，才能很好的使用该策略，这违反了最少知识原则，增加了使用成本</li></ul><h3 id="一等公民函数与策略模式"><a href="#一等公民函数与策略模式" class="headerlink" title="一等公民函数与策略模式"></a>一等公民函数与策略模式</h3><p>​在函数作为一等公民的语言中，策略模式是隐形的具体策略的值就是函数变量。</p><p>​在JavaScript这种将函数作为一等对象的语言中，策略模式已经融入到语言中，例如我们经常使用高阶函数来封装不同行为，并且将它传递到另一个函数中，当我们对这些函数发出“调用”的消息，不同的函数会返回不同的结果，函数对象的多态性来到更加简单。</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>​代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个提升对象来控制对这个对象的访问，客户实际上访问的是替身对象。</p><p>小红想找心仪的对象让小明作为自己的媒人(代理人)</p><p>保护代理：张三找过来了，但是张三没车没房，小红便直接帮他拒绝</p><p>虚拟代理：介绍给小明是非常重要的事情，李四对小红有兴趣，给小明好处费，小明便在小红心情好的时候给其介绍（延迟到正常需要的时候再创建）</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>​对一个类&#x2F;函数&#x2F;对象而言，应该仅有一个引起它变化的原因，如果一个对象承担了多种职责，就意味着这个对象将变得巨大，引起它变化的原因将会有多种。面向对象估计设计将行为分布到细颗粒度的对象中，如果一个对象承担的职责过多，等于把这些职责耦合在一起，这种耦合会导致脆弱和低内聚的设计，当变化发生时，设计会遭到意外的破坏。</p><h3 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h3><p>​例如我们为了更好的性能将一些数据处理成为另外的数据格式，但是2年后上游帮助我们处理过了，我们不再需要额外处理，就不得不在改动原本函数中的代码</p><p>​我们可以使用代理模式 达到不改动原对象的情况下，为其提供新的行为，他们各自变化，也不影响对象。</p><h3 id="代理与本体接口的一致性"><a href="#代理与本体接口的一致性" class="headerlink" title="代理与本体接口的一致性"></a>代理与本体接口的一致性</h3><p>​通常来说，代理对象对外提供的方法名称会与本体名称保持一致，这样可以在任何使用本体的地方替换成使用代理</p><h3 id="代理模式-合并http请求"><a href="#代理模式-合并http请求" class="headerlink" title="代理模式-合并http请求"></a>代理模式-合并http请求</h3><p>​这是一个应用案例，文中的例子我在日常生活中也经历过，将每次点击都请求转变为收集2s类所有请求，并统一发送出去，发送请求时一个函数，何时发送，发送什么，时另一个函数，其中用到了节流函数来控制请求频率</p><h3 id="代理模式-空间复杂度换取时间复杂度"><a href="#代理模式-空间复杂度换取时间复杂度" class="headerlink" title="代理模式 - 空间复杂度换取时间复杂度"></a>代理模式 - 空间复杂度换取时间复杂度</h3><p>面对非常复杂的计算逻辑，我们可以保存每一次的计算结果，下一个再来同样的参数可以直接走缓存，不再需要计算，这样增加空间，但是缩小了时间。</p><h3 id="代理模式示例"><a href="#代理模式示例" class="headerlink" title="代理模式示例"></a>代理模式示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> muit = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    a = a * <span class="variable language_">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plus = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    a = a + <span class="variable language_">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理模式函数</span></span><br><span class="line"><span class="keyword">var</span> ceateProxyFactory = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">join</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;存在缓存&quot;</span>, args,cache);</span><br><span class="line">      <span class="keyword">return</span> cache[args];</span><br><span class="line">    &#125;</span><br><span class="line">    cache[args] = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> cache[args];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> muitFun = <span class="title function_">ceateProxyFactory</span>(muit);</span><br><span class="line"><span class="keyword">var</span> plusFun = <span class="title function_">ceateProxyFactory</span>(plus);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">muitFun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 120</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">muitFun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 走缓存 120</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">plusFun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">plusFun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 走缓存 15</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​总体来说代理模式相对简单并且常用，就算一名开发人员没听过这个名词也会写出比较优秀的代理模式代码，并且代理模式不需要预先考虑，需要用到的时候再编写代理函数也不迟。</p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h3 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h3><p>​完全接手整个迭代过程，外部只需要初始调用即可，外界不需要关心迭代器的内部实现，但是这也是内部迭代器的缺点</p><p>​例如JavaScript的<code>map</code> <code>forEach</code></p><h3 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h3><p>​外部迭代器必须显式的请求迭代下一个元素，外部迭代器增加了程序的复杂度，但是也增强了迭代器的灵活性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> next = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    current += <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> getItem = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[current];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next,</span><br><span class="line">    getItem,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​再具体业务中，使用何种迭代器并无优劣，根据实际场景而定。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​大部分语言已经内置了迭代器，并且使用频率高、门槛低；迭代器是一种非常简单设计模式，简单到大部分人不认为他是一种迭代器。</p><h2 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h2><p>​发布-订阅模式它订阅了一种一对多的依赖关系,当一个对象的状态发生改变的时，所有依赖于它的对象都将得到通知</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>​小明看重了某一个小区的热门户型，并且得到消息，后期还会开放一批，但是时间未知，于是小明找到售楼处，预留了自己的电话号码，让售楼处在开发房源的时候通知他，同理，小张、小王都预留了手机号码，于是售楼处就会在房源发布的时候通知预留电话的客户。</p><p>​客户想知道房源开售消息，于是他订阅了售楼处，售楼处得到消息后，第一时间将消息发布给订阅者，这样具备显而易见的优点。</p><ul><li>小明不需要天天给售楼处打电话，在合适的时间售楼处会通知购房者</li><li>购房者于售楼处不再有强耦合关系</li></ul><h3 id="发布-订阅模式的作用"><a href="#发布-订阅模式的作用" class="headerlink" title="发布-订阅模式的作用"></a>发布-订阅模式的作用</h3><p>​以上场景于程序中的异步场景是非常相似的，例如我们订阅ajax的error事件，我们无需关心异步运行期间的内部状态，只需要订阅需要的事件发生点即可。</p><p>​另外发布-订阅模式可以取代对象之间硬编码的通知机制，一个对象不用再显式的调用另一个对象的某个接口。</p><h3 id="dom事件"><a href="#dom事件" class="headerlink" title="dom事件"></a>dom事件</h3><p>​我们使用dom绑定事件函数就是发布-订阅模式的实际应用，我们不知道用户会在什么时候点击点击，所以我们订阅了dom本身的click事件。</p><h3 id="自定义发布-订阅事件"><a href="#自定义发布-订阅事件" class="headerlink" title="自定义发布-订阅事件"></a>自定义发布-订阅事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;;</span><br><span class="line">salesOffices.<span class="property">clientList</span> = [];</span><br><span class="line">salesOffices.<span class="property">listen</span> = <span class="keyword">function</span> (<span class="params">key, fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建订阅关联关系</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">clientList</span>[key]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">clientList</span>[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clientList</span>[key].<span class="title function_">push</span>(fn);</span><br><span class="line">&#125;;</span><br><span class="line">salesOffices.<span class="property">trigger</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取订阅数组</span></span><br><span class="line">    <span class="keyword">var</span> key = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="variable language_">this</span>.<span class="property">clientList</span>[key];</span><br><span class="line">    <span class="comment">// 不存在订阅数组则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!fns || fns.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行订阅数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> fn = fns[i];</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 小明订阅</span></span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="string">&quot;sq88&quot;</span>, <span class="keyword">function</span> (<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是小明，88平方&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格=&quot;</span>, price);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="string">&quot;sq88&quot;</span>, <span class="keyword">function</span> (<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是小强，88平方&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格=&quot;</span>, price);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 小红订阅</span></span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="string">&#x27;sq110&#x27;</span>, <span class="keyword">function</span> (<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是小红，110平方&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格=&quot;</span>, price);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.<span class="title function_">trigger</span>(<span class="string">&quot;sq88&quot;</span>, <span class="number">20000000</span>);</span><br><span class="line">salesOffices.<span class="title function_">trigger</span>(<span class="string">&quot;sq110&quot;</span>, <span class="number">30000000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我是小明，88平方</span></span><br><span class="line"><span class="comment">// 价格=20000000</span></span><br><span class="line"><span class="comment">// 我是小强，88平方</span></span><br><span class="line"><span class="comment">// 价格=20000000</span></span><br><span class="line"><span class="comment">// 我是小红，110平方</span></span><br><span class="line"><span class="comment">// 价格=30000000</span></span><br></pre></td></tr></table></figure><h3 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h3><p>​取消订阅只需要将订阅数组中的指定订阅函数删除即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * key 订阅类型</span></span><br><span class="line"><span class="comment"> * fn 订阅函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">salesOffices.<span class="property">remove</span> = <span class="keyword">function</span> (<span class="params">key, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="variable language_">this</span>.<span class="property">clientList</span>[key];</span><br><span class="line">    <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">        <span class="comment">// 没有传入具体的回调地址，则取消所有订阅函数</span></span><br><span class="line">        <span class="keyword">if</span> (fns) &#123;</span><br><span class="line">            fns.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> fnItem = fns[i];</span><br><span class="line">            <span class="keyword">if</span> (fnItem === fn) &#123;</span><br><span class="line">                fns.<span class="title function_">splice</span>(i, <span class="number">1</span>); <span class="comment">// 删除订阅函数回调</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="关于网站登录的实际应用"><a href="#关于网站登录的实际应用" class="headerlink" title="关于网站登录的实际应用"></a>关于网站登录的实际应用</h3><p>场景：用户登录完成后，我们需要刷新不相邻模块的数据，这种异步问题，我们一般通过回调函数的方式解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">login.<span class="title function_">succ</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">header.<span class="title function_">setAvatar</span>(data.<span class="property">avatar</span>)</span><br><span class="line">    nav.<span class="title function_">setAvatar</span>(data.<span class="property">avatar</span>)</span><br><span class="line">    message.<span class="title function_">refresh</span>()</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​这种编写方式将组件数据于信息产生了强耦合关系，如果在未来，我们又增加了一个模块，则需要再次修改改回调函数</p><p>​而通过发布-订阅模式，我们就可以在不同模块中订阅用户信息状态的变化，当登录成功的时候，登录模块发布消息到订阅他的模块中，至于各个模块做了什么，登录模块并不关心。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">login.<span class="title function_">listen</span>(<span class="string">&#x27;loginSucc&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 登录成功，用户数据获取完毕</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="全局模式下的发布-订阅模式"><a href="#全局模式下的发布-订阅模式" class="headerlink" title="全局模式下的发布-订阅模式"></a>全局模式下的发布-订阅模式</h3><p>​全局状态下的发布-订阅可以在两个毫不相关的模块之间进行使用，这样就能保持模块的封装性</p><p>​但是这里也需要留意一个问题，如果模块之间又太多的全局发布-订阅模式，就会造成消息流向混乱问题，这会导致维护上出现一些问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Event</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> clientList = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> listen;</span><br><span class="line">    <span class="keyword">var</span> trigger;</span><br><span class="line">    <span class="keyword">var</span> remove;</span><br><span class="line">    listen = <span class="keyword">function</span> (<span class="params">key, fn</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建订阅关联关系</span></span><br><span class="line">        <span class="keyword">if</span> (!clientList[key]) &#123;</span><br><span class="line">            clientList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        clientList[key].<span class="title function_">push</span>(fn);</span><br><span class="line">    &#125;;</span><br><span class="line">    trigger = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 获取订阅数组</span></span><br><span class="line">        <span class="keyword">var</span> key = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line">        <span class="comment">// 不存在订阅数组则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行订阅数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> fn = fns[i];</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    remove = <span class="keyword">function</span> (<span class="params">key, fn</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line">        <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">            <span class="comment">// 没有传入具体的回调地址，则取消所有订阅函数</span></span><br><span class="line">            <span class="keyword">if</span> (fns) &#123;</span><br><span class="line">                fns.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">const</span> fnItem = fns[i];</span><br><span class="line">                <span class="keyword">if</span> (fnItem === fn) &#123;</span><br><span class="line">                    fns.<span class="title function_">splice</span>(i, <span class="number">1</span>); <span class="comment">// 删除订阅函数回调</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        listen,</span><br><span class="line">        trigger,</span><br><span class="line">        remove,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> xm = <span class="keyword">function</span> (<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小明价格&quot;</span>, price);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Event</span>.<span class="title function_">listen</span>(<span class="string">&quot;sq88&quot;</span>, xm); <span class="comment">// 订阅</span></span><br><span class="line"><span class="title class_">Event</span>.<span class="title function_">listen</span>(<span class="string">&quot;sq110&quot;</span>, xm); <span class="comment">// 订阅</span></span><br><span class="line"><span class="title class_">Event</span>.<span class="title function_">remove</span>(<span class="string">&quot;sq88&quot;</span>, xm); <span class="comment">// 取消订阅</span></span><br><span class="line"><span class="title class_">Event</span>.<span class="title function_">trigger</span>(<span class="string">&quot;sq88&quot;</span>, <span class="number">220000</span>); <span class="comment">// 发布</span></span><br><span class="line"><span class="title class_">Event</span>.<span class="title function_">trigger</span>(<span class="string">&quot;sq110&quot;</span>, <span class="number">2020000</span>); <span class="comment">// 发布</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript实现发布-订阅模式的便利性"><a href="#JavaScript实现发布-订阅模式的便利性" class="headerlink" title="JavaScript实现发布-订阅模式的便利性"></a>JavaScript实现发布-订阅模式的便利性</h3><h4 id="推模型"><a href="#推模型" class="headerlink" title="推模型"></a>推模型</h4><p>​事情发生的时候，发布者会一次性将所有改变的状态与数据都推送给订阅者</p><h4 id="拉模型"><a href="#拉模型" class="headerlink" title="拉模型"></a>拉模型</h4><p>​事情发生的时候，发布者只会告诉所有订阅者，需要订阅者手动去拉去</p><p>​而在JavaScript中，因为语言特性的存在，是我们可以非常方便的将所有参数通过arguments传入订阅者，所以我们使用推模型来完成消息的订阅与发布。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>对象之间的解耦合，可以帮助我们写出更好的应对异步编程的场景。</li><li>通过订阅-发布模式可以实现以此为特性的解决方案，例如MVVM。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>创建订阅-发布模式需要消耗一定的时间与内存。</li><li>订阅的消息会一直留存在内存中，产生了无意义的消耗。</li><li>过度使用订阅-发布会导致程序难以追踪与维护。</li></ul><p>​</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>​有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者与请求接收者能够消除彼此之间的耦合关系</p><p>​命令模式还需要支持撤销、排队等等操作</p><h3 id="命令模式的例子-菜单程序（面向对象）"><a href="#命令模式的例子-菜单程序（面向对象）" class="headerlink" title="命令模式的例子-菜单程序（面向对象）"></a>命令模式的例子-菜单程序（面向对象）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> btn3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="keyword">function</span> (<span class="params">btn, commm</span>) &#123;</span><br><span class="line">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        commm.<span class="title function_">execute</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MenuBar</span> = &#123;</span><br><span class="line">    <span class="attr">refresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;刷新菜单目录&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">SubMenu</span> = &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;增加子菜单&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">del</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除子菜单&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RefreshMenuBarCommand</span> = <span class="keyword">function</span> (<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">RefreshMenuBarCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">refresh</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">AddSubMenuCommand</span> = <span class="keyword">function</span> (<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AddSubMenuCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">add</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">DelSubMenuCommand</span> = <span class="keyword">function</span> (<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DelSubMenuCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">del</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="keyword">new</span> <span class="title class_">RefreshMenuBarCommand</span>(<span class="title class_">MenuBar</span>);</span><br><span class="line"><span class="keyword">var</span> addSubMenuCommand = <span class="keyword">new</span> <span class="title class_">AddSubMenuCommand</span>(<span class="title class_">SubMenu</span>);</span><br><span class="line"><span class="keyword">var</span> delSubMenuCommand = <span class="keyword">new</span> <span class="title class_">DelSubMenuCommand</span>(<span class="title class_">SubMenu</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setCommand</span>(btn1, refreshMenuBarCommand); <span class="comment">// 将div与方法做好绑定关系,同时约定一个触发指令点击btn1触发refresh内部预留的execute方法</span></span><br><span class="line"><span class="title function_">setCommand</span>(btn2, addSubMenuCommand);</span><br><span class="line"><span class="title function_">setCommand</span>(btn3, delSubMenuCommand);</span><br></pre></td></tr></table></figure><h3 id="命令模式的例子-菜单程序（面向函数）"><a href="#命令模式的例子-菜单程序（面向函数）" class="headerlink" title="命令模式的例子-菜单程序（面向函数）"></a>命令模式的例子-菜单程序（面向函数）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindClick = <span class="keyword">function</span> (<span class="params">btn, func</span>) &#123;</span><br><span class="line">    btn.<span class="property">onclick</span> = func;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">bindClick</span>(btn1, <span class="title class_">MenuBar</span>.<span class="property">refresh</span>);</span><br><span class="line"><span class="title function_">bindClick</span>(btn2, <span class="title class_">SubMenu</span>.<span class="property">add</span>);</span><br><span class="line"><span class="title function_">bindClick</span>(btn3, <span class="title class_">SubMenu</span>.<span class="property">del</span>);</span><br></pre></td></tr></table></figure><p>命令模式的由来，其实就是回调（callback）函数的一个面向对象的替代品</p><p>而再JavaScript这样函数作为一等公平的语言中，命令模式早已经融入到语言之中，函数本身就可以被四处传递，即时我们依旧需要请求“接收者”，那也未必使用面向对象的方式，闭包同样可以完成同样的功能。</p><h3 id="命令模式的例子-菜单程序（闭包）"><a href="#命令模式的例子-菜单程序（闭包）" class="headerlink" title="命令模式的例子-菜单程序（闭包）"></a>命令模式的例子-菜单程序（闭包）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="keyword">function</span> (<span class="params">btn, func</span>) &#123;</span><br><span class="line">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">func</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RefreshMenuBarCommand</span> = <span class="keyword">function</span> (<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        receiver.<span class="title function_">refresh</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="title class_">RefreshMenuBarCommand</span>(<span class="title class_">MenuBar</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setCommand</span>(btn1, refreshMenuBarCommand);</span><br></pre></td></tr></table></figure><h3 id="命令模式-回放"><a href="#命令模式-回放" class="headerlink" title="命令模式 - 回放"></a>命令模式 - 回放</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Ryu</span> = &#123;</span><br><span class="line">    <span class="attr">attack</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;攻击&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">defense</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;防御&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">jump</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;跳跃&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">crouch</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;蹲下&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> makeCommand = <span class="keyword">function</span> (<span class="params">receiver, state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        receiver[state]();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> commandStack = []; <span class="comment">// 保存命令堆栈</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeypress</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> commands = &#123;</span><br><span class="line">        <span class="number">119</span>: <span class="string">&quot;jump&quot;</span>, <span class="comment">// w</span></span><br><span class="line">        <span class="number">115</span>: <span class="string">&quot;crouch&quot;</span>, <span class="comment">// s</span></span><br><span class="line">        <span class="number">97</span>: <span class="string">&quot;defense&quot;</span>, <span class="comment">// a</span></span><br><span class="line">        <span class="number">100</span>: <span class="string">&quot;attack&quot;</span>, <span class="comment">// d</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (commands[ev.<span class="property">keyCode</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> command = <span class="title function_">makeCommand</span>(<span class="title class_">Ryu</span>, commands[ev.<span class="property">keyCode</span>]);</span><br><span class="line">        <span class="title function_">command</span>(); <span class="comment">// 执行命令</span></span><br><span class="line">        commandStack.<span class="title function_">push</span>(command); <span class="comment">// 保存到堆栈</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;replay&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> command;</span><br><span class="line">    <span class="keyword">while</span> ((command = commandStack.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        <span class="title function_">command</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="宏命令"><a href="#宏命令" class="headerlink" title="宏命令"></a>宏命令</h3><p>​宏命令是一组命令的集合，通过执行宏命令的方式，可以一次执行一批命令。</p><p>​在创建命令模式的时候，增加一个add方法来增加命令，并保存到任务对略，最后调用execute方法依次执行即可</p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>​命令模式在JavaScript中因为高阶函数的存在，让其不太显眼，本质上他是将具体调用与调用的具体逻辑进行分离，具体逻辑就是命令的体现。</p><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>​组合模式需要通过对象的多态性进行体现，是的用户对单个对象和组合对象的使用具有一致性</p><p><img src="https://www.vkcyan.top/image-20220618165949858.png" alt="image-20220618165949858"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>​这里定义了一个通用函数execute来作为组合模式的桥梁，完成对象树的构建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;button&quot;</span>&gt;按我&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> <span class="title class_">MacroCommand</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">commandsList</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">command</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">commandsList</span>.<span class="title function_">push</span>(command);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">commandsList</span>.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">commandsList</span>[i].<span class="title function_">execute</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> openAcCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开空调&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> openTvCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开电视&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> openSoundCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开音响&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> macroCommand1 = <span class="title class_">MacroCommand</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand1.<span class="title function_">add</span>(openTvCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand1.<span class="title function_">add</span>(openSoundCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> closeDoorCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;关门&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> openPcCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开电脑&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> openQQCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;登录QQ&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> macroCommand2 = <span class="title class_">MacroCommand</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand2.<span class="title function_">add</span>(closeDoorCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand2.<span class="title function_">add</span>(openPcCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand2.<span class="title function_">add</span>(openQQCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> macroCommand = <span class="title class_">MacroCommand</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand.<span class="title function_">add</span>(openAcCommand); <span class="comment">// 如果是基本对象,就是直接触发到其本身的execute方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand.<span class="title function_">add</span>(macroCommand1); <span class="comment">// 如果是复杂对象,则触发到下一级的execute,然后以深度优点遍历直到最底部的基本对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand.<span class="title function_">add</span>(macroCommand2);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> setCommand = (<span class="keyword">function</span> (<span class="params">command</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        command.<span class="title function_">execute</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)(macroCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>​组合模式最大的优点在于可以一致地对待组合对象与基本对象。客户不需要关心当前处理的是谁，只要它是一个命令，并且有execute方法，这个命令就可以被执行。</p><p>​得益于JavaScript是动态类型语言，对象的多态性与生俱来，不会存在编辑器检查，所以我们实现组合模式并不需要编写抽象类，只需要保证组合对象与叶对象拥有相同的方法即可，并且用鸭子类型的思想进行接口检查</p><h3 id="组合模式-扫描文件夹"><a href="#组合模式-扫描文件夹" class="headerlink" title="组合模式-扫描文件夹"></a>组合模式-扫描文件夹</h3><p>​我们通过组合模式，可以做到更新树的结构，但是却不需要改变原有代码，这符合开放封闭原则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Folder</span> = <span class="keyword">function</span> (<span class="params">nameParams</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = nameParams;</span><br><span class="line">    <span class="keyword">let</span> files = [];</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">file</span>) &#123;</span><br><span class="line">        files.<span class="title function_">push</span>(file);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">scan</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始扫描文件夹&quot;</span>, name);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            files[i].<span class="title function_">scan</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add,</span><br><span class="line">        scan,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">File</span> = <span class="keyword">function</span> (<span class="params">nameParams</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = nameParams;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;文件中不能增加文件夹&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">scan</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开始扫描文件&quot;</span>, name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add,</span><br><span class="line">        scan,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> folder = <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;学习资料&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> folder1 = <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;JavaScript&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> folder2 = <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;jQuery&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> file1 = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;JavaScript设计模式与开发实践&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> file2 = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;精通jQuery&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> file3 = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;重构与模式&quot;</span>);</span><br><span class="line"></span><br><span class="line">folder1.<span class="title function_">add</span>(file1);</span><br><span class="line">folder2.<span class="title function_">add</span>(file2);</span><br><span class="line">folder.<span class="title function_">add</span>(folder1);</span><br><span class="line">folder.<span class="title function_">add</span>(folder2);</span><br><span class="line">folder.<span class="title function_">add</span>(file3);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> folder3 = <span class="keyword">new</span> <span class="title class_">Folder</span>(<span class="string">&quot;Nodejs&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> file4 = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;深入浅出Node.js&quot;</span>);</span><br><span class="line">folder3.<span class="title function_">add</span>(file4);</span><br><span class="line"><span class="keyword">var</span> file5 = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;JavaScript语言精髓与编程实战&quot;</span>);</span><br><span class="line">folder.<span class="title function_">add</span>(folder3);</span><br><span class="line">folder.<span class="title function_">add</span>(file5);</span><br><span class="line"></span><br><span class="line">folder.<span class="title function_">scan</span>();</span><br></pre></td></tr></table></figure><h3 id="一些需要注意的地方"><a href="#一些需要注意的地方" class="headerlink" title="一些需要注意的地方"></a>一些需要注意的地方</h3><ul><li>组合模式不是父子关系</li><li>对一组叶对象的操作必须具有一致性，只有用一致的方式对待列表中的每一个叶对象，才适合使用组合模式</li><li>如果存在一个叶子元素存在多个父级，可能就需要管理映射关系，避免子元素多次被执行</li></ul><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>​组合模式可以让我们把相同的操作应用在组合对象和单个对象上。</p><ul><li>组合模式的美国和对象看起来都和其他对象差不多，他们的区别只能在运行中才能显现出来，这会使代码难以理解</li><li>组合模式会大量创建变量，会让系统负担不起</li></ul><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><p>​模板方法是一种只需要继承就可以实现的非常简单的模式（多态性）</p><ul><li>模板方法由2部分组成，第一部分是抽象父类，第二部分是具体的实现子类</li><li>在模板方法模式中，子类实现中的相同部分被上移到父类中，而将不同的部分留到子类中进行实现，这很好的体现了泛化的思想。</li></ul><p>​在模板方法中，子类实现中的相同部分被上移到父类中，而将不同的部分留给子类实现，子类可以复写其具体实现。</p><h3 id="咖啡与茶"><a href="#咖啡与茶" class="headerlink" title="咖啡与茶"></a>咖啡与茶</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Beverage</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">boilWater</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;把水煮沸&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">brew</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pourInCup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addCondiments</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">boilWater</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">brew</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">pourInCup</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">addCondiments</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Coffee</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Coffee</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Beverage</span>();</span><br><span class="line"><span class="title class_">Coffee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">brew</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;沸水冲泡咖啡&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Coffee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pourInCup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;把咖啡倒进杯子&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Coffee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addCondiments</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加糖和牛奶&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Coffee</span> = <span class="keyword">new</span> <span class="title class_">Coffee</span>();</span><br><span class="line"><span class="title class_">Coffee</span>.<span class="title function_">init</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Tea</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Tea</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Beverage</span>();</span><br><span class="line"><span class="title class_">Tea</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">brew</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;沸水冲泡咖啡&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Tea</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">pourInCup</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;把咖啡倒进杯子&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Tea</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addCondiments</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;加糖和牛奶&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Tea</span> = <span class="keyword">new</span> <span class="title class_">Tea</span>();</span><br><span class="line"><span class="title class_">Tea</span>.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><p>​在以上例子中<code>Beverage.prototype.init</code>就是所谓的模板方法，因为该帆帆中封装了子类的算法框架。</p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>模板方法模式是一种严格依赖抽象类的设计模式。</p><p>抽象帆帆被声明在抽象类中，抽象方法并没有具体的实现过程，是一些哑巴方法</p><p>如果每个子类中都有一些同样的具体实现方法，那么这些方法也可以选择放在抽象类中，这样可以节省代码以达到复用的效果，这些方法被叫做具体方法。</p><h3 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h3><p>​模板方法是固定不变的，但是在某些场景下却又要求他变化，有什么办法可以让子类不受这个约束呢？</p><p>​我们可以使用钩子方法来实现，放置一个钩子在特定的逻辑。例如以上的例子中咖啡有些人不希望加调料</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">custonmerWantsCondiments</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 默认需要调料</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Beverage</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">boilWater</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">brew</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">pourInCup</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">custonmerWantsCondiments</span>()) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">addCondiments</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="title class_">Coffee</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">custonmerWantsCondiments</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&#x27;请问需要调料吗？&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Coffee</span> = <span class="keyword">new</span> <span class="title class_">Coffee</span>();</span><br><span class="line"><span class="title class_">Coffee</span>.<span class="title function_">init</span>();</span><br></pre></td></tr></table></figure><h3 id="好莱坞原则"><a href="#好莱坞原则" class="headerlink" title="好莱坞原则"></a>好莱坞原则</h3><p>​好莱坞无疑是演员的天堂，但好莱坞也有很多找不到工作的新人演员，许多新人演员在好莱坞把简历投递过去之后，只能回家等电话，有些等不及的就会打电话过去问，而好莱坞每次都会回答：“不太来找我，有消息我会通知你”</p><p>​在设计中，这种模式被称为好莱坞原则，在程序中，高层组件决定什么时候以何种方式使用这些底层组件</p><p>​这种模式在模板方法模式中很常见，在发布订阅模式，回调函数都非常适用，就像出租车司机告诉你别问我还有多远到，到了我会告诉你。</p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>​模板方法是一种典型的通过封装变化提高系统拓展性的设计模式。我们把部分抽象逻辑抽象到父类的模板方法，而子类的方法具体怎么实现是可变的，于是我们把这部分变化的逻辑封装到子类中。</p><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>​假设有一个服装工厂，目前里面50个男士样式，50个女士样式，他们都需要模特穿上拍宣传片，正常情况下就需要分别50个模特来拍照，程序实现逻辑为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Model</span> = <span class="keyword">function</span> (<span class="params">sex, underwear</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">underwear</span> = underwear;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Model</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">takePhoto</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.sex&#125;</span>:<span class="subst">$&#123;<span class="variable language_">this</span>.underwear&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> maleModel = <span class="keyword">new</span> <span class="title class_">Model</span>(<span class="string">&quot;male&quot;</span>, <span class="string">`underwear<span class="subst">$&#123;i&#125;</span>`</span>);</span><br><span class="line">    maleModel.<span class="title function_">takePhoto</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> femaleModel = <span class="keyword">new</span> <span class="title class_">Model</span>(<span class="string">&quot;female&quot;</span>, <span class="string">`underwear<span class="subst">$&#123;i&#125;</span>`</span>);</span><br><span class="line">    femaleModel.<span class="title function_">takePhoto</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​现在分别50种内衣，一共有100个对象，后面如果越来越多，10000个，可能就会导致程序崩溃。其实我们仔细想想就会发现，我们不需要一套内衣都搭一个模特，只需要一个男模特，一个女模特就够了，我们根据这样的思路再次改写代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Model</span> = <span class="keyword">function</span> (<span class="params">sex</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sex</span> = sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Model</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">takePhoto</span> = <span class="keyword">function</span> (<span class="params">underwear</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.sex&#125;</span>:<span class="subst">$&#123;underwear&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> maleModel = <span class="keyword">new</span> <span class="title class_">Model</span>(<span class="string">&quot;male&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> femaleModel = <span class="keyword">new</span> <span class="title class_">Model</span>(<span class="string">&quot;female&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">    maleModel.<span class="title function_">takePhoto</span>(<span class="string">`underwear<span class="subst">$&#123;i&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">    femaleModel.<span class="title function_">takePhoto</span>(<span class="string">`underwear<span class="subst">$&#123;i&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​改造之后，我们只需要两个对象就实现了相同的功能，并且开销是固定的2个，就算10000间衣服也不会出现问题</p><h3 id="外部状态与内部状态"><a href="#外部状态与内部状态" class="headerlink" title="外部状态与内部状态"></a>外部状态与内部状态</h3><ul><li>享元模式的目标是尽量减少共享对象的数量，是优先使用时间换取空间的优化模式</li></ul><h3 id="上传文件的例子"><a href="#上传文件的例子" class="headerlink" title="上传文件的例子"></a>上传文件的例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">startUpload</span> = <span class="keyword">function</span> (<span class="params">uploadType, files</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> file = files[i];</span><br><span class="line">        <span class="keyword">var</span> uploadObj = <span class="keyword">new</span> <span class="title class_">Upload</span>(uploadType, file.<span class="property">fileName</span>, file.<span class="property">fileSize</span>); <span class="comment">// 实例化传入变量</span></span><br><span class="line">        uploadObj.<span class="title function_">init</span>(id++); <span class="comment">// init中创建dom</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Upload</span> = <span class="keyword">function</span> (<span class="params">uploadType, fileName, fileSize</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">uploadType</span> = uploadType;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fileName</span> = fileName;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fileSize</span> = fileSize;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Upload</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="property">id</span> = id;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="property">innerHTML</span> = <span class="string">`&lt;span&gt;文件名称：<span class="subst">$&#123;<span class="variable language_">this</span>.fileName&#125;</span> 文件大小：<span class="subst">$&#123;<span class="variable language_">this</span>.fileSize&#125;</span> 上传方式:<span class="subst">$&#123;<span class="variable language_">this</span>.uploadType&#125;</span>&lt;/span&gt;&lt;button class=&quot;delFile&quot;&gt;删除&lt;/button&gt;`</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.delFile&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        that.<span class="title function_">delFile</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">dom</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Upload</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">delFile</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">fileSize</span> &lt; <span class="number">3000</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">dom</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="title function_">confirm</span>(<span class="string">&quot;确定删除文件吗？&quot;</span> + <span class="variable language_">this</span>.<span class="property">fileName</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">dom</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">dom</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">startUpload</span>(<span class="string">&quot;plugin&quot;</span>, [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">fileName</span>: <span class="string">&quot;1.txt&quot;</span>,</span><br><span class="line">        <span class="attr">fileSize</span>: <span class="number">1000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">fileName</span>: <span class="string">&quot;2.txt&quot;</span>,</span><br><span class="line">        <span class="attr">fileSize</span>: <span class="number">2000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]);</span><br><span class="line"><span class="title function_">startUpload</span>(<span class="string">&quot;flash&quot;</span>, [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">fileName</span>: <span class="string">&quot;5.txt&quot;</span>,</span><br><span class="line">        <span class="attr">fileSize</span>: <span class="number">6000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">fileName</span>: <span class="string">&quot;6.txt&quot;</span>,</span><br><span class="line">        <span class="attr">fileSize</span>: <span class="number">7000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>​在以上例子中，我们上传多少文件就需要创建多少个对象，接下来我们用享元模式重构以上代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Upload</span> = <span class="keyword">function</span> (<span class="params">uploadType, fileName, fileSize</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">uploadType</span> = uploadType;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title class_">Upload</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">delFile</span> = <span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> carry = uploadManager.<span class="title function_">setExternalState</span>(id);</span><br><span class="line">        <span class="keyword">return</span> carry.<span class="property">dom</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(carry.<span class="property">dom</span>);</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> <span class="title class_">UploadFactoy</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> createFlyWeghtObjs = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">create</span>: <span class="keyword">function</span> (<span class="params">uploadType</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (createFlyWeghtObjs[uploadType]) &#123;</span><br><span class="line">              <span class="keyword">return</span> createFlyWeghtObjs[uploadType];</span><br><span class="line">            &#125;</span><br><span class="line">            createFlyWeghtObjs[uploadType] = <span class="keyword">new</span> <span class="title class_">Upload</span>(uploadType);</span><br><span class="line">            <span class="keyword">return</span> createFlyWeghtObjs[uploadType];</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;)();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> uploadManager = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> uploadDataBase = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">id, uploadType, fileName, fileSize</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> flyWeight = <span class="title class_">UploadFactoy</span>.<span class="title function_">create</span>(uploadType);</span><br><span class="line">            <span class="keyword">var</span> dom = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">            dom.<span class="property">innerHTML</span> = <span class="string">`&lt;span&gt;文件名称：<span class="subst">$&#123;fileName&#125;</span> 文件大小：<span class="subst">$&#123;fileSize&#125;</span> 上传方式:<span class="subst">$&#123;uploadType&#125;</span>&lt;/span&gt;&lt;button class=&quot;delFile&quot;&gt;删除&lt;/button&gt;`</span>;</span><br><span class="line">            dom.<span class="title function_">querySelector</span>(<span class="string">&quot;.delFile&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">              flyWeight.<span class="title function_">delFile</span>(id);</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(dom);</span><br><span class="line">            uploadDataBase[id] = &#123;</span><br><span class="line">              fileName,</span><br><span class="line">              fileSize,</span><br><span class="line">              dom,</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(uploadDataBase);</span><br><span class="line">            <span class="keyword">return</span> flyWeight;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">setExternalState</span>: <span class="keyword">function</span> (<span class="params">id</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> uploadDataBase[id];</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;)();</span><br><span class="line">      <span class="keyword">var</span> id = <span class="number">0</span>;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="property">startUpload</span> = <span class="keyword">function</span> (<span class="params">uploadType, files</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">let</span> file = files[i];</span><br><span class="line">          uploadManager.<span class="title function_">add</span>(++id, uploadType, file.<span class="property">fileName</span>, file.<span class="property">fileSize</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="title function_">startUpload</span>(<span class="string">&quot;plugin&quot;</span>, [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">fileName</span>: <span class="string">&quot;1.txt&quot;</span>,</span><br><span class="line">          <span class="attr">fileSize</span>: <span class="number">1000</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">fileName</span>: <span class="string">&quot;2.txt&quot;</span>,</span><br><span class="line">          <span class="attr">fileSize</span>: <span class="number">2000</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]);</span><br><span class="line">      <span class="title function_">startUpload</span>(<span class="string">&quot;flash&quot;</span>, [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">fileName</span>: <span class="string">&quot;5.txt&quot;</span>,</span><br><span class="line">          <span class="attr">fileSize</span>: <span class="number">6000</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">fileName</span>: <span class="string">&quot;6.txt&quot;</span>,</span><br><span class="line">          <span class="attr">fileSize</span>: <span class="number">7000</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ]);</span><br></pre></td></tr></table></figure><p>​通过享元模式创建后，实例化的对象因为工厂模式的存在只创建了2个。</p><h3 id="享元模式的适用性"><a href="#享元模式的适用性" class="headerlink" title="享元模式的适用性"></a>享元模式的适用性</h3><ul><li>一个程序中使用了大量相似的对象，并且这些对象大多数状态是可以成为外部状态的</li><li>可以使用共享对象取代大量对象，将外部状态剥离出去</li></ul><h3 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h3><p>​对象池维护一个装载空闲对象的池子，如果需要对象的时候，不会再去new，还是从对象池中进行获取，如果对象池不存在可用对象，则创建一个新对象，当获取处的对象完成了他的职责之后，再次进入池子等待下次获取</p><h3 id="地图标点demo"><a href="#地图标点demo" class="headerlink" title="地图标点demo"></a>地图标点demo</h3><p>​进入地图软件后，首先搜索A地点，存在2个坐标点，通过工厂函数便创建了2个，而后搜索了B地点，存在6个坐标，便会利用之前空闲的2个，再新增加4个坐标点</p><p>​对象池的模式与享元模式类，知识没有状态分离的过程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objectPoolFactory = <span class="keyword">function</span> (<span class="params">createObjFun</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> objectPool = [];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">create</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 创建对象</span></span><br><span class="line">            <span class="keyword">if</span> (objectPool.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果对象池中没有对象，就创建一个新的对象</span></span><br><span class="line">                <span class="keyword">return</span> createObjFun.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果对象池中有对象，就从对象池中取出一个对象</span></span><br><span class="line">                <span class="keyword">return</span> objectPool.<span class="title function_">shift</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">recover</span>: <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">            <span class="comment">// 回收对象</span></span><br><span class="line">            objectPool.<span class="title function_">push</span>(obj);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h3><p>​享元模式主要为解决性能问题，在一个存在大量相似对象的系统中，享元模式可以很好的解决大量对象带来的性能问题。</p><h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><p>​使多个对象都有机会处理请求，从而避免请求的发送者与接收者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。</p><p>​职责链优点：请求发送者只需要知道链中的第一个节点，从而弱化了发送者和一组接收者之间的强联系</p><h3 id="使用指责链完成订单生成demo"><a href="#使用指责链完成订单生成demo" class="headerlink" title="使用指责链完成订单生成demo"></a>使用指责链完成订单生成demo</h3><ul><li>支付过定金的不受库存限制，直接可下单</li><li>下了定金的订单但是却没有支付的正常购买</li><li>未支付定金的正常购买</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;500定金预付，得到100元优惠券&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">order200</span>(orderType, pay, stock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> order200 = <span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;200定金预付，得到50元优惠券&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">order</span>(orderType, pay, stock);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;普通购买，无优惠券&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;手机库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">order500</span>(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>​我们按照职责链进行实现，但是链条的耦合问题非常严重，加入后面出现其他折扣，便需要改写原本已经写好的代码，这违反看开放封闭原则。我们继续优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order500 = <span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">1</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;500定金预付，得到100元优惠券&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nextSuccessor&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> order200 = <span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (orderType === <span class="number">2</span> &amp;&amp; pay === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;200定金预付，得到50元优惠券&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;nextSuccessor&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> orderNormal = <span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (stock &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;普通购买，无优惠券&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;手机库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Chain</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fn</span> = fn;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">successor</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Chain</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setNextSuccessor</span> = <span class="keyword">function</span> (<span class="params">successor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">successor</span> = successor;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Chain</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">passRequest</span> = <span class="keyword">function</span> (<span class="params">orderType, pay, stock</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="variable language_">this</span>.<span class="title function_">fn</span>(orderType, pay, stock);</span><br><span class="line">    <span class="keyword">if</span> (ret === <span class="string">&quot;nextSuccessor&quot;</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">successor</span>.<span class="title function_">passRequest</span>(orderType, pay, stock);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> chianOrder500 = <span class="keyword">new</span> <span class="title class_">Chain</span>(order500);</span><br><span class="line"><span class="keyword">var</span> chianOrder200 = <span class="keyword">new</span> <span class="title class_">Chain</span>(order200);</span><br><span class="line"><span class="keyword">var</span> chianOrderNormal = <span class="keyword">new</span> <span class="title class_">Chain</span>(orderNormal);</span><br><span class="line">chianOrder500.<span class="title function_">setNextSuccessor</span>(chianOrder200);</span><br><span class="line">chianOrder200.<span class="title function_">setNextSuccessor</span>(chianOrderNormal);</span><br><span class="line">chianOrder500.<span class="title function_">passRequest</span>(<span class="number">1</span>, <span class="literal">true</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>​现在我们将职责链的耦合关系维护交给Chain进行维护如果后期还会增加其他预约类型，只需要编写相关逻辑代码与部分职责链代码即可</p><h3 id="异步职责链"><a href="#异步职责链" class="headerlink" title="异步职责链"></a>异步职责链</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Chain</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">next</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">successor</span>.<span class="title function_">passRequest</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fn1 = <span class="keyword">new</span> <span class="title class_">Chain</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;nextSuccessor&quot;</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> fn2 = <span class="keyword">new</span> <span class="title class_">Chain</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        self.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> fn3 = <span class="keyword">new</span> <span class="title class_">Chain</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line">fn1.<span class="title function_">setNextSuccessor</span>(fn2);</span><br><span class="line">fn2.<span class="title function_">setNextSuccessor</span>(fn3);</span><br><span class="line">fn1.<span class="title function_">passRequest</span>();</span><br></pre></td></tr></table></figure><p>​我们增加一个next方法来执行下一个职责链的回调函数，进而实现异步效果</p><h3 id="职责链模式的优点"><a href="#职责链模式的优点" class="headerlink" title="职责链模式的优点"></a>职责链模式的优点</h3><ul><li>解耦了请求发送者与若干接收者之间的复杂关系，并不需要链中谁可以处理，只需要传递给第一个人即可</li><li>职责链上的各个节点互不影响</li><li>职责链可以灵活拆分重组</li><li>职责链可以手动指定起点，而不是必须从第一个开始传递</li></ul><h3 id="职责链模式的缺点"><a href="#职责链模式的缺点" class="headerlink" title="职责链模式的缺点"></a>职责链模式的缺点</h3><ul><li>不能保证请求一定会被职责链处理到，可能不存在任何结果，需要额外加一个保底判断。</li><li>职责链模式会让程序多很多对象，并且可能大部分阶段不会起到作用，它的作用仅仅是让请求传递下去，过长的职责链会造成了一部分的性能损耗，但是这个问题ifelse也存在。</li></ul><h3 id="使用AOP思路实现职责链"><a href="#使用AOP思路实现职责链" class="headerlink" title="使用AOP思路实现职责链"></a>使用AOP思路实现职责链</h3><blockquote><p>AOP为面向切面编程，例如装饰器，可以做到在代码执行的前后插入代码切片，并且并修改源代码</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> ret = self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 调用者结果</span></span><br><span class="line">        <span class="keyword">if</span> (ret === <span class="string">&quot;nextSuccessor&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> res = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 执行下一个函数</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数结果&quot;</span>, res);</span><br><span class="line">            <span class="keyword">if</span> (res != <span class="string">&quot;nextSuccessor&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getActiveUploadObj = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;nextSuccessor&quot;</span>; <span class="comment">// 创建Ie上传组件(假设一定失败)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getFlashObj = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;nextSuccessor&quot;</span>; <span class="comment">// 创建flash对象(假设一定失败)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getFormObj = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hahahah&quot;</span>; <span class="comment">// 创建表单对象(假设一定成功)</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getUploadObj = getActiveUploadObj</span><br><span class="line">.<span class="title function_">after</span>(getFlashObj)</span><br><span class="line">.<span class="title function_">after</span>(getFormObj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getUploadObj&quot;</span>, <span class="title function_">getUploadObj</span>());</span><br></pre></td></tr></table></figure><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>个人感觉指责链有链表的感觉，在原型链，事件冒泡上都有所体现，在日常开发中倒不算很常见，类似订单demo可能更加偏向于使用ifelse + 封装来组织代码，同样可以实现职责链的效果。</p><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><p>中介者模式的作用就是接触对象与对象之间的紧耦合关系。增加一个中介者后，所有的相关对象都通过中介者对象进行通信；而不是相互引用。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JavaScript设计模式基础&quot;&gt;&lt;a href=&quot;#JavaScript设计模式基础&quot; class=&quot;headerlink&quot; title=&quot;JavaScript设计模式基础&quot;&gt;&lt;/a&gt;JavaScript设计模式基础&lt;/h2&gt;&lt;p&gt;JavaScript是一门经</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/categories/JavaScript/"/>
    
    
    <category term="设计模式" scheme="https://vkcyan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>随选朗读 - 给长辈更好的手机使用体验</title>
    <link href="https://vkcyan.github.io/2022/06/12/%E9%9A%8F%E6%83%B3/%E9%9A%8F%E9%80%89%E6%9C%97%E8%AF%BB%20-%20%E8%B5%8B%E4%BA%88%E9%95%BF%E8%BE%88%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E8%83%BD%E5%8A%9B/"/>
    <id>https://vkcyan.github.io/2022/06/12/%E9%9A%8F%E6%83%B3/%E9%9A%8F%E9%80%89%E6%9C%97%E8%AF%BB%20-%20%E8%B5%8B%E4%BA%88%E9%95%BF%E8%BE%88%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E8%83%BD%E5%8A%9B/</id>
    <published>2022-06-11T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.097Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.vkcyan.top/bce45768408b4df9025528fa6a02427e1a0f434a22.jpg" alt="bce45768408b4df9025528fa6a02427e1a0f434a22" style="zoom:57%;" /><h2 id="时代背景"><a href="#时代背景" class="headerlink" title="时代背景"></a>时代背景</h2><p>​在历史上的1952年5月24日是一个特殊的日子，在那一天正式开始大规模扫盲运动。新中国成立之初，全国5.5亿人口，80%都是文盲，农村的文盲率达到了95%以上，让我们把时间拉回2022年的今天，今天我想描述的是90后的父母一代，大约是<strong>1960-1975</strong>诞生于华夏文明的人，根据官方调查90后父母一代的文盲率大约为40%。</p><p>​90后父母一代是疲惫的，他们大多从农村出来，为城市建设添砖加瓦，拿着微薄的薪水，做着繁重的工作，赶上了房价翻了一番又一番，他们的压力从来不会出现在主流媒体中，他们也大多数已经年过半百，身体机能开始衰退，视力开始下降，在互联网时代与90、00后赚个满怀的时候，他们只能踉踉跄跄的跟紧时代的步伐，他们是社会上看不见的大多数。而随着岁月的流失，亦或者时代的影响，存在很大一部分人因为视力问题，或者文盲，失去了使用手机的能力。</p><h2 id="随选朗读"><a href="#随选朗读" class="headerlink" title="随选朗读"></a>随选朗读</h2><p><img src="https://www.vkcyan.top/image-20220610135834344.png" alt="image-20220610135834344"></p><p>​大部分年轻人可能并不知道这个名词，因为我们正值身体的最佳状态，本身便不存在工具来创造无障碍的场景，我们来了解一下“随选难度”的官方定义吧。</p><p>​“随选难度”可帮助障碍用户在无法使用视觉获取信息、阅读困难等情况下通过读取屏幕的无障碍接口来获取用户想要阅读的界面的文本信息，然后再调用语音库将之朗读出来。<strong>简而言之，用户在开启该功能后，可将他想获取的文本信息转化为音频被接收。</strong></p><h2 id="目标人群"><a href="#目标人群" class="headerlink" title="目标人群"></a>目标人群</h2><ul><li><p>低视力、老花眼人群</p></li><li><p>低文化水平、文盲人群</p></li><li><p>场景性障碍人群</p></li></ul><p>​随着岁数的增加，亦或者长期疲劳用眼，老花眼必然会出现在人类的生命轨迹之中，面对这样的情况，一般需要配一个老花镜，在阅读较小较密集文字的时候带上眼镜才能看清文字，正常生活并不需要长时间戴眼镜，而有了随选朗读功能后，查看手机咨询只需要滑动文字区域，即可让手机完成其识别与阅读，规避用眼场景，这将大幅度改善中老年人的手机使用体验。</p><p>​90后的父母一代，文盲比例已经相对较少，但是在华夏大地庞大的人口基数下，也算是5%也是非常大的人口体量，因为不认识字，他们使用手机困难重重，但是又不得不使用智能手机，例如在进出都需要扫码的疫情时代，遍地移动支付的互联网时代，如果没有家人或者朋友的反复教学，他们可能永远都无法正常使用智能手机，甚至家人微信聊天都只能发送语音，而随选朗读则给予了文盲人群识别文字的能力，遇到不认识的字，滑动一下就会读出来，这给予了文盲用户独立使用智能手机的能力，作为晚辈也减小了压力。</p><p>​最后是场景性障碍人群，例如开车中，做饭中暂时无法看长时间看屏幕的场景，不过从现实来看此类场景需求不大，因为长文可以等会看，一小段文本则很快就看完了，此处便不再赘述。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="小米手机"><a href="#小米手机" class="headerlink" title="小米手机"></a>小米手机</h3><p><strong>设置 - 更多设置 - 无障碍 - 视觉 - 随选朗读</strong></p><p>开启后点击小喇叭就会出现一个红色按钮，即可选中你想被阅读的区域，松手即可开始朗读，朗读完毕后自动关闭，如果想下次使用，可以再次点击小喇叭，不同手机入口显示方式不同，有些是显示小人形状。</p><img src="https://www.vkcyan.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220610140237.jpg" alt="微信图片_20220610140237" style="zoom:20%;" /><h3 id="华为手机"><a href="#华为手机" class="headerlink" title="华为手机"></a>华为手机</h3><p>设置 - 辅助功能 - 无障碍 - 随选朗读 - 开启</p><h3 id="iphone"><a href="#iphone" class="headerlink" title="iphone"></a>iphone</h3><p>设置 - 辅助功能 - 朗读内容 - 朗读屏幕 - 语音控制器 - 打开显示控制器</p><p><img src="https://www.vkcyan.top/image-20220610143710700.png" alt="image-20220610143710700"></p><h3 id="其他手机"><a href="#其他手机" class="headerlink" title="其他手机"></a>其他手机</h3><p>​身边手机有限，就算一个品牌的手机不同版本设置路径也存在一定区别，不过可以放心无障碍功能所有手机都有，因为这是android，ios系统原生功能，一般都在<strong>其他设置&#x2F;无障碍</strong>菜单中。</p><h3 id="没有随选朗读"><a href="#没有随选朗读" class="headerlink" title="没有随选朗读"></a>没有随选朗读</h3><p>​我把周围同事的手机大致都研究了一遍，发现如果是20年之前的手机，大部分是没有“随选朗读”功能的，无障碍套件由安卓系统提供，低版本系统存在没有随选朗读的现象，手机没有自带没有关系，可以第三方下载，我在百度网盘放了一个，<a href="https://pan.baidu.com/s/1Y0kPB9xZcCdlu-KR5WxWoQ?pwd=o7k7">android无障碍套件v12.1</a>，有需要的朋友请自取。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​看到这里，不知道你是否想到了长辈们，为了看手机上的微信消息而着急寻找眼镜的匆忙场景，是否想到了长辈们因为看不懂文字而无法正常使用手机的窘境，而通过简单设置，就可以赋予有困难的长辈们更好使用智能手机的能力，机器无情，人间有情，沉舟侧畔千帆过，病树前头万木春，记得多回头看看驻留在原地的那群可爱的人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://www.vkcyan.top/bce45768408b4df9025528fa6a02427e1a0f434a22.jpg&quot; alt=&quot;bce45768408b4df9025528fa6a02427e1a0f434a22&quot; style=&quot;zoo</summary>
      
    
    
    
    <category term="玩机技巧" scheme="https://vkcyan.github.io/categories/%E7%8E%A9%E6%9C%BA%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="无障碍" scheme="https://vkcyan.github.io/tags/%E6%97%A0%E9%9A%9C%E7%A2%8D/"/>
    
    <category term="随选朗读" scheme="https://vkcyan.github.io/tags/%E9%9A%8F%E9%80%89%E6%9C%97%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>三辆自行车</title>
    <link href="https://vkcyan.github.io/2022/06/10/%E9%9A%8F%E6%83%B3/%E4%B8%89%E8%BE%86%E8%87%AA%E8%A1%8C%E8%BD%A6/"/>
    <id>https://vkcyan.github.io/2022/06/10/%E9%9A%8F%E6%83%B3/%E4%B8%89%E8%BE%86%E8%87%AA%E8%A1%8C%E8%BD%A6/</id>
    <published>2022-06-09T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.096Z</updated>
    
    <content type="html"><![CDATA[<p>​初中的时候，我特别想要一个自行车，大概觉得骑车很酷吧，或者是幼年的虚荣心作祟，那时候家里条件还很差，三口之家租住在一个没有空调的老旧矮楼的二楼第一间，大约12平方的四方四正的小屋，大家可以想象一下电视剧蜗居的样子吧，父母自然不同意卖一辆自行车，上学的路程只有2公里，这点距离还要骑自行车，在爸妈眼里是不可理喻的，可终究是拗不过我，在那个夏天的夜晚，爸带我到一个破破烂烂的修车铺，那是一辆蓝色有点破旧的小轮自行车，依稀记得车头是一个T形的，黑漆上零星的白点，刹车线已经泛黄仿佛蒙上了茶油的滤镜，这似乎在告诉我它的年纪，我爸对此很满意，大约150吧，带着我带着它一起回家了，我相信爸妈是开心的，因为终于不用听这小子天天嚷嚷了，我也就是这么迷迷糊糊的有了一台自行车。</p><p>​好景不长，这辆蓝色小轮车骑起来轴承里面会发出宛如鞭炮一样哒哒哒的，这让一个刚刚满12岁的小孩内心倍感自卑，因为我害怕因为这个声音招来马路上嘲笑的目光，以至于放学路上同学都骑走了，我才会开始骑车，我又开始不断嚷嚷自行车的问题，我妈耳根子软，心里虽然气愤儿子不懂事，但是依旧妥协了，没多久换了一辆新的凤凰牌自行车，蓝色小车被我爸骑电瓶车带回了老家，给了在村里的表姐，因为离镇上很远，她非常需要一辆车，而我终于如愿以偿的得到了一辆崭新的真正的自行车，那是一辆的银灰色自行车，车架在阳光下发射着宛如银河的色彩，黑色的车头一尘不染的深邃，仿佛在告诉全世界，他的诞生，也终于没有了哒哒哒的骑行背景音乐；而这属于我的第一辆新自行车的命运却是如此的凄惨，在我还没来得及和他好好人认识的时候，便戛然而止，是的，没多久他就被偷了；记得那天早上我骑着它到补习班，补习班对面是人流量很大的商业街，我用买车赠送的那把蓝色细锁火速锁好车便跑进补习班，等到中午补习结束回到停车点的时候，我傻眼了，同学一个个离开，而我在那片不大的地方反复寻找，恨不得把地下的砖都扒开，我可能找了半小时，最后我浑浑噩噩的走回家，那段路挺远，大概4个路口，回到家已经12点多了，我妈没有打我，但是我害怕极了，后续发生了什么也记不清了，也许是因为选择性忘记，最后，补习班和老师还赔了200块。</p><p>​车丢了，但是习惯已经养成了，自然还是要买自行车，人总是贪婪的，得到了谷子就想得到糖，得到了糖就想得到肉，十三岁的我自然也不例外，这次我斗胆提议要一辆变速山地自行车，每次放学我都会偷偷观察同桌的捷安特，那卡卡的变速声音不断挠动我心中的痒，夜里做梦都想拥有一辆这样的自行车，去享受大家羡慕的目光；变速自行车比较贵，是普通自行车的2-3倍，爸妈自然非常不愿意，毕竟赚钱真的很不容易，那时候依旧在12平小屋中，夏天的下午会被太阳从侧面暴晒，晚上睡觉都能感受到从墙体深处散发的热浪，实在无法忍受，加装了空调；耐不住我的软磨硬泡，耐不住这是他的儿子，最后还是给我买了，就在我丢掉凤凰牌自行车的商业街附近，我获得了我人生中第三辆自行车</p><p>​那是一辆黑红相见的变速山地自行车，品牌名为“巨凤”，不是名牌所以也比较便宜，不过我依旧很喜欢，他看起来是那么具有运动感，如此的个性鲜明，花费了500多，这对我们家庭来说已经是一笔巨款，我带着它回家了，我至今都记得，在回家的路上有一段上坡，我将变速调节到比较省力的轮档，我向往常一样踩着踏板，但是这却是一种未曾有过的体验，如此的轻巧，如此安稳，第二天早上5点多我便醒来，迫不及待的我想骑上的我新车去学校，那时已经是晚秋，我踏着淡淡曙光，仿佛骑行在云端之上，到学校的时候，天都未亮，对于那一刻的我来说，我的虚荣心大概已经得到了满足。在后来的日子里，我经常骑着它去偏远的谭冲湖，去几公里外的古梗公园，去杂草丛生的老肥西火车站，没有理由，随便定一个目标的骑行，在我那平淡如水的初中时光，我和“巨凤”游览了肥西大大小小很多角落。在天气还不算燥热的初夏，在平坦又人际罕见的单排公路，路旁的山丘跑向我的身后，柏油路前方看不见尽头，河水流淌声不断微弱，我不断加速，尽情的享受与风的交流。</p><p>​在我初中阶段中，我对自行车是如此的执着，我认为我热爱自行车，但是我错了；在买“巨凤”的第二年，我初三了，中考勉勉强强的考上了高中，但是分数线只够去比较远的地方，我与我的“巨凤”便失联了，我再次见到的他的时候，它已经落满了灰尘，斜靠在墙角，嶙峋的轮胎上满是龟裂，前轮已经完全漏气，夕阳下，他就像一匹消瘦的老马，我路过很多次都没注意到他，直到在大学入学前夕，我对家恋恋不舍的时候，我终于注意到了它，我已经不记得当时面对它的表情，是我抛弃了它，就像随着岁月不断被丢弃的东西们一样。</p><p>​前往古梗公园的路依旧平整，谭冲湖的河水依旧川流不息，到现在也依旧会时常回想起与它们们在路上的时光，只是再也找不回记忆中的强风拂过的感觉。</p><p>​</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	初中的时候，我特别想要一个自行车，大概觉得骑车很酷吧，或者是幼年的虚荣心作祟，那时候家里条件还很差，三口之家租住在一个没有空调的老旧矮楼的二楼第一间，大约12平方的四方四正的小屋，大家可以想象一下电视剧蜗居的样子吧，父母自然不同意卖一辆自行车，上学的路程只有2公里，这点</summary>
      
    
    
    
    <category term="随想集" scheme="https://vkcyan.github.io/categories/%E9%9A%8F%E6%83%B3%E9%9B%86/"/>
    
    
    <category term="童年" scheme="https://vkcyan.github.io/tags/%E7%AB%A5%E5%B9%B4/"/>
    
    <category term="随想" scheme="https://vkcyan.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【5000字长文】（开源） 低代码H5可视化搭建系统 - 易动v3.0</title>
    <link href="https://vkcyan.github.io/2022/05/25/%E5%85%B3%E4%BA%8E%E5%BC%80%E6%BA%90/%E3%80%905000%E5%AD%97%E9%95%BF%E6%96%87%E3%80%91%EF%BC%88%E5%BC%80%E6%BA%90%EF%BC%89%20%E4%BD%8E%E4%BB%A3%E7%A0%81H5%E5%8F%AF%E8%A7%86%E5%8C%96%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%BB%9F%20-%20%E6%98%93%E5%8A%A8v3.0/"/>
    <id>https://vkcyan.github.io/2022/05/25/%E5%85%B3%E4%BA%8E%E5%BC%80%E6%BA%90/%E3%80%905000%E5%AD%97%E9%95%BF%E6%96%87%E3%80%91%EF%BC%88%E5%BC%80%E6%BA%90%EF%BC%89%20%E4%BD%8E%E4%BB%A3%E7%A0%81H5%E5%8F%AF%E8%A7%86%E5%8C%96%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%BB%9F%20-%20%E6%98%93%E5%8A%A8v3.0/</id>
    <published>2022-05-24T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.084Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​作者在2020年的时候开源了易动第一个版本<a href="https://juejin.cn/post/6844904095971540999">（开源）从0打造H5可视化搭建系统 - 易动（vue+ts+egg）</a>，这两年在公司针对装修技术方案做了大量的实践，使用过<strong>draggable方案</strong> <strong>iframe装修方案</strong> <strong>绝对定位方案</strong>，对其在技术，产品层面都存在更深入的理解，今天给大家带来新一代企业级H5装修方案<strong>易动v3.0</strong></p><p><img src="https://www.vkcyan.top/image-20220525165904705.png" alt="image-20220525165904705"></p><h2 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h2><blockquote><p>拖拽生成h5页面，支持页面全局设置，组件，自定义URL，插件市场，公共npm组件库</p><p>基于最新vue技术栈， <a href="http://39.103.198.52:3005/">易动v3.0</a> 已上线，欢迎体验~~</p></blockquote><p><a href="https://github.com/vkcyan/YD">YD 管理端</a></p><p><a href="https://github.com/vkcyan/YD_Client">YD_Client 客户端</a></p><p>开源不易，给个Star吧~</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>管理端：vue3 + vite + pinia + vueuse + TypeScript</p><p>客户端：vue3 + vite + TypeScript</p><p>集成组件库（ydh5-ui）：基于Vue3 + TypeScript进行开发</p><p>服务端：serverLess</p><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>​在正文开始之前先为大家介绍一下项目架构，我们从底层到上层依次介绍</p><p>​易动3使用腾讯云serverless作为后端服务，serverless在易动系统中提供组件schema的数据存储服务，为什么使用serverless下文在说明。</p><p>​易动3将客户端、管理端的公共装修组件进行了统一封装发布成为npm包，解决了以往存在的一个组件需要写、改两遍代码的核心问题。</p><p>​易动管理端是项目的最核心系统，除了核心的保存，修改之外，以及一系列提供装修效率的功能，例如组件市场、辅助线、复制、粘贴、撤销、放撤销，这个低代码装修系统的上限于下限皆由此项目决定。</p><p>​易动客户端功能比较单纯，主要是根据约定好的js Schema结合集成组件库进行数据渲染于逻辑触发。</p><img src="https://www.vkcyan.top/image-20220519092211855.png" alt="image-20220519092211855" style="zoom:67%;" /><h2 id="使用方向"><a href="#使用方向" class="headerlink" title="使用方向"></a>使用方向</h2><p>​这几年关于低代码领域开始不断有大厂入场，这也变相的说明了该领域巨大的提效需求，愿望是美好的，但是现实是骨感的，低代码无法做到全盘通吃，只能聚焦某个领域，<code>易动v3.0</code>也是这样的，他无法处理存在大量逻辑的页面，所以<code>易动v3.0</code>选择专注于<strong>营销单页</strong>，在营销单页领域他可以发挥自己的优势。</p><p>​除了基础的按钮、图片组件外，业务组件可以做很多场景化组件，例如banner，商品专区，甚至从接口获取数据的组件都可以通过<strong>js Schema</strong>的约定进行实现</p><p>​而营销单页的需求络绎不绝，这样的工作就像在工厂“打螺丝”，大部分前端开发者并不愿意做这件事情，并且工作流程比较繁琐，可能因为业务原因频繁改动，大致工作流程如下</p><p>​<img src="https://www.vkcyan.top/image-20220519102613376.png" alt="image-20220519102613376"></p><p>​一个再简单的单页都需要走一样的固定流程，并且一旦某个环节出现了问题就需要回滚好几步，在这儿个过程中开发者也需要跟着回滚，遍出现了频繁改样式，重复机械行为。</p><p>​如果有了低代码平台 流程可以变成这样</p><p><img src="https://www.vkcyan.top/image-20220519102817422.png" alt="image-20220519102817422"></p><p>​这样的架构中权责变的更加清晰，开发者从“螺丝钉”变成了技术解决方案开发者</p><p>​而业务的决定权也掌握在专人手中；大家各司其职，技术根据实际需求不断优化技术解决方案，运营使用低代码平台的搭建能力 物料能力也能提高运营的效率。</p><h2 id="H5装修常见方案"><a href="#H5装修常见方案" class="headerlink" title="H5装修常见方案"></a>H5装修常见方案</h2><p>​据作者了解，目前市面上所有的低代码平台几乎都是基于Schema进行实现的，这种方案的核心原理比较简单</p><img src="https://www.vkcyan.top/image-20220519103955455.png" alt="image-20220519103955455" style="zoom:67%;" /><p>​基于这样的Schema结构，便衍生出来了多种实现方案，在这里简单描述一下我在实际工作中都使用过方案以及他们的优缺点；</p><h3 id="绝对定位方案"><a href="#绝对定位方案" class="headerlink" title="绝对定位方案"></a>绝对定位方案</h3><p>​简介：所有的装修组件都是再后台直接拖拽放置，没有组件群组的概念，可以任意放置你的组件到任何地方。</p><p>​优点：灵活</p><p>​缺点：无法流式布局，需要维护公共组件库，操作门槛较高，需要通过技术能力填补，例如吸附辅助线。</p><h3 id="流式布局方案"><a href="#流式布局方案" class="headerlink" title="流式布局方案"></a>流式布局方案</h3><p>​简介：装修组件遵循流式布局，从上到下从左到右进行排序，就像搭积木一件，这种方案仅限移动端</p><p>​优点：操作简单</p><p>​缺点：组件不够灵活，因为只能上下移动，想做到非常规布局比较麻烦，需要维护公共组件库</p><h3 id="iframe方案"><a href="#iframe方案" class="headerlink" title="iframe方案"></a>iframe方案</h3><p>​简介：将客户端通过iframe内嵌到装修管理端中，再通过postMessage进行项目间通信，客户端识别环境开启装修模式与后台进行实时通信</p><p>​优点：不需要维护公共组件库 ，只需要维护客户端代码</p><p>​缺点：客户端与管理端代码耦合严重 装修操作部分代码需要写在客户端中</p><h3 id="流式布局-绝对定位方案"><a href="#流式布局-绝对定位方案" class="headerlink" title="流式布局 + 绝对定位方案"></a>流式布局 + 绝对定位方案</h3><p>​简介：为绝对定位组件增加一个流式布局的父级容器，让装修数据具备二级结构，</p><p>​优点：灵活 具备可生成代码的规范结构 </p><p>​缺点：操作麻烦，存在一定学习成本 ，需要维护公共组件库，相对其他方案多了一层结构，难度相对更加大</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="易动3选择的方案"><a href="#易动3选择的方案" class="headerlink" title="易动3选择的方案"></a>易动3选择的方案</h2><p>​在公司生产环境项目中，凭借<code>易动v1.0</code>的经验，我使用了流式布局方案，最初效果还是非常不错的，那时候没想到将公共组件发布到npm，两端项目公用组件的方案，后期组件改动频繁，出现了极大的维护问题，这迫使我寻找其他出路。</p><p>​为了解决流式布局中一套组件，两套代码问题，在生产环境项目中实验性的使用管理端 + 客户端耦合的iframe方案，满足了公司的需求只需要维护一套代码，并且可以将Schema抽象出来应用到单页中，实现活动页装修，iframe装修方案在公司也是沿用至今，帮助公司搭建了200+的页面。</p><p>​再后来，我准备重启易动项目，开发<code>易动v2.0</code>，我们在<code>易动v2.0</code>中实验性的尝试了<strong>流式布局 + 绝对定位方案</strong>，在开发之前普遍觉得这是一个天才的主意，同时具备流式布局与绝对定位方案的优点，而且<code>易动v2.0</code>开发技术中还存在类似易企秀的多页的需求，大概经过2个月的代码编写，最终发现还是我们的想法过于理想化，首先操作上就存在比较高的门槛，技术难度也很大，而且因为Schema结构复杂，后期代码难度也是几何级别的提升，最终我们PASS了这个方案。</p><p>​在后面一段时间我一直在思考一个问题，也就是低代码的边界性，他应该做什么，他可以做什么，我们如何通过低代码来创造产品价值，在不断的思考中我也逐渐明确了开发方向，不再去想他还能做什么，而是在开发之前就确定一个目标，<strong>易动3.0将会在营销领域发挥它的作用，所有的功能都围绕这个核心目标</strong></p><p>​基于这样的目标，<code>易动v3.0</code>再出发，依旧采用<strong>绝对定位方案</strong>，因为绝对定位方案符合需求，难度最小，具备拓展性，后期维护性更强。</p><p>​方案确定好了，接下来将会介绍一些核心的实现思路。</p><h2 id="核心实现思路"><a href="#核心实现思路" class="headerlink" title="核心实现思路"></a>核心实现思路</h2><h3 id="Schema的编写"><a href="#Schema的编写" class="headerlink" title="Schema的编写"></a>Schema的编写</h3><p>​schema的结构将会决定你的装修系统的上限，一个良好的设计结构将会为后面的开发降低很大的难度，我们需要定义好<strong>页面的结构</strong>与<strong>组件的结构</strong>。</p><p><img src="https://www.vkcyan.top/image-20220520163303273.png" alt="image-20220520163303273"></p><p>​而在代码中增加组件，或者增加组件类的数据，例如在轮播图组件中增加一项轮播图，都需要通过函数return的方式进行对象创建，以免出现多个组件使用的数据为一个数据源。</p><p>在项目中增加一个组件，只需要将组件Schema push到模板变量中即可</p><blockquote><p>代码位置：<a href="https://github.com/vkcyan/YD/blob/main/src/modules/component/index.ts">https://github.com/vkcyan/YD/blob/main/src/modules/component/index.ts</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件信息列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 组件名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tempLen 本次层级</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">baseComList</span>(<span class="params">name: string, tempLen</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">list</span>: baseComponent[] = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="title function_">guid</span>(),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;y-img&#x27;</span>,</span><br><span class="line">      <span class="attr">showTitle</span>: <span class="string">`图片<span class="subst">$&#123;tempLen&#125;</span>`</span>, <span class="comment">// 显示组件名称</span></span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">cssModule</span>: &#123;</span><br><span class="line">        ...<span class="title function_">absolute</span>(tempLen),</span><br><span class="line">        ...<span class="title function_">borderData</span>(),</span><br><span class="line">        ...<span class="title function_">compSize</span>(<span class="number">100</span>, <span class="number">60</span>),</span><br><span class="line">        <span class="string">&#x27;background-color&#x27;</span>: <span class="string">&#x27;#ffffff00&#x27;</span>,</span><br><span class="line">      &#125;, <span class="comment">// 样式</span></span><br><span class="line">      <span class="attr">staticData</span>: &#123;</span><br><span class="line">        <span class="attr">imglUrl</span>:<span class="string">&#x27;xxxx.png&#x27;</span>,</span><br><span class="line">        ...<span class="title function_">linkData</span>(),</span><br><span class="line">      &#125;, <span class="comment">// 行为</span></span><br><span class="line">      <span class="attr">function</span>: &#123;&#125;, <span class="comment">// 方法</span></span><br><span class="line">      <span class="attr">animation</span>: [], <span class="comment">// 动画</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">find</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e.<span class="property">name</span> == name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​例如增加一个图片组件，我们只需要将参数’y-img’，传入函数，即可得到一个图片组件的Schema，这样我们便具备搭建页面Schema树的能力。</p><h3 id="实现拖拽"><a href="#实现拖拽" class="headerlink" title="实现拖拽"></a>实现拖拽</h3><blockquote><p>实现良好的拖拽是一件非常有难度的事情，它不仅仅是简单元素的移动，而是通过技术的手段降低装修的操作门槛。</p></blockquote><h4 id="元素位移"><a href="#元素位移" class="headerlink" title="元素位移"></a>元素位移</h4><p>​在<code>易动v3.0</code>中，弃用了以往采用的监听鼠标单次移动距离实现方案，因为这会导致快速移动后出现坐标不准确的情况，改成获取相对父级绝对坐标。</p><p>​全局鼠标监听使用vueuse的<a href="https://vueuse.org/core/usemouseinelement/">useMouseInElement</a>API，帮助我们获取每次的相对位置，鼠标按下同时保存元素下标，再通过watchEffect全局监听<code>useMouseInElement</code>的变化，拿着鼠标<strong>按下阶段</strong>保存的<strong>下标</strong>去寻找需要位移的元素，不断更新其Schema中的cssModule字段中的<strong>top</strong>与<strong>left</strong>值，进而实现元素移动。</p><h4 id="元素缩放"><a href="#元素缩放" class="headerlink" title="元素缩放"></a>元素缩放</h4><img src="https://www.vkcyan.top/image-20220525114422478.png" alt="image-20220525114422478" style="zoom:67%;" /><p>​我们为元素增加 <code>上</code> <code>下</code> <code>左</code> <code>右</code> <code>左上</code> <code>左下</code> <code>右上</code> <code>右下</code>，八个操作点，是元素支持任意缩放功能，再点击任意缩放点的时候，我们都会保存一个标识，来确定当前点击的点是什么，然后在 全局监听鼠标移动的watchEffect中执行对应缩放逻辑，来不断更新选中的元素的 <strong>top</strong> <strong>left</strong> <strong>width</strong> <strong>height</strong>的组合值，进而实现元素缩放功能。</p><h3 id="元素多选"><a href="#元素多选" class="headerlink" title="元素多选"></a>元素多选</h3><img src="https://www.vkcyan.top/image-20220525114934419.png" alt="image-20220525114934419" style="zoom:50%;" /><p>​支持元素<strong>位移</strong>与<strong>缩放</strong>其实已经完成了装修的最核心功能，已经可以完成简单的页面搭建了，但是仅凭位移与缩放操作起来不方便，这时候就需要开发多选功能，我们把之前保存的单个选中下标改成一个选中数组。</p><p>​这里说明一下为什么保存数组下标，而不是组件的唯一id，这是一个时间复杂度的问题，如果保存组件唯一id，更新组件数据就需要通过循环再找到下标，进而通过下标更新数据，这时候时间复杂度为<strong>On</strong>，而直接保存数组下标，在通过下标直接更新数据，时间复杂度为<strong>O1</strong>。</p><p>​回到正题，我们开发一个选中框组件，在拖动选中框的时候判断是否包含了组件，不断更新当前选中框多选的元素，进而实现多选删除，多选拖动，等等多选功能。</p><p>​目前多选框计算逻辑还比较单一，仅支持从左上向右下拖动，后续有时间会继续完善。</p><h3 id="辅助线"><a href="#辅助线" class="headerlink" title="辅助线"></a>辅助线</h3><img src="https://www.vkcyan.top/image-20220525171846398.png" alt="image-20220525171846398" style="zoom:47%;" /><p>​辅助线是低代码系统必备功能，这将会极大的降低使用门槛，实现辅助线相对来说也是非常复杂的，假如页面有4个组件，我们点击了任意一个的时候，就需要去保存其他3个组件的 <code>top</code> <code>top + height/2</code> <code>top + height</code> <code>left</code> <code>left + width/2</code> <code>left+width</code>，并且将其数组保存成为<strong>字典结构</strong>，也就是<strong>ES6</strong>的<strong>Set</strong>，相对数组实现可以将时间复杂度从On2降低到On，有效避免了卡顿的情况，在被选中元素不断拖动的时候，我们会不断对比当前变化坐标与之前保存的3个组件的坐标，一旦对比到了一致，就会将其值push到存储变量，并在页面上显示，表明已经对齐。</p><h3 id="辅助线吸附"><a href="#辅助线吸附" class="headerlink" title="辅助线吸附"></a>辅助线吸附</h3><p>​先声明一下，辅助线吸附作者的实现还存在瑕疵，目前还在寻找更好的方案，也希望有大佬可以指点一二，目前吸附还存在一点操作上的不流畅情况，所以这部分我便不多赘述。找到最佳解决方案再更新。</p><h3 id="时间旅行"><a href="#时间旅行" class="headerlink" title="时间旅行"></a>时间旅行</h3><blockquote><p>pinia的subscribes存在差异，并且events在生产环境无法获取，导致现在线上无法相关使用</p></blockquote><p>​所谓时间旅行就是可以进行撤销 反撤销操作操作，，具体原理感兴趣可以看看vuex版本的实现，本质原理都是一样的，<a href="https://juejin.cn/post/6844904056792547341">基于vuex实现 撤销 与 反撤销 的plugins</a>，采用数组 + 单指针进行实现。</p><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>​移动端如何读取schema，使其还原装修效果；如何实现二次编辑组件的保存到创建市场；还有很多拖拽细节的实现；章节有限，这里不再一一赘述，有兴趣可以加入微信群在一起聊聊。</p><h2 id="基础组件or业务组件"><a href="#基础组件or业务组件" class="headerlink" title="基础组件or业务组件"></a>基础组件or业务组件</h2><blockquote><p>基础组件：按钮 图片 输入框 文字 模块（html自带的标签元素）</p><p>业务组件：富文本 轮播图 若干营销组件（由开发人员定制化产出的标签元素）</p></blockquote><p>​在早期开发低代码，无代码产品的时候，我将绝对定位方案与基础组件绑定，业务组件与流式布局绑定，随着对低代码的深入理解，我在这里必须纠正之前的偏见，正确的观点应该是：<strong>基础组件 + 绝对定位方案更加和谐</strong>、<strong>业务组件 + 流式布局方案更加和谐</strong>。</p><p>​随着将装修组件发布成为npm包，他们的隔阂已经几乎不存在，全部视为公共组件，公共npm组件包中将会抹平平台差异，任何可以描绘的组件可以看作为静态结构组件都可以被低&#x2F;无代码平台使用。</p><h2 id="关于低代码"><a href="#关于低代码" class="headerlink" title="关于低代码"></a>关于低代码</h2><p>​这几年关于低代码讨论也非常多，最近一直看到大厂开源的低代码工具，例如腾讯的<a href="https://juejin.cn/post/7096660785077846046">tmagic-editor</a>，阿里的<a href="https://juejin.cn/post/7088121411981541390">LowCodeEngine</a>，还有5月28号掘金直播低代码的探索与实践，其背后是前沿开发者们对效率的思考，是从局部效率转变到全局效率思想的转变。</p><p>​在技术条件有限的情况下，低代码产品的广度与深度只能选择其一，我们自然希望低代码可以做的事情越多越好，生成页面，生成代码，直接编写事件，支持单页，支持多页，支持无限嵌套dom，达到降低门槛，提效降成本的作用，甚至解放劳动力，创造更大的社会价值，但是如果没有足够的技术基础，做的功能越多，就死的越惨。所以如果你也发现存在类似需求，切勿在产品设计期间不断加功能，要专注细分领域，只有这样，低代码项目才有发光发热的机会，有了经验之后再决定做什么也不迟。</p><p>​<strong>从发现需求到明确定位有很长的路要走，低代码产品从可用到好用还有很长的路要走。</strong></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="为什么易动v3-0选择绝对定位方案"><a href="#为什么易动v3-0选择绝对定位方案" class="headerlink" title="为什么易动v3.0选择绝对定位方案"></a>为什么易动v3.0选择绝对定位方案</h3><p>​<code>易动v3.0</code>考虑到营销页面的多样化，他并不是理想化的流式布局，而是多样化的，甚至你意想不到的UI实现方式，这也是<code>易动v3.0</code>使用绝对定位方案实现的一个重要原因，后续作者也会不断加强可用性，进一步降低搭建门槛。贯彻技术为业务服务，而不是业务为技术服务的理念。</p><h3 id="为什么使用serverless"><a href="#为什么使用serverless" class="headerlink" title="为什么使用serverless"></a>为什么使用serverless</h3><p>​做出这个决定处于两点考虑</p><ol><li>大部分公司不会使用node作为服务端框架，接入会重写服务端。</li><li>本人是前端工程师，node 以及服务端周边服务不算精通，低代码的项目核心也不在服务端，serverless满足了作者的需求，后续我会提供表结构，以及关联关系。</li><li>因为腾讯云serverless已经开始收费了，后续可能会换成fastify进行服务端编写，主要看作者是否有时间，也非常欢迎有志之士为开源做出贡献。</li></ol><h3 id="关于PC端"><a href="#关于PC端" class="headerlink" title="关于PC端"></a>关于PC端</h3><p>​易动3的实现方案是绝对定位方案，这让实现pc端装修的可能性，但是个人感觉这部分需求比较小，B端的客户都是ToC，所以并没有做相关功能开发，但是理论上可以实现的。</p><h2 id="后续还会做什么"><a href="#后续还会做什么" class="headerlink" title="后续还会做什么"></a>后续还会做什么</h2><blockquote><p>目前易动v3.0 并不是完整状态，因为作者比较忙碌，很多功能依旧在开发中，大家也可以提出需求，如果存在价值，作者会加入后面的工作计划。</p></blockquote><ul><li>数据分析能力：页面的曝光情况是客户非常关心的指标，这也是易动v3.0非常关注的功能</li><li>模板市场功能：物料市场也是低代码平台非常重要的功能，配合组件市场，实现团队资源最大化利用，降低搭建门槛</li><li>丰富业务组件：根据客户需求开发其满足业务场景的组件，达到一次开发，多次使用的效果</li><li>增强装修能力：组件旋转，多选组件辅助对齐，搭建页面快捷操作，进一步降低大家门槛</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​这个开源项目将会一直做下去，未来可能也会尝试做收费版本，毕竟为爱发电还是过于理想化了，如果你也是同道中人或者有这样的潜在需求，可以加入微信群，一起交流学习，共同进步~</p><h2 id="讨论群"><a href="#讨论群" class="headerlink" title="讨论群"></a>讨论群</h2><img src="https://www.vkcyan.top/d6dad8dd3c29960e6ed1e01d73eb1d8.jpg" alt="d6dad8dd3c29960e6ed1e01d73eb1d8" style="zoom:30%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	作者在2020年的时候开源了易动第一个版本&lt;a href=&quot;https://juejin.cn/post/684490409597154</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
    <category term="低代码" scheme="https://vkcyan.github.io/tags/%E4%BD%8E%E4%BB%A3%E7%A0%81/"/>
    
    <category term="h5装修" scheme="https://vkcyan.github.io/tags/h5%E8%A3%85%E4%BF%AE/"/>
    
    <category term="Vue3" scheme="https://vkcyan.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>关于免登录的一些实践与思考</title>
    <link href="https://vkcyan.github.io/2022/05/24/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E9%92%88%E5%AF%B9%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://vkcyan.github.io/2022/05/24/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E9%92%88%E5%AF%B9%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/</id>
    <published>2022-05-23T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.095Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​<strong>听用户说，但是不要照着做。</strong></p><p>​这句话来自苏杰的《人人都是经理》这本书；在产品维度我们遵循这样的原则，其实在程序维度，也需要遵循这样的原则，如果没有意识到这一点我们也许会深陷泥潭。</p><h2 id="案例：免登录到商品详情页面"><a href="#案例：免登录到商品详情页面" class="headerlink" title="案例：免登录到商品详情页面"></a>案例：免登录到商品详情页面</h2><p>聊一个我们之前遇到的问题，场景是这样的</p><ol><li>用户在第三方平台登录，用户登录后点击商品会免登录到我们商城</li><li>跳转过来后，我们商城需要完成免登录操作，服务端同时给用户发放优惠券，在这个过程中必须保证通过免登录进入后同步调用登录 发券  获取商品详情接口顺序。</li></ol><p>​场景就是这么简单，似乎并不是太难的问题，于是我们将我方的商品详情URL给对方，对方在URL后面拼接token，web端拿到token之后将token给后台，完成登录  发券 获取详情逻辑，流程图如下</p><img src="http://www.vkcyan.top/image-20220524143533606.png" alt="image-20220524143533606" style="zoom:67%;" /><p>​按照我们上面的思路似乎没啥问题，无非就是用Promise控制代码顺序，但是在逻辑达到一定复杂程度后，这个问题就会变的非常棘手。</p><h3 id="问题：非业务逻辑与业务逻辑的耦合"><a href="#问题：非业务逻辑与业务逻辑的耦合" class="headerlink" title="问题：非业务逻辑与业务逻辑的耦合"></a>问题：非业务逻辑与业务逻辑的耦合</h3><p>​本质上来说，从第三方平台免登陆到我们商城中，并不属于购买商品逻辑，那就不应该将其逻辑写在商品详情页中</p><p>​况且这必须同步，用户没有完成我们这边的登录逻辑之前，我们不能发起商品详情接口，因为我们的商品详情数据包括用户最新的优惠券信息，如果异步，就会出现用户第一次进入是没有券的情况；这样的规则就导致我们需要对商品详情页面的业务逻辑进行改动。</p><p>​在这样的不安中，我们修改了商品详情页面的生命周期逻辑，一旦检测到需要免登录就会先执行登录再执行商品详情的获取。</p><p>​后续又多次出现了其他平台免登录到商品详情页面，并且流程都不太一样，最终导致了我们的商品详情页生命周期代码凌乱不堪，异步流程难以维护，甚至会出现逻辑相互冲突的情况。</p><h3 id="问题2：封装问题"><a href="#问题2：封装问题" class="headerlink" title="问题2：封装问题"></a>问题2：封装问题</h3><p>​最后我们商城对接的免登录越来越多，慢慢的我们便在逻辑层面进行了封装，但是依旧还是要动具体页面生命周期代码，而有些页面比如首页就存在很多第三方平台登录进来的，在生命周期代码中就出现大量的来源判断用来调用我们封装好的免登录逻辑，并且有些第三方还是具备时效性的，虽然我们在技术层面已经尽力，但是开发起来依旧很别扭，尤其是对于频繁需要维护的模块。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​再后面遇到这样一件事情，存在一个<strong>第三方商城免登录到我们的任意页面</strong>，听到需求的时候，我内心有点凌乱，因为我们目前免登录逻辑都是一对一的针对单个页面</p><p>​最开始我们聊了能否在nginx中进行统一拦截，后面觉得性能很差，也有种走进死胡同的感觉，后台后端同事提出一个方案，这是一个技术上微不足道，但是却非常好的解决这个问题的方案。</p><p>​我们将免登录的封装维度从单个逻辑的角度，提升为在对方跳转到我们目标页面中间的一层拦截</p><p>举个例子</p><p>​原本 <a href="http://www.abc.com/goods/index?token=xxxxx%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8%E5%85%B7%E4%BD%93%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%A4%84%E7%90%86">www.abc.com/goods/index?token=xxxxx，我们在具体页面中处理</a></p><p>​最新 <a href="http://www.abc.com/autoLogin?sc=xxx&amp;redirectUrl=www.abc.com/goods/index&amp;token=xxxxx">www.abc.com/autoLogin?sc=xxx&amp;redirectUrl=www.abc.com/goods/index&amp;token=xxxxx</a></p><blockquote><p>如果redirectUrl存在参数一定要将该参数encodeURIComponent处理以下，以免参数解析异常</p></blockquote><p><img src="http://www.vkcyan.top/image-20220524143545282.png" alt="image-20220524143545282"></p><p>这样做有三个优点也有一个缺点</p><p><strong>优点一</strong>：非业务逻辑与业务逻辑的耦合的问题，将免登录代码与业务代码完美的隔离开了，不论有多少，多个性化的免登录场景，都不会影响被跳转页面的逻辑</p><p><strong>优点二</strong>：不再需要逻辑封装，直接将与服务端交互的代码写在该页面即可，因为他已经与业务逻辑解耦合了</p><p><strong>优点三</strong>：可以形成对接规范，降低开发对接门槛，以及出现问题的可能性。</p><p><strong>缺点一</strong>：对于用户来说需要多跳转一层页面，有可能需要多等待20-100ms。这一点就要看取舍了，我们是单页应用，站内跳转很快，从线上效果来看对用户影响很小，几乎忽略不计。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​回头看优化后的实现方案，其实技术难度非小，如果把需求说明白了，这是一个大学生都能写好的需求，这样一个毫无技术难度的方案，在项目中却完成让人非常头疼的<strong>部分非业务逻辑与业务逻辑的解耦合</strong>。</p><p>​虽然作为一名开发人员，我们的本质工作就是实现需求，但是实现需求并不代表别人怎么说你就怎么做，而是根据需求加以自己的思考，在非开发角度提供自己宝贵的建议，也许，换一种思路，一个非常复杂的需求就会变得如此简单。</p><p>​现在让我们回到文章开头的那句话，<strong>听用户说，但是不要照着做</strong>，是不是有点感悟了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	&lt;strong&gt;听用户说，但是不要照着做。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	这句话来自苏杰的《人人都是经理》这本书；在产品维度我们遵</summary>
      
    
    
    
    <category term="日常开发" scheme="https://vkcyan.github.io/categories/%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="关于C端" scheme="https://vkcyan.github.io/tags/%E5%85%B3%E4%BA%8EC%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>上瘾模型如何应用到产品</title>
    <link href="https://vkcyan.github.io/2022/05/23/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B%E5%A6%82%E4%BD%95%E5%BA%94%E7%94%A8%E5%88%B0%E4%BA%A7%E5%93%81/"/>
    <id>https://vkcyan.github.io/2022/05/23/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B%E5%A6%82%E4%BD%95%E5%BA%94%E7%94%A8%E5%88%B0%E4%BA%A7%E5%93%81/</id>
    <published>2022-05-22T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​为什么有些产品有抓住我们的注意力，而其他产品却不能？是什么让我们出于习惯而建立与产品的联系？是否有一种潜在模式能够通过技术将用户紧紧吸引，欲罢不能。</p><p>​这是《上瘾》的引言，我相信看到上面这些话的时候，你的脑海中一定出现了让你上瘾的产品，比如抖音，这样现象级的产品是如何被设计出来的呢？《上瘾》通过大量实验案例，社会调研，总结并抽象了用户上瘾的产品设计原则。最后提炼出一个通用模型，掌握这样的通用模型，你就会得到一个产品设计框架。</p><p>当你从0到1设计产品的时候，或者分析市面上的产品，你就可以将上瘾模型应用到你的产品。</p><h2 id="上瘾模型是什么"><a href="#上瘾模型是什么" class="headerlink" title="上瘾模型是什么"></a>上瘾模型是什么</h2><p>触发 行动 多变的奖励 投入</p><p><img src="http://www.vkcyan.top/1.png" alt="1"></p><h3 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h3><p> <img src="http://www.vkcyan.top/2.png" alt="2"></p><h4 id="内部触发"><a href="#内部触发" class="headerlink" title="内部触发"></a>内部触发</h4><p>​内部触发是用户与产品建立的感情链接，不需要被打广告，不需要被通知，我主动去使用，就好像短视频APP，没有给我钱，也没有被推广，但是我们每天都高频使用，内部触发是给予用户情感的满足，让产品融入到了生活，是用户内心真实情感的触发，获得快乐、认同与安慰，具体类型会在行动中说明</p><p>下班后无聊，打开短视频APP</p><p>自拍几张照片，发布到社交平台</p><p>​这就是发生在我们身边的日常，我们选择某个产品是因为它能够为我们带来快乐或者解决烦恼，这就是为什么说要洞察用户的用户需求，而内部触发就是研究用户需求，而且是最深处的情感需求</p><p>​    所以常说做产品是发现用户需求，要去思考，我们的产品能够为用户解决什么问题，这自然是需要深入了解用户的痛苦与挣扎，然后设计出给予用户安慰的产品。</p><h4 id="外部触发"><a href="#外部触发" class="headerlink" title="外部触发"></a>外部触发</h4><p>指用户在非主动情况下接收的信息，有清晰的动作指令进行行动召唤</p><p>付费型触发：电梯广告 APP中推广</p><p>回馈型触发：某某软件因为做的好，被APP Store上了推荐位</p><p>人际型触发：小明觉得某个软件特别有意思，推荐给小红</p><p>自主型触发：小明毕业了需要找工作，下载了一个BOOS直聘</p><p>​一般会采用简单重复或者“经典+创新”的方式来完成外部触发，效果更加好，例如蜜雪冰城 还有很多老歌+新词的电梯广告 </p><h3 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h3><p> <img src="http://www.vkcyan.top/3.png" alt="3"></p><p>​用户完成触发后，就会来到产品中，让用户开始使用产品就是行动，而长时间高频率的行动才能养成用户习惯</p><p><strong>用户行为模型公式：行动 &#x3D; 动机 * 能力 *触发</strong></p><p>​如果一个用户想完成一个行动，这三者是缺一不可的。例如，周末你打算找你朋友开黑王者荣耀，但是朋友突然有事，你放弃了周末打王者</p><p>动机：渴望快乐 能力：有手机 有网络 有时间 触发：和朋友一起玩做王者荣耀</p><p>然后因为朋友突然放弃了，缺少触发条件，放弃</p><p>亦或者网络太差，缺少能力，放弃</p><p>亦或者由于某种突发紧急事件，没心情去体会游戏里面的快乐，缺少动机，放弃</p><h4 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h4><p>能够驱使用户采取行动的核心动机无非就是以下三种</p><p>-    追求快乐，逃避痛苦</p><p>-    追求希望，逃避恐惧</p><p>-    追求认同，逃避排斥</p><p>​补充：相对与失去快乐，人们更加害怕痛苦，就像捡到100块钱，你会很快乐，但是你丢失一百块钱，你会非常痛苦，这远比捡到100块情绪更加激烈，这在产品中常常表现为厌恶损失心理</p><h4 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h4><p>能力是行动的门槛，福格教授提出六要素</p><p>-    时间：完成这件事情需要的时间</p><p>-    金钱：从事这件事情需要的经济投入</p><p>-    体力：完成这件事所消耗的体力</p><p>-    脑力：完成这件事所消耗的脑力</p><p>-    社会偏差：他人对这项活动的接受度</p><p>-    非常规性：该活动与常规活动的匹配程度或矛盾程度</p><p>​一个行动需要的能力越少，用户就越轻松使用你的产品，所以我们反复强调降低用户使用门槛，从而减少因为能力问题而造成的流失</p><h3 id="多变的奖励"><a href="#多变的奖励" class="headerlink" title="多变的奖励"></a>多变的奖励</h3><p><img src="http://www.vkcyan.top/4.png" alt="4"></p><p>​    用户通过触发进入产品，并做出了行动，但是如果用户在你的产品中没有得到物质或者精神的奖励，用户自然会离你而去</p><h4 id="猎物奖励"><a href="#猎物奖励" class="headerlink" title="猎物奖励"></a>猎物奖励</h4><p>​猎物奖励就是获取自己想要的资源，刷抖音，寻找带来满足的视频，刷知乎，发现自己感兴趣的问题与回答，这就像原始人类追逐猎物一样，抓住他会充满获得感的</p><h4 id="社交奖励"><a href="#社交奖励" class="headerlink" title="社交奖励"></a>社交奖励</h4><p>​    社交奖励即为被认同，被赞美，被尊重，人类是情感动物，对社交奖励非常上瘾，会陶醉到社交带来的快乐中，这是及其有效的奖励方式，所以社交类产品经久不衰的原因，他的本质是获得一种社会认同</p><h4 id="自我奖励"><a href="#自我奖励" class="headerlink" title="自我奖励"></a>自我奖励</h4><p>​    自我奖励主要为使用产品时候的成就感，满足感，控制感。比如你喜欢收集手办，没人让你收集，收集了也没钱，但是让自己快乐了，同时找到了志同道合的朋友，我把我的手办发布到社区，被点赞，被评论这就很快乐，还有例如蚂蚁森林浇水，这都会带来内心的满足，从而实现自我价值</p><h4 id="多变性"><a href="#多变性" class="headerlink" title="多变性"></a>多变性</h4><p>​    灵长动物大都喜欢新奇的东西，一件事情，如果已经经历过很多次，再次经历将会失去兴趣，你的大脑不会获取快乐，因为你已经可以预感到下一步的行动，预感到你将会得到什么，大数据精准推荐、千人千面都是为了满足用户喜欢新奇的心理</p><p>​    如果某一次刷新知乎，推荐的都是你看过的或者不感兴趣的问答，那你自然不会上瘾，反之，如果你总是给用户带来新奇感，用户必定会进行更多的行动，来获取更多奖励，所以多变性是奖励的核心概念</p><p>​    最后补充一点，除了让用户经常获得奖励之外，让用户在第一次接触你的东西就有一个好印象也是关键点，例如首次打开小红书，QQ，他的登录背景视频是美好切令人向往的，让你感受到产品倡导的价值，如果恰好这也是你向往的，这个产品毫无疑问会吸引了你的注意力，你将会继续使用他</p><h3 id="投入"><a href="#投入" class="headerlink" title="投入"></a>投入</h3><p> <img src="http://www.vkcyan.top/5.png" alt="5"></p><p>​想象一个简单的场景，小明经过朋友推荐下载了王者荣耀，玩了1年时间，在游戏中达到了王者段位，期间在王者荣耀中购买了大量付费皮肤，同时认识了游戏好友；这时候出来了另一个竞品，不比王者荣耀逊色</p><p>​但是该竞品想吸引小明，难度是极大的，因为小明已经在王者荣耀中投入太多，时间，皮肤，游戏好友，对局资料，绝活英雄，这都会让小明无法脱离。</p><p>​    投入是上瘾模型闭环的最后一步，当用户通过触发，采取了行动，并获得了奖励，这时候如果能让用户进一步进行投入，那么这个产品在用户心中的地址将会达到顶峰</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>​    在微信上添加好友，添加群，这都是内容，随着使用的时间越长，你就会越离不开微信，让你换掉微信，那真的比登天还难</p><h4 id="数据资料"><a href="#数据资料" class="headerlink" title="数据资料"></a>数据资料</h4><p>​    以作者为例子，作为一名前端开发者，我的开源代码都存放在GitHub，随着我工作年限越长，我越舍不得离开GitHub，我的大量资料都在github中，对我而言，他有很高的价值</p><h4 id="关注者"><a href="#关注者" class="headerlink" title="关注者"></a>关注者</h4><p>​    小红是一位大厂产品经理，通过长期在知乎发表高质量文章获得了20w关注，随着人数的变多，小红将会越来越离不开知乎，微博，小红书 B站社区都是这样，关注者对于当事人来说是不可忽视的隐形价值</p><h4 id="信誉"><a href="#信誉" class="headerlink" title="信誉"></a>信誉</h4><p>​    小明觉得咸鱼不错，经常在咸鱼上售卖一些东西，你已经售卖一些东西，在未来会越来越关注你的信用情况，你就会花更多的经历去经营他</p><h4 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h4><p>​    以我自己举例子，学习编程的时候，使用的是vscode（编程开发软件），至今我已经使用了5年，已经对他产生了依赖，通过他学会了编辑技能，投入了很大的时间成本，学习成本，尽管竞品某些细节更好，但者依旧很难让我行动起来去换掉vscode</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​至此我们走完了上瘾模型，我们回顾一下，首先通过外部或者内部触发来让用户进入行动阶段，在行动中给予用户多变的奖励，最后让用户不断投入，时间，金钱，内容，或者资料，也可以为用户到来价值 信誉 关注这，经过这样的闭环后，用户将会越来越依赖你的产品</p><p>​似乎这个模型很棒，是一个值得思考的方法论，但是一个有价值的产品是一切的前提，如果产品没有挠到用户痒点，或者本身就是伪需求，那上瘾模型也无济于事，他不是救命稻草，而是锦上添花，让你的产品变的更加好。</p><p>​屏幕前的你此时此刻是否脑海中已经想到了很多，或者是对产品的理解，或者是对你正在进行中的项目产生了新的想法；后续内容提供了基于上瘾模型的产品设计模板，通过这样的模板可以分析别人的项目，也可以构建你准备开发或者正在进行中的项目</p><h2 id="将上瘾模型应用到产品中"><a href="#将上瘾模型应用到产品中" class="headerlink" title="将上瘾模型应用到产品中"></a>将上瘾模型应用到产品中</h2><h4 id="以内部触发为起点"><a href="#以内部触发为起点" class="headerlink" title="以内部触发为起点"></a>以内部触发为起点</h4><p>​    如果一款产品无法让用户内部触发，这就意味着用户感知不到其价值，产品的本质是满足客户需求，帮助用户解决问题；在这阶段我们需要研究、定位我们的客户群体，提炼特性，描述用户画像，通过丰田5Why法，深入了解用户的核心诉求，保证内部触发的合理性</p><h4 id="设计多变的奖励"><a href="#设计多变的奖励" class="headerlink" title="设计多变的奖励"></a>设计多变的奖励</h4><p>​    一款产品可以为用户带来什么？这是极其重要的问题，我们通过内部触发确定我们的用户群体，下一步就需要思考给予用户什么奖励，猎物奖励更好，还是社交奖励更好，同时要在奖励环节中贯彻多变性原则，这里再次强调：多变性是奖励的关键</p><p>注：如何给用户第一次良好的体验，让用户感知到价值，引导其内部触发，这也是关键的一环，其中越是生命周期短的产品，首次的啊哈时刻（一个用户对产品感知最强的点）必须要越早出现</p><h4 id="用户可以投入什么"><a href="#用户可以投入什么" class="headerlink" title="用户可以投入什么"></a>用户可以投入什么</h4><p>​    用户可以在你的产品中生产什么样的内容，数据资料，还是关注者，找准类型，同时要研究用户心理，找到用户可能想投入的实际，再引导用户去完成</p><h4 id="利用外部触发推广"><a href="#利用外部触发推广" class="headerlink" title="利用外部触发推广"></a>利用外部触发推广</h4><p>​    上瘾模型一旦形成，便需要源源不断的用户进入其中，这里可以根据自身的产品类型来选择外部触发方式，例如自身有钱，可以付费完成触发，或者通过社群进行人际型触发，具体触发方式需要根据产品特性来决定</p><h4 id="重复测试迭代优化"><a href="#重复测试迭代优化" class="headerlink" title="重复测试迭代优化"></a>重复测试迭代优化</h4><p>​当用户进行上瘾模型，并产生依赖之后，我们就需要不断检查每个环节是否符合预期，是否存在短板，根据实际数据进行测试，并进行优化迭代，不断完善上瘾模型</p><h2 id="对抽奖助手小程序的上瘾模型分析"><a href="#对抽奖助手小程序的上瘾模型分析" class="headerlink" title="对抽奖助手小程序的上瘾模型分析"></a>对抽奖助手小程序的上瘾模型分析</h2><p><img src="http://www.vkcyan.top/6.png" alt="6"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>参考文章：<a href="http://www.woshipm.com/pd/5386132.html">http://www.woshipm.com/pd/5386132.html</a></p><p>参考书籍：上瘾：让用户养成使用习惯的四大产品逻辑 尼尔·埃亚尔 瑞安·胡佛</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	为什么有些产品有抓住我们的注意力，而其他产品却不能？是什么让我们出于习惯而建立与产品的联系？是否有一种潜在模式能够通过技术将用户紧紧吸引</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="产品日常" scheme="https://vkcyan.github.io/tags/%E4%BA%A7%E5%93%81%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Vue + webpack项目的移动端适配</title>
    <link href="https://vkcyan.github.io/2022/05/20/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8vw%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    <id>https://vkcyan.github.io/2022/05/20/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0/vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8vw%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</id>
    <published>2022-05-19T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2022-5-20更新"><a href="#2022-5-20更新" class="headerlink" title="2022-5-20更新"></a>2022-5-20更新</h2><p>技术栈：vue3 + webpack5</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-px-to-viewport -D</span><br></pre></td></tr></table></figure><h3 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h3><p>新建配置文件<code>postcss.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">      <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">&quot;postcss-px-to-viewport&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">unitToConvert</span>: <span class="string">&quot;px&quot;</span>, <span class="comment">// 需要转换的单位，默认为&quot;px&quot;</span></span><br><span class="line">        <span class="attr">viewportWidth</span>: <span class="number">750</span>, <span class="comment">//  设计稿的视口宽度</span></span><br><span class="line">        <span class="attr">unitPrecision</span>: <span class="number">5</span>, <span class="comment">// 单位转换后保留的精度</span></span><br><span class="line">        <span class="attr">propList</span>: [<span class="string">&quot;*&quot;</span>], <span class="comment">// 能转化为vw的属性列表</span></span><br><span class="line">        <span class="attr">viewportUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">//  希望使用的视口单位</span></span><br><span class="line">        <span class="attr">fontViewportUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 字体使用的视口单位</span></span><br><span class="line">        <span class="attr">selectorBlackList</span>: [<span class="string">&quot;.ignore&quot;</span>, <span class="string">&quot;.hairlines&quot;</span>, <span class="string">&quot;.ig-&quot;</span>], <span class="comment">// 需要忽略的CSS选择器</span></span><br><span class="line">        <span class="attr">minPixelValue</span>: <span class="number">1</span>, <span class="comment">// 最小的转换数值，如果为1的话，只有大于1的值会被转换</span></span><br><span class="line">        <span class="attr">mediaQuery</span>: <span class="literal">false</span>, <span class="comment">// 媒体查询里的单位是否需要转换单位</span></span><br><span class="line">        <span class="attr">replace</span>: <span class="literal">true</span>, <span class="comment">// 是否直接更换属性值，而不添加备用属性</span></span><br><span class="line">        <span class="attr">include</span>: <span class="literal">undefined</span>, <span class="comment">// 如果设置了include，那将只有匹配到的文件才会被转换，例如只转换 &#x27;src/mobile&#x27; 下的文件 (include: /\/src\/mobile\//)</span></span><br><span class="line">        <span class="attr">landscape</span>: <span class="literal">false</span>, <span class="comment">// 是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</span></span><br><span class="line">        <span class="attr">landscapeUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 横屏时使用的单位</span></span><br><span class="line">        <span class="attr">landscapeWidth</span>: <span class="number">568</span>, <span class="comment">// 横屏时使用的视口宽度</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>以下配置已经过时，请看最新内容</p><p>需要安装一下的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano cssnano-preset-advanced postcss-import postcss-url --S</span><br></pre></td></tr></table></figure><p><code>postcss.config.js</code>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;postcss-import&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-url&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-aspect-ratio-mini&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-write-svg&#x27;</span>: &#123; <span class="attr">utf8</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-cssnext&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-px-to-viewport&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">viewportWidth</span>: <span class="number">750</span>, <span class="comment">// 视窗的宽度，对应的是我们设计稿的宽度，一般是750</span></span><br><span class="line">      <span class="attr">viewportHeight</span>: <span class="number">1334</span>, <span class="comment">// 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span></span><br><span class="line">      <span class="attr">unitPrecision</span>: <span class="number">3</span>, <span class="comment">// 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span></span><br><span class="line">      <span class="attr">viewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">// 指定需要转换成的视窗单位，建议使用vw</span></span><br><span class="line">      <span class="attr">selectorBlackList</span>: [<span class="string">&#x27;.ignore&#x27;</span>, <span class="string">&#x27;.hairlines&#x27;</span>], <span class="comment">// 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span></span><br><span class="line">      <span class="attr">minPixelValue</span>: <span class="number">0</span>, <span class="comment">// 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span></span><br><span class="line">      <span class="attr">mediaQuery</span>: <span class="literal">false</span> <span class="comment">// 允许在媒体查询中转换`px`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-viewport-units&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">filterRule</span>: <span class="function"><span class="params">rule</span> =&gt;</span> rule.<span class="property">nodes</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">prop</span> === <span class="string">&#x27;content&#x27;</span>) === -<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cssnano</span>: &#123;</span><br><span class="line">      <span class="attr">preset</span>: <span class="string">&#x27;advanced&#x27;</span>,</span><br><span class="line">      <span class="attr">autoprefixer</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;postcss-zindex&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里注意假如生成的项目里面没有.postcssrc.js 说明写在package.json里面,记得把package里面的部分配置删除</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;postcss&quot;: &#123;</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>最后在index.html里面进行引入viewport-units-buggyfill解决兼容问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;//g.alicdn.com/fdilab/lib3rd/viewport-units-buggyfill/0.6.2/??viewport-units-buggyfill.hacks.min.js,viewport-units-buggyfill.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">viewportUnitsBuggyfill</span>.<span class="title function_">init</span>(&#123; <span class="attr">hacks</span>: <span class="variable language_">window</span>.<span class="property">viewportUnitsBuggyfillHacks</span> &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果遇到图片无法正常显示</p><p>1.img图片不显示：</p><p>全局引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img &#123; </span><br><span class="line">content: normal !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.与第三方UI库兼容问题：</p><p>使用postcss-px-to-viewport-opt，然后使用exclude配置项，具体参考 <a href="https://zhuanlan.zhihu.com/p/36913200">Vue+ts下的移动端vw适配（第三方库css问题）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2022-5-20更新&quot;&gt;&lt;a href=&quot;#2022-5-20更新&quot; class=&quot;headerlink&quot; title=&quot;2022-5-20更新&quot;&gt;&lt;/a&gt;2022-5-20更新&lt;/h2&gt;&lt;p&gt;技术栈：vue3 + webpack5&lt;/p&gt;
&lt;h3 id=&quot;安装</summary>
      
    
    
    
    <category term="移动端" scheme="https://vkcyan.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="vue3" scheme="https://vkcyan.github.io/tags/vue3/"/>
    
    <category term="webpack5" scheme="https://vkcyan.github.io/tags/webpack5/"/>
    
    <category term="响应式" scheme="https://vkcyan.github.io/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
    <category term="vw" scheme="https://vkcyan.github.io/tags/vw/"/>
    
  </entry>
  
</feed>
