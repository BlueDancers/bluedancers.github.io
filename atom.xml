<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vkcya Blog</title>
  
  
  <link href="https://vkcyan.github.io/atom.xml" rel="self"/>
  
  <link href="https://vkcyan.github.io/"/>
  <updated>2022-05-24T07:34:17.938Z</updated>
  <id>https://vkcyan.github.io/</id>
  
  <author>
    <name>vkcyan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于免登录的一些实践与思考</title>
    <link href="https://vkcyan.github.io/2022/05/24/%E9%92%88%E5%AF%B9%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://vkcyan.github.io/2022/05/24/%E9%92%88%E5%AF%B9%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/</id>
    <published>2022-05-23T16:00:00.000Z</published>
    <updated>2022-05-24T07:34:17.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​<strong>听用户说，但是不要照着做。</strong></p><p>​这句话来自苏杰的《人人都是经理》这本书；在产品维度我们遵循这样的原则，其实在程序维度，也需要遵循这样的原则，如果没有意识到这一点我们也许会深陷泥潭。</p><h2 id="案例：免登录到商品详情页面"><a href="#案例：免登录到商品详情页面" class="headerlink" title="案例：免登录到商品详情页面"></a>案例：免登录到商品详情页面</h2><p>聊一个我们之前遇到的问题，场景是这样的</p><ol><li>用户在第三方平台登录，用户登录后点击商品会免登录到我们商城</li><li>跳转过来后，我们商城需要完成免登录操作，服务端同时给用户发放优惠券，在这个过程中必须保证通过免登录进入后同步调用登录 发券  获取商品详情接口顺序。</li></ol><p>​场景就是这么简单，似乎并不是太难的问题，于是我们将我方的商品详情URL给对方，对方在URL后面拼接token，web端拿到token之后将token给后台，完成登录  发券 获取详情逻辑，流程图如下</p><img src="http://www.vkcyan.top/image-20220524143533606.png" alt="image-20220524143533606" style="zoom:67%;" /><p>​按照我们上面的思路似乎没啥问题，无非就是用Promise控制代码顺序，但是在逻辑达到一定复杂程度后，这个问题就会变的非常棘手。</p><h3 id="问题：非业务逻辑与业务逻辑的耦合"><a href="#问题：非业务逻辑与业务逻辑的耦合" class="headerlink" title="问题：非业务逻辑与业务逻辑的耦合"></a>问题：非业务逻辑与业务逻辑的耦合</h3><p>​本质上来说，从第三方平台免登陆到我们商城中，并不属于购买商品逻辑，那就不应该将其逻辑写在商品详情页中</p><p>​况且这必须同步，用户没有完成我们这边的登录逻辑之前，我们不能发起商品详情接口，因为我们的商品详情数据包括用户最新的优惠券信息，如果异步，就会出现用户第一次进入是没有券的情况；这样的规则就导致我们需要对商品详情页面的业务逻辑进行改动。</p><p>​在这样的不安中，我们修改了商品详情页面的生命周期逻辑，一旦检测到需要免登录就会先执行登录再执行商品详情的获取。</p><p>​后续又多次出现了其他平台免登录到商品详情页面，并且流程都不太一样，最终导致了我们的商品详情页生命周期代码凌乱不堪，异步流程难以维护，甚至会出现逻辑相互冲突的情况。</p><h3 id="问题2：封装问题"><a href="#问题2：封装问题" class="headerlink" title="问题2：封装问题"></a>问题2：封装问题</h3><p>​最后我们商城对接的免登录越来越多，慢慢的我们便在逻辑层面进行了封装，但是依旧还是要动具体页面生命周期代码，而有些页面比如首页就存在很多第三方平台登录进来的，在生命周期代码中就出现大量的来源判断用来调用我们封装好的免登录逻辑，并且有些第三方还是具备时效性的，虽然我们在技术层面已经尽力，但是开发起来依旧很别扭，尤其是对于频繁需要维护的模块。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​再后面遇到这样一件事情，存在一个<strong>第三方商城免登录到我们的任意页面</strong>，听到需求的时候，我内心有点凌乱，因为我们目前免登录逻辑都是一对一的针对单个页面</p><p>​最开始我们聊了能否在nginx中进行统一拦截，后面觉得性能很差，也有种走进死胡同的感觉，后台后端同事提出一个方案，这是一个技术上微不足道，但是却非常好的解决这个问题的方案。</p><p>​我们将免登录的封装维度从单个逻辑的角度，提升为在对方跳转到我们目标页面中间的一层拦截</p><p>举个例子</p><p>​原本 <a href="http://www.abc.com/goods/index?token=xxxxx%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8%E5%85%B7%E4%BD%93%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%A4%84%E7%90%86">www.abc.com/goods/index?token=xxxxx，我们在具体页面中处理</a></p><p>​最新 <a href="http://www.abc.com/autoLogin?sc=xxx&amp;redirectUrl=www.abc.com/goods/index&amp;token=xxxxx">www.abc.com/autoLogin?sc=xxx&amp;redirectUrl=www.abc.com/goods/index&amp;token=xxxxx</a></p><blockquote><p>如果redirectUrl存在参数一定要将该参数encodeURIComponent处理以下，以免参数解析异常</p></blockquote><p><img src="http://www.vkcyan.top/image-20220524143545282.png" alt="image-20220524143545282"></p><p>这样做有三个优点也有一个缺点</p><p><strong>优点一</strong>：非业务逻辑与业务逻辑的耦合的问题，将免登录代码与业务代码完美的隔离开了，不论有多少，多个性化的免登录场景，都不会影响被跳转页面的逻辑</p><p><strong>优点二</strong>：不再需要逻辑封装，直接将与服务端交互的代码写在该页面即可，因为他已经与业务逻辑解耦合了</p><p><strong>优点三</strong>：可以形成对接规范，降低开发对接门槛，以及出现问题的可能性。</p><p><strong>缺点一</strong>：对于用户来说需要多跳转一层页面，有可能需要多等待20-100ms。这一点就要看取舍了，我们是单页应用，站内跳转很快，从线上效果来看对用户影响很小，几乎忽略不计。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​回头看优化后的实现方案，其实技术难度非小，如果把需求说明白了，这是一个大学生都能写好的需求，这样一个毫无技术难度的方案，在项目中却完成让人非常头疼的<strong>部分非业务逻辑与业务逻辑的解耦合</strong>。</p><p>​虽然作为一名开发人员，我们的本质工作就是实现需求，但是实现需求并不代表别人怎么说你就怎么做，而是根据需求加以自己的思考，在非开发角度提供自己宝贵的建议，也许，换一种思路，一个非常复杂的需求就会变得如此简单。</p><p>​现在让我们回到文章开头的那句话，<strong>听用户说，但是不要照着做</strong>，是不是有点感悟了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	&lt;strong&gt;听用户说，但是不要照着做。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	这句话来自苏杰的《人人都是经理》这本书；在产品维度我们遵</summary>
      
    
    
    
    <category term="日常开发" scheme="https://vkcyan.github.io/categories/%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="关于C端" scheme="https://vkcyan.github.io/tags/%E5%85%B3%E4%BA%8EC%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>上瘾模型如何应用到产品</title>
    <link href="https://vkcyan.github.io/2022/05/23/%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B%E5%A6%82%E4%BD%95%E5%BA%94%E7%94%A8%E5%88%B0%E4%BA%A7%E5%93%81/"/>
    <id>https://vkcyan.github.io/2022/05/23/%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B%E5%A6%82%E4%BD%95%E5%BA%94%E7%94%A8%E5%88%B0%E4%BA%A7%E5%93%81/</id>
    <published>2022-05-22T16:00:00.000Z</published>
    <updated>2022-05-23T10:51:27.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​为什么有些产品有抓住我们的注意力，而其他产品却不能？是什么让我们出于习惯而建立与产品的联系？是否有一种潜在模式能够通过技术将用户紧紧吸引，欲罢不能。</p><p>​这是《上瘾》的引言，我相信看到上面这些话的时候，你的脑海中一定出现了让你上瘾的产品，比如抖音，这样现象级的产品是如何被设计出来的呢？《上瘾》通过大量实验案例，社会调研，总结并抽象了用户上瘾的产品设计原则。最后提炼出一个通用模型，掌握这样的通用模型，你就会得到一个产品设计框架。</p><p>当你从0到1设计产品的时候，或者分析市面上的产品，你就可以将上瘾模型应用到你的产品。</p><h2 id="上瘾模型是什么"><a href="#上瘾模型是什么" class="headerlink" title="上瘾模型是什么"></a>上瘾模型是什么</h2><p>触发 行动 多变的奖励 投入</p><p><img src="http://www.vkcyan.top/1.png" alt="1"></p><h3 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h3><p> <img src="http://www.vkcyan.top/2.png" alt="2"></p><h4 id="内部触发"><a href="#内部触发" class="headerlink" title="内部触发"></a>内部触发</h4><p>​内部触发是用户与产品建立的感情链接，不需要被打广告，不需要被通知，我主动去使用，就好像短视频APP，没有给我钱，也没有被推广，但是我们每天都高频使用，内部触发是给予用户情感的满足，让产品融入到了生活，是用户内心真实情感的触发，获得快乐、认同与安慰，具体类型会在行动中说明</p><p>下班后无聊，打开短视频APP</p><p>自拍几张照片，发布到社交平台</p><p>​这就是发生在我们身边的日常，我们选择某个产品是因为它能够为我们带来快乐或者解决烦恼，这就是为什么说要洞察用户的用户需求，而内部触发就是研究用户需求，而且是最深处的情感需求</p><p>​    所以常说做产品是发现用户需求，要去思考，我们的产品能够为用户解决什么问题，这自然是需要深入了解用户的痛苦与挣扎，然后设计出给予用户安慰的产品。</p><h4 id="外部触发"><a href="#外部触发" class="headerlink" title="外部触发"></a>外部触发</h4><p>指用户在非主动情况下接收的信息，有清晰的动作指令进行行动召唤</p><p>付费型触发：电梯广告 APP中推广</p><p>回馈型触发：某某软件因为做的好，被APP Store上了推荐位</p><p>人际型触发：小明觉得某个软件特别有意思，推荐给小红</p><p>自主型触发：小明毕业了需要找工作，下载了一个BOOS直聘</p><p>​一般会采用简单重复或者“经典+创新”的方式来完成外部触发，效果更加好，例如蜜雪冰城 还有很多老歌+新词的电梯广告 </p><h3 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h3><p> <img src="http://www.vkcyan.top/3.png" alt="3"></p><p>​用户完成触发后，就会来到产品中，让用户开始使用产品就是行动，而长时间高频率的行动才能养成用户习惯</p><p><strong>用户行为模型公式：行动 &#x3D; 动机 * 能力 *触发</strong></p><p>​如果一个用户想完成一个行动，这三者是缺一不可的。例如，周末你打算找你朋友开黑王者荣耀，但是朋友突然有事，你放弃了周末打王者</p><p>动机：渴望快乐 能力：有手机 有网络 有时间 触发：和朋友一起玩做王者荣耀</p><p>然后因为朋友突然放弃了，缺少触发条件，放弃</p><p>亦或者网络太差，缺少能力，放弃</p><p>亦或者由于某种突发紧急事件，没心情去体会游戏里面的快乐，缺少动机，放弃</p><h4 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h4><p>能够驱使用户采取行动的核心动机无非就是以下三种</p><p>-    追求快乐，逃避痛苦</p><p>-    追求希望，逃避恐惧</p><p>-    追求认同，逃避排斥</p><p>​补充：相对与失去快乐，人们更加害怕痛苦，就像捡到100块钱，你会很快乐，但是你丢失一百块钱，你会非常痛苦，这远比捡到100块情绪更加激烈，这在产品中常常表现为厌恶损失心理</p><h4 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h4><p>能力是行动的门槛，福格教授提出六要素</p><p>-    时间：完成这件事情需要的时间</p><p>-    金钱：从事这件事情需要的经济投入</p><p>-    体力：完成这件事所消耗的体力</p><p>-    脑力：完成这件事所消耗的脑力</p><p>-    社会偏差：他人对这项活动的接受度</p><p>-    非常规性：该活动与常规活动的匹配程度或矛盾程度</p><p>​一个行动需要的能力越少，用户就越轻松使用你的产品，所以我们反复强调降低用户使用门槛，从而减少因为能力问题而造成的流失</p><h3 id="多变的奖励"><a href="#多变的奖励" class="headerlink" title="多变的奖励"></a>多变的奖励</h3><p><img src="http://www.vkcyan.top/4.png" alt="4"></p><p>​    用户通过触发进入产品，并做出了行动，但是如果用户在你的产品中没有得到物质或者精神的奖励，用户自然会离你而去</p><h4 id="猎物奖励"><a href="#猎物奖励" class="headerlink" title="猎物奖励"></a>猎物奖励</h4><p>​猎物奖励就是获取自己想要的资源，刷抖音，寻找带来满足的视频，刷知乎，发现自己感兴趣的问题与回答，这就像原始人类追逐猎物一样，抓住他会充满获得感的</p><h4 id="社交奖励"><a href="#社交奖励" class="headerlink" title="社交奖励"></a>社交奖励</h4><p>​    社交奖励即为被认同，被赞美，被尊重，人类是情感动物，对社交奖励非常上瘾，会陶醉到社交带来的快乐中，这是及其有效的奖励方式，所以社交类产品经久不衰的原因，他的本质是获得一种社会认同</p><h4 id="自我奖励"><a href="#自我奖励" class="headerlink" title="自我奖励"></a>自我奖励</h4><p>​    自我奖励主要为使用产品时候的成就感，满足感，控制感。比如你喜欢收集手办，没人让你收集，收集了也没钱，但是让自己快乐了，同时找到了志同道合的朋友，我把我的手办发布到社区，被点赞，被评论这就很快乐，还有例如蚂蚁森林浇水，这都会带来内心的满足，从而实现自我价值</p><h4 id="多变性"><a href="#多变性" class="headerlink" title="多变性"></a>多变性</h4><p>​    灵长动物大都喜欢新奇的东西，一件事情，如果已经经历过很多次，再次经历将会失去兴趣，你的大脑不会获取快乐，因为你已经可以预感到下一步的行动，预感到你将会得到什么，大数据精准推荐、千人千面都是为了满足用户喜欢新奇的心理</p><p>​    如果某一次刷新知乎，推荐的都是你看过的或者不感兴趣的问答，那你自然不会上瘾，反之，如果你总是给用户带来新奇感，用户必定会进行更多的行动，来获取更多奖励，所以多变性是奖励的核心概念</p><p>​    最后补充一点，除了让用户经常获得奖励之外，让用户在第一次接触你的东西就有一个好印象也是关键点，例如首次打开小红书，QQ，他的登录背景视频是美好切令人向往的，让你感受到产品倡导的价值，如果恰好这也是你向往的，这个产品毫无疑问会吸引了你的注意力，你将会继续使用他</p><h3 id="投入"><a href="#投入" class="headerlink" title="投入"></a>投入</h3><p> <img src="http://www.vkcyan.top/5.png" alt="5"></p><p>​想象一个简单的场景，小明经过朋友推荐下载了王者荣耀，玩了1年时间，在游戏中达到了王者段位，期间在王者荣耀中购买了大量付费皮肤，同时认识了游戏好友；这时候出来了另一个竞品，不比王者荣耀逊色</p><p>​但是该竞品想吸引小明，难度是极大的，因为小明已经在王者荣耀中投入太多，时间，皮肤，游戏好友，对局资料，绝活英雄，这都会让小明无法脱离。</p><p>​    投入是上瘾模型闭环的最后一步，当用户通过触发，采取了行动，并获得了奖励，这时候如果能让用户进一步进行投入，那么这个产品在用户心中的地址将会达到顶峰</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>​    在微信上添加好友，添加群，这都是内容，随着使用的时间越长，你就会越离不开微信，让你换掉微信，那真的比登天还难</p><h4 id="数据资料"><a href="#数据资料" class="headerlink" title="数据资料"></a>数据资料</h4><p>​    以作者为例子，作为一名前端开发者，我的开源代码都存放在GitHub，随着我工作年限越长，我越舍不得离开GitHub，我的大量资料都在github中，对我而言，他有很高的价值</p><h4 id="关注者"><a href="#关注者" class="headerlink" title="关注者"></a>关注者</h4><p>​    小红是一位大厂产品经理，通过长期在知乎发表高质量文章获得了20w关注，随着人数的变多，小红将会越来越离不开知乎，微博，小红书 B站社区都是这样，关注者对于当事人来说是不可忽视的隐形价值</p><h4 id="信誉"><a href="#信誉" class="headerlink" title="信誉"></a>信誉</h4><p>​    小明觉得咸鱼不错，经常在咸鱼上售卖一些东西，你已经售卖一些东西，在未来会越来越关注你的信用情况，你就会花更多的经历去经营他</p><h4 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h4><p>​    以我自己举例子，学习编程的时候，使用的是vscode（编程开发软件），至今我已经使用了5年，已经对他产生了依赖，通过他学会了编辑技能，投入了很大的时间成本，学习成本，尽管竞品某些细节更好，但者依旧很难让我行动起来去换掉vscode</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​至此我们走完了上瘾模型，我们回顾一下，首先通过外部或者内部触发来让用户进入行动阶段，在行动中给予用户多变的奖励，最后让用户不断投入，时间，金钱，内容，或者资料，也可以为用户到来价值 信誉 关注这，经过这样的闭环后，用户将会越来越依赖你的产品</p><p>​似乎这个模型很棒，是一个值得思考的方法论，但是一个有价值的产品是一切的前提，如果产品没有挠到用户痒点，或者本身就是伪需求，那上瘾模型也无济于事，他不是救命稻草，而是锦上添花，让你的产品变的更加好。</p><p>​屏幕前的你此时此刻是否脑海中已经想到了很多，或者是对产品的理解，或者是对你正在进行中的项目产生了新的想法；后续内容提供了基于上瘾模型的产品设计模板，通过这样的模板可以分析别人的项目，也可以构建你准备开发或者正在进行中的项目</p><h2 id="将上瘾模型应用到产品中"><a href="#将上瘾模型应用到产品中" class="headerlink" title="将上瘾模型应用到产品中"></a>将上瘾模型应用到产品中</h2><h4 id="以内部触发为起点"><a href="#以内部触发为起点" class="headerlink" title="以内部触发为起点"></a>以内部触发为起点</h4><p>​    如果一款产品无法让用户内部触发，这就意味着用户感知不到其价值，产品的本质是满足客户需求，帮助用户解决问题；在这阶段我们需要研究、定位我们的客户群体，提炼特性，描述用户画像，通过丰田5Why法，深入了解用户的核心诉求，保证内部触发的合理性</p><h4 id="设计多变的奖励"><a href="#设计多变的奖励" class="headerlink" title="设计多变的奖励"></a>设计多变的奖励</h4><p>​    一款产品可以为用户带来什么？这是极其重要的问题，我们通过内部触发确定我们的用户群体，下一步就需要思考给予用户什么奖励，猎物奖励更好，还是社交奖励更好，同时要在奖励环节中贯彻多变性原则，这里再次强调：多变性是奖励的关键</p><p>注：如何给用户第一次良好的体验，让用户感知到价值，引导其内部触发，这也是关键的一环，其中越是生命周期短的产品，首次的啊哈时刻（一个用户对产品感知最强的点）必须要越早出现</p><h4 id="用户可以投入什么"><a href="#用户可以投入什么" class="headerlink" title="用户可以投入什么"></a>用户可以投入什么</h4><p>​    用户可以在你的产品中生产什么样的内容，数据资料，还是关注者，找准类型，同时要研究用户心理，找到用户可能想投入的实际，再引导用户去完成</p><h4 id="利用外部触发推广"><a href="#利用外部触发推广" class="headerlink" title="利用外部触发推广"></a>利用外部触发推广</h4><p>​    上瘾模型一旦形成，便需要源源不断的用户进入其中，这里可以根据自身的产品类型来选择外部触发方式，例如自身有钱，可以付费完成触发，或者通过社群进行人际型触发，具体触发方式需要根据产品特性来决定</p><h4 id="重复测试迭代优化"><a href="#重复测试迭代优化" class="headerlink" title="重复测试迭代优化"></a>重复测试迭代优化</h4><p>​当用户进行上瘾模型，并产生依赖之后，我们就需要不断检查每个环节是否符合预期，是否存在短板，根据实际数据进行测试，并进行优化迭代，不断完善上瘾模型</p><h2 id="对抽奖助手小程序的上瘾模型分析"><a href="#对抽奖助手小程序的上瘾模型分析" class="headerlink" title="对抽奖助手小程序的上瘾模型分析"></a>对抽奖助手小程序的上瘾模型分析</h2><p><img src="http://www.vkcyan.top/6.png" alt="6"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>参考文章：<a href="http://www.woshipm.com/pd/5386132.html">http://www.woshipm.com/pd/5386132.html</a></p><p>参考书籍：上瘾：让用户养成使用习惯的四大产品逻辑 尼尔·埃亚尔 瑞安·胡佛</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	为什么有些产品有抓住我们的注意力，而其他产品却不能？是什么让我们出于习惯而建立与产品的联系？是否有一种潜在模式能够通过技术将用户紧紧吸引</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="产品日常" scheme="https://vkcyan.github.io/tags/%E4%BA%A7%E5%93%81%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Vue + webpack项目的移动端适配</title>
    <link href="https://vkcyan.github.io/2022/05/20/vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8vw%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    <id>https://vkcyan.github.io/2022/05/20/vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8vw%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</id>
    <published>2022-05-19T16:00:00.000Z</published>
    <updated>2022-05-24T02:13:18.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2022-5-20更新"><a href="#2022-5-20更新" class="headerlink" title="2022-5-20更新"></a>2022-5-20更新</h2><p>技术栈：vue3 + webpack5</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-px-to-viewport -D</span><br></pre></td></tr></table></figure><h3 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h3><p>新建配置文件<code>postcss.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">      <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">&quot;postcss-px-to-viewport&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">unitToConvert</span>: <span class="string">&quot;px&quot;</span>, <span class="comment">// 需要转换的单位，默认为&quot;px&quot;</span></span><br><span class="line">        <span class="attr">viewportWidth</span>: <span class="number">750</span>, <span class="comment">//  设计稿的视口宽度</span></span><br><span class="line">        <span class="attr">unitPrecision</span>: <span class="number">5</span>, <span class="comment">// 单位转换后保留的精度</span></span><br><span class="line">        <span class="attr">propList</span>: [<span class="string">&quot;*&quot;</span>], <span class="comment">// 能转化为vw的属性列表</span></span><br><span class="line">        <span class="attr">viewportUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">//  希望使用的视口单位</span></span><br><span class="line">        <span class="attr">fontViewportUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 字体使用的视口单位</span></span><br><span class="line">        <span class="attr">selectorBlackList</span>: [<span class="string">&quot;.ignore&quot;</span>, <span class="string">&quot;.hairlines&quot;</span>, <span class="string">&quot;.ig-&quot;</span>], <span class="comment">// 需要忽略的CSS选择器</span></span><br><span class="line">        <span class="attr">minPixelValue</span>: <span class="number">1</span>, <span class="comment">// 最小的转换数值，如果为1的话，只有大于1的值会被转换</span></span><br><span class="line">        <span class="attr">mediaQuery</span>: <span class="literal">false</span>, <span class="comment">// 媒体查询里的单位是否需要转换单位</span></span><br><span class="line">        <span class="attr">replace</span>: <span class="literal">true</span>, <span class="comment">// 是否直接更换属性值，而不添加备用属性</span></span><br><span class="line">        <span class="attr">include</span>: <span class="literal">undefined</span>, <span class="comment">// 如果设置了include，那将只有匹配到的文件才会被转换，例如只转换 &#x27;src/mobile&#x27; 下的文件 (include: /\/src\/mobile\//)</span></span><br><span class="line">        <span class="attr">landscape</span>: <span class="literal">false</span>, <span class="comment">// 是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</span></span><br><span class="line">        <span class="attr">landscapeUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 横屏时使用的单位</span></span><br><span class="line">        <span class="attr">landscapeWidth</span>: <span class="number">568</span>, <span class="comment">// 横屏时使用的视口宽度</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>以下配置已经过时，请看最新内容</p><p>需要安装一下的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano cssnano-preset-advanced postcss-import postcss-url --S</span><br></pre></td></tr></table></figure><p><code>postcss.config.js</code>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;postcss-import&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-url&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-aspect-ratio-mini&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-write-svg&#x27;</span>: &#123; <span class="attr">utf8</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-cssnext&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-px-to-viewport&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">viewportWidth</span>: <span class="number">750</span>, <span class="comment">// 视窗的宽度，对应的是我们设计稿的宽度，一般是750</span></span><br><span class="line">      <span class="attr">viewportHeight</span>: <span class="number">1334</span>, <span class="comment">// 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span></span><br><span class="line">      <span class="attr">unitPrecision</span>: <span class="number">3</span>, <span class="comment">// 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span></span><br><span class="line">      <span class="attr">viewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">// 指定需要转换成的视窗单位，建议使用vw</span></span><br><span class="line">      <span class="attr">selectorBlackList</span>: [<span class="string">&#x27;.ignore&#x27;</span>, <span class="string">&#x27;.hairlines&#x27;</span>], <span class="comment">// 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span></span><br><span class="line">      <span class="attr">minPixelValue</span>: <span class="number">0</span>, <span class="comment">// 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span></span><br><span class="line">      <span class="attr">mediaQuery</span>: <span class="literal">false</span> <span class="comment">// 允许在媒体查询中转换`px`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-viewport-units&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">filterRule</span>: <span class="function"><span class="params">rule</span> =&gt;</span> rule.<span class="property">nodes</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">prop</span> === <span class="string">&#x27;content&#x27;</span>) === -<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cssnano</span>: &#123;</span><br><span class="line">      <span class="attr">preset</span>: <span class="string">&#x27;advanced&#x27;</span>,</span><br><span class="line">      <span class="attr">autoprefixer</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;postcss-zindex&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里注意假如生成的项目里面没有.postcssrc.js 说明写在package.json里面,记得把package里面的部分配置删除</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;postcss&quot;: &#123;</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>最后在index.html里面进行引入viewport-units-buggyfill解决兼容问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;//g.alicdn.com/fdilab/lib3rd/viewport-units-buggyfill/0.6.2/??viewport-units-buggyfill.hacks.min.js,viewport-units-buggyfill.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">viewportUnitsBuggyfill</span>.<span class="title function_">init</span>(&#123; <span class="attr">hacks</span>: <span class="variable language_">window</span>.<span class="property">viewportUnitsBuggyfillHacks</span> &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果遇到图片无法正常显示</p><p>1.img图片不显示：</p><p>全局引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img &#123; </span><br><span class="line">content: normal !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.与第三方UI库兼容问题：</p><p>使用postcss-px-to-viewport-opt，然后使用exclude配置项，具体参考 <a href="https://zhuanlan.zhihu.com/p/36913200">Vue+ts下的移动端vw适配（第三方库css问题）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2022-5-20更新&quot;&gt;&lt;a href=&quot;#2022-5-20更新&quot; class=&quot;headerlink&quot; title=&quot;2022-5-20更新&quot;&gt;&lt;/a&gt;2022-5-20更新&lt;/h2&gt;&lt;p&gt;技术栈：vue3 + webpack5&lt;/p&gt;
&lt;h3 id=&quot;安装</summary>
      
    
    
    
    <category term="移动端" scheme="https://vkcyan.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="vue3 webpack5 相应式 vw" scheme="https://vkcyan.github.io/tags/vue3-webpack5-%E7%9B%B8%E5%BA%94%E5%BC%8F-vw/"/>
    
  </entry>
  
  <entry>
    <title>NPDP产品经理国际资格认证</title>
    <link href="https://vkcyan.github.io/2022/03/18/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://vkcyan.github.io/2022/03/18/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:34:34.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="产品经理与项目经理对比"><a href="#产品经理与项目经理对比" class="headerlink" title="产品经理与项目经理对比"></a>产品经理与项目经理对比</h2><table><thead><tr><th>内容</th><th>产品经理</th><th>项目经理</th></tr></thead><tbody><tr><td>职责</td><td>发现并定义范围</td><td>执行并交付范围</td></tr><tr><td>范围</td><td>对产品整个生命周期负责</td><td>阶段性对项目负责</td></tr><tr><td>角色</td><td>母亲，定义目标，发布计划，然后在生命周期的各个阶段继续培育产品</td><td>像家庭教师，一直待在产品旁边，帮助产品成长，让他最后成为产品满意的样子</td></tr></tbody></table><h2 id="主题知识"><a href="#主题知识" class="headerlink" title="主题知识"></a>主题知识</h2><p>组合管理</p><p>新产品开发战略 新产品流程 产品生命周期管理</p><p>文化，组织与团队</p><p>工具与效绩度量</p><p>市场研究</p><h2 id="知识点分布"><a href="#知识点分布" class="headerlink" title="知识点分布"></a>知识点分布</h2><p>新产品流程 20%</p><p>新产品开发 20%</p><p>组合管理 10%</p><p>产品生命周期管理 10%</p><p>市场研究 10%</p><p>工具与绩效度量 20%</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;产品经理与项目经理对比&quot;&gt;&lt;a href=&quot;#产品经理与项目经理对比&quot; class=&quot;headerlink&quot; title=&quot;产品经理与项目经理对比&quot;&gt;&lt;/a&gt;产品经理与项目经理对比&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>工具与绩效度量</title>
    <link href="https://vkcyan.github.io/2022/03/18/%E5%B7%A5%E5%85%B7%E4%B8%8E%E7%BB%A9%E6%95%88%E5%BA%A6%E9%87%8F/"/>
    <id>https://vkcyan.github.io/2022/03/18/%E5%B7%A5%E5%85%B7%E4%B8%8E%E7%BB%A9%E6%95%88%E5%BA%A6%E9%87%8F/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:33:01.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9种创意工具"><a href="#9种创意工具" class="headerlink" title="9种创意工具"></a>9种创意工具</h2><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>SCAMPER</td><td>特别是在生产改进现有产品，产生新的产品的想法上很有帮助，SCAMPER是一些行为东西的首字母缩略词。又叫奔驰法 奔奔法<br />S：替代 C： 合并 A：改造 M：调整 P：改变用途 E：去除 R：逆向操作</td></tr><tr><td>头脑风暴</td><td>在群体决策中，由于群体成员心理相互作用影响，易屈于权威或大多数人意见，形成“群体思维”。群体思维削弱了</td></tr><tr><td>思维导图</td><td>在各种信息或创意之间建立思维链接的图形化技术。首先，讲一个关键字或者短语写在一页纸的中间，然后，从这一中心点触发，将其与不同方向的新创意连接，从而建立起<strong>网络式思维关系</strong></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;9种创意工具&quot;&gt;&lt;a href=&quot;#9种创意工具&quot; class=&quot;headerlink&quot; title=&quot;9种创意工具&quot;&gt;&lt;/a&gt;9种创意工具&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thea</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>文化、组织与团队</title>
    <link href="https://vkcyan.github.io/2022/03/18/%E6%96%87%E5%8C%96%E3%80%81%E7%BB%84%E7%BB%87%E4%B8%8E%E5%9B%A2%E9%98%9F/"/>
    <id>https://vkcyan.github.io/2022/03/18/%E6%96%87%E5%8C%96%E3%80%81%E7%BB%84%E7%BB%87%E4%B8%8E%E5%9B%A2%E9%98%9F/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:33:27.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>​组织中人们共同拥有接受的信念、核心价值观、行为准则、思维方式、假设与期望</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>反应组织的价值观，彰显与习惯、仪式、典礼、故事、英雄榜样</li><li>指出如何完成工作</li><li>表达生存力，即为了活下去我们应当做些什么</li></ul><h3 id="文化是否正确取决于组织本身"><a href="#文化是否正确取决于组织本身" class="headerlink" title="文化是否正确取决于组织本身"></a>文化是否正确取决于组织本身</h3><p>​一个组织中运作良好的文化可能对于另一个组织是完全错误的</p><h3 id="成功的创新文化具备的共同特点"><a href="#成功的创新文化具备的共同特点" class="headerlink" title="成功的创新文化具备的共同特点"></a>成功的创新文化具备的共同特点</h3><ul><li>清晰的方向和目标</li><li>鼓励尝试</li><li>个人绩效与组织绩效密切相关</li><li>契合创新文化是招聘标准之一</li><li>鼓励内部和外部的有效沟通</li><li>鼓励建设性冲突</li><li>让工作尽可能愉悦有回报</li></ul><h2 id="氛围"><a href="#氛围" class="headerlink" title="氛围"></a>氛围</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>​是员工可直接或者间接感知到的工作环境特点的集合，对员工的行为有重大的影响</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ul><li>领导人水平、沟通、责任、信任、公平的认可与回报、机会，员工参与</li></ul><h2 id="新产品开发中的管理者角色"><a href="#新产品开发中的管理者角色" class="headerlink" title="新产品开发中的管理者角色"></a>新产品开发中的管理者角色</h2><h3 id="战略纬度"><a href="#战略纬度" class="headerlink" title="战略纬度"></a>战略纬度</h3><table><thead><tr><th>管理内容</th><th>角色与职责分配</th></tr></thead><tbody><tr><td>使命愿景、价值观</td><td>整体的企业愿景、使命价值观是由公司高管以及关键职能部门的负责人一起指定，在董事会层面通过</td></tr><tr><td>业务战略</td><td>通常由某个特定的业务单元的执行团队指定（有歧义）</td></tr><tr><td>职能战略</td><td>职能部门负责人以及高管团队定制</td></tr><tr><td>产品战略</td><td>高级产品经理（高级产品副总裁，首席产品官等）指定</td></tr><tr><td>创新战略</td><td>跨职能团队的高级经理定制，由一位董事会成员领导</td></tr></tbody></table><h3 id="流程纬度"><a href="#流程纬度" class="headerlink" title="流程纬度"></a>流程纬度</h3><table><thead><tr><th>角色</th><th>管理内容</th><th></th></tr></thead><tbody><tr><td>流程拥护人<br />process champion</td><td>负责推动组织内正式商业流程的日常工作，对流程进行调整、创新和持续改进</td><td>类似考委会，负责定制和改进考试规则</td></tr><tr><td>流程主管<br />process owner</td><td>对新产品开发流程的战略性结果，包括生产能力、输出质量和组织类的参与度负责的执行经理，敏捷中由PO和敏捷教练来负责</td><td>类似巡场老师，负责监督规则的执行效果</td></tr><tr><td>流程经理<br />process manager</td><td>确保流程中的创意和项目按时有序进行的运营经理。有时被成为业务流程经理或者工艺经理</td><td>类似监考老师，负责规则的按时有序执行</td></tr><tr><td>项目经理<br />project manager</td><td>采用组织认可的流程，负责管理特定的产品开发项目</td><td>类似班主任，组织学生按规则试试考试项目</td></tr></tbody></table><h3 id="组织与团队"><a href="#组织与团队" class="headerlink" title="组织与团队"></a>组织与团队</h3><table><thead><tr><th>职责</th><th>说明</th></tr></thead><tbody><tr><td>建立文化氛围</td><td>组织的文化和氛围由最高层管理者领导，并受其影响</td></tr><tr><td>推动积极氛围</td><td>是职能经理和各个团队或项目经理的职责</td></tr><tr><td>团队开发</td><td>整体团队开发的责任由高级产品开发经理承担，包括：团队成员的选拔，高绩效团队的建立，气氛的保持</td></tr></tbody></table><h3 id="产品管理者的关键职责"><a href="#产品管理者的关键职责" class="headerlink" title="产品管理者的关键职责"></a>产品管理者的关键职责</h3><p>落实产品开发战略，跨职能合作。</p><table><thead><tr><th>职位</th><th>职责</th></tr></thead><tbody><tr><td>首席产品官</td><td>先CEO回报，定制整体的产品战略，监控、管理好产品的营销与开发</td></tr><tr><td>高级副总裁</td><td>领导大型产品经理团队，与工程、销售、制造、营销职能的主要领导紧密配合工作，确保开发中的产品是正确的，且有助于实现公司目标</td></tr><tr><td>产品群经理</td><td>为负责某个产品群的产品团队提供指导，负责执行高级管理者指定的战略，领导跨职能团队</td></tr><tr><td>产品经理</td><td>对具体的产品和产品类别负责</td></tr></tbody></table><h3 id="产品经理-VS-项目经理"><a href="#产品经理-VS-项目经理" class="headerlink" title="产品经理 VS 项目经理"></a>产品经理 VS 项目经理</h3><table><thead><tr><th>产品经理</th><th>项目经理</th></tr></thead><tbody><tr><td>发现与定义范围（要做什么，做成什么样）</td><td>范围的执行与交付（执行并交付产品）</td></tr><tr><td>对产品整个生命周期负责</td><td>阶段性的对项目负责</td></tr></tbody></table><h2 id="团队领导者的角色和职责-高级管理者"><a href="#团队领导者的角色和职责-高级管理者" class="headerlink" title="团队领导者的角色和职责-高级管理者"></a>团队领导者的角色和职责-高级管理者</h2><p>新产品开发中高级管理者角色<strong>为战略负责</strong></p><p>定制<strong>企业级和事业群级战略</strong>的终极责任在于<strong>高级管理者</strong></p><p>而包括<strong>产品研发战略在内的职能型战略</strong>定制的责任人在于<strong>职能部门负责人</strong> </p><h3 id="高级管理者角色"><a href="#高级管理者角色" class="headerlink" title="高级管理者角色"></a>高级管理者角色</h3><p>倡导者：项目倡导者并非团队的一员，可能是市场部或者是研发部的总经理，他们对项目充满了热情，有感染力，并且愿意为推进项目承担风险，能够帮助团队获得资源，帮助团队承担风险</p><p>发起者：提供项目所需的资源，总资源需求承诺以及优化配置，评估绩效，提供激励奖励，关口评审，运营规划等</p><p>引导者：帮助团队尽量减少官僚主义，突破繁文缛节的限制和其他组织壁垒，从而提高生产力</p><h3 id="高级管理者任务"><a href="#高级管理者任务" class="headerlink" title="高级管理者任务"></a>高级管理者任务</h3><p>方向引领者：</p><ul><li>奖励公司战略</li><li>确保为新产品所做的一切努力是一致的</li></ul><p>产品线缔造者</p><ul><li>为理解目前及未来的产品线确立框架</li><li>定义产品类型</li></ul><p>组合管理</p><ul><li>确定项目设置</li><li>匹配项目容量、生产力</li></ul><h3 id="高级管理者总结"><a href="#高级管理者总结" class="headerlink" title="高级管理者总结"></a>高级管理者总结</h3><p><img src="http://www.vkcyan.top/image-20220424182709993.png" alt="image-20220424182709993"></p><h2 id="跨职能团队和矩阵结构"><a href="#跨职能团队和矩阵结构" class="headerlink" title="跨职能团队和矩阵结构"></a>跨职能团队和矩阵结构</h2><h3 id="组织结构类型"><a href="#组织结构类型" class="headerlink" title="组织结构类型"></a>组织结构类型</h3><p>​矩阵结构式一种组织结构，其中的汇报关系按网格或者矩阵奖励，而不按照传统的层级结构，换言之，一个员工具有双重的回报关系，通常是指职能经理和产品经理（项目经理）汇报</p><img src="http://www.vkcyan.top/image-20220424190519903.png" alt="image-20220424190519903" style="zoom:67%;" /><h3 id="矩阵结构"><a href="#矩阵结构" class="headerlink" title="矩阵结构"></a>矩阵结构</h3><table><thead><tr><th>团队类型</th><th>项目经理</th><th>上下级</th><th>团队成员</th><th>团队能力</th><th>适合的产品任务类型</th></tr></thead><tbody><tr><td>职能型团队</td><td>无</td><td>有</td><td>分散</td><td>最弱</td><td>改进的，轻微的<br />（支持型项目）</td></tr><tr><td>轻量级团队</td><td>有<br />无实权</td><td>无</td><td>兼职</td><td>弱</td><td>派生的扩张产品线<br />（衍生型项目）</td></tr><tr><td>重量型团队</td><td>有<br />有实权</td><td>无<br />（交叉）</td><td>临时专职</td><td>强</td><td>新领域，不确定，复杂的<br />（平台型项目）</td></tr><tr><td>自主型团队</td><td>创业团队领导</td><td>有</td><td>专职</td><td>最强</td><td>全新的，长周期，高风险<br />（突破性项目）</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文化&quot;&gt;&lt;a href=&quot;#文化&quot; class=&quot;headerlink&quot; title=&quot;文化&quot;&gt;&lt;/a&gt;文化&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;​	组</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>新产品开发战略</title>
    <link href="https://vkcyan.github.io/2022/03/18/%E6%96%B0%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%88%98%E7%95%A5/"/>
    <id>https://vkcyan.github.io/2022/03/18/%E6%96%B0%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%88%98%E7%95%A5/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:33:40.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="战略"><a href="#战略" class="headerlink" title="战略"></a>战略</h2><p>定义：能够引向未来的一种方法与战略，例如，某个目标的实现路径或某个问题的解决方法</p><h3 id="商业环境下的战略定义："><a href="#商业环境下的战略定义：" class="headerlink" title="商业环境下的战略定义："></a>商业环境下的战略定义：</h3><ul><li>战略能够定义与传播一个组织的独特定位，说明应当如何调整组织的资源、技能与能力以获取竞争优势（波特，2008）</li><li>给予行业定位、机遇和资源，企业为实现长远目标而定制的计划（科特勒 2012）</li></ul><img src="http://www.vkcyan.top/image-20220322154209060.png" alt="image-20220322154209060" style="zoom: 50%;" /><h3 id="经营战略的设计步骤"><a href="#经营战略的设计步骤" class="headerlink" title="经营战略的设计步骤"></a>经营战略的设计步骤</h3><img src="http://www.vkcyan.top/image-20220322165614790.png" alt="image-20220322165614790" style="zoom:67%;" /><h3 id="战略制定与执行责任人"><a href="#战略制定与执行责任人" class="headerlink" title="战略制定与执行责任人"></a>战略制定与执行责任人</h3><p>​整体的企业愿景和使命通常由公司高管团队以及关键职能部门（财务、营销、制造等）的负责人一起正式制定，这些内容在董事会层面得到了正式通过</p><p>业务战略：通常由某个特定的业务单元的执行团队进行制定</p><p>职能战略：通常由职能部门负责人及高管管理团队（财务，营销）进行制定</p><p>产品战略：通常由高级产品经理（如高级产品管理副总裁）进行制定</p><p>创新战略：同工厂由跨职能部门的高级经理制定，由一位董事会成员领导，他可能是创新副总裁，首席技术官或首席执行官</p><h2 id="使命-愿景-价值观"><a href="#使命-愿景-价值观" class="headerlink" title="使命 愿景 价值观"></a>使命 愿景 价值观</h2><h3 id="使命"><a href="#使命" class="headerlink" title="使命"></a>使命</h3><p>定义： 公司信念、哲学、目的、经营原则或者企业信仰的声明</p><p>目的：阐述企业为什么存在(Why)。为了凝聚公司能量与资源</p><p>案例： 发布创意 克服困难(3M公司使命)</p><h3 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h3><p>定义： 透过预见与洞察的现象，透过实际上的限制，借此想象出企业对于未来发展的可能性</p><p>目的：阐述企业要往哪里(Where)</p><p>案例： 设计各式精良，优异的家居用品，并且价格低到让许多人都买得起(IKEA宜家家居愿景)</p><h3 id="价值观"><a href="#价值观" class="headerlink" title="价值观"></a>价值观</h3><ol><li>参与的成员为了完成任务需要遵守的行为准则</li><li>一个人或者公司带来某种程度的情感来遵守一个原则</li></ol><p>目的： 阐述企业的行为准则与价值观(How)</p><p>案例： 诚信正直 承诺 创新 客户伙伴关系(TSMC公司价值观)</p><h2 id="四种创新战略框架"><a href="#四种创新战略框架" class="headerlink" title="四种创新战略框架"></a>四种创新战略框架</h2><h3 id="波特战略框架"><a href="#波特战略框架" class="headerlink" title="波特战略框架"></a>波特战略框架</h3><p>波特将公司优势最终划分成为2个部分：成本优势与差异化</p><p>通过运营这些优势或宽或窄的范围，定义了三种通用战略</p><ul><li>成本领先战略</li><li>差异化战略</li><li>细分市场战略</li></ul><img src="http://www.vkcyan.top/FiYc3Fg_dljrhfFVsW0KpGPboTw2.png" style="zoom： 50%;" /><table><thead><tr><th>战略名称</th><th>特点</th><th>优势</th><th>劣势</th><th>例子</th></tr></thead><tbody><tr><td>成本领先战略</td><td>吸引价格敏感性客户<br />提升市场份额<br />规模生产<br />降低成本<br />优化供应链</td><td>在价格竞争激烈市场中有保持竞争的方法</td><td>利润低<br />降低成本影响质量导致客户流失<br /></td><td>世界工厂，中国制造</td></tr><tr><td>差异化战略</td><td>聚焦较宽产品基础<br />交付优质产品<br />建立忠诚客户关系获取市场份额<br /><br />更关注产品品质和性能</td><td>利于建立客户忠诚度<br />可以获得更高的利润率</td><td>必须持续创新，开发新产品吸引客户<br />性能不好可能导致市场份额的大幅度下滑</td><td>星巴克<br />苹果</td></tr><tr><td>细分市场战略</td><td>也称”聚焦战略”<br />适用于狭小市场<br />对市场有深入认识与独特见解</td><td>聚焦营销和新产品开发工作<br />具备很高的竞争壁垒<br />增加产品开发投入提高利润率<br /></td><td>依赖单一狭小市场<br />风险大<br />新技术冲击</td><td>医美行业<br />月子中心</td></tr></tbody></table><h3 id="迈尔斯-斯诺战略框架"><a href="#迈尔斯-斯诺战略框架" class="headerlink" title="迈尔斯.斯诺战略框架"></a>迈尔斯.斯诺战略框架</h3><p>基于企业对于变更响应的研究，提供有用框架去描述产品开发战略方法</p><table><thead><tr><th>类型</th><th>动作</th><th>方式</th></tr></thead><tbody><tr><td>探索者<br />Prospector</td><td>首先上市<br />寻求增长<br />敢于冒险</td><td>开发和应用新技术<br />借助快速上市，占领市场份额</td></tr><tr><td>分析者<br />Analyzer</td><td>快速跟随<br />产品通常更好</td><td>经常跟随探索型公司，开发模仿产品<br />被称为”快速跟随者”<br />新产品开发成本低</td></tr><tr><td>防御者<br />Defender</td><td>在稳定市场中维护其市场份额</td><td>风险厌恶型，聚焦于狭窄的，稳定的市场与产品类别<br />通常不具备技术进攻能力</td></tr><tr><td>反应者<br />Eeactor</td><td>只有在遭遇威胁时才会有所反应</td><td>没有清晰的战略目标<br />没有明确的技术开发计划和市场进入计划</td></tr></tbody></table><h3 id="持续式创新-VS-颠覆式创新"><a href="#持续式创新-VS-颠覆式创新" class="headerlink" title="持续式创新 VS 颠覆式创新"></a>持续式创新 VS 颠覆式创新</h3><p>持续式创新</p><ul><li>不创造新的市场与新价值主张，致力于把现有产品做的更加好</li><li>从审美，功能，特性或成本角度关注产品变更和改进的渐进过程</li></ul><p>颠覆式创新</p><blockquote><p>克莱顿.克里斯坦森首次提出颠覆式创新的概念(1997)</p></blockquote><ul><li>有助于创建新市场与新的价值网络(价值主张)</li><li>初期关注小众有影响力的目标市场，该市场产品具有重要的新特性或功能，但是因为开发成熟度不够充分，还无法与现在已被广泛接受的产品竞争</li><li>初期在目标市场的影响力加上产品改进将会扩大市场，导致现有产品最终退出市场</li><li>促成和创造颠覆式影响的通常是一个商业模式，而非是一项技术</li><li>颠覆式创新不会一夜之间实现，而是逐渐发生的</li></ul><h3 id="皮萨诺战略框架-创新画布"><a href="#皮萨诺战略框架-创新画布" class="headerlink" title="皮萨诺战略框架 - 创新画布"></a>皮萨诺战略框架 - 创新画布</h3><p>在技术与商业模式创新的两个方面有效分配精力和资源</p><img src="http://www.vkcyan.top/image-20220319164114876.png" style="zoom： 67%;" /><h2 id="其他战略"><a href="#其他战略" class="headerlink" title="其他战略"></a>其他战略</h2><h3 id="库珀的战略"><a href="#库珀的战略" class="headerlink" title="库珀的战略"></a>库珀的战略</h3><blockquote><p>库珀是门径管理流程的奠基人，库珀的战略从技术和市场的角度来讨论</p></blockquote><p>差异化战略： 与波特的差异化战略类似，提供高价格，高质量的产品，满足客户需求</p><p>高成本战略： 研发成本高，较少关注市场和客户需求</p><p>技术推动战略： 最新技术，高度创新想法，较少关注用户需求</p><p>保守战略： 低风险，有限研发投入，非差异化产品</p><p>非博弈战略： 与迈尔斯.斯诺的反应者战略类似</p><h3 id="平台战略"><a href="#平台战略" class="headerlink" title="平台战略"></a>平台战略</h3><p>平台战略被定为为一系列子系统及其接口，由此可以建一个通用架构，继而高效的开发，制造出其延伸产品</p><p>优势：</p><ul><li>快速，连续的推出一系列产品</li><li>鼓励从长期视角定制产品战略</li><li>能大幅度提升运营效率</li><li>公司与市场能清晰理解产品平台的底层要素</li><li>能带来巨大的差异化，使自身产品与竞争产品得以区分开来</li></ul><h3 id="技术战略"><a href="#技术战略" class="headerlink" title="技术战略"></a>技术战略</h3><p>技术战略是一份有关技术维护和技术发展的计划，这些技术能够支持组织的未来发展，有助于组织战略目标的实现</p><p>技术战略与经营战略和创新战略相连</p><p>技术预测方法</p><ul><li>头脑风暴法 专家小组法 德尔菲法 (专家 匿名 多轮 趋向一致)</li><li>SWOT法 专利分析法 趋势分析法</li></ul><p>技术S曲线基本上显示了大多数技术的生命周期阶段</p><ul><li>引入期</li><li>成长期</li><li>成熟期</li></ul><h3 id="知识产权战略"><a href="#知识产权战略" class="headerlink" title="知识产权战略"></a>知识产权战略</h3><p>知识产权： 智力制造出来东西，比如发明、文学、艺术、设计、符号、名称、商业用户图像的所有权；同其他产权一样可以出售，授权，交换或者被拥有者放弃；知识产权被法律保护，例如专利、版权和商标可以让所有人从他们的创造中获取荣誉和金钱回报。</p><h4 id="知识产权的类型"><a href="#知识产权的类型" class="headerlink" title="知识产权的类型"></a>知识产权的类型</h4><p>专利：在一定时间阶段生效的，由政府授权或许可的权利，特别指禁止他人制造，使用或者销售一个发明的所有权力</p><p>版权：一定年限内，给予原创者独家的，指定的法律权利，可以印刷，发行，制作</p><p>商标：代表公司、产品的经由法定注册或许可的符号，单词或者词组</p><p>植物品种权： 给予独家权力生产和销售某种可繁殖的植物</p><p>商业机密：和企业相关的保密信息</p><h2 id="营销战略"><a href="#营销战略" class="headerlink" title="营销战略"></a>营销战略</h2><p>从业务目标到营销计划，其中包含业务目标、营销战略、公司组合、营销计划</p><h3 id="市场营销组合4P"><a href="#市场营销组合4P" class="headerlink" title="市场营销组合4P"></a>市场营销组合4P</h3><p>产品Product：外观 功能 特色 质量 包装 支持 质保 品牌</p><p>促销Promotion：主题&#x2F;信息 社交媒体 公关 销售团体 商品展会 纸质媒体</p><p>定价Price：目录价格 折扣 捆绑销售 信用条款 渗透定价（低价占领市场） 撇脂定价（高价回收成本）</p><p>地点Place：渠道 库存 物流 实体分销</p><h3 id="如何定价"><a href="#如何定价" class="headerlink" title="如何定价"></a>如何定价</h3><ul><li>无论何时何地，对产品经理而言必须明确点：总利润比市场份额、效率更加重要</li><li>维持低成本是产品的事情，维持高售价是运营的事情</li><li>降价是最昂贵的运营策略，而提价的效果未必会有想象中的糟糕</li></ul><h3 id="如何应对竞争对手的价格变化"><a href="#如何应对竞争对手的价格变化" class="headerlink" title="如何应对竞争对手的价格变化"></a>如何应对竞争对手的价格变化</h3><p>​某一家酒企的一款酒经过多年经营，在市场上占有率一度达到20%，后来竞争对手也出了类似的产品，比他要低1美元，这时候酒企应该进行价格竞争吗？显然这会导致自己总利润降低，这时候决策者决定，将这款酒提价1美元，同时出这款酒的不同包装的产品，可以理解为青春版，其价格更加低廉，以此与对手竞争，一方面提高了前者酒的地位，一方面拉低了对手的品牌力，使销售量增加，利润量增加</p><h3 id="如何“忽悠”用户付费"><a href="#如何“忽悠”用户付费" class="headerlink" title="如何“忽悠”用户付费"></a>如何“忽悠”用户付费</h3><p>在一定得到3w 80%的几率得到4w，20%的概念得到0元面前，大部分用户会选择前者</p><p>在一定失去3w 80%的几率失去4w，20%的概念失去0元面前，大部分用户会选择后者</p><p>结论：人性在面对<strong>失去</strong>与<strong>风险</strong>的时候更加害怕失去</p><p>策略：不要告诉用户买了产品会得到什么，而是告诉用户不购买会失去什么</p><p>场景：儿童兴趣班 阅读到一半的付费阅读</p><h3 id="营销理念的历史演变-4P-4C-4R"><a href="#营销理念的历史演变-4P-4C-4R" class="headerlink" title="营销理念的历史演变 4P - 4C - 4R"></a>营销理念的历史演变 4P - 4C - 4R</h3><table><thead><tr><th>4P 产品导向</th><th>4C 顾客导向</th><th>4R 顾客忠诚度导向</th></tr></thead><tbody><tr><td>产品（product）</td><td>顾客需求（Consumer）</td><td>关系（Relation）</td></tr><tr><td>促销（promotion）</td><td>便利性（Convenience）</td><td>反应（Respond）</td></tr><tr><td>价格（price）</td><td>沟通（Communication）</td><td>回报（Return）</td></tr><tr><td>分销（place）</td><td>成本（Cost）</td><td>关联（Relevancy）</td></tr></tbody></table><h2 id="产品三环靶"><a href="#产品三环靶" class="headerlink" title="产品三环靶"></a>产品三环靶</h2><p>核心利益：产品核心价值（不是有形物理属性）</p><p>有形性能：赋予产品外观和功能的物理和美学设计特征</p><p>附加性能： 产品提供的额外性能可以是免费的</p><p><img src="http://www.vkcyan.top/image-20220321112332260.png" alt="image-20220321112332260"></p><h2 id="产品描述FAB"><a href="#产品描述FAB" class="headerlink" title="产品描述FAB"></a>产品描述FAB</h2><h3 id="每个产品或者品牌都具备的三个要素"><a href="#每个产品或者品牌都具备的三个要素" class="headerlink" title="每个产品或者品牌都具备的三个要素"></a>每个产品或者品牌都具备的三个要素</h3><blockquote><p>产品的F-A-B结构（总结每个产品的卖点，特点，优势和利益）</p></blockquote><ul><li>特点（Feature）：对产品本身的技术性解释，通常包含产品专业化词语</li><li>优势（Advantage）：由于产品本身的特性所导致的产品表现</li><li>利益（benefit）：与消费者的感受密切相关，由产品带给消费者的价值</li></ul><p>基于感觉上的体验，往往是针对个人而言，相对的，类比的，定性的</p><h3 id="采用FAB表述产品卖点示例"><a href="#采用FAB表述产品卖点示例" class="headerlink" title="采用FAB表述产品卖点示例"></a>采用FAB表述产品卖点示例</h3><table><thead><tr><th>名称</th><th>特点（F）</th><th>优势（A）</th><th>利益（B）</th></tr></thead><tbody><tr><td>海飞丝</td><td>富含最新丝源蛋白</td><td>头屑去无踪</td><td>秀发更出众</td></tr><tr><td>潘婷</td><td>含丰富的维他命原B5</td><td>能由发根渗透到发烧，补充养分</td><td>使他浦发健康，亮泽</td></tr><tr><td>飘柔</td><td>含丝质润发素</td><td>洗发洗护一次完成</td><td>令头发柔顺飘逸</td></tr></tbody></table><h3 id="为产品卖点塑造画面感（场景）"><a href="#为产品卖点塑造画面感（场景）" class="headerlink" title="为产品卖点塑造画面感（场景）"></a>为产品卖点塑造画面感（场景）</h3><table><thead><tr><th>产品卖点</th><th>普通文案</th><th>有画面感的文案</th></tr></thead><tbody><tr><td>耳机音质好</td><td>声声震撼，激发梦想</td><td>犹如置身音乐会现场</td></tr><tr><td>笔记本噪音低</td><td>创想极致，精心由我</td><td>闭上眼睛，感受不到电脑开机</td></tr><tr><td>工资辛苦，不如旅行</td><td>乐享生活，畅意人生</td><td>你写PPT时，阿拉斯加的鳕鱼正跃出水面</td></tr></tbody></table><h2 id="波士顿矩阵分析"><a href="#波士顿矩阵分析" class="headerlink" title="波士顿矩阵分析"></a>波士顿矩阵分析</h2><p><img src="http://www.vkcyan.top/image-20220321144744747.png" alt="image-20220321144744747"></p><h2 id="商业画布主要内容与要点"><a href="#商业画布主要内容与要点" class="headerlink" title="商业画布主要内容与要点"></a>商业画布主要内容与要点</h2><img src="http://www.vkcyan.top/image-20220322182231364.png" alt="image-20220322182231364" style="zoom:67%;" /><h4 id="亚马逊商业画布"><a href="#亚马逊商业画布" class="headerlink" title="亚马逊商业画布"></a>亚马逊商业画布</h4><img src="http://www.vkcyan.top/image-20220321175850181.png" alt="image-20220321175850181" style="zoom:50%;" /><h2 id="能力战略"><a href="#能力战略" class="headerlink" title="能力战略"></a>能力战略</h2><h3 id="能力来源"><a href="#能力来源" class="headerlink" title="能力来源"></a>能力来源</h3><p>能力要求</p><ul><li>技术</li><li>营销</li><li>研发</li></ul><p>内部来源</p><ul><li>保持现有能力</li><li>获取新能力</li><li>重新培训，重新开发现有能力</li></ul><p>外部来源</p><ul><li>兼并或收购</li><li>合资企业</li><li>开放式创新</li><li>咨询</li></ul><h3 id="封闭式创新-VS-开放式创新"><a href="#封闭式创新-VS-开放式创新" class="headerlink" title="封闭式创新 VS 开放式创新"></a>封闭式创新 VS 开放式创新</h3><table><thead><tr><th>封闭式创新的基本原则</th><th>开放式创新的基本原则</th></tr></thead><tbody><tr><td>本行业里最聪明的员工为我们工作</td><td>并非所有的聪明人都给我们工作，我们需要和企业内外部的聪明人合作</td></tr><tr><td>为了从研发中会哦你，我们必须自己进行发明创造，开发产品并推向市场</td><td>外部研发工作可以穿在巨大价值，而要分享其中的一部分，则必须进行内部研发</td></tr><tr><td>如果我们自己进行研究，就能最先把产品推向市场</td><td>我们不是非要自己进行研究才能从中受益</td></tr><tr><td>最先将创新商业化的企业将成为赢家</td><td>建立一个更好的商业模式要比贸然冲进市场好很多</td></tr><tr><td>如果我们创造出商业中最多最好的创意，我们必将胜利</td><td>如果我们能充分利用企业内外部的创意，我们必将胜利</td></tr><tr><td>我们必须控制知识产权，这样竞争对手就无从我们的创意中获利</td><td>我们应当通过让他人使用我们的知识产权而从中获利，同时应当购买他人的知识产权<br />只要它能提升我们的商业模式</td></tr></tbody></table><h3 id="保持市场竞争优势的办法"><a href="#保持市场竞争优势的办法" class="headerlink" title="保持市场竞争优势的办法"></a>保持市场竞争优势的办法</h3><blockquote><p>如果在一个相对封闭的行业，应当着重发展内生优势，提升自身能力<br>但产业融合与跨界合作兴起时，生态优势的重要性会特别明显</p></blockquote><h4 id="定位观"><a href="#定位观" class="headerlink" title="定位观"></a>定位观</h4><p>​认为决定竞争优势的因素有两个，一是行业盈利能力，二是企业在行业中的地位。因此企业的盈利能力取决于其竞争战略选择，而竞争战略的选择则是：选择有吸引力、高潜在利润的行业并建立自己的优势竞争地位</p><h4 id="资源能力观"><a href="#资源能力观" class="headerlink" title="资源能力观"></a>资源能力观</h4><p>​认为企业在竞争优势产生与企业内部运作（组织过程，包括协调&#x2F;整合、学习&#x2F;重构与转变）、流程和当前所处位置，具有路径依赖性</p><h4 id="生态优势观"><a href="#生态优势观" class="headerlink" title="生态优势观"></a>生态优势观</h4><p>​认为在新技术应用层出不穷、产业环境日趋动荡、消费者对一体化解决方案的期望越来越高的背景下，产业边界逐渐模糊，跨界合作与价值共创成为潮流，他不仅仅关注自身的价值链还要重新定义和优化价值网上面的活动，管理好未拥有的资源</p><h2 id="互联网思维“孤独九剑”剑谱"><a href="#互联网思维“孤独九剑”剑谱" class="headerlink" title="互联网思维“孤独九剑”剑谱"></a>互联网思维“孤独九剑”剑谱</h2><img src="http://www.vkcyan.top/image-20220322141454900.png" alt="image-20220322141454900" style="zoom:67%;" /><h2 id="互联网"><a href="#互联网" class="headerlink" title="互联网+"></a>互联网+</h2><p>​“互联网+”就是“互联网+各个传统行业”，但这并不是简单的两者相加，而是利用信息通信技术以及互联网平台，让互联网与传统行业进行深度融合，创造新的发证生态</p><p>​“互联网+”行动加护将重点促进云计算、物联网、大数据为代表的新一代信息技术与现代制造业、生产性服务业等的融合创新，发展壮大新兴业态，打造新的产品增长点，为大众创业、万众创新提供环境，为企业智能化提供支撑，增强新的经济发展动力，促进国民经济提质增效升级</p><h2 id="互联网-开展的前提"><a href="#互联网-开展的前提" class="headerlink" title="互联网+ 开展的前提"></a>互联网+ 开展的前提</h2><h4 id="用户中心不充分"><a href="#用户中心不充分" class="headerlink" title="用户中心不充分"></a>用户中心不充分</h4><ul><li>行业通点多，低效环节多，用户体验不好的行业</li><li>充分竞争市场，行政垄断少，市场化长度比较高的地方</li></ul><h4 id="数据驱动不充分"><a href="#数据驱动不充分" class="headerlink" title="数据驱动不充分"></a>数据驱动不充分</h4><ul><li>产品或者服务可虚拟化、数据化的行业</li><li>价值环节可数据化的地方，将面临数据化改造</li></ul><h4 id="生态协作不充分"><a href="#生态协作不充分" class="headerlink" title="生态协作不充分"></a>生态协作不充分</h4><ul><li>利用信息不对称，靠中介型的商业模式盈利的地方，会被改变</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;战略&quot;&gt;&lt;a href=&quot;#战略&quot; class=&quot;headerlink&quot; title=&quot;战略&quot;&gt;&lt;/a&gt;战略&lt;/h2&gt;&lt;p&gt;定义：能够引向未来的一种方法与战略，例如，某个目标的实现路径或某个问题的解决方法&lt;/p&gt;
&lt;h3 id=&quot;商业环境下的战略定义：&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>新产品流程</title>
    <link href="https://vkcyan.github.io/2022/03/18/%E6%96%B0%E4%BA%A7%E5%93%81%E6%B5%81%E7%A8%8B/"/>
    <id>https://vkcyan.github.io/2022/03/18/%E6%96%B0%E4%BA%A7%E5%93%81%E6%B5%81%E7%A8%8B/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:33:50.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><h2 id="管控产品失败（降低不确定性）的方法"><a href="#管控产品失败（降低不确定性）的方法" class="headerlink" title="管控产品失败（降低不确定性）的方法"></a>管控产品失败（降低不确定性）的方法</h2><h3 id="不确定性、累计成本与开发阶段的关系"><a href="#不确定性、累计成本与开发阶段的关系" class="headerlink" title="不确定性、累计成本与开发阶段的关系"></a>不确定性、累计成本与开发阶段的关系</h3><p><img src="http://www.vkcyan.top/image-20220324204825223.png" alt="image-20220324204825223"></p><h3 id="标准的决策框架"><a href="#标准的决策框架" class="headerlink" title="标准的决策框架"></a>标准的决策框架</h3><p><img src="http://www.vkcyan.top/image-20220324204830469.png" alt="image-20220324204830469"></p><h2 id="产品开发流程基本阶段"><a href="#产品开发流程基本阶段" class="headerlink" title="产品开发流程基本阶段"></a>产品开发流程基本阶段</h2><ul><li>探索（Exploration）</li><li>筛选（Screening）</li><li>商业评估（Business Evaluation）</li><li>开发（Development）</li><li>测试（Testing）</li><li>商业化（Commercialization）</li></ul><h2 id="常见产品开发流程"><a href="#常见产品开发流程" class="headerlink" title="常见产品开发流程"></a>常见产品开发流程</h2><ul><li>门径管理流程（Stage - Gate@）</li><li>集成产品开发（IPD）</li><li>精益开发（Lean）</li><li>敏捷开发（Agil）</li><li>设计思维（Design Thinking）</li></ul><h2 id="模糊前端FFE"><a href="#模糊前端FFE" class="headerlink" title="模糊前端FFE"></a>模糊前端FFE</h2><p>​模糊前段（Fuzzy front end，FFE）：产品开发项目的前端是一个早期极端的起点，在进入正式的产品开发流程前，组织在该阶段识别机会，形成概念。</p><p>​该阶段包括创意生成阶段，初始概念发展阶段和高级业务阶段。</p><p>​是项目中定义最不确定的一个阶段</p><p>​注：创意阶段可能有5个，概念开发阶段经过淘汰与融合变成了2个，最后立项分析，确定要做的项目</p><img src="http://www.vkcyan.top/image-20220326140418592.png" alt="image-20220326140418592" style="zoom:80%;" /><h2 id="门径管理流程"><a href="#门径管理流程" class="headerlink" title="门径管理流程"></a>门径管理流程</h2><img src="http://www.vkcyan.top/image-20220326142104796.png" alt="image-20220326142104796" style="zoom:67%;" /><h2 id="阶段-关口概念"><a href="#阶段-关口概念" class="headerlink" title="阶段-关口概念"></a>阶段-关口概念</h2><h3 id="什么是阶段"><a href="#什么是阶段" class="headerlink" title="什么是阶段"></a>什么是阶段</h3><p>产品开发流程中的一个确认区域，包括：</p><p>活动：项目负责人及团队成员依照项目计划必须完成的工作</p><p>综合分析：通过跨职能部门及团队成员依照项目计划必须完成的工作</p><p>可交付成果：是综合分析结果的呈现，这是团队必须完成的并在关口时所以提交的内容</p><h3 id="什么是关卡"><a href="#什么是关卡" class="headerlink" title="什么是关卡"></a>什么是关卡</h3><p>基本上，他是产品开发流程中的一个确认节点，在该阶段时需要做出有关项目未来的关键决策。包括</p><p>可交付成果：关口评审点的输入内容（阶段中的可交付成果）。它是前阶段行为的结果，是实现确定的，在每个关口都有一个可交付成功的标准清单</p><p>标准：判断项目是继续还是停止以及优先级决策的标准，这些标准通过以分数呈现，包括财务和定向标准</p><p>输出：关口评审结果。关口必须有明确的输出包括一个决策（继续或者停止）以及下一个阶段的路径</p><h2 id="阶段-关口（Stage-Gate）新产品开发过程"><a href="#阶段-关口（Stage-Gate）新产品开发过程" class="headerlink" title="阶段 - 关口（Stage - Gate）新产品开发过程"></a>阶段 - 关口（Stage - Gate）新产品开发过程</h2><blockquote><p>根据需要，可灵活裁剪与添加</p></blockquote><p>分为六个阶段，由来自公司内部不同职能领域的人员一起完成：</p><p>发现（Discovery）：寻找新机会和新产品创意</p><p>筛选（Scoping）：也叫观察，初步评选市场机会、技术需求以及能力的可获得性</p><p>立项分析（Business Case）：也叫构建产品框架，建立在筛选阶段之上的一个关键阶段，包括更为深入的技术，市场和商业可行性分析</p><p>开发（Development）：产品设计，原生制造，生产设计，制造准备和上市规划</p><p>测试与修正（Testing and Validation）：也翻译成测试与确认，测试产品以及商业化计划的所有方面，以修正所有假设和结论，和证实对产品的预期和总结</p><p>上市（Launch）：也翻译为投放市场，产品的完整商业化，包括规模制造以及商业化上市</p><p>阶段：一个确定区域，包括 活动，综合分析，可交付成果</p><p>关卡：一个确定阶段，必须又明确的输出包括一个决策（继续或者停止等）以及下一阶段的路径。包括：可交付成果，标准，输出</p><h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h2><ul><li>要求：了解要设计产品需要什么功能、目的、用户需求</li><li>设计：确定完成项目所需的软件与硬件，之后被转化为物理设计</li><li>实施：根据项目要求和设计规范编写实际代码</li><li>验证：确保产品符合顾客的期望</li><li>维护：通过客户确定产品设计中的不足或错误，进行修正</li></ul><p><img src="http://www.vkcyan.top/image-20220328174347453.png" alt="image-20220328174347453"></p><h2 id="集成产品开发IPD"><a href="#集成产品开发IPD" class="headerlink" title="集成产品开发IPD"></a>集成产品开发IPD</h2><blockquote><p>integrated Product Development，PID </p></blockquote><h3 id="前身-并行工程"><a href="#前身-并行工程" class="headerlink" title="前身 - 并行工程"></a>前身 - 并行工程</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>​在产品的设计与制造流程中，跨职能团队采用并行模式进行工作，而不是各个功能的顺序依次开发，从而促使团队全面考虑产品生命周期中从概念到实施的全部元素，包括质量、成本、维护等方面</p><h4 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h4><ol><li>并行交叉：并行工程强调产品设计与工艺过程设计、生产准备、采购等活动交叉进行<ol><li>按部件并行交叉，将一个产品分成若干部分，使其各部件能并行进行交叉开发</li><li>各个组件的设计、采购、生产等各种互动尽可能的交叉并行</li></ol></li><li>尽早开始工作，目的就是争取时间</li></ol><h4 id="具体做法"><a href="#具体做法" class="headerlink" title="具体做法"></a>具体做法</h4><p>​在产品开发的初期，组织多种可协同工作的项目组，使得有关人员从一开始就获得有关项目的最新消息，积极研究涉及本部门的工作任务，并将需求提供给设计人员，使得许多问题在开发早期就得到了解决从而保证设计质量，减少返工与浪费</p><h3 id="发展-集成产品开发IPD"><a href="#发展-集成产品开发IPD" class="headerlink" title="发展 - 集成产品开发IPD"></a>发展 - 集成产品开发IPD</h3><h4 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h4><p>​系统综合地应用不同职能体系的成果和理念，有效、高效的开发新产品，满足客户需求的方式</p><img src="http://www.vkcyan.top/image-20220407142631200.png" alt="image-20220407142631200" style="zoom:70%;" /><h3 id="IPD管理的精髓"><a href="#IPD管理的精髓" class="headerlink" title="IPD管理的精髓"></a>IPD管理的精髓</h3><ul><li>IPD基于<strong>并行工程</strong>发展而来</li><li>IPD首先<strong>是一个商业流程，关注商业结果</strong>，将产品开发作为一项投资进行审慎管理</li><li>IPD采用<strong>跨职能团队</strong>，加强部门合作，形成合力，共同承担</li><li>IPD流程分为不同的阶段，通过在决策评审点的决策实现集成组合管理团队（IPMT）和产品开发团队（PDT）<strong>互动</strong>，资源受控分配与投入，既满足项目进展的需求，又避免了投资失控的风险</li><li>IPD是灵活的，发展的，<strong>持续改进设计的</strong>，在不断吸纳业界实践和解决业务问题的过程与时俱进</li><li>IPD流程是<strong>基于市场的开发，关注市场需求和竞争分析</strong>，鼓励创新基于着二者之上</li></ul><h3 id="集成产品开发系统分级"><a href="#集成产品开发系统分级" class="headerlink" title="集成产品开发系统分级"></a>集成产品开发系统分级</h3><img src="http://www.vkcyan.top/image-20220407145126882.png" alt="image-20220407145126882" style="zoom:67%;" /><h2 id="精益产品开发"><a href="#精益产品开发" class="headerlink" title="精益产品开发"></a>精益产品开发</h2><p>定义（Lean Product Development）：创建在丰田首创的精益方法（TPS）的基础之上。目的是：从流程中去掉浪费</p><h3 id="精益开发的原则（提升生产效率）"><a href="#精益开发的原则（提升生产效率）" class="headerlink" title="精益开发的原则（提升生产效率）"></a>精益开发的原则（提升生产效率）</h3><ul><li>确定客户定义的价值</li><li>尽最大努力探索不同的解决方案</li><li>创造顺畅的产品开发流程</li><li>尊重颜色的标准，以减少变异</li><li>首席工程师全程参与</li><li>跨职能整合</li><li>学习不断改进</li><li>准求卓越与不断学习的文化</li><li>团队整个组织</li></ul><p>消除浪费 + 强化学习 + 慎重政策 + 尽快交付 + 授权团队 + 品质为先 + 全局优化 + 消除浪费 &#x3D; 精益产品</p><h3 id="潜在的浪费来源包括"><a href="#潜在的浪费来源包括" class="headerlink" title="潜在的浪费来源包括"></a>潜在的浪费来源包括</h3><ul><li>混乱的工作环境</li><li>缺乏可用的资源</li><li>缺乏明确的优先级顺序</li><li>不同职能之间的沟通存在障碍</li><li>糟糕的产品需求定义</li><li>缺乏对可制造性的早期考虑</li><li>过度设计</li><li>太多无效会议</li><li>太多的电子邮件</li></ul><h3 id="直接效益"><a href="#直接效益" class="headerlink" title="直接效益"></a>直接效益</h3><ul><li>显著提升生产效能</li></ul><h3 id="准时制"><a href="#准时制" class="headerlink" title="准时制"></a>准时制</h3><p>准时制生产方式（Just In Time简称JIT），又称作无库存生产方式（stockless production），零库存（zero inventories），单件流（one - piece flow）或者超市市场生产方式（supermarket production）</p><p>JIT的基本理念：只在需要的时候、按需要的量，生产所需的产品，故又被称为准时生产、适时生产方式。</p><p>JIT的目标：彻底消除无效劳动和浪费。具体要达到以下目标</p><ol><li>废品量最低 2. 库存量最低 3. 准备时间最短 4. 生产提前期最短 5. 减少零件搬运，搬运量低 6. 机器损坏低 7. 事故降低</li></ol><h3 id="单件流"><a href="#单件流" class="headerlink" title="单件流"></a>单件流</h3><p>批量生产虽然是降低成本的生产方法，但是容易出现堆积浪费，周转麻烦，容错率低的问题</p><p>单件流则有目的的降低周转问题，并且减少堆积浪费，同时增加容错率</p><h3 id="5WHY法（刨根问底法）"><a href="#5WHY法（刨根问底法）" class="headerlink" title="5WHY法（刨根问底法）"></a>5WHY法（刨根问底法）</h3><img src="http://www.vkcyan.top/image-20220407164034697.png" alt="image-20220407164034697" style="zoom:67%;" /><h3 id="安灯法"><a href="#安灯法" class="headerlink" title="安灯法"></a>安灯法</h3><p>操作：产线异常，按下按钮 - 产线报警 - 领班支持</p><p> 收益：</p><ul><li>一线员工既要动手，也要动脑</li><li>鼓励员工持续成长，获得成就感</li><li>公司流程优化，持续改善</li></ul><h3 id="现场现物"><a href="#现场现物" class="headerlink" title="现场现物"></a>现场现物</h3><p>亲临现场 - 细致观察，分析&#x2F;评估 - 找出原因</p><h3 id="构建学习型组织"><a href="#构建学习型组织" class="headerlink" title="构建学习型组织"></a>构建学习型组织</h3><ul><li>超越短期利益，着眼长期利益</li><li>致力提升员工，合作伙伴能力</li><li>继任领导延续公司文化基因</li></ul><p>丰田模式的核心精神是通过支持和鼓励员工持续改善工作流程</p><p>让他们不断成长与进步，进而获得工作成就感和主人翁意识</p><h3 id="精益产品开发过程的核心概念"><a href="#精益产品开发过程的核心概念" class="headerlink" title="精益产品开发过程的核心概念"></a>精益产品开发过程的核心概念</h3><img src="http://www.vkcyan.top/image-20220407185511266.png" alt="image-20220407185511266" style="zoom:80%;" /><h3 id="精益产品开发的优劣势"><a href="#精益产品开发的优劣势" class="headerlink" title="精益产品开发的优劣势"></a>精益产品开发的优劣势</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>流程的聚焦点在于信息的顺畅流动,而非严厉管控</li><li>通过事件驱动方法简化合作，优化设计</li><li>重视对进度、成本、消极和质量方面的风险的积极管控</li><li>适用于各种规模的项目</li><li>用于记录学习和进展、判定优先级和解决问题的工具是简单的，可视化的</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>参与人员必须是相当敬业并且经验丰富的</li><li>需要改变组织的结构和文化</li><li>需要强有力的供应商管理</li><li>组织有意愿且有能力接受项目目标的和方向上的变化</li></ul><h2 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h2><h3 id="传统方法VS敏捷方法"><a href="#传统方法VS敏捷方法" class="headerlink" title="传统方法VS敏捷方法"></a>传统方法VS敏捷方法</h3><table><thead><tr><th>传统的写作方式</th><th>敏捷的写作方式</th><th></th></tr></thead><tbody><tr><td>确定主题</td><td>与读者互动</td><td></td></tr><tr><td>整理大纲、搭建框架</td><td>确定主题</td><td></td></tr><tr><td>书写内容</td><td>与读者互动。收集反馈</td><td></td></tr><tr><td>设计、排版、校对</td><td>试写第一张</td><td></td></tr><tr><td>出版</td><td>与读者互动，收集反馈</td><td></td></tr><tr><td>与读者见面</td><td>试写第二章</td><td></td></tr><tr><td>筹集反馈</td><td>…</td><td></td></tr><tr><td></td><td>设计、排班、校对</td><td></td></tr><tr><td></td><td>出版</td><td></td></tr></tbody></table><h3 id="传统VS敏捷之客户互动对比"><a href="#传统VS敏捷之客户互动对比" class="headerlink" title="传统VS敏捷之客户互动对比"></a>传统VS敏捷之客户互动对比</h3><img src="http://www.vkcyan.top/image-20220408195943522.png" alt="image-20220408195943522" style="zoom:80%;" /><h3 id="确定性项目VS不确定性项目"><a href="#确定性项目VS不确定性项目" class="headerlink" title="确定性项目VS不确定性项目"></a>确定性项目VS不确定性项目</h3><img src="http://www.vkcyan.top/image-20220408205133131.png" alt="image-20220408205133131" style="zoom:80%;" /><h3 id="生命周期类型"><a href="#生命周期类型" class="headerlink" title="生命周期类型"></a>生命周期类型</h3><img src="http://www.vkcyan.top/image-20220408205936546.png" alt="image-20220408205936546" style="zoom:80%;" /><p>增量型：楼盘 定下来不会变 但是要不断交付 </p><p>敏捷性：互联网项目 不断在变化</p><p>预测型：铁路建造 变化极小，有规律的项目</p><p>迭代型：研发疫苗 不断变化，但是只需要交付一次 </p><h3 id="Stacy斯泰西图"><a href="#Stacy斯泰西图" class="headerlink" title="Stacy斯泰西图"></a>Stacy斯泰西图</h3><img src="http://www.vkcyan.top/image-20220408210819352.png" alt="image-20220408210819352" style="zoom:80%;" /><h3 id="敏捷宣言"><a href="#敏捷宣言" class="headerlink" title="敏捷宣言"></a>敏捷宣言</h3><table><thead><tr><th>敏捷宣言</th><th>价值观</th><th></th></tr></thead><tbody><tr><td>个体以及互动 胜于 流程和工具</td><td>以人为本</td><td></td></tr><tr><td>可工作的软件 胜过 完整的文档</td><td>以价值为导向</td><td></td></tr><tr><td>客户合作 胜过 合同谈判</td><td>合作共赢</td><td></td></tr><tr><td>响应变化 胜过 遵循原则</td><td>拥抱变化</td><td></td></tr></tbody></table><h3 id="敏捷开发十二大原则"><a href="#敏捷开发十二大原则" class="headerlink" title="敏捷开发十二大原则"></a>敏捷开发十二大原则</h3><ul><li>通过<strong>尽早和持续地交付</strong>有价值的软件来满足客户</li><li><strong>欢迎对需求提出变更</strong>，敏捷过程要善于利用需求变更，帮助客户获得竞争优势</li><li><strong>经常交付</strong>可用软件，并周期越短越好</li><li>业务人员与开发人员必须<strong>通力合作</strong></li><li>要善于激励项目人员，基于他们所需的<strong>环境和支持</strong>，并相信他们能完成任务</li><li>团队内部和各个团队之间，最有效的沟通方式是<strong>面对面沟通</strong></li><li><strong>可工作的软件</strong>是衡量进度的首要指标</li><li>敏捷过程体长<strong>可持续</strong>的开发。项目方、开发人员和用户应该能够保持稳定恒久的进展速度</li><li>对技术的<strong>精益求精</strong>以及对设计的不断完善将提高敏捷性</li><li>尽量做到<strong>简洁</strong>，尽最大可能减少不必要工作，这是一门艺术</li><li>最佳的架构、需求和设计出自于<strong>自组织团队</strong></li><li>团队要定期<strong>回顾和反思</strong>如何能够做到更有效，并相应地调整团队的行为</li></ul><h3 id="敏捷Scrum框架"><a href="#敏捷Scrum框架" class="headerlink" title="敏捷Scrum框架"></a>敏捷Scrum框架</h3><img src="http://www.vkcyan.top/image-20220409112819570.png" alt="image-20220409112819570" style="zoom:80%;" /><h3 id="敏捷实践SCRUM的333555"><a href="#敏捷实践SCRUM的333555" class="headerlink" title="敏捷实践SCRUM的333555"></a>敏捷实践SCRUM的333555</h3><table><thead><tr><th>三个支柱</th><th>三个角色</th><th>三个工件</th></tr></thead><tbody><tr><td>透明性（Transparency）</td><td>产品负责人（Product Owner）</td><td>产品待办事项列表（Product Backlog）</td></tr><tr><td>检查（Inspection）</td><td>敏捷教练（Scrum Master）</td><td>冲刺待办事项列表（Sprint Backlog）</td></tr><tr><td>适应（Adaptation）</td><td>项目团队（Scrum Team）</td><td>可交付产品增量（Increment）</td></tr></tbody></table><table><thead><tr><th>五个事件</th><th>五大价值观</th></tr></thead><tbody><tr><td>冲刺</td><td>承诺（Commitment） - 愿意对目标做出承诺</td></tr><tr><td>冲刺规划会议</td><td>专注（Focus） - 全身心都用到你承诺的工作上去</td></tr><tr><td>每日站会</td><td>开放（Openness） - 团队内所有信息对所有人开发</td></tr><tr><td>迭代评审会议</td><td>尊重（Respect） - 每个人都有他独特的价值与经验</td></tr><tr><td>迭代回顾会议</td><td>勇气（Courage） - 勇于承诺，履行承诺，敢于说不</td></tr></tbody></table><h3 id="敏捷实践-3个角色"><a href="#敏捷实践-3个角色" class="headerlink" title="敏捷实践 - 3个角色"></a>敏捷实践 - 3个角色</h3><table><thead><tr><th>产品负责人</th><th>敏捷教练</th><th>敏捷团队</th></tr></thead><tbody><tr><td>确定产品的功能和标准<br />维护产品待办事项列表<br />指定软件的交付内容<br />代表客户利益<br />拥有最终解释权<br />平衡有竞争关系的利益相关者</td><td>团队和产品主管之间的协调者，消除他们之间的障碍<br />工作职责不是管理团队<br />激发团队的创造力，给团队授权<br />提升团队生产率<br />改进工程工具的实践<br />确保团队取得进展的信息实时更新与同步<br />服务团队、教导团队、保护团队</td><td>5到9个人<br />多职能部门人员组成<br />冲刺阶段，团队通过自组织的方式实现冲刺目标<br />实现目标的帆帆上有选择自主权<br />责任属于整个开发团队<br />一起成功，一起失败<br />一起调整，一起改进</td></tr></tbody></table><h3 id="敏捷实践-用户故事"><a href="#敏捷实践-用户故事" class="headerlink" title="敏捷实践 - 用户故事"></a>敏捷实践 - 用户故事</h3><p>作为 学员 我想 看直播课 以便于 和老师互动</p><p>作为老师 我想 提前排课表 以便于 合理安排事件</p><p>作为xx 我想 xx 以便于xxxxx</p><p>用户说出自己的问题而不是给出具体解决方案</p><h3 id="敏捷实践-产品代办列表"><a href="#敏捷实践-产品代办列表" class="headerlink" title="敏捷实践 - 产品代办列表"></a>敏捷实践 - 产品代办列表</h3><p>​待办事项是所有工作的有序列表，他以故事形式呈现给团队。价值大的排在上面。他是产品需求变更的唯一来源</p><p>​他是一个持续完善的清单，根据产品和开发环境的变化而演进。</p><p>​产品负责人Product Owner负责待办事项列表的内容，可用性和优先级</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="几种开发流程的对比"><a href="#几种开发流程的对比" class="headerlink" title="几种开发流程的对比"></a>几种开发流程的对比</h2><h3 id="瀑布模型-VS-敏捷流程"><a href="#瀑布模型-VS-敏捷流程" class="headerlink" title="瀑布模型 VS 敏捷流程"></a>瀑布模型 VS 敏捷流程</h3><table><thead><tr><th>瀑布模型</th><th>敏捷流程</th></tr></thead><tbody><tr><td>瀑布使用阶段</td><td>敏捷使用迭代</td></tr><tr><td>瀑布使用不提供高低频率的互动（开发阶段低频率，业务测试阶段高频率）</td><td>有频繁的业务互动</td></tr><tr><td>瀑布模式一个项目经理</td><td>敏捷流程是scrum master</td></tr><tr><td>瀑布不能迭代</td><td>敏捷能迭代</td></tr></tbody></table><h3 id="敏捷与精益"><a href="#敏捷与精益" class="headerlink" title="敏捷与精益"></a>敏捷与精益</h3><p>敏捷开发：敏捷设计的初衷是再短时间内执行任务，与客户进行频繁互动，并能够对变化做出迅速相应，比较常用于软件开发</p><p>精益开发：精益旨在减少浪费，提高运营效率，特别适用于制造过程中常见的重复性任务</p><h3 id="门径管理-VS-敏捷"><a href="#门径管理-VS-敏捷" class="headerlink" title="门径管理 VS 敏捷"></a>门径管理 VS 敏捷</h3><table><thead><tr><th>特征</th><th>门径管理</th><th>敏捷</th></tr></thead><tbody><tr><td>模型类型</td><td>宏观技术</td><td>微观计划，项目管理</td></tr><tr><td>范围</td><td>创意到结束，端点到端点</td><td>只有开发与测试阶段</td></tr><tr><td>组织广度</td><td>跨职能 - 技术、市场、生产</td><td>技术</td></tr><tr><td>结束点</td><td>上市成为新产品</td><td>已开发或测试的软件</td></tr><tr><td>决策模型</td><td>投资模型：设计高级管理层治理的继续或停止模型</td><td>主要是战术性的：下一个冲刺需要的动作</td></tr></tbody></table><h3 id="集成产品开发与其他流程对比"><a href="#集成产品开发与其他流程对比" class="headerlink" title="集成产品开发与其他流程对比"></a>集成产品开发与其他流程对比</h3><ol><li>集成产品开发提供一种将产品开发中的功能，角色和行为集成起来的框架。</li><li>定义为系统地、综合的应用不同职能体系的成功和理念，有效、高效地开发新产品，满足客户需求的方式</li><li>集成产品开发模型的一个重要功能是“学习与持续改进”，模型表明专注于产品开发过程和技术的组织如何发展以知识为基础的学习型组织</li><li>各流程模型是潜在互补的，而不是相互排斥的，应以持续学习和改进为重点，将每个模型中的元素融合为一个真正适合于产品开发的模型</li></ol><table><thead><tr><th></th><th>特点</th></tr></thead><tbody><tr><td>门径管理模型</td><td>宏观规划、决策基础</td></tr><tr><td>敏捷模型</td><td>微观技术和灵活性</td></tr><tr><td>精益生产</td><td>减少浪费</td></tr><tr><td>集成产品开发</td><td>学习型组织，对新产品开发的综合集成</td></tr></tbody></table><h3 id="开发流程的治理"><a href="#开发流程的治理" class="headerlink" title="开发流程的治理"></a>开发流程的治理</h3><p>治理：用于指导项目、程序和项目组合管理中的活动框架、功能和流程。治理是采取高层级和战略性的视角，而不是陷入过程和项目细节</p><table><thead><tr><th></th><th>治理</th><th>管理</th></tr></thead><tbody><tr><td>职能</td><td>监督、控制、整合和决策</td><td>技术、组织、领导和控制</td></tr><tr><td>关注点</td><td>结果和目标</td><td>方法和技术</td></tr><tr><td>层面</td><td>宏观（战略、决策角度）</td><td>中观和微观（战术、执行角度）</td></tr><tr><td>负责人</td><td>董事会</td><td>管理层</td></tr><tr><td>作用</td><td>为管理提供框架、功能和过程授予管理者经营权并加以监督</td><td>再治理提供的框架和监督中形式经营权，实现经营目标</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所有流程模型均遵从一下共同原则</p><ul><li>关注战略一致性</li><li>基于知识进行决策</li><li>降低产品失败的风险</li><li>剪掉将利益相关者的输入信息融入设计决策</li><li>应用跨职能团队</li><li>是一个结构化框架，要被整个项目所理解和应用</li></ul><table><thead><tr><th></th><th>门径管理流程</th><th>集成产品开发</th><th>精益开发</th><th>敏捷开发</th></tr></thead><tbody><tr><td>是否对整个新产品开发流程进行管理</td><td>是</td><td>是</td><td>是</td><td>否</td></tr><tr><td>是否专注于跨职能团队的使用</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td>能加快上市速度吗</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td>最适用什么类型的产品行业</td><td>硬件、实物</td><td>多产品</td><td>制造 软件</td><td>软件类</td></tr><tr><td>如何降低产品失败的风险</td><td>关口</td><td>决策点</td><td>消除浪费</td><td>快速迭代</td></tr><tr><td>是线性还是迭代</td><td>线性</td><td>线性</td><td>线性+迭代</td><td>迭代+线性</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;&gt;&lt;/a&gt;思维导图&lt;/h2&gt;&lt;h2 id=&quot;管控产品失败（降低不确定性）的方法&quot;&gt;&lt;a href=&quot;#管控产品失败（降低不确定性）的方法&quot; class=&quot;he</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>组合管理</title>
    <link href="https://vkcyan.github.io/2022/03/18/%E7%BB%84%E5%90%88%E7%AE%A1%E7%90%86/"/>
    <id>https://vkcyan.github.io/2022/03/18/%E7%BB%84%E5%90%88%E7%AE%A1%E7%90%86/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:34:07.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合管理大纲"><a href="#组合管理大纲" class="headerlink" title="组合管理大纲"></a>组合管理大纲</h2><img src="http://www.vkcyan.top/image-20220324155927166.png" style="zoom:67%;" /><h2 id="产品组合"><a href="#产品组合" class="headerlink" title="产品组合"></a>产品组合</h2><p>产品组织：一个组织正在投资的并将其做出战略性权衡取舍的一系列项目或产品</p><p>产品组合管理：以组合形式被管理的一系列程序、项目和&#x2F;或操作的集合。一个组合的构成元素未必是相互依赖的，甚至未必是相关的，但他们被集合成一个组合，以此为单位接受管理，以实现战略目标。</p><p>在产品开发和产品管理中，企业可以通过两种途径实现新产品成功</p><ul><li>正确的完成项目（项目管理）</li><li>完成正确的项目（组合管理）</li></ul><h2 id="管理组合的五大高层次目标"><a href="#管理组合的五大高层次目标" class="headerlink" title="管理组合的五大高层次目标"></a>管理组合的五大高层次目标</h2><h3 id="价值最大化"><a href="#价值最大化" class="headerlink" title="价值最大化"></a>价值最大化</h3><p>​进行资源配置将组合价值最大化（独立项目商业价值的综合）（非财务评估与财务评估）</p><h3 id="战略协同"><a href="#战略协同" class="headerlink" title="战略协同"></a>战略协同</h3><p>​确保整体组合战略与经营战略及创新战略始终保持一致（自下而上，自下而上，结合法）</p><h3 id="项目平衡"><a href="#项目平衡" class="headerlink" title="项目平衡"></a>项目平衡</h3><p>​根据预定设定的标准如长期或短期、高风险或低风险、特定产品或市场分类等，保持正确的项目之间的平衡</p><h3 id="管道平衡"><a href="#管道平衡" class="headerlink" title="管道平衡"></a>管道平衡</h3><p>​确保资源及焦点不会过度分散，避免组合囊括的项目过多，导致被过度分流（资源配置）</p><h3 id="财务稳健"><a href="#财务稳健" class="headerlink" title="财务稳健"></a>财务稳健</h3><p>​确保产品组合所选项目能够实现新产品创新战略中所设定的财务目标（财务可行性）</p><h2 id="产品规划定义"><a href="#产品规划定义" class="headerlink" title="产品规划定义"></a>产品规划定义</h2><p>​运营严格、规范的方法对市场走势及客户的要求及需求进行分析，创建合理的市场细分规则，对要投资和取得领先地位的细分市场进行选择和优先级排序，从而设计确保市场营销取得成功需要执行的活动，定制可盈利，可执行的业务计划和驱动产品平台、新产品包的开发</p><table><thead><tr><th></th><th>老板决定</th><th>集体决定</th><th>成立规划部门</th><th>跨部门团队运行</th></tr></thead><tbody><tr><td>优点</td><td>决策迅速</td><td>体现集体意志，形成共识</td><td>保证资源，提升专业能力</td><td>提升规划质量</td></tr><tr><td>缺点</td><td>随意、混乱</td><td>方法不严谨，责任容易分散</td><td>存在局限性，影响规划执行</td><td>对管理要求高，决策可能较慢</td></tr><tr><td>适用情况</td><td>公司创业阶段</td><td>公司规模不大，产品较少</td><td>公司规模较大，产品较多</td><td>公司多产品线，众多产品</td></tr></tbody></table><h2 id="组合管理流程"><a href="#组合管理流程" class="headerlink" title="组合管理流程"></a>组合管理流程</h2><img src="http://www.vkcyan.top/image-20220323165828201.png" alt="image-20220323165828201" style="zoom: 67%;" /><h2 id="组合中的项目类型"><a href="#组合中的项目类型" class="headerlink" title="组合中的项目类型"></a>组合中的项目类型</h2><table><thead><tr><th>类型</th><th>特点</th><th>团队（一般而言）</th></tr></thead><tbody><tr><td>突破型项目<br />Breakthrouth</td><td>有时被称为激进的或颠覆式的<br />努力通过技术将新产品带进市场<br />与公司现行的项目大不相同，有高风险</td><td>自主团队</td></tr><tr><td>平台型项目<br />LpatForm</td><td>开发出一系列子系统及其接口，由此创建一个通用架构，继而高效的卡覅和生产一系列衍生产品<br />为发现衍生产品、项目提供平台<br />风险比产品改进或增量提升要高，但比开发突破性产品低</td><td>重量级团队</td></tr><tr><td>衍生项目<br />Derivative</td><td>从其他现有产品或平台中衍生出来<br />可以填补有产品线的空白，提供更具有成本竞争力的制造能力<br />基于组织的核心技术提升性能和引入新特效<br />风险较低</td><td>轻量级团队</td></tr><tr><td>支持项目<br />Support</td><td>对现有产品渐进式改革<br />提高现有产品的制造效率<br />低风险</td><td>职能团队</td></tr></tbody></table><h2 id="产品组合与战略的关系"><a href="#产品组合与战略的关系" class="headerlink" title="产品组合与战略的关系"></a>产品组合与战略的关系</h2><h3 id="自上而下法"><a href="#自上而下法" class="headerlink" title="自上而下法"></a>自上而下法</h3><ul><li>开发过程中首先考虑愿景与战略</li><li>确定整个项目组合中可获得的资源平衡，根据重要战略可能对新产品的贡献，确定业务单元和产品种类的顺序</li><li>“战略水桶方法”规定了不同业务单元或产生种类理想的投入比例</li><li>在路径上，项目按优先级排序</li></ul><h3 id="自下而上法"><a href="#自下而上法" class="headerlink" title="自下而上法"></a>自下而上法</h3><ul><li>始于单个项目，经评估筛选，形成项目组合</li><li>战略标准依据评估每个项目的选择标准而定</li><li>不同与自上而下法，单个的产品组合即是结果不对业务部门和产品类型进行特别考虑（不是很懂）</li><li>该法保证项目与战略是保持一致的，但可能无法对特定的项目类型头图理想比例的成本</li></ul><h3 id="自上而下和自下而上的结合法"><a href="#自上而下和自下而上的结合法" class="headerlink" title="自上而下和自下而上的结合法"></a>自上而下和自下而上的结合法</h3><ul><li>具备两种方法的优点</li><li>确定能根据业务部门或产品类型的投入，进行战略优先级的排序</li><li>所有潜在的项目都要根据战略标准和每个项目的预估投入进行排序</li><li>通过战略预算分配项目时，要综合考虑独立的目标优先顺序和预算投入，并与业务部门或产品类型优先顺序保持一致</li><li>从上而下的确定计划，从下而上确定执行</li></ul><h2 id="产品机会评估"><a href="#产品机会评估" class="headerlink" title="产品机会评估"></a>产品机会评估</h2><h3 id="新产品技术评估常用方法"><a href="#新产品技术评估常用方法" class="headerlink" title="新产品技术评估常用方法"></a>新产品技术评估常用方法</h3><p>气泡图、选项标价、评分方法、项目排序、战略水桶、折现现金单、检查清单、投资回收期</p><p>一般分为财务方法与非财务方法</p><h3 id="非财务性评估"><a href="#非财务性评估" class="headerlink" title="非财务性评估"></a>非财务性评估</h3><p>非财务评估方法或评分依据是主观判断。确定要采用的标准包括：</p><ul><li>战略一致</li><li>产品优势</li><li>风险高低程度</li><li>法律法规影响</li><li>上市时间</li><li>市场吸引</li><li>利用核心竞争力的能力</li><li>技术可行性</li></ul><h3 id="通过-x2F-失败评估示例"><a href="#通过-x2F-失败评估示例" class="headerlink" title="通过&#x2F;失败评估示例"></a>通过&#x2F;失败评估示例</h3><img src="http://www.vkcyan.top/image-20220324110758196.png" alt="image-20220324110758196" style="zoom:67%;" /><h2 id="财务性评估"><a href="#财务性评估" class="headerlink" title="财务性评估"></a>财务性评估</h2><p>建立对每个产品机会进行潜在财务评估的基础上</p><ul><li>决定新产品在财务上是否可行</li><li>决定项目的优先级</li></ul><p>具体可用的财务评估方法有：</p><ul><li>净现值（Net Persent Value，NPV）</li><li>投资回收期（Payback Period）</li><li>内部回报率（Internal Rate of Return，IRR）</li><li>投入产出比、投资回报率（Return on Invesment， Rol）</li></ul><p>以上每种方法都需要</p><ul><li>销售潜力及回报的相对值</li><li>制造和营销成本的相对值</li><li>资金投入预估（对新厂房、设备等进行的投资）</li></ul><h3 id="财务可行性研究-净现值分析"><a href="#财务可行性研究-净现值分析" class="headerlink" title="财务可行性研究 - 净现值分析"></a>财务可行性研究 - 净现值分析</h3><p>净现值NPV，表示期望项目未来收益折算到此刻的值的总和</p><h3 id="财务可行性研究-投资回报期"><a href="#财务可行性研究-投资回报期" class="headerlink" title="财务可行性研究 - 投资回报期"></a>财务可行性研究 - 投资回报期</h3><p>投资回报率（Payback period）：指多长时间能够收回在产品上的自由投入</p><p>静态投资回收期：不考虑资金的时间成本计算投资回收期</p><p>动态投资回收期：考虑资金的时间成本计算投资回收期</p><p>投资回收率 &#x3D; 1&#x2F;投资回收期 * 100%（假设3.2年成本收回，则投资回收率为30%左右）</p><p>投资回报率（ROI） &#x3D; 运营期年均收益&#x2F;投资总额 * 100%（投资收益率）（假设运营了5年，平均每年收益100，投资总额500，则投资回报率为20%）</p><p>内部收益率 &#x3D; 净现值等于0的折现率</p><h2 id="什么是平衡组合"><a href="#什么是平衡组合" class="headerlink" title="什么是平衡组合"></a>什么是平衡组合</h2><p>目的：达到良好的风险与回报平衡，加入一些新产品机会</p><p>新产品机会所属的业务单元、产品类别、目标市场，或者产品特征，都可以作为新产品机会的分类标准。</p><p>例如：</p><ul><li>突破性项目、衍生项目、平台型项目、支持性项目</li><li>研发成本、商业化成本</li><li>潜在的回报和利益</li><li>风险水平 - 开发阶段或商业化阶段</li><li>技术难度 - 开发或维护</li><li>上市时间 - 从决定开发到获得商业汇报时间</li><li>设施设备上的资金投入</li><li>知识产权的价值创造潜力</li></ul><h2 id="气泡图组合分析"><a href="#气泡图组合分析" class="headerlink" title="气泡图组合分析"></a>气泡图组合分析</h2><p>用气泡图（Bubble Diagram）来展示产品组合是否有效</p><ol><li>通常，用气泡图来表示处于二维坐标图中的项目</li><li>X轴和Y轴表示具体的利益标准，如风险和回报</li><li>气泡表示单个项目，是根据项目在X轴和Y轴的排序所绘</li><li>气泡的大小表示第三个标准，如所需投入资金数额或资源份额</li></ol><img src="http://www.vkcyan.top/image-20220324153254647.png" alt="image-20220324153254647" style="zoom:67%;" /><h2 id="资源配置"><a href="#资源配置" class="headerlink" title="资源配置"></a>资源配置</h2><h3 id="新产品开发成功率受限因素"><a href="#新产品开发成功率受限因素" class="headerlink" title="新产品开发成功率受限因素"></a>新产品开发成功率受限因素</h3><ul><li>同时项目太多</li><li>项目计划糟糕，执行任务能力差</li><li>产品开发项目与其他业务有优先级之争</li><li>上市延期，按照完成难度极大</li><li>产品资源竞争，流程不合理，缺乏辅助支持</li><li>任务优先级不断变化，资源配置随之改变</li><li>管理者陷入困境，无法施救项目</li></ul><h3 id="资源配置方法"><a href="#资源配置方法" class="headerlink" title="资源配置方法"></a>资源配置方法</h3><ul><li>基于项目资源的需求</li><li>基于新业务的目标</li><li>将资源配置作为一个业务流程</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组合管理大纲&quot;&gt;&lt;a href=&quot;#组合管理大纲&quot; class=&quot;headerlink&quot; title=&quot;组合管理大纲&quot;&gt;&lt;/a&gt;组合管理大纲&lt;/h2&gt;&lt;img src=&quot;http://www.vkcyan.top/image-20220324155927166.p</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>JS数据结构与算法</title>
    <link href="https://vkcyan.github.io/2022/03/15/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://vkcyan.github.io/2022/03/15/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:09.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>数据结构为算法提供服务，算法围绕数据结构操作</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li>一个函数用大O表示，比如O(1)，O(n)，O(logN)…</li><li>定性描述该算法的运行时间</li></ul><img src="http://www.vkcyan.top/FjHw8lvXEnVrgeNMLJ15aEQWZX7G.png" style="zoom:30%;" /><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>每次执行改逻辑的时候，之后执行一次，复杂度不会随着时间的变化而变化</p><h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 0; i &lt; n; i += 1) &#123;</span><br><span class="line">console.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环里面的代码执行n次</p><h3 id="O-1-O-n-x3D-O-n"><a href="#O-1-O-n-x3D-O-n" class="headerlink" title="O(1)  + O(n) &#x3D; O(n)"></a>O(1)  + O(n) &#x3D; O(n)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个时间复杂度先后排列就需要相加，相加的情况下低的的忽略不计，取更高的时间复杂度</p><h3 id="O-n-O-n-x3D-O-n-2"><a href="#O-n-O-n-x3D-O-n-2" class="headerlink" title="O(n)  * O(n) &#x3D; O(n ^ 2)"></a>O(n)  * O(n) &#x3D; O(n ^ 2)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i, j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个时间复杂度嵌套排列，时间复杂度就需要相乘</p><h3 id="O-logN"><a href="#O-logN" class="headerlink" title="O(logN)"></a>O(logN)</h3><p>$$<br>对数函数：如果ax&#x3D;N（a&gt;0，且a≠1），那么数x叫做以a为底N的对数，记作x&#x3D;loga<br>$$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; n) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">i *= <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的logN以2为底数，目的是就是求2的多少次方为N，  上面的代码while循环每次*2，实际上就是求2的多少次方为N，所以时间复杂度就是O(logN)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><ul><li>一个函数用O表示，比如O(1)，O(n)，O(n^2)</li><li>算法在运行过程中临时占用存储空间的大小的量度</li></ul><h3 id="O-1-1"><a href="#O-1-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>声明了变量i，单个变量所占用的内存为1，所以空间复杂度为O(1)</p><h3 id="O-n-1"><a href="#O-n-1" class="headerlink" title="O(n)"></a>O(n)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">list.<span class="title function_">push</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明了变量list，通过循环我们增加了n个值，相当于占用了n个内存单元，所以这段代码的空间复杂度为O(n)</p><h3 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> matrix = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  matrix.<span class="title function_">push</span>([])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line">matrix[i].<span class="title function_">push</span>(j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n^2)实际上就是一个矩阵，矩阵的本质就是一个二维数据，存储了n的二次方的变量</p><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><h3 id="调试工具栏每个图标的作用"><a href="#调试工具栏每个图标的作用" class="headerlink" title="调试工具栏每个图标的作用"></a>调试工具栏每个图标的作用</h3><img src="http://www.vkcyan.top/FvPzD6xek5NzfA-Sa2wAfTKkT8nH.png" style="zoom:50%;" /><p>第一个箭头：程序运行到下一个断点，没有断点，程序执行完毕</p><p>第二个图标：一行一行执行代码</p><p>第三个图标：当前处如果调用了fun，点击此图标就会进入函数里面</p><p>第四个图标：点击跳出当前函数</p><p>第五个图标：重启调试</p><p>第六个图标：停止调试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;数据结构为算法提供服务，算法围绕数据结构操作&lt;/p&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 + jsx开发指南</title>
    <link href="https://vkcyan.github.io/2022/03/15/Vue3%20%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>https://vkcyan.github.io/2022/03/15/Vue3%20%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:18.409Z</updated>
    
    <content type="html"><![CDATA[<img src="http://www.vkcyan.top/FuGdH5QngblNApxjW3YV8ozIsO0J.png" style="zoom:30%;" /><p>​在2021年，<code>vue3</code>发布了正式版本，并且经过一年的维护已经越来越稳定，我们在公司项目中也小范围的上线了<code>vue3</code>的项目，总体还是很不错的</p><p>​但是<code>setup</code>语法需要return比较麻烦，还有<code>.value</code>问题，尝试过<code>setup</code>语法糖，依旧觉得<code>setup</code>语法的api记忆负担比较重</p><p>​所以下半年逐渐拾起了<code>jsx</code>的语法，并在开源项目中使用，总体感觉还是相当不错的，前人栽树后人乘凉，本文对jsx for vue的常见问题进行说明</p><ul><li><p><code>jsx</code>学习成本更低，这么多年jsx没有大改动；</p></li><li><p>无记忆负担，同时足够灵活，如果你是vue开发者，同时对setup语法并不是太合得来， vue3 + jsx也是非常不错的选择~</p></li></ul><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>​在vue3中使用jsx需要安装<a href="https://www.npmjs.com/package/@vitejs/plugin-vue-jsx">@vitejs&#x2F;plugin-vue-jsx</a>（webpack版本的不了解，有需要者执行搜索），根据文档配置一下就行了，官方提供了文档供参考，提供了相关示例<a href="https://github.com/vuejs/jsx-next">jsx-next</a>,有react基础的同学可以先看官方文档，在开发过程中出现问题再看本文</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>JSX  for vue是支持v-model语法的，这一点比react的setState,体验感确实要好</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常写法</span></span><br><span class="line">&lt;input v-model=<span class="string">&quot;value&quot;</span> /&gt;  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span> <span class="comment">// jsx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定值写法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model:modelValue</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span>  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;[value,</span>&#x27;<span class="attr">modelValue</span>&#x27;]&#125; /&gt;</span></span> <span class="comment">// jsx</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 修饰符写法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model:modelValue.trim</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span>  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;[value,</span>&#x27;<span class="attr">modelValue</span>&#x27;,[&#x27;<span class="attr">trim</span>&#x27;]]&#125; /&gt;</span></span> <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>这个api与在vue中的表现形式一致</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show=<span class="string">&quot;isShow&quot;</span>&gt;&lt;<span class="regexp">/div&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&lt;div v-show=&#123;isShow&#125;&gt;&lt;/</span>div&gt; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue</span></span><br><span class="line">&lt;a-modal</span><br><span class="line">  :width=<span class="string">&quot;&#x27;400px&#x27;&quot;</span></span><br><span class="line">  :title=<span class="string">&quot;&#x27;设置组件名称&#x27;&quot;</span></span><br><span class="line"> &gt;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&lt;/a-modal&gt;</span><br><span class="line"><span class="comment">// jsx</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a-modal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&#123;</span>&quot;<span class="attr">400px</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">title</span>=<span class="string">&#123;</span>&quot;设置组件名称&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> &gt;</span></span></span><br><span class="line"><span class="language-xml">// ....</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>在jsx for vue中没有这个api，我们需要用jsx风格来实现v-if的效果</p><p>可以简单理解为jsx直接将if搬到html中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">&quot;isShow&quot;</span>&gt; ... &lt;<span class="regexp">/div&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&#123;isShow &amp;&amp; &lt;div&gt; ... &lt;/</span>div&gt;&#125; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件语法"><a href="#事件语法" class="headerlink" title="事件语法"></a>事件语法</h3><p>jsx for vue，所有的事件都按照react风格来</p><ul><li>所有事件有on开头</li><li>所有事件名称首字母大写</li></ul><p><strong>例如：@click &#x3D;&gt; onClick @change &#x3D;&gt; onChange @drop &#x3D;&gt; onDrop</strong> </p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>这里没有找到权威的资料，有小伙伴知道也请告知一下，目前建议大家通过原生JavaScript来实现vue事件修饰符的效果</p><p>.stop ： 阻止事件冒泡，在JSX中使用event.stopPropagation()来代替</p><p>.prevent：阻止默认行为，在JSX中使用event.preventDefault() 来代替</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="ref与reactive"><a href="#ref与reactive" class="headerlink" title="ref与reactive"></a>ref与reactive</h3><p>vue3的template会自动解析ref的<code>.value</code>,在jsx中ref的<code>.value</code>是不会被自动解析的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量 let type = ref(1)</span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; type &#125;&#125;&lt;<span class="regexp">/p&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&lt;p&gt;&#123;type.value&#125;&lt;/</span>p&gt; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>在jsx for vue中，props的语法使用的就是setup的语法，实际表现形式完全一致</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h3><p>同样与vue3的setup语法保持一致，注意子父方法需要符合react规范</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">emit(&#x27;changeVisible&#x27;, false) // 子组件 </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xxx</span> <span class="attr">onChangeVisible</span>=<span class="string">&#123;(params)</span> =&gt;</span> xxxFun(params)&#125;&gt;<span class="tag">&lt;/<span class="name">xxx</span>&gt;</span> // 父组件</span><br></pre></td></tr></table></figure><h2 id="solt如何写插槽"><a href="#solt如何写插槽" class="headerlink" title="solt如何写插槽"></a>solt如何写插槽</h2><p>这里以antd for vue的<a href="https://next.antdv.com/components/popover-cn">Popover 气泡卡片</a>，为例子</p><h3 id="Vue3语法"><a href="#Vue3语法" class="headerlink" title="Vue3语法"></a>Vue3语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-popover</span> <span class="attr">title</span>=<span class="string">&quot;Title&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-popover</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jsx-for-vue语法"><a href="#jsx-for-vue语法" class="headerlink" title="jsx for vue语法"></a>jsx for vue语法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-popover</span><br><span class="line">title=<span class="string">&quot;Title&quot;</span></span><br><span class="line">content=&#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span></span><br><span class="line">&lt;/a-popover&gt;</span><br></pre></td></tr></table></figure><h2 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// props: [&#x27;xx&#x27;],</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props,&#123; emit &#125;</span>) &#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>国内这方面资料比较少，查问题的时候注意vue版本，以及jsx的使用（render方式本文不适用）</li><li>如果代码里面存在问题，如果是ui框架，建议直接看react版本的代码，例如antdv的jsx版本直接看antd的实例代码</li><li>直接看jsx语法的项目代码，<a href="https://github.com/vkcyan/H5-YD.v2">H5-YD.v2</a></li><li>不接受杠精，例如写jsx为啥不去用使用react</li></ul><p>如果在学习过程中遇到了解决不了的问题，请到QQ群 530496237，大佬解答疑惑~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;http://www.vkcyan.top/FuGdH5QngblNApxjW3YV8ozIsO0J.png&quot; style=&quot;zoom:30%;&quot; /&gt;



&lt;p&gt;​	在2021年，&lt;code&gt;vue3&lt;/code&gt;发布了正式版本，并且经过一年的维护已经越来</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vite配置alias（设置别名）</title>
    <link href="https://vkcyan.github.io/2022/03/15/vite%E9%85%8D%E7%BD%AEalias/"/>
    <id>https://vkcyan.github.io/2022/03/15/vite%E9%85%8D%E7%BD%AEalias/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:16.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vite配置alias需要两步进行（TS项目）</p><p>1、修改vite.config.ts（让程序支持）</p><p>2、修改tsconfig.json（让编辑器支持）</p></blockquote><h2 id="修改vite配置"><a href="#修改vite配置" class="headerlink" title="修改vite配置"></a>修改vite配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_resolve</span>(<span class="params">dir: string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">resolve</span>(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="comment">// 配置项目别名</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">_resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改tsconfig-json"><a href="#修改tsconfig-json" class="headerlink" title="修改tsconfig.json"></a>修改tsconfig.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;importHelpers&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 不让同样的辅助函数重复的出现在多个文件中</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许对不包含默认导出的模块使用默认导入。</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// 非相对模块的导入可以相对于baseUrl或通过下文会讲到的路径映射来进行解析</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 配置导出路径（这里根据自己项目执行修改）</span></span><br><span class="line">      <span class="attr">&quot;@/stores*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/stores*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/components*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/components*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/modules*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/modules*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/utils*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/utils*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;element-plus/global&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.jsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.js&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li><p>修改后请重启编辑器</p></li><li><p>本文验证与2022年1月10号，mac，win双平台均有效，如果以上配置无效了，请查看相关api的改动</p></li><li><p>如果帮助你解决了问题，动动小手点个赞吧！:)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Vite配置alias需要两步进行（TS项目）&lt;/p&gt;
&lt;p&gt;1、修改vite.config.ts（让程序支持）&lt;/p&gt;
&lt;p&gt;2、修改tsconfig.json（让编辑器支持）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;修改vite配置</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.x 预渲染 Unable to prerender all routes错误排查</title>
    <link href="https://vkcyan.github.io/2022/03/15/vue3.x%20%E9%A2%84%E6%B8%B2%E6%9F%93%20Unable%20to%20prerender%20all%20routes%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/"/>
    <id>https://vkcyan.github.io/2022/03/15/vue3.x%20%E9%A2%84%E6%B8%B2%E6%9F%93%20Unable%20to%20prerender%20all%20routes%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:23.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​BOOS最近对前几年做的公司官网不太满意，觉得没有有效体现公司的优势，表明随着公司这几年的努力发展，我们将会接触到更大规模的合作伙伴，自然要展示更好的企业形象，所以官网重做。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>没有交互的静态页面，但是存在大量动画</li><li>需要支持良好的SEO</li></ul><p>​最早期的官网是<code>vue2.x</code> + <code>webpack3.x</code> + <code>vue-cli-plugin-prerender-spa</code>进行实现的，效果挺不错，很快各大搜索引擎就收录了我们的网站，所以这次我们打算沿用此方案，不过使用最新技术栈；</p><h3 id="为什么不用vite"><a href="#为什么不用vite" class="headerlink" title="为什么不用vite"></a>为什么不用vite</h3><p>​查阅vite的生态后，未找到类似<strong>prerender-spa</strong>的plugin，没办法支持预渲染，所以vite就被淘汰了。</p><h3 id="为什么不用unxtjs"><a href="#为什么不用unxtjs" class="headerlink" title="为什么不用unxtjs"></a>为什么不用unxtjs</h3><p>​我们的官网不具备大量的接口交互，用<strong>Nnxtjs</strong>多少有点杀鸡用牛刀了，并且还需要使用<strong>pm2</strong>部署代码，付出于收获不成正比，被淘汰。</p><h3 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h3><p>​我们部门是vue技术栈，团队不考虑react，通过以上排除法，只能使用<code>vue3.x</code> + <code>webpack5.x</code> + <code>prerender-spa</code>进行业务实现了。</p><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><h3 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h3><p>我们使用最新的<code>vue-cli</code>进行项目搭建，选择vue3版本，最近的cli默认就是webpack5</p><h3 id="安装预渲染插件"><a href="#安装预渲染插件" class="headerlink" title="安装预渲染插件"></a>安装预渲染插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i prerender-spa-plugin -D</span><br></pre></td></tr></table></figure><h3 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      config.<span class="property">plugins</span>.<span class="title function_">push</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PrerenderSPAPlugin</span>(&#123;</span><br><span class="line">          <span class="attr">staticDir</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">          <span class="attr">routes</span>: [<span class="string">&#x27;/xxx&#x27;</span>],</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>然后就出现一个错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[prerender-spa-plugin] Unable to prerender all routes!</span><br></pre></td></tr></table></figure><p>让我们一起抽丝剥茧，看看报错的具体原因。</p><h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2><p>因为报错提示很模糊，我们打开他的源码，在源码line144发生错误的地方增加log，了解具体报错。</p><img src="http://www.vkcyan.top/image-20220520134031605.png" alt="image-20220520134031605" style="zoom:50%;" /><p>再次执行<code>npm run build</code>，得到真正的错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Building for production...error TypeError: compilerFS.mkdirp is not a function</span><br></pre></td></tr></table></figure><p>​我们继续最终源码发现 <strong>compilerFS</strong> 由<strong>webpack</strong>进行提供，我们带着错误前往<strong>webpack</strong>官网查询错误，于是就找到了<a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#filesystems">Filesystems</a>，因为这个插件已经好几年没有更新，而我们当前使用的是webpack5，出现了API变更的情况。</p><p>​于此同时，根据错误提示，我们也在该库的issues中找到了历史讨论。</p><img src="http://www.vkcyan.top/image-20220520135141080.png" alt="image-20220520135141080" style="zoom:67%;" /><p>在讨论中，找到了两种解决方案</p><ol><li><strong>修改node_modules源码，使其兼容webpack5</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// From https://github.com/ahmadnassri/mkdirp-promise/blob/master/lib/index.js</span></span><br><span class="line"> <span class="keyword">const</span> mkdirp = <span class="keyword">function</span> (<span class="params">dir, opts</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\ndir&#x27;</span>, dir, opts, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       compilerFS.<span class="title function_">mkdirp</span>(dir, opts, <span class="function">(<span class="params">err, made</span>) =&gt;</span> err === <span class="literal">null</span> ? <span class="title function_">resolve</span>(made) : <span class="title function_">reject</span>(err))</span><br><span class="line">     &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">       compilerFS.<span class="title function_">mkdir</span>(dir, opts, <span class="function">(<span class="params">err, made</span>) =&gt;</span> err === <span class="literal">null</span> ? <span class="title function_">resolve</span>(made) : <span class="title function_">reject</span>(err))</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用已经被修改的库，感谢这位大哥</strong></li></ol><p><img src="http://www.vkcyan.top/image-20220520135437289.png" alt="image-20220520135437289"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @dreysolano/prerender-spa-plugin</span><br></pre></td></tr></table></figure><p>我们使用第二种方案，重新修改<strong>vue.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>)</span><br><span class="line">+ <span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;@dreysolano/prerender-spa-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后再次打包测试</p><p><img src="http://www.vkcyan.top/image-20220520135659280.png" alt="image-20220520135659280"></p><p>打包成功，通过启动本地服务器<strong>curl</strong>命令测试得知，SEO功能正常，未发现问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​使用<strong>prerender-spa-plugin</strong>打包出现报错<code>[prerender-spa-plugin] Unable to prerender all routes!</code>，更换库为**@dreysolano&#x2F;prerender-spa-plugin**，即可解决问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	BOOS最近对前几年做的公司官网不太满意，觉得没有有效体现公司的优势，表明随着公司这几年的努力发展，我们将会接触到更大规模的合作伙伴，自</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>写给前端新人的nginx教程</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84nginx%E6%95%99%E7%A8%8B/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84nginx%E6%95%99%E7%A8%8B/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:07.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​我相信大部分前端新手是接触不到部署相关的工作的，一般都是将代码包交给后端，或者通过CI，FTP完成代码的更新，至于代码如何部署，如何从域名到前端代码包，很多前端仔没有实际操作过，自然是不知道的，这篇文章就是要帮助未接触过部署的人学会在服务器上线部署一个前端项目，在这个主线中带大家慢慢的熟悉nginx</p><p>​记得在2017年暑假，那时候大二还没开学，当时我只会写一点简单代码，linux和运维完全没接触过，一冲动在阿里云购买了一个服务器，外加一个域名，好像还是<code>xiaowuasy.top</code>,现在已经不能访问了；那时候单纯的兴趣使然，想搭建一个网站，因为实力不足，也不知道求助别人，前前后后折腾了一个月，最终竟然成功在服务器上面部署了wordpress服务，后面域名备案也成功了；</p><p>​这段经历是曲折的，依稀记得在盛夏的傍晚，我坐在慢慢暗下来的客厅，头上还残留着因为紧张流下的细汗，眼睛因为专注而干涩，面对不太看得懂的文档，一遍一遍尝试；我自然不希望大家在这上面浪费时间，这也是写这篇文章的初衷</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>一个云服务器，阿里云，腾讯云，xx云都行，首次购买或者学生认证都是有很大的优惠（本文以阿里云为例子）</li><li>了解linux基础命令，也就是对各种文件的增删改查</li><li>本教程基于CentOS 7.5系统，如果是图形化界面，或者其他系统，命令可能不完全一致，但是流程都是一致的，建议看对应教程</li></ul><p>如果linux基础命令不会。下面的也不用看了，立刻去学</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><p>通过<strong>远程工具</strong>（CRT，Xshell）或者自带的<strong>远程连接</strong>进入自己的服务器，连接方式选择<strong>公网ip</strong></p><p><img src="http://www.vkcyan.top/FkugXnbgmCdIOX-iAYI3UYUjmv7a.png" alt="image-20220113105611506"></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><blockquote><p>CentOS自带yum命令，这个命令很关键，自行了解</p></blockquote><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx // 终于遇到需要确认的，直接确认即可</span><br></pre></td></tr></table></figure><p>安装完成后,主机中便有了nginx服务，相关命令如下，启动完成后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>启动完成后，浏览器访问<strong>公网IP</strong>,就可以访问到nginx的默认主页</p><p><img src="http://www.vkcyan.top/FtVofGcUY5HFXsoI2PpMqNNXberG.png"></p><p>到这一步就算是nginx部署成功了</p><h3 id="nginx相关文件路径"><a href="#nginx相关文件路径" class="headerlink" title="nginx相关文件路径"></a>nginx相关文件路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/nginx/ // 配置文件</span><br><span class="line">/usr/share/nginx/ // 默认前端代码存放处</span><br></pre></td></tr></table></figure><p>​默认配置在<code>/etc/nginx/nginx.conf</code>,nginx根据默认配置，监听80端口，80端口指定了&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html这个文件夹，于是你访问公网ip -&gt; 公网ip:80 -&gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html,于是”Welcome to <strong>CentOS</strong>“便呈现在你的面前</p><p>​如果你希望不显示默认的页面，而是显示你自己写的项目，直接替换<code>/etc/nginx/nginx.conf</code>中的<strong>root</strong>,字段为自己程序包的路径</p><img src="http://www.vkcyan.top/FiqSDRnFVl2vLwpIGa7FMtv7QPkY.png" style="zoom: 33%;" /><h2 id="在6666端口上搭建一个站点"><a href="#在6666端口上搭建一个站点" class="headerlink" title="在6666端口上搭建一个站点"></a>在6666端口上搭建一个站点</h2><p>​我们的代码除了部署在默认80端口上面，还可以其他端口上，例如8888，7777，等等</p><p>​接下来我们就在一个自定义的端口上面部署一个站点</p><p>​这里我们需要注意<code>nginx.conf</code>中的一行配置</p><blockquote><p>含义：在&#x2F;etc&#x2F;nginx&#x2F;conf.d下面所有nginx的配置文件都会自动生效</p></blockquote><img src="http://www.vkcyan.top/Ft5oDDtWUipvEf-tFA5XNcR8N87L.png" style="zoom:33%;" /><p>根据配置文件的提示我们到目标文件夹下面，建立test.conf，名字无所谓，配置文件里面是通配符匹配的</p><p>并通过vi 写入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       7777;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    root/usr/share/nginx/test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再去文件夹<code>/usr/share/nginx/test</code>下建立一个index.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span> </span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure><p>将一下内容放入index.html种</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是7777端口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后重启nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>访问我们部署的项目ip:7777</p><p>然后你会发现访问不了，最终访问超时(&#x3D;&#x3D;)，这是因为服务器限制了可访问端口，此时需要到云管理后台设置安全组</p><img src="http://www.vkcyan.top/FsVXXP3i-gLk0rNFYdlPWxCGPBxl.png" style="zoom:50%;" /><p>在阿里云后台增加安全组规则</p><p><img src="http://www.vkcyan.top/Fv_L-8z8yfwLO0N69zahJp0L2vhf.png"></p><p>之后就可以正常访问了！</p><p><img src="http://www.vkcyan.top/Fq0nB1GSEzI1FJN-f0sf66YXVl1T.png">至此，便完成了第一个nginx项目的部署</p><h2 id="部署一个vue项目"><a href="#部署一个vue项目" class="headerlink" title="部署一个vue项目"></a>部署一个vue项目</h2><p>​通过上面的例子，我们已经可以完成一个自定义站点的部署了，那么真实项目呢，例如将一个vue项目部署到3006端口</p><ol><li>首先编写xxx.conf</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       3006;</span><br><span class="line">    server_name  _;</span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 开启gzip相关配置</span></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_static on;</span><br><span class="line">    gzip_min_length 2k;</span><br><span class="line">    gzip_buffers 4 8k;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/x-icon application/javascript;</span><br><span class="line">    gzip_comp_level 9;</span><br><span class="line">    gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"><span class="comment"># 站点代码路径</span></span><br><span class="line">    root         /usr/share/nginx/client;</span><br><span class="line"><span class="comment"># 单页应用必须设置（刷新404问题）</span></span><br><span class="line">    location / &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>将打包之后的代码，通过FTP上传代码到目标文件夹<code>/usr/share/nginx/client</code>（注意文件夹名称）</p><p><a href="https://www.filezilla.cn/">ftp</a></p></li><li><p>重启nginx <code>nginx -s reload</code></p></li></ol><p>这边完成了一个站点的部署！是不是很简单</p><p><img src="http://www.vkcyan.top/FjjTa2vHly5zv0-wvUdExapUmAhd.png"></p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>​直接拿<strong>ip+端口</strong>给别人访问是不太好的，大家都给自己站点绑定上一个好记忆的域名，那么nginx如何绑定域名呢？</p><ol><li>购买一个域名<a href="https://wanwang.aliyun.com/domain/%EF%BC%8C%E5%A4%87%E6%A1%88%E5%9F%9F%E5%90%8D%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%B5%81%E7%A8%8B%E5%BE%88%E9%BA%BB%E7%83%A6%EF%BC%8C%E9%9C%80%E8%A6%8110-30%E5%A4%A9">https://wanwang.aliyun.com/domain/，备案域名，这个流程很麻烦，需要10-30天</a></li><li>备案完成后，域名就可以使用了</li></ol><p>我们需要去修改我们的nginx配置，将server_name的值修改为需要绑定的域名即可；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       3006;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">// ....</span><br></pre></td></tr></table></figure><h2 id="增加https支持"><a href="#增加https支持" class="headerlink" title="增加https支持"></a>增加https支持</h2><ol><li>申请一个https证书，<a href="https://yundunnext.console.aliyun.com/?spm=a2c4g.11186623.0.0.4a7b9d1d55eAnw&p=cas#/certExtend/free">数字证书管理</a>，以阿里云为例子，国内云厂商都有</li><li>将证书放在服务器中你可以记得住的文件夹里面</li><li>修改nginx配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123; // <span class="comment"># 将当前域名的http自动打到https</span></span><br><span class="line">        listen  80;</span><br><span class="line">        server_name     xxx.com;</span><br><span class="line">        rewrite ^(.*)$  https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">    ssl_certificate xxxx/yy.pem; <span class="comment"># 证书</span></span><br><span class="line">    ssl_certificate_key xxxx/yy.key; <span class="comment"># 证书秘钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ssl验证相关配置</span></span><br><span class="line">    ssl_session_timeout  5m;    <span class="comment">#缓存有效期</span></span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    <span class="comment">#加密算法</span></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    <span class="comment">#安全链接可选的加密协议</span></span><br><span class="line">    ssl_prefer_server_ciphers on;   <span class="comment">#使用服务器端的首选算法</span></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line">    </span><br><span class="line">root   /usr/share/nginx/client;</span><br><span class="line">    location / &#123;   </span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​虽然部署一个站点，仅仅是用到nginx，但是涉及到的知识点还是很多的</p><p>​如果遇到了错误，一定要仔细检查报错信息，问题百度百度基本都能得到答案，如果实在搞不定，直接重做云服务器系统，重头再来；遇到问题并把它解决了，便成了你的技能</p><p>​一个有经验的开发人员部署一个站点，可能半小时就弄完了，想要熟练的话，一定要多练习多实践，从0到1部署一个项目还是一件很酷的事情！</p><p>如果搭建中遇到了解决不了的问题，请到QQ群 530496237，大佬解答疑惑~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	我相信大部分前端新手是接触不到部署相关的工作的，一般都是将代码包交给后端，或者通过CI，FTP完成代码的更新，至于代码如何部署，如何从域</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器读取xls并生成二维码下载到本地</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96xls%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B9%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96xls%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B9%B6%E4%B8%8B%E8%BD%BD/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:04.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一次普通的技术需求会议</p><p>​项目经理首先发言 我们技术这边需要将xls表格中的几千条数据变成二维码，并且中间镶嵌logo，图片底部放置编号，由于xls表格数据私密，不能通过第三方完成</p><p>​平常这个事情都是后端处理的，前端就是来摸鱼的，但是这次一反常态，后端脸黑了，带样式搞不来，脚一蹬，直接装死</p><p>​项目经理用期盼的眼神看着我，顿时我紧张了起来，眼神飘忽，我已经好多年没搞过node了啊！！会议室都沉默了，在项目经理不断精神攻击下，后端装死的情况下，看来注定要大前端来拯救世界了，毕竟JavaScript万能语言，俺来试试吧！</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>​以上情节纯属虚构，但是需求确实是这样的，虽然好几年没碰过node，好歹年轻记性好，用过的基本都还记得，调研实现方案上没出现太多问题，有如下方案</p><h3 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h3><p>地址：<a href="https://github.com/puppeteer/puppeteer">https://github.com/puppeteer/puppeteer</a></p><p>​使用基于node环境的puppeteer，进行二维码绘制，图片绘制，是JavaScript开发者面对此类需求的主流选择</p><h3 id="node-canvas"><a href="#node-canvas" class="headerlink" title="node-canvas"></a>node-canvas</h3><p>地址：<a href="https://github.com/Automattic/node-canvas">https://github.com/Automattic/node-canvas</a></p><p>​同样是在服务端完成渲染，但是这个库依赖node-gyp，如果不安装python2，那安装过程懂得都懂，不过这也是很不错的方案</p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>​通过浏览器canvas绘制，然后下载下来，会有刷刷刷下载图片的炫酷效果</p><p>很明显有刷刷刷下载图片炫酷效果的方案更好，所以就选择你了 <strong>浏览器</strong>方案！</p><h2 id="问题分解"><a href="#问题分解" class="headerlink" title="问题分解"></a>问题分解</h2><p>确定了技术方案，就要考虑具体实现了</p><ul><li>JavaScript读取execl文件，并处理成理想格式</li><li>将读取到的execl中的网址字段生成一张二维码</li><li>将二维码写入canvas，在其中间加上logo，并在底部加一行文字</li><li>将canva转化为DataURL，下载它</li><li>不断递归生成，直到xls数据全部处理完毕</li></ul><p><strong>理论存在，实践开始</strong>！</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="启动一个本地服务器"><a href="#启动一个本地服务器" class="headerlink" title="启动一个本地服务器"></a>启动一个本地服务器</h3><p>首先我们通过VScode <strong>Live Server</strong> 启动一个本地服务器</p><p>这里有好奇宝宝要问了，为啥第一步是这？</p><p>答：因为浏览器是访问不了电脑的文件系统的，所以只能通过启动一个本地服务器的方案，来读取我们的资源文件</p><h3 id="创建html，引入资源库"><a href="#创建html，引入资源库" class="headerlink" title="创建html，引入资源库"></a>创建html，引入资源库</h3><p>分析需要用到的第三方开源库</p><ul><li>解析xls <a href="https://github.com/sheetjs/sheetjs">https://github.com/sheetjs/sheetjs</a></li><li>生成QRcode <a href="https://github.com/soldair/node-qrcode">https://github.com/soldair/node-qrcode</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>生成二维码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./qrcode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./xlsx.full.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于生成载体 最终生成的图片大小，按自己的需求来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">height</span>=<span class="string">&quot;310&quot;</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ctx = <span class="title function_">initCanvas</span>(); <span class="comment">// 获取ctx实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化画布</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">initCanvas</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#fff&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">260</span>, <span class="number">310</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> ctx;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解析xls文件"><a href="#解析xls文件" class="headerlink" title="解析xls文件"></a>解析xls文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readWorkbookFromRemoteFile</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res 为实际解析代码 [&#123;key:&#x27;xxxx&#x27;,value:&#x27;xxxx&#x27;&#125;,....]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取xls信息，并处理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readWorkbookFromRemoteFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://127.0.0.1:5500/xls.xls&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.<span class="property">responseType</span> = <span class="string">&quot;arraybuffer&quot;</span>;</span><br><span class="line">        xhr.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                <span class="keyword">var</span> workbook = <span class="variable constant_">XLSX</span>.<span class="title function_">read</span>(data, &#123; <span class="attr">type</span>: <span class="string">&quot;array&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取实际表格长度（去除表头）</span></span><br><span class="line">                <span class="keyword">let</span> carryLen = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>]) &#123;</span><br><span class="line">                    <span class="keyword">const</span> ele = workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>][key];</span><br><span class="line">                    <span class="keyword">if</span> (key.<span class="title function_">includes</span>(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">                        carryLen++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析数据</span></span><br><span class="line">                <span class="keyword">let</span> xls = [];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= carryLen; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> data = workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>];</span><br><span class="line">                    xls.<span class="title function_">push</span>(&#123;</span><br><span class="line">                        <span class="attr">key</span>: data[<span class="string">&quot;A&quot;</span> + i].<span class="property">w</span>,</span><br><span class="line">                        <span class="attr">value</span>: data[<span class="string">&quot;B&quot;</span> + i].<span class="property">w</span>,</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_">resolve</span>(xls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里肯定也有细心的好奇宝宝问，为啥循环体中的<code>i</code>为2呢?</p><p>答案：因为表格中的A1，B1为表格的第一行，而第一行是表头，要去除</p><h4 id="将链接生成为二维码"><a href="#将链接生成为二维码" class="headerlink" title="将链接生成为二维码"></a>将链接生成为二维码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 生成二维码</span></span><br><span class="line">    <span class="title class_">QRCode</span>.<span class="title function_">toDataURL</span>(</span><br><span class="line">        <span class="string">&#x27;xxxxxxx&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="attr">margin</span>: <span class="number">3</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">error, url</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">            <span class="keyword">const</span> code = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">            code.<span class="property">src</span> = url;</span><br><span class="line">            code.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                ctx.<span class="title function_">drawImage</span>(code, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="title function_">resolve</span>(code);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="写入中间logo"><a href="#写入中间logo" class="headerlink" title="写入中间logo"></a>写入中间logo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> code = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    code.<span class="property">src</span> = <span class="string">&quot;http://127.0.0.1:5500/logo.jpeg&quot;</span>;</span><br><span class="line">    code.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ctx.<span class="title function_">drawImage</span>(code, <span class="number">260</span> / <span class="number">2</span> - <span class="number">20</span>, <span class="number">260</span> / <span class="number">2</span> - <span class="number">20</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="写入底部文字"><a href="#写入底部文字" class="headerlink" title="写入底部文字"></a>写入底部文字</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入编号</span></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;24px Arial&quot;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#000&quot;</span>;</span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">ctx.<span class="property">textBaseline</span> = <span class="string">&quot;middle&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(xls[index].<span class="property">value</span>, <span class="number">130</span>, <span class="number">270</span>);</span><br></pre></td></tr></table></figure><h3 id="canvas转化为图片，并下载到本地"><a href="#canvas转化为图片，并下载到本地" class="headerlink" title="canvas转化为图片，并下载到本地"></a>canvas转化为图片，并下载到本地</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于预览</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>).<span class="title function_">toDataURL</span>(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// 生成一个a元素</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&quot;click&quot;</span>); <span class="comment">// 创建一个单击事件</span></span><br><span class="line">a.<span class="property">download</span> = xls[index].<span class="property">value</span>; <span class="comment">// 将a的download属性设置为我们想要下载的图片名称，若name不存在则使用‘下载图片名称’作为默认名称</span></span><br><span class="line">a.<span class="property">href</span> = url; <span class="comment">// 将生成的URL设置为a.href属性</span></span><br><span class="line">a.<span class="title function_">dispatchEvent</span>(event); <span class="comment">// 触发a的单击事件</span></span><br></pre></td></tr></table></figure><p>第一张图片，完成生成</p><img src="http://www.vkcyan.top/image-20220424154056800.png" alt="image-20220424154056800" style="zoom: 67%;" /><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><p>我们修改发起逻辑代码，逻辑尾部增加递归调用就好啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readWorkbookFromRemoteFile</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">createImg</span>(res, <span class="number">0</span>); <span class="comment">// 递归生成</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// 实际生成逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createImg</span>(<span class="params">xls, index</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 生成二维码</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 生成中间logo</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 写入编号</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 下载图片</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xls.<span class="property">length</span> &gt; index + <span class="number">1</span>) &#123;</span><br><span class="line">                ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#fff&quot;</span>; </span><br><span class="line">                ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">260</span>, <span class="number">310</span>); <span class="comment">// 初始化画布</span></span><br><span class="line">                <span class="title function_">createImg</span>(xls, index + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">20</span>); <span class="comment">// 爱惜机器，加个延时，也可以去掉延时，体会机器的极致速度</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="http://www.vkcyan.top/8my3l-a8ef0.gif" alt="8my3l-a8ef0"></p><p>至此，终于实现了刷刷刷下载图片炫酷效果，此时可以脑部一段很快的rap，如果华佗再世，崇洋可以医治，外邦来学汉字……………</p><p>最终生成的文件</p><img src="http://www.vkcyan.top/image-20220424160255476.png" alt="image-20220424160255476" style="zoom:67%;" /><h2 id="最终代码地址"><a href="#最终代码地址" class="headerlink" title="最终代码地址"></a>最终代码地址</h2><blockquote><p>一定要针对该项目启动一个本地服务器，否则资源无法访问</p></blockquote><p><a href="https://github.com/vkcyan/web-Output-QRcode">web-Output-QRcode</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​首先纠正一点，JavaScript开发者针对生成二维码类似的任务，首选肯定是<code>puppeteer</code>，使用浏览器绕个弯这种实现方案，多少带点科研味道，长期项目自然是不推荐的</p><p>​带着学习的态度去完成需求，并且不断优化代码、总结问题，将遇到的未知知识点学会，（比如创建a链接，自动触发点击事件），这才是本文的目的。</p><p>​感谢阅读，觉得还不错就点个赞吧~</p><p>​QQ交流群：530496237 大佬解答疑惑~（内有微信群二维码）</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;一次普通的技术需求会议&lt;/p&gt;
&lt;p&gt;​	项目经理首先发言 我们技术这边需要将xls表格中的几千条数据变成二维码，并且中间镶嵌logo，图片</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>三个案例带你理解Event Loop流程</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E8%81%8A%E4%B8%80%E8%81%8A%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8AEventLoop/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E8%81%8A%E4%B8%80%E8%81%8A%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8AEventLoop/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:01.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么-JavaScript-需要-Event-Loop"><a href="#为什么-JavaScript-需要-Event-Loop" class="headerlink" title="为什么 JavaScript 需要 Event Loop"></a>为什么 JavaScript 需要 Event Loop</h2><p> JavaScript 在创建之初就确认了一点，JavaScript 是一门单线程语言，因为 JavaScript 主要提供用户互动以及操作 DOM，假定存在两个线程，同时对一个 Dom 进行操作，那究竟以谁为准呢，为了避免这种复杂性，JavaScript 确认了单线程这个核心概念</p><p> 在单线程中，除了 JavaScript 本身的逻辑之外，还存在一些 IO 操作，例如从服务端获取数据，在单线程中就需要等待结果的返回才能继续下面的逻辑，这时候机器是挂起状态，为了避免这个低效问题，这里就引入了同步任务与异步任务的概念，依旧是是单线程，但是有些任务不等待其运行结果</p><p> 于是同步任务都在函数执行栈（Stack）上执行，所有的异步任务，在有了运行结果之后，就会将其放入任务队列（callback queue），如果 Stack 中任务执行完毕，就会再去检查任务队列是否存在待执行的回调任务，将其任务放入 Stack，再执行，这里就会不断循环此操作</p><p> Stack 执行 - Stack 执行完毕 - 检查任务队列 - 将任务加入 Stack - Stack 执行，这样重复的过程就需要 Event Loop 来持续不断的循环检查任务队列，确保异步任务被准时加入到 Stack</p><p><img src="http://www.vkcyan.top/Fr09Z8JDsWNH_CThK4l2piOyaagp.png"></p><h2 id="相关名词介绍"><a href="#相关名词介绍" class="headerlink" title="相关名词介绍"></a>相关名词介绍</h2><p><strong>函数执行栈（Stask）</strong>：遵循后进先出原则，同步函数执行栈</p><p><strong>webAPIs</strong>：异步任务的发起者，事件是首先进入 stack，例如 click，change，再将 callback 加入任务队列</p><p><strong>回调队列（callback queue）</strong>：也可以被称为任务队列，回调函数到达了执行时机就会进入任务队列，他们将会被 Event Loop 持续打入函数执行栈</p><h2 id="事件循环解析"><a href="#事件循环解析" class="headerlink" title="事件循环解析"></a>事件循环解析</h2><p>我们用 Event Loop 来解释一个简单的 demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">consoleo.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure><p>我相信大部分人都知道，这里打印的顺序为 1 3 2，下面我们用事件循环的流程来说明为什么是这个结果</p><p><strong>注： cb 为 callback</strong></p><ol><li><p><code>console.log(&#39;hi&#39;)</code>，进栈 执行 出栈，<strong>打印 1</strong></p></li><li><p><code>setTimeout</code>进栈 执行 cb 加入异步队列 自身出栈</p></li><li><p><code>console.log(&#39;end&#39;)</code>，进栈 执行 出栈 <strong>打印 3</strong></p></li><li><p>5s 后，cb 加入任务队列，event Loop 检查当前执行栈是否存在函数，检查发现不存在，将 cb 加入函数执行栈</p></li><li><p><code>cb</code>进栈 执行 出栈 <strong>打印 2</strong></p></li></ol><p> 我们通过 event Loop 的角度进行解析，就能很轻易的解释为什么代码执行顺序是 1 3 2，这是非常简单的场景，接下来我们会分析一些更加有难度的代码</p><h2 id="关于宏任务与微任务"><a href="#关于宏任务与微任务" class="headerlink" title="关于宏任务与微任务"></a>关于宏任务与微任务</h2><p> 通过上面的介绍，我相信大部分人都事件循环有一个基础的认知的，但是与以上我们通过简单的示例，演示了异步代码在事件循环中的运行流程，并没有涉及宏任务与微任务，这两货是什么呢，为什么要在这里出现？</p><p><strong>首先，宏任务（macrotask），微任务（microtask）都是异步任务</strong></p><p>宏任务：<code>setTimeout</code> <code>setInterval</code> <code>setImmediate</code> <code>I/O 键盘事件</code> <code>网络事件</code> <code>UI rendering</code></p><p>微任务：<code>pormise</code> <code>MutationObserver</code> <code>process.nextTick</code></p><p>他们在执行层面上存在一定差异</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br></pre></td></tr></table></figure><p>结果为 <code>script start</code> <code>script end</code> <code>promise1</code> <code>promise2</code> <code>setTimeout</code></p><p>pormise 与 setTimeout 虽然都是异步任务，但是上图的代码你会发现，promise 仿佛插队了，这便是宏任务与微任务在任务队列最大的不同之处</p><p> <strong>event Loop 在事件循环中,首先解析 script，将宏任务加入宏任务队列，将微任务加入微任务队列，栈空了之后，执行当前微任务，第一轮事件循环结束</strong></p><p><strong>在第二轮事件循环中，首先执行宏任务 callback 中的第一个，执行完毕，栈空了之后，再执行当前微任务，后面同理</strong></p><img src="http://www.vkcyan.top/FqUHDZ_5cScznXGrkeEfGhaXCWUw.png" style="zoom: 50%;" /><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;g&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f&quot;</span>);</span><br></pre></td></tr></table></figure><p>大家可以先别看答案，自己先尝试将答案推算出来</p><h4 id="第一轮事件循环"><a href="#第一轮事件循环" class="headerlink" title="第一轮事件循环"></a>第一轮事件循环</h4><p><code>console.log(&quot;a&quot;);</code>进入栈 执行 出栈 <strong>打印 a</strong></p><p><code>setTimeout</code>进入栈 <strong>callback 加入宏任务队列</strong> 本身出栈</p><p><code>new Promise</code> 进入栈 执行</p><p><code>console.log(&quot;c&quot;);</code>进入栈 执行 出栈 <strong>打印 c</strong></p><p><code>new Promise.then</code> 进入微任务队列</p><p><code>console.log(&quot;f&quot;);</code>进入栈 执行 出栈 <strong>打印 f</strong></p><p><code>new Promise</code> 出栈</p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><code>console.log(&quot;d&quot;)</code>进入栈 执行 出栈 <strong>打印 d</strong></p><p><code>console.log(&quot;e&quot;)</code>进入栈 执行 出栈 <strong>打印 e</strong></p><p><strong>–微任务执行完毕 第一轮事件循环完毕–</strong></p><p>结果为 a c f d e</p><h4 id="第二轮事件循环"><a href="#第二轮事件循环" class="headerlink" title="第二轮事件循环"></a>第二轮事件循环</h4><p>第一轮循环中 setTimeout 在宏任务中，开始执行</p><p><code>console.log(&quot;b&quot;)</code> 进入栈 执行 出栈 <strong>打印 b</strong></p><p><code>setTimeout</code>进入栈 <strong>callback 加入宏任务队列</strong> 本身出栈</p><p><code>new Promise</code> 进入栈 执行</p><p><code>new Promise.then</code> 进入微任务队列</p><p><code>new Promise</code> 出栈</p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><code>console.log(&quot;h&quot;)</code>进入栈 执行 出栈 <strong>打印 h</strong></p><p><strong>–微任务执行完毕 第二轮事件循环完毕–</strong></p><p>结果为 b h</p><h4 id="第三轮事件循环"><a href="#第三轮事件循环" class="headerlink" title="第三轮事件循环"></a>第三轮事件循环</h4><p>第二轮循环中 setTimeout 在宏任务中，开始执行</p><p><code>console.log(&quot;g&quot;);</code>进入栈 执行 出栈 <strong>打印 g</strong></p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><strong>–微任务队列为空 第三轮事件循环完毕–</strong></p><p>结果为 g</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><strong>a c f d e b h g</strong></p><h3 id="宏-x2F-微任务的结论"><a href="#宏-x2F-微任务的结论" class="headerlink" title="宏&#x2F;微任务的结论"></a>宏&#x2F;微任务的结论</h3><p>通过上面三个例子，我们可以得出以下结论</p><ul><li><p>函数执行栈中如果还存在函数，则等待其结束，才会继续事件循环</p></li><li><p>Event Loop 先执行同步任务，再微任务，下一轮循环，宏任务加入队列，执行，所以说先微任务，再宏任务是合理的</p></li><li><p>单次 Event Loop 中，只会执行一次宏任务，但是微任务可以一次执行多个</p></li></ul><h2 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h2><p><a href="https://juejin.cn/post/6969028296893792286">做一些动图，学习一下 EventLoop</a> 通过动图看 Event Loop 更加便于理解</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> JavaScript 单线程语言的特性注定其需要异步队列，让网页交互体验上更加友好，对于开发来说，需要尽量了解其特性</p><p> 首先我们需要了解事件循环机制，搞懂代码执行栈 异步队列的概念，再后面搞懂宏任务与微任务，读懂异步队列的运行机制，这样基本上就可以解决大部分 Event Loop 问题，了解宏任务 微任务 将会对代码执行顺序有更加底层的理解，这样就可以解决</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么-JavaScript-需要-Event-Loop&quot;&gt;&lt;a href=&quot;#为什么-JavaScript-需要-Event-Loop&quot; class=&quot;headerlink&quot; title=&quot;为什么 JavaScript 需要 Event Loop&quot;&gt;&lt;/a&gt;为什</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>基于PromiseA+，从零实现Promise</title>
    <link href="https://vkcyan.github.io/2021/12/15/promise%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>https://vkcyan.github.io/2021/12/15/promise%E7%9A%84%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</id>
    <published>2021-12-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:14.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>ECMAScript6中promise是划时代的API，他的出现解决了一直困扰前端开发者的异步问题，从此面对异步回调，我们有了更好的武器</p></blockquote><p><img src="http://www.vkcyan.top/1_Bf17KrH3fJo09LTKHRYJcw.jpeg" alt="1_Bf17KrH3fJo09LTKHRYJcw"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​面对天天都能见面的promise，不知道你是否有以下的一些问题</p><ol><li>我们new Promise((resolve,reject) &#x3D;&gt;{})，resolve，reject都是哪来的？</li><li>为什么resolve之后才会执行then或者catch？</li><li>为什么可以链式.then，并且还都会按同步进行？</li><li>为什么执行promise.resolve()，后面的函数就支持promise了？</li><li>promise.all是如何实现的？</li><li>是否被面试题中的promise题目迷惑的头晕目眩？</li></ol><p>让我们了解Promise的实现原理，所有问题答案自然浮出水面~</p><p>​promise在潜移默化之间帮助我们简化了复杂的异步代码，降低逻辑难度，说promise是划时代的异步解决方案也不为过，他很好的提现了<strong>开放封闭原则</strong>，解决耦合性过高的问题</p><p>​说一个小知识，es6发布之前类似prmise的异步方案已经存在，在jquery的ajax中已经应用了类似的技术方案的jQuery.deferred()，感兴趣的同学可以去了解一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(<span class="string">&quot;test.html&quot;</span>)</span><br><span class="line">.<span class="title function_">done</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&quot;哈哈，成功了！&quot;</span>); &#125;)</span><br><span class="line">.<span class="title function_">fail</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="title function_">alert</span>(<span class="string">&quot;出错啦！&quot;</span>); &#125;);</span><br></pre></td></tr></table></figure><img src="http://www.vkcyan.top/FqgRN77OCKkvYc0jP_nVYjch_kCx.png" style="zoom:33%;" /><h2 id="简化版Primise"><a href="#简化版Primise" class="headerlink" title="简化版Primise"></a>简化版Primise</h2><blockquote><p>基础版本的实现虽然简单，但是解释了很多问题</p><p>建议将代码复制到本地，通过断点的方式查看代码的执行流程</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PEDDING</span> = <span class="string">&#x27;pending&#x27;</span> <span class="comment">// 等待状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&#x27;fulfilled&#x27;</span> <span class="comment">// 成功状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">&#x27;rejected&#x27;</span> <span class="comment">// 失败状态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">APromise</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">executor</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">PEDDING</span> <span class="comment">// 初始化状态</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span> <span class="comment">// 成功的数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span> <span class="comment">// 失败的原因</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = [] <span class="comment">// 保存成功状态的回调队列</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectCallbacks</span> = [] <span class="comment">// 保存失败状态的回调队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">data</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable constant_">PEDDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">FULFILLED</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = data</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">e</span>())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">err</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable constant_">PEDDING</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">REJECTED</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reason</span> = err</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectCallbacks</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="title function_">e</span>())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="title function_">executor</span>(resolve, reject)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">rejected</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">      <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> == <span class="variable constant_">PEDDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始回调&#x27;</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行回调&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">11111</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调&#x27;</span>, value)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败回调&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="代码运行流程"><a href="#代码运行流程" class="headerlink" title="代码运行流程"></a>代码运行流程</h3><ol><li>初始化APromise，开始执行class中的constructor</li><li>在constructor中初始化当前promise的一些状态值以及resolve，reject函数</li><li>最后将resolve函数与reject函数以参数的形式给promise的回调函数，同时执行函数，打印<strong>开始回调</strong></li><li>运行setTimeout，并且开始解析then函数</li><li>如果是成功，或者失败状态，直接执行回调，如果是pedding状态，则存储成功与失败回调函数</li><li>1s之后，setTimeout执行完毕，resolve执行触发constructor中的resolve</li><li>resolve函数中执行之前初始化.then时候存储的回调函数，打印 <strong>成功回调，11111</strong>或者<strong>失败回调</strong></li></ol><h3 id="逻辑流程图"><a href="#逻辑流程图" class="headerlink" title="逻辑流程图"></a>逻辑流程图</h3><p><img src="http://www.vkcyan.top/Fn85w7D8S4hjZbpJpXQTpFLbUeKZ.png" alt="基础版本逻辑流程流程图"></p><p>基础版本的实现，不支持链式调用，不支持then穿透，不支持catch，只实现了最基础的逻辑</p><p>我们在这里解答一下前言中提出的问题</p><ol><li><p>我们new Promise((resolve,reject) &#x3D;&gt;{})，resolve，reject都是哪来的？</p><p>答：new的时候执行Promise中的constructor，声明了resolve与reject，并且在执行Promise回调函数的时候将参数传入到函数中</p></li><li><p>为什么resolve之后才会执行then或者catch？</p><p>答：因为在初始化阶段，pedding状态下，我们存储了当前Promise的成功与失败回调，当执行resolve的时候，当前Promise的状态发生变化，开始执行之前存储的回调函数，如果不是padding，则立即执行回调函数</p></li></ol><p>后面的问题我们暂时还无法解释，但是随着我们进一步的实现，答案都会浮出水面</p><h2 id="正式版（链式回调，then值穿透，-catch-等）"><a href="#正式版（链式回调，then值穿透，-catch-等）" class="headerlink" title="正式版（链式回调，then值穿透，.catch  等）"></a>正式版（链式回调，then值穿透，.catch  等）</h2><h3 id="链式回调"><a href="#链式回调" class="headerlink" title="链式回调"></a>链式回调</h3><p>​我们一般写promise都会写多个.then，在多个.then中我们将异步代码变成同步代码块，但是我们基础版本的promise中无法显示链式调用，因为执行.then之后函数没有任何返回值，自然不会存在.then方法，在这个思路上，我们对promise的.then解析过程进行改写,尝试让其支持链式调用</p><ol><li>每次.then中都需要返回一个promise来触发下一个.then</li><li>对then回调函数的各种情况需要进行判断，例如。then中返回的是一个string还是返回了一个promise，如果是则需要增加链式回调触发父级的resolve</li><li>then函数执行需要通过settimeout进行包裹，让其加入宏任务</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * then可能返回的是普通值,也可能返回一个promise，这里的写法参照PromiseA+标准进行完成</span></span><br><span class="line"><span class="comment"> * 逻辑较为复杂，可以先看静态变量代码逻辑，再看针对promise的处理逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; promise 当前promise</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; x 当前返回值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; resolve 成功回调</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; reject 失败回调</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolvePromise</span> = (<span class="params">promise, x, resolve, reject</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;检测到promise的循环调用&#x27;</span>)) <span class="comment">// &#x27;Chaining cycle detected for promise #&lt;Promise&gt;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> called = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="keyword">typeof</span> x === <span class="string">&#x27;object&#x27;</span> &amp;&amp; x !== <span class="literal">null</span>) || <span class="keyword">typeof</span> x === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> then = x.<span class="property">then</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        then.<span class="title function_">call</span>(</span><br><span class="line">          x,</span><br><span class="line">          <span class="function">(<span class="params">y</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise, y, resolve, reject)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="title function_">reject</span>(r)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(x)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">      called = <span class="literal">true</span></span><br><span class="line">      <span class="title function_">reject</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> apromise = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">          <span class="title function_">resolvePromise</span>(apromise, x, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">          <span class="title function_">resolvePromise</span>(apromise, x, resolve, reject)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(err)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PEDDING</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">            <span class="title function_">resolvePromise</span>(apromise, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectCallbacks</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> x = <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)</span><br><span class="line">            <span class="title function_">resolvePromise</span>(apromise, x, resolve, reject)</span><br><span class="line">          &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(err)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> apromise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的内部promise处理，函数的运行逻辑发生了很大的变化</p><p>我们直观看到的逻辑是</p><p><img src="http://www.vkcyan.top/FvuUJMgXm4Pf2DgVK7bT8uolxp0i.png" alt="外在的运行逻辑"></p><p>​实际的运行逻辑是每次.then中都会再次创建一个Promise，以便于下次进行调用，并且对.then的回调函数进行处理，区分.then中返回了Promise对象还是普通对象，这样的思路实现了.then链式调用</p><p><img src="http://www.vkcyan.top/FlzdXO2ovUK36pdn5BGUpMVzNcsV.png" alt="实际的运行逻辑"></p><p>当then中存在return promise的情况，逻辑会发生一些变化，这些主要体现在resolvePromise函数中</p><p><img src="http://www.vkcyan.top/Fl5vlJvqk-NpsXmQY4cajAGo0VQp.png" alt="Snipaste_2021-06-29_09-23-14"></p><h3 id="then值穿透"><a href="#then值穿透" class="headerlink" title="then值穿透"></a>then值穿透</h3><p>首先查看一种场景</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">11111</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>()</span><br><span class="line">  .<span class="title function_">then</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调&#x27;</span>, data);</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败回调&#x27;</span>, err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>​这里我们就会发现，then的回调函数都不存在，自然无法将resolve的值传递到最下面的.then中，所以这里我们需要对这种情况做一些处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="comment">// 值穿透问题 如果then是空的话,就手动的将上一个resolve的值带入到下一个then中</span></span><br><span class="line">  onFulfilled = <span class="keyword">typeof</span> onFulfilled == <span class="string">&#x27;function&#x27;</span> ? onFulfilled : <span class="function">(<span class="params">data</span>) =&gt;</span> data</span><br><span class="line">  onRejected = <span class="keyword">typeof</span> onRejected == <span class="string">&#x27;function&#x27;</span> ? onRejected : <span class="function">(<span class="params">err</span>) =&gt;</span> &#123; <span class="keyword">throw</span> err &#125;</span><br><span class="line">  <span class="keyword">let</span> apromise = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> apromise</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们对then值中的回调函数进行处理后，实际运行的函数变成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="number">11111</span>);</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> data)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> data)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;成功回调&#x27;</span>, data);</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;失败回调&#x27;</span>, err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>这样便实现了then穿透问题</p><h3 id="catch"><a href="#catch" class="headerlink" title=".catch"></a>.catch</h3><p>目前我们错误回调在.then的第二个参数中，并不支持.catch的写法，我们可以在原型链上面增加catch方法</p><blockquote><p>catch其实也是对.then方法的封装，只不过不存在成功回调，只有失败回调</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">APromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">catch</span> = <span class="keyword">function</span> (<span class="params">errCallback</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, errCallback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title=".finally"></a>.finally</h3><blockquote><p>由于finally无法预知promise的最终状态，所以finally的回调函数中不接受任何参数，他仅用于无论最终结果都要执行的情况</p><p>需要注意的一点是如果finally中存在Promise，这需要等待promise执行完毕</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">APromise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">callBack</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">APromise</span>.<span class="title function_">resolve</span>(<span class="title function_">callBack</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> data)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">APromise</span>.<span class="title function_">reject</span>(<span class="title function_">callBack</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关于finally的小知识"><a href="#关于finally的小知识" class="headerlink" title="关于finally的小知识"></a>关于finally的小知识</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;&#125;, <span class="function">() =&gt;</span> &#123;&#125;) <span class="comment">// 此时传递下去的是undefined</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="number">2</span>).<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;&#125;, <span class="function">() =&gt;</span> &#123;&#125;) <span class="comment">// 传递下去的是 2，finally本身未接收参数，但是将上次的回调数据放入到了下次的回调</span></span><br></pre></td></tr></table></figure><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><blockquote><p>调用Promise.resolve()就会返回一个真实的promise，并且直接返回成功回调</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">APromise</span>.<span class="property">resolve</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h3><blockquote><p>调用Promise.resolve()就会返回一个真实的promise，并且直接返回失败回调</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">APromise</span>.<span class="property">reject</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><blockquote><p>当调用race方法的时候，必须传入一个数组，数组中可以存在不同类型以及函数类型，在初始化过程中会再次创建一个promise，当数组中的某个promise对象最先执行的时候，触发自身的.then在回调函数中触发了race本身的resolve，后面执行完毕之后，因为race的状态已经发生了变化，自然无法再执行</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同时执行多个promise,但是最返回最先返回的结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">promiseList</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">APromise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promiseList</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseList)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;必须传递数组&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    promiseList.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (item &amp;&amp; <span class="keyword">typeof</span> item.<span class="property">then</span> == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        item.<span class="title function_">then</span>(resolve, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(item)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok1&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;ok2&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">APromise</span>.<span class="title function_">race</span>([<span class="number">1</span>, p1, p2]).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success1&#x27;</span>, data)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error1&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><blockquote><p>all的实现逻辑非常简单，all的时候创建一个promise，内部记录当前传入的列表状态成功的单个数据，当所有的then数据都成功，调用自己的resolve，当有一个失败的时候，调用自己的reject</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同时执行多个promise,会等待每次promise的结果,最后一起返回,有一个失败,这都不会返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type"></span>&#125; promiseList </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">APromise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promiseList</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseList)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;必须是数组&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resulteArr = []</span><br><span class="line">    <span class="keyword">const</span> len = promiseList.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getResult</span> = (<span class="params">key, val</span>) =&gt; &#123;</span><br><span class="line">      resulteArr[key] = val</span><br><span class="line">      <span class="keyword">if</span> (++currentIndex == len) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(resulteArr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> val = promiseList[i]</span><br><span class="line">      <span class="keyword">if</span> (val &amp;&amp; <span class="keyword">typeof</span> val.<span class="property">then</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        val.<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">getResult</span>(i, data)</span><br><span class="line">        &#125;, reject)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">getResult</span>(i, val)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok1&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok2&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">2000</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,p1,p2]).<span class="title function_">then</span>(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>, data);</span><br><span class="line">&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>, err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h3><blockquote><p>实现方法与all非常相似，是all完全相反的情况</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * any与all完全相反,只要有个一个成功就会返回成功,全部失败才会返回失败</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">promiseList</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">APromise</span>.<span class="property">any</span> = <span class="keyword">function</span> (<span class="params">promiseList</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseList)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;必须是数组&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resultArr = []</span><br><span class="line">    <span class="keyword">const</span> len = promiseList.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getResult</span> = (<span class="params">index, err</span>) =&gt; &#123;</span><br><span class="line">      resultArr[index] = err</span><br><span class="line">      <span class="keyword">if</span> (++currentIndex == len) &#123;</span><br><span class="line">        <span class="title function_">reject</span>(resultArr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    promiseList.<span class="title function_">map</span>(<span class="function">(<span class="params">res, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res &amp;&amp; <span class="keyword">typeof</span> res.<span class="property">then</span> == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">then</span>(resolve, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">getResult</span>(index, err)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;err3&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;err4&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">APromise</span>.<span class="title function_">any</span>([p3, p4]).<span class="title function_">then</span>(</span><br><span class="line">  <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>, data)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Promise-allSettled"><a href="#Promise-allSettled" class="headerlink" title="Promise.allSettled()"></a>Promise.allSettled()</h3><blockquote><p>allSettled是ES2020加入的工具方法，一句话总结：他是永远都不会失败处理的promise.all</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存所有的成功与失败</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; promiseList </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">APromise</span>.<span class="property">allSettled</span> = <span class="keyword">function</span> (<span class="params">promiseList</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="title function_">isArray</span>(promiseList)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;必须是数组&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> resultArr = []</span><br><span class="line">    <span class="keyword">const</span> len = promiseList.<span class="property">length</span></span><br><span class="line">    <span class="keyword">let</span> currentIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">getResult</span> = (<span class="params">index, data, status</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (status == <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">        resultArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">status</span>: status,</span><br><span class="line">          <span class="attr">value</span>: data,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (status == <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">        resultArr.<span class="title function_">push</span>(&#123;</span><br><span class="line">          <span class="attr">status</span>: status,</span><br><span class="line">          <span class="attr">reason</span>: data,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (++currentIndex == len) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(resultArr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    promiseList.<span class="title function_">map</span>(<span class="function">(<span class="params">res, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res &amp;&amp; <span class="keyword">typeof</span> res.<span class="property">then</span> == <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">then</span>(</span><br><span class="line">          <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">getResult</span>(index, data, <span class="variable constant_">FULFILLED</span>)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">getResult</span>(index, err, <span class="variable constant_">REJECTED</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">getResult</span>(index, res, <span class="variable constant_">FULFILLED</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok1&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;ok2&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p3 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;err3&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p4 = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;err4&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">APromise</span>.<span class="title function_">allSettled</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, p1, p2, p3, p4]).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;success&#x27;</span>, res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="测试函数"><a href="#测试函数" class="headerlink" title="测试函数"></a>测试函数</h2><p>首先需要安装测试脚本 <strong>npm install -g promises-aplus-tests</strong></p><p>测试命令 <strong>promises-aplus-tests xxxx.js</strong></p><blockquote><p>测试文件末尾需要加入如下代码</p><p>不存在错误则为符合promiseA+标准</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">APromise</span>.<span class="property">defer</span> = <span class="title class_">APromise</span>.<span class="property">deferred</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> dfd = &#123;&#125;</span><br><span class="line">  dfd.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">APromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    dfd.<span class="property">resolve</span> = resolve</span><br><span class="line">    dfd.<span class="property">reject</span> = reject</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> dfd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">APromise</span></span><br></pre></td></tr></table></figure><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><a href="https://github.com/vkcyan/code-fragment/tree/master/promise">github-promise</a></p><p>可以通过chrome DevTool或者Vscode Debug的方式，加上断点，查看代码运行流程，便于理解promise运行逻辑</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://juejin.cn/post/6968843434006315016#heading-12">重学Promise，基于A+规范实现它</a>，感谢掘金@关er的promise解读文章，大大降低了深入promise的门槛</p><p><a href="https://promisesaplus.com/">PromiseA+规范</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise">MDN-Promise</a></p><p><a href="https://juejin.cn/post/6844904077537574919">45道Promise面试题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;ECMAScript6中promise是划时代的API，他的出现解决了一直困扰前端开发者的异步问题，从此面对异步回调，我们有了更好的武器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;http://www.vkcyan.top/1_</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>简易版Reactivity源码解析</title>
    <link href="https://vkcyan.github.io/2021/12/01/%E7%AE%80%E6%98%93%E7%89%88Reactivity%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://vkcyan.github.io/2021/12/01/%E7%AE%80%E6%98%93%E7%89%88Reactivity%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2021-11-30T16:00:00.000Z</published>
    <updated>2022-05-23T08:17:48.866Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​首先感谢<a href="https://juejin.cn/user/3790771824108808">__mxin</a>同学的简易版本，没有这个简化版本，我大概率也没办法沉下心来将代码读下去，再次表示感谢，通读下来简化之后的逻辑清晰，只需要对几个JavaScript原生API进行了解，走完代码流程，便了解了核心流程</p><p>代码地址：<a href="https://github.com/vkcyan/code-fragment/tree/master/Reactivity%E7%AE%80%E6%98%93%E7%89%88%E6%BA%90%E7%A0%81">传送门</a></p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">Proxy</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">Reflect</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">WeakMap</a></p><h2 id="核心流程图"><a href="#核心流程图" class="headerlink" title="核心流程图"></a>核心流程图</h2><p>​尝试绘制了一遍代码流程图，主要流程就是初始化时候对reactive，computed，effect的依赖收集，以及在触发set事件的时候，对收集到的依赖的触发</p><p><img src="http://www.vkcyan.top/FjoAy1WA7p8OeSXqZYkrnSeera3j.png" alt="Snipaste_2021-06-15_20-33-48"></p><h2 id="reactive"><a href="#reactive" class="headerlink" title="reactive"></a>reactive</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> object = &#123;</span><br><span class="line">    <span class="attr">r</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">g</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">o</span>: &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="title function_">reactive</span>(object)</span><br></pre></td></tr></table></figure><p>​reactive是一个赋予对象响应式特征的方法，传入的数据会被proxy代理，变量一旦被代理，就将会被加入reactiveMap，以后都会触发reactiveMap内的proxy</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义响应式对象，返回proxy代理对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">object</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">object</span>) &#123;</span><br><span class="line"><span class="comment">// 判断是否已经代理，已经存在直接取自</span></span><br><span class="line">  <span class="keyword">if</span> (reactiveMap.<span class="title function_">has</span>(object)) <span class="keyword">return</span> reactiveMap.<span class="title function_">get</span>(object)</span><br><span class="line"><span class="comment">// 第一次进行处理，进行proxy代理</span></span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(object, &#123;</span><br><span class="line">    <span class="comment">// 处理器对象，定义捕获器</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;get方法&#x27;</span>, target, key)</span><br><span class="line">      <span class="comment">// 针对effect，computed依赖进行处理</span></span><br><span class="line">      <span class="title function_">track</span>(target, key)</span><br><span class="line">      <span class="comment">// 如果当前代理的值为object类型，将会对当前的值再次进行proxy,否则直接获取数据</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> target[key] === <span class="string">&#x27;object&#x27;</span> ? <span class="title function_">reactive</span>(target[key]) : <span class="title class_">Reflect</span>.<span class="title function_">get</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;设置的值&#x27;</span>, ...<span class="variable language_">arguments</span>)</span><br><span class="line">      <span class="comment">// 在set事件中对原本的数据进行修改</span></span><br><span class="line">      <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>)</span><br><span class="line">      <span class="comment">// trigger(target, key)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  reactiveMap.<span class="title function_">set</span>(object, proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成代理的数据</p><img src="http://www.vkcyan.top/Fkt6CdXcoINsKX0ZhgzbaDSn073Z.png" style="zoom:50%;" /><h2 id="effect"><a href="#effect" class="headerlink" title="effect"></a>effect</h2><blockquote><p>effect会在依赖的经过reactive处理后的对象发生变化的时候，自动执行一次回调函数，通常称它为副作用函数</p></blockquote><p>effect的实现是Reactivity最核心的部分，也是比较难理解的部分，依赖WeakMap进行实现，如果不了解WeakMap，务必先去看一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap">文档</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> computedObj = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> proxy.<span class="property">r</span> * <span class="number">2</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`proxy.o.a: <span class="subst">$&#123;proxy.o.a&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>初始化的过程中触发effect，将函数fn放入effectStack，同时执行effect中的函数，一旦执行，必定会触发经过reactive代理的get函数，进行数据获取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> effectStack = []  <span class="comment">// 收集副作用函数</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 副作用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 将需要执行的effect入栈</span></span><br><span class="line">    effectStack.<span class="title function_">push</span>(fn)</span><br><span class="line">    <span class="comment">// **** 执行该effect，进入proxy的get拦截 ****</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fn</span>()</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 依赖收集完毕及所有get流程走完，当前effect出栈</span></span><br><span class="line">    effectStack.<span class="title function_">pop</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// get方法触发了track方法</span></span><br><span class="line"><span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">  <span class="title function_">track</span>(target, key)</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖收集</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">  <span class="comment">// 初始化依赖Map</span></span><br><span class="line">  <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 第二层依赖使用Set存放key对应的effect</span></span><br><span class="line">  <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key)</span><br><span class="line">  <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">    targetMap.<span class="title function_">get</span>(target).<span class="title function_">set</span>(key, (dep = <span class="keyword">new</span> <span class="title class_">Set</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取当前栈中的effect存入第二层依赖中</span></span><br><span class="line">  <span class="keyword">const</span> activeEffect = effectStack[effectStack.<span class="property">length</span> - <span class="number">1</span>]</span><br><span class="line">  activeEffect &amp;&amp; dep.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">  <span class="comment">// 最后触发effect函数的finally，将处理完毕的effect进行弹出，完成依赖收集</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化完成后，effect全部完成处理，我们可以看一下targetMap的数据</p><img src="http://www.vkcyan.top/FhXB0sJ9-li2v03asqwdwKAis3Qs.png" style="zoom:50%;" /><p>我们可以看到，变量a与effect中的函数关联在了一起，经过track处理后，effect内部用到的变量都与effect建立了某种关联，至此我们就完成了依赖收集</p><h2 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h2><p>Reactivity计算属性的实现是依赖effect进行实现，仅仅是增加了一个value函数进行包裹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">computed</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">effect</span>(fn)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="变量发生变化"><a href="#变量发生变化" class="headerlink" title="变量发生变化"></a>变量发生变化</h2><p>数据发生变化的时候，例如我们将proxy.o.a&#x3D;1,他是如何完成响应式，以及effect的触发的呢？</p><p>首先一定是触发proxy的set函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">set</span>(target, key)</span><br><span class="line"><span class="comment">// 修改代理的值</span></span><br><span class="line">  <span class="title class_">Reflect</span>.<span class="title function_">set</span>(...<span class="variable language_">arguments</span>) <span class="comment">// 等同于arguments[0][arguments[1]] = arguments[2]</span></span><br><span class="line"><span class="comment">// 触发依赖收集器</span></span><br><span class="line">  <span class="title function_">trigger</span>(target, key)</span><br><span class="line">&#125;,</span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依赖收集触发器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params">target, key</span>) &#123; <span class="comment">// target: &#123;a:1&#125; key: a</span></span><br><span class="line">  <span class="comment">// 获取当前修改的值</span></span><br><span class="line">  <span class="keyword">const</span> depMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="comment">// 开始执行effect方法</span></span><br><span class="line">  <span class="keyword">if</span> (depMap) &#123;</span><br><span class="line">    <span class="comment">// 如果存在，开始寻找Map的value，在通过key找到对应的回调函数</span></span><br><span class="line">    <span class="keyword">const</span> effects = depMap.<span class="title function_">get</span>(key)</span><br><span class="line">    effects &amp;&amp;</span><br><span class="line">      effects.<span class="title function_">forEach</span>(<span class="function">(<span class="params">run</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 执行收集的effect函数</span></span><br><span class="line">        <span class="title function_">run</span>()</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="http://www.vkcyan.top/Fuqeu7ONrETGQS60cJ0quEYeEcha.png" style="zoom:50%;" /><p>至此完成数据的响应式，effect的函数触发完成</p><h2 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h2><p>reactive 创建响应式对象</p><p>effect 副作用函数，存储匿名函数，同时调用自身收集依赖，最后弹出匿名函数</p><p>computed 计算属性，其原理是对effect的包装</p><p>track 收集依赖，绑定变量与使用该变量的effect</p><p>trigger 触发依赖，根据变量触发对应的effect</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​这个文章是一个代码记录贴，希望大家看到可以静下心来看看<a href="https://juejin.cn/user/3790771824108808">__mxin</a>同学的文章，或者<a href="https://github.com/vkcyan/code-fragment/tree/master/Reactivity%E7%AE%80%E6%98%93%E7%89%88%E6%BA%90%E7%A0%81">传送门</a>代码，了解了基础的原理后再去看<a href="https://github.com/vuejs/vue-next/tree/master/packages/reactivity#readme">@vue&#x2F;Reactivity</a>的代码，将会事半功倍；</p><p>​日积月累，将知识变成你的财富吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	首先感谢&lt;a href=&quot;https://juejin.cn/user/3790771824108808&quot;&gt;__mxin&lt;/a&gt;同学的简</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>React17学习记录</title>
    <link href="https://vkcyan.github.io/2021/10/15/react17%E5%AD%A6%E4%B9%A0/"/>
    <id>https://vkcyan.github.io/2021/10/15/react17%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-10-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:16.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么学习React17"><a href="#为什么学习React17" class="headerlink" title="为什么学习React17"></a>为什么学习React17</h2><p>​公司使用的是vue技术栈，并且因为历史原因，以及外部因素，可能不会使用react来做生产环境的项目，最近vue3走上正轨，大家都需要抛弃vue2.x的编码思想，在vue3中，hook思想开始越发明显，所以学习react17也是想借此加深对hook的理解，同时取长补短，综合vue与react的优点，在实际的开发中更好的完成开发任务</p><h2 id="useState的疑问"><a href="#useState的疑问" class="headerlink" title="useState的疑问"></a>useState的疑问</h2><p>​    关于react的useState有一个疑问，useState里面是一个对象，我想要修改对象里面的某一个字段，每次都需要<code>...state</code>,把之前的数据预先填入，这做法感觉有点傻</p><h2 id="自定义hook"><a href="#自定义hook" class="headerlink" title="自定义hook"></a>自定义hook</h2><p>hook是在特定换下调用自己的代码</p><p>实现自定义hook必须使用关键字<code>use</code>开头，这是ESLint的规则</p><p>自定义hook一般用于需要持续监听的值，而针对纯工具函数则不需要进行处理</p><h3 id="实现一个hook风格的防抖函数"><a href="#实现一个hook风格的防抖函数" class="headerlink" title="实现一个hook风格的防抖函数"></a>实现一个hook风格的防抖函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const [param, setParam] = useState(&#x27;ha ha&#x27;);</span><br><span class="line">const debounceParam = useDebounce(param, 2000);</span><br><span class="line"></span><br><span class="line">useEffect(() =&gt; &#123;</span><br><span class="line">  console.log(&#x27;log log&#x27;)</span><br><span class="line">&#125;, [debounceParam]);</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 去抖函数</span><br><span class="line"> * @param value 监听的值</span><br><span class="line"> * @param delay 防抖时间</span><br><span class="line"> * @returns 变化后变量</span><br><span class="line"> */</span><br><span class="line">export function useDebounce(value, delay) &#123;</span><br><span class="line">  // 声明一个保存防抖结果的字段</span><br><span class="line">  const [debounceValue, setDebounceValue] = useState(value);</span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    // 每次value,delay发生变化的时候生成一个定时器</span><br><span class="line">    const timeout = setTimeout(() =&gt; &#123;</span><br><span class="line">      setDebounceValue(value);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">    // 在执行下一个useEffect之前,会执行上一个useEffect的返回函数</span><br><span class="line">    return () =&gt; clearTimeout(timeout);</span><br><span class="line">  &#125;, [value, delay]);</span><br><span class="line">  return debounceValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>useDebounce是一个hook风格的函数</li><li>每次param发生变化都会触发useDebounce中的useEffect</li><li>而在2000ms时间内如果重复触发就会执行上一个effect return的函数</li><li>进而不修改debounceValue，直到2000ms内无任何操作，触发setDebounceValue修改属性，改变了debounceParam</li><li>第一个useEffect触发，触发打印<code>log log</code></li></ul><h2 id="react中使用TS做代码静态检查"><a href="#react中使用TS做代码静态检查" class="headerlink" title="react中使用TS做代码静态检查"></a>react中使用TS做代码静态检查</h2><ul><li>函数类型 <code>fn: () =&gt; void</code></li><li>any类型是危险的，应当尽量不用，但是对于模糊的类型，我们可以在标注类型为unknown，这样就不会对赋值做任何校验，但是ts不允许我们对unknown类型做出任何处理，所以可以吧unknown理解成为加强版any</li><li>针对参数不固定，返回值不确定的场景，应当使用泛型，在方法名称后面加<T>,然后在参数上指定某一个为T，则T跟这参数的类型而变化</li></ul><h2 id="自定义hook-useArray"><a href="#自定义hook-useArray" class="headerlink" title="自定义hook useArray"></a>自定义hook useArray</h2><blockquote><p>传入一个hook，我们返回针对这个hook的可使用的对应方法，总体来说实现一个hook还是一个比较简单</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * hook处理的Array</span><br><span class="line"> * @param value</span><br><span class="line"> * @returns</span><br><span class="line"> */</span><br><span class="line">export function useArray&lt;V&gt;(value: V[]) &#123;</span><br><span class="line">  const [arrayValue, setArrayValue] = useState(value);</span><br><span class="line">  const clear = () =&gt; &#123;</span><br><span class="line">    setArrayValue([]);</span><br><span class="line">  &#125;;</span><br><span class="line">  const add = (value: V) =&gt; &#123;</span><br><span class="line">    setArrayValue([...arrayValue, value]);</span><br><span class="line">  &#125;;</span><br><span class="line">  const removeIndex = (index: number) =&gt; &#123;</span><br><span class="line">    let value = [...arrayValue];</span><br><span class="line">    value.splice(index, 1);</span><br><span class="line">    setArrayValue(value);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  return &#123;</span><br><span class="line">    value: arrayValue,</span><br><span class="line">    add,</span><br><span class="line">    clear,</span><br><span class="line">    removeIndex,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关于TS中interface的属性继承"><a href="#关于TS中interface的属性继承" class="headerlink" title="关于TS中interface的属性继承"></a>关于TS中interface的属性继承</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">interface a &#123;</span><br><span class="line">  <span class="attr">a</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface b <span class="keyword">extends</span> a &#123;</span><br><span class="line">  <span class="attr">b</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: b = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">p: a</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">test</span>(c); <span class="comment">// 不会报错，因为b包含了a，所以这个传入b也不会出现错误</span></span><br></pre></td></tr></table></figure><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><blockquote><p>useContext主要用于多个组件之间共享状态</p></blockquote><p>在<strong>parent</strong>组件中存在<strong>child1</strong>.<strong>child2</strong>，<strong>child3</strong>组件，我们希望这些组件之前都共享一个状态1</p><ol><li>生成createContext</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TestContext</span> = <span class="title class_">React</span>.<span class="title function_">createContext</span>(&#123;&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用createContext.Provider包裹<strong>parent</strong>组件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;TestContext.Provider </span><br><span class="line">value=&#123;&#123;</span><br><span class="line">username: &#x27;我是变量&#x27;,</span><br><span class="line">&#125;&#125;</span><br><span class="line">&gt;</span><br><span class="line">&lt;div className=&quot;parent&quot;&gt;</span><br><span class="line">&lt;Child1 /&gt;</span><br><span class="line">&lt;Child2 /&gt;</span><br><span class="line">    &lt;Child3 /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;TestContext.Provider/&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>在子组件中就可以使用useContext来获取父级创建的TestContext</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Child1 = () =&gt; &#123;</span><br><span class="line">const &#123; username &#125; = useContext(TestContext);</span><br><span class="line">return (</span><br><span class="line">&lt;div className=&quot;child1&quot;&gt;</span><br><span class="line">      &lt;p&gt;1 message for &#123;username&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过useContext就可以做到子组件共享一个状态，如果状态被改变，所有使用变量的都放都会发生变化</p><h2 id="TS类型的一些知识"><a href="#TS类型的一些知识" class="headerlink" title="TS类型的一些知识"></a>TS类型的一些知识</h2><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h3><blockquote><p>获取函数的全部参数，并且以元祖类型进行返回,Utiltity Types</p></blockquote><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">number</span>, c: <span class="built_in">number</span>[], d: <span class="built_in">any</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接继承test函数的全部参数类型</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">testPlus</span>(<span class="params">...[a, b, c, d]: Parameters&lt;<span class="keyword">typeof</span> test&gt;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, c, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">string</span> | <span class="built_in">number</span>; <span class="comment">// 可以是多种类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象联合类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="attr">aType</span>:<span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:aType</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以通过interface可以实现类型功能，但是指定单个类型是无法实现的，但是interface的全部功能type都可以实现</span></span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line"><span class="keyword">interface</span> aaa  &#123;</span><br><span class="line"><span class="attr">a</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> aaa = &#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上2种效果都是一致的</span></span><br></pre></td></tr></table></figure><h3 id="js的typeof与ts的typeof"><a href="#js的typeof与ts的typeof" class="headerlink" title="js的typeof与ts的typeof"></a>js的typeof与ts的typeof</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// js: typeof runtime阶段运行 检查参数的类型</span></span><br><span class="line"><span class="comment">// ts: typeof 静态检查阶段运行 识别函数的参数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Partial与Omit关键字"><a href="#Partial与Omit关键字" class="headerlink" title="Partial与Omit关键字"></a>Partial与Omit关键字</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Preson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="title class_">String</span>;</span><br><span class="line">  <span class="attr">sex</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Partial关键字会将传入的类型处理成为非必填</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">xiaoMin</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">Preson</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&quot;非必填&quot;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;非必填&quot;</span>,</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&quot;非必填&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Omit 会删除第一个参数 类型 中的第二个参数中的变量 并返回结果 例如这里删除 name age</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">shenMiRen</span>: <span class="title class_">Omit</span>&lt;<span class="title class_">Preson</span>, <span class="string">&quot;age&quot;</span> | <span class="string">&quot;name&quot;</span>&gt; = &#123; <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="关于css一些不知道的"><a href="#关于css一些不知道的" class="headerlink" title="关于css一些不知道的"></a>关于css一些不知道的</h2><h4 id="关于rem"><a href="#关于rem" class="headerlink" title="关于rem"></a>关于rem</h4><p>em表示相对于父级的font-size</p><p>rem表示相对于根元素html的font-size</p><p>正常默认font-size为16px，那么1rem &#x3D;&#x3D;&#x3D; 16px</p><p>如果希望rem的比例自定义只需要将html的font-size设置为对应的百分就行，例如设置为62.5的时候1rem &#x3D;&#x3D;&#x3D; 10px</p><h3 id="关于vh"><a href="#关于vh" class="headerlink" title="关于vh"></a>关于vh</h3><p>vh的全称为viewport height，100vh就是代表视口的高度</p><h2 id="emotion"><a href="#emotion" class="headerlink" title="emotion"></a>emotion</h2><blockquote><p>emotion是一个css in js的方案，也就是使用js来写css代码，这样的话就可以在css中直接写逻辑</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styled <span class="keyword">from</span> <span class="string">&quot;@emotion/styled&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">Row</span> = styled.<span class="property">div</span>&lt;&#123;</span><br><span class="line">  <span class="attr">gap</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;&gt;<span class="string">`</span></span><br><span class="line"><span class="string">  display: flex;</span></span><br><span class="line"><span class="string">  align-items: center;</span></span><br><span class="line"><span class="string">  &gt; * &#123;</span></span><br><span class="line"><span class="string">    margin-top: 0 !important;</span></span><br><span class="line"><span class="string">    margin-bottom: 0 !important;</span></span><br><span class="line"><span class="string">    margin-right: <span class="subst">$&#123;(props) =&gt; <span class="string">`<span class="subst">$&#123;props.gap&#125;</span>rem`</span>&#125;</span>;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><h2 id="自定义hook-useAsync的实现"><a href="#自定义hook-useAsync的实现" class="headerlink" title="自定义hook useAsync的实现"></a>自定义hook useAsync的实现</h2><blockquote><p>useAsync可以理解为针对请求体再次封装，经过封装之后的请求体，自带请求进度，以及针对catch更加优雅的处理方式</p></blockquote><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">State</span>&lt;D&gt; &#123;</span><br><span class="line">  <span class="attr">error</span>: <span class="title class_">Error</span> | <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">data</span>: D | <span class="literal">null</span>;</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;idle&quot;</span> | <span class="string">&quot;loading&quot;</span> | <span class="string">&quot;error&quot;</span> | <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立初始化的值</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">defaultState</span>: <span class="title class_">State</span>&lt;<span class="literal">null</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;idle&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useAsync = &lt;D&gt;<span class="function">(<span class="params">initState?: State&lt;D&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 默认状态</span></span><br><span class="line">  <span class="keyword">const</span> [state, setState] = useState&lt;<span class="title class_">State</span>&lt;D&gt;&gt;(&#123;</span><br><span class="line">    ...defaultState,</span><br><span class="line">    ...initState,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 请求成功的调用</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setData</span> = (<span class="params">data: D</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setState</span>(&#123;</span><br><span class="line">      data,</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 请求失败的调用</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setError</span> = (<span class="params">error: <span class="built_in">Error</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">error</span>: error,</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 请求开始的调用</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setLoading</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">data</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">      <span class="attr">status</span>: <span class="string">&quot;loading&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 对外实际执行的函数</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">run</span> = (<span class="params">promise: <span class="built_in">Promise</span>&lt;D&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!promise || !promise.<span class="property">then</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;请传入 promise 类型数据&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setLoading</span>();</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setData</span>(data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">setError</span>(err);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">isIdle</span>: state.<span class="property">status</span> == <span class="string">&quot;idle&quot;</span>,</span><br><span class="line">    <span class="attr">isLoading</span>: state.<span class="property">status</span> == <span class="string">&quot;loading&quot;</span>,</span><br><span class="line">    <span class="attr">isError</span>: state.<span class="property">status</span> == <span class="string">&quot;error&quot;</span>,</span><br><span class="line">    <span class="attr">isSuccess</span>: state.<span class="property">status</span> == <span class="string">&quot;success&quot;</span>,</span><br><span class="line">    run,</span><br><span class="line">    setData,</span><br><span class="line">    setLoading,</span><br><span class="line">    setError,</span><br><span class="line">    ...state,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>使用阶段</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 逻辑顶部应用相关逻辑</span></span><br><span class="line">  <span class="keyword">const</span> projectData = useAsync&lt;any[]&gt;(); <span class="comment">// 泛型为后台返回的数据的类型</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  启动请求，传入请求体</span></span><br><span class="line">projectData.<span class="title function_">run</span>(request);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求完成后，projectData中的数据状态会被同步更新</span></span><br><span class="line"><span class="keyword">let</span> &#123; data, isLoading,isError,...other&#125; = projectData </span><br></pre></td></tr></table></figure><h2 id="react中实现捕捉边界错误"><a href="#react中实现捕捉边界错误" class="headerlink" title="react中实现捕捉边界错误"></a>react中实现捕捉边界错误</h2><blockquote><p>关于错误边界的概念在react官网中是这样描述的，组件内的JavaScript错误会导致React的内部状态被破坏，并且在下一次的渲染时会产生<strong>可能无法追踪的错误</strong>，但是部分ui的JavaScript错误不应该导致整个应用的崩溃，所以react16中引入了错误边界的概念，</p><p>错误边界是一种react组件，最终组件可以捕获发生在其朱组件树任何位置的JavaScript错误，并打印错误，同时展示降级ui，而并不会渲染发生崩溃的子组件树，错误边界在渲染期间，生命周期方法和整个组件数的构造函数中捕获错误</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">ReactNode</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"></span><br><span class="line">type <span class="title class_">FallBackRender</span> = <span class="function">(<span class="params">props: &#123; error: <span class="built_in">Error</span> | <span class="literal">null</span> &#125;</span>) =&gt;</span> <span class="title class_">React</span>.<span class="property">ReactElement</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 2 两种写法一致</span></span><br><span class="line">type <span class="title class_">Components1</span> = &#123; <span class="attr">children</span>: <span class="title class_">ReactNode</span>; <span class="attr">fallbackRender</span>: <span class="title class_">FallBackRender</span> &#125;;</span><br><span class="line">type <span class="title class_">Components2</span> = <span class="title class_">React</span>.<span class="property">PropsWithChildren</span>&lt;&#123; <span class="attr">fallbackRender</span>: <span class="title class_">FallBackRender</span> &#125;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ErrorBoundary</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;</span><br><span class="line">  <span class="title class_">Components2</span>,</span><br><span class="line">  &#123; <span class="attr">error</span>: <span class="title class_">Error</span> | <span class="literal">null</span> &#125;</span><br><span class="line">&gt; &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">error</span>: <span class="literal">null</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 当子组件抛出异常, state中的errir就会被调用</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">getDerivedStateFromError</span>(<span class="params">error: <span class="built_in">Error</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; error &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; error &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; fallbackRender, children &#125; = <span class="variable language_">this</span>.<span class="property">props</span>;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;错误执行&quot;</span>, error);</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">fallbackRender</span>(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<strong>App.tsx</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">ErrorBoundary</span> fallbackRender=&#123;fallPageErrorFallback&#125;&gt;</span><br><span class="line">&#123;user ? <span class="language-xml"><span class="tag">&lt;<span class="name">AuthenicatedApp</span> /&gt;</span></span> : <span class="language-xml"><span class="tag">&lt;<span class="name">UnAuthenicated</span> /&gt;</span></span>&#125;</span><br><span class="line">&lt;/<span class="title class_">ErrorBoundary</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发生错误的时候就会渲染这个dom</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">fallPageErrorFallback</span> = (<span class="params">&#123; error &#125;: &#123; error: <span class="built_in">Error</span> | <span class="literal">null</span> &#125;</span>) =&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>请求失败了,错误信息&#123;error&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="阶段性结束"><a href="#阶段性结束" class="headerlink" title="阶段性结束"></a>阶段性结束</h2><p>  关于react hook的理念学习已经结束了，这段时间学习来看，确实react在很多方面更加易于理解，更加工程化，同时也学会了很多ts的知识，一直以来ts在我手中都是anyscript，本次学习让我对ts的运用更加熟练；在这个过程中也学会了很多hook相关的理念以及实例，并且可以带着这思想去优化项目代码</p><p>  可惜我是一名vuer，继续学习react的实际编码，意义已经不是很大，所以关于这个课程的学习，本次告一段落；通过本次学习，非常深刻的体会到了hook的优雅，后面会深入学习vue3，在vue3中将hook与业务结合，让代码更加健壮</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么学习React17&quot;&gt;&lt;a href=&quot;#为什么学习React17&quot; class=&quot;headerlink&quot; title=&quot;为什么学习React17&quot;&gt;&lt;/a&gt;为什么学习React17&lt;/h2&gt;&lt;p&gt;​		公司使用的是vue技术栈，并且因为历史原因，以及外部因</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS文件格式相互转换</title>
    <link href="https://vkcyan.github.io/2021/06/15/JavaScript%20%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%BA%92%E8%BD%AC/"/>
    <id>https://vkcyan.github.io/2021/06/15/JavaScript%20%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E4%BA%92%E8%BD%AC/</id>
    <published>2021-06-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:06.432Z</updated>
    
    <content type="html"><![CDATA[<h3 id="base64-转-File"><a href="#base64-转-File" class="headerlink" title="base64 转 File"></a>base64 转 File</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * base64转file文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">dataurl</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">filename</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">dataURLtoFile</span>(<span class="params">dataurl: string, filename: string</span>) &#123;</span><br><span class="line">  <span class="comment">// 获取到base64编码</span></span><br><span class="line">  <span class="keyword">const</span> arr = dataurl.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="comment">// 将base64编码转为字符串</span></span><br><span class="line">  <span class="keyword">const</span> bstr = <span class="variable language_">window</span>.<span class="title function_">atob</span>(arr[<span class="number">1</span>])</span><br><span class="line">  <span class="keyword">let</span> n = bstr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">const</span> u8arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(n) <span class="comment">// 创建初始化为0的，包含length个元素的无符号整型数组</span></span><br><span class="line">  <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">    u8arr[n] = bstr.<span class="title function_">charCodeAt</span>(n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">File</span>([u8arr], filename, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="base64-转-blob"><a href="#base64-转-blob" class="headerlink" title="base64 转 blob"></a>base64 转 blob</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * base64转blob文件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">dataURI</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">dataURItoBlob</span>(<span class="params">dataURI</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> mimeString = dataURI.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&#x27;:&#x27;</span>)[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&#x27;;&#x27;</span>)[<span class="number">0</span>] <span class="comment">// mime类型</span></span><br><span class="line">  <span class="keyword">var</span> byteString = <span class="title function_">atob</span>(dataURI.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>]) <span class="comment">//base64 解码</span></span><br><span class="line">  <span class="keyword">var</span> arrayBuffer = <span class="keyword">new</span> <span class="title class_">ArrayBuffer</span>(byteString.<span class="property">length</span>) <span class="comment">//创建缓冲数组</span></span><br><span class="line">  <span class="keyword">var</span> intArray = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer) <span class="comment">//创建视图</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteString.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    intArray[i] = byteString.<span class="title function_">charCodeAt</span>(i)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Blob</span>([intArray], &#123; <span class="attr">type</span>: mimeString &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="blob转url"><a href="#blob转url" class="headerlink" title="blob转url"></a>blob转url</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * blob 转 url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">base64</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">contentType</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">translateBase64ImgToBlob</span>(<span class="params">base64, contentType</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> arr = base64.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>) <span class="comment">//去掉base64格式图片的头部</span></span><br><span class="line">  <span class="keyword">var</span> bstr = <span class="title function_">atob</span>(arr[<span class="number">1</span>]) <span class="comment">//atob()方法将数据解码</span></span><br><span class="line">  <span class="keyword">var</span> leng = bstr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">var</span> u8arr = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(leng)</span><br><span class="line">  <span class="keyword">while</span> (leng--) &#123;</span><br><span class="line">    u8arr[leng] = bstr.<span class="title function_">charCodeAt</span>(leng) <span class="comment">//返回指定位置的字符的 Unicode 编码</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> blob = <span class="keyword">new</span> <span class="title class_">Blob</span>([u8arr], &#123; <span class="attr">type</span>: contentType &#125;)</span><br><span class="line">  <span class="keyword">var</span> <span class="attr">blobImg</span>: any = &#123;&#125;</span><br><span class="line">  blobImg.<span class="property">url</span> = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob) <span class="comment">//创建URL</span></span><br><span class="line">  blobImg.<span class="property">name</span> = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>() + <span class="string">&#x27;.png&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> blobImg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;base64-转-File&quot;&gt;&lt;a href=&quot;#base64-转-File&quot; class=&quot;headerlink&quot; title=&quot;base64 转 File&quot;&gt;&lt;/a&gt;base64 转 File&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;</summary>
      
    
    
    
    <category term="JavaScript-2021" scheme="https://vkcyan.github.io/categories/JavaScript-2021/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
