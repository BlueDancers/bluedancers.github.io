<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vkcya Blog</title>
  
  
  <link href="https://bluedancers.github.io/atom.xml" rel="self"/>
  
  <link href="https://bluedancers.github.io/"/>
  <updated>2023-02-18T06:21:38.073Z</updated>
  <id>https://bluedancers.github.io/</id>
  
  <author>
    <name>bluedancers</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>（7）vue3 runtime-dom源码解析</title>
    <link href="https://bluedancers.github.io/2023/02/18/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%887%EF%BC%89vue3%20runtime-dom%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://bluedancers.github.io/2023/02/18/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%887%EF%BC%89vue3%20runtime-dom%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-17T16:00:00.000Z</published>
    <updated>2023-02-18T06:21:38.073Z</updated>
    
    <content type="html"><![CDATA[<p>html叫做DOM节点数</p><p>vdom是正式dom的JavaScript数据结构的描述</p><p>在运行时runtime中，渲染器rerender会遍历整个虚拟dom树，并根据此结构构建正式dom树，这个过程我们称之为mount</p><p>当vnode发生变化的时候，，我们会对比旧的vnode与新的vnode，找出他们的区别，并应用于真实dom上，这个过程我们称之为patch。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;html叫做DOM节点数&lt;/p&gt;
&lt;p&gt;vdom是正式dom的JavaScript数据结构的描述&lt;/p&gt;
&lt;p&gt;在运行时runtime中，渲染器rerender会遍历整个虚拟dom树，并根据此结构构建正式dom树，这个过程我们称之为mount&lt;/p&gt;
&lt;p&gt;当vnode发生</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（6）vue3 reactivity-watch源码解析</title>
    <link href="https://bluedancers.github.io/2023/02/14/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%886%EF%BC%89vue3%20reactivity-watch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://bluedancers.github.io/2023/02/14/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%886%EF%BC%89vue3%20reactivity-watch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-13T16:00:00.000Z</published>
    <updated>2023-02-18T06:21:40.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​上一章我们说完了computed的实现逻辑，今天就让我们来看看他的好兄弟watch是如何实现的；</p><p>watch即为监听的意思：监听响应式数据，每当状态发生变化，就会触发回调函数。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>watch的源码并不在reactivity中，而是在runtime-core中</p><h3 id="watch初始化"><a href="#watch初始化" class="headerlink" title="watch初始化"></a>watch初始化</h3><h3 id="监听值触发set事件"><a href="#监听值触发set事件" class="headerlink" title="监听值触发set事件"></a>监听值触发set事件</h3><ol><li>watch初始化，生成ReactiveEffect，并将watch的匿名函数放（cb）入ReactiveEffect的scheduler中</li><li>触发一次watch的第一个参数，完成依赖收集（proxy与watch建立联系）</li><li>proxy发生变化，触发watch的ReactiveEffect的scheduler，也就是watch初始化事情传入的cb</li><li>cb开始执行，完成watch监听函数的触发。</li></ol><p>watch的复杂并不在于核心逻辑的复杂性，而是其内部进行了大量兼容性判断，导致代码的复杂度极高。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	上一章我们说完了computed的实现逻辑，今天就让我们来看看他的好兄弟watch是如何实现的；&lt;/p&gt;
&lt;p&gt;watch即为监听的意思</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（4）vue3 reactivity-ref源码解析</title>
    <link href="https://bluedancers.github.io/2023/02/03/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%884%EF%BC%89vue3%20reactivity-ref%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://bluedancers.github.io/2023/02/03/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%884%EF%BC%89vue3%20reactivity-ref%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-02T16:00:00.000Z</published>
    <updated>2023-02-14T05:34:12.366Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​在上一篇文章中，我们了解了<strong>reactive</strong>的实现原理，也发现了<strong>reactive</strong>在使用上的局限性，也因为此<strong>Vue3</strong>提供了一个新的API <strong>ref</strong>，面对<strong>proxy</strong>无法代理基础类型数据的问题，<strong>ref</strong>是如何解决的呢？</p><p>本文我们带着问题一起走进ref的世界。</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>​为了降低大家理解<strong>ref</strong>源码的难度，我们在正式源码阅读之前，先学习一下JavaScript的 <strong>class</strong>以及修饰符<strong>get set</strong>相关知识点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Obj</span> &#123;</span><br><span class="line">  _value = <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value的get行为触发&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value的set行为触发&#x27;</span>, val)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Obj</span>()</span><br></pre></td></tr></table></figure><p>get： 被get修饰的方法，允许通过<strong>属性读取</strong>的方式，触发方法</p><p>set： 被set修饰的方法，允许通过<strong>属性赋值</strong>的方式，触发方法</p><p>当访问<code>obj.value</code>的时候</p><p>会触发被<strong>get</strong>修饰的**value()**，打印log，并得到返回值‘张三’</p><p>当为<code>obj.value</code>赋值的时候</p><p>将会触发被<strong>set</strong>修饰的**value()**方法，打印log，并完成变量_value的赋值</p><p>​看到这里，大家是否有点似曾相识的感觉，<strong>访问与赋值触发get set</strong>，和我们被<strong>proxy</strong>代理的对象很相似，大家能理解到这一点就足够了。</p><p>​接下来，我们正式开始源码分析。</p><h2 id="Ref基础类型"><a href="#Ref基础类型" class="headerlink" title="Ref基础类型"></a>Ref基础类型</h2><p>​使用过<strong>vue3</strong>的都知道，例如<strong>string number</strong>这样的基础类型，必须使用<strong>ref</strong>完成响应式，不过复杂类型<strong>ref</strong>也可以完成响应式。</p><p>​而这2种情况，ref的内部逻辑是存在一些差别的，我们先从相对简单的基础类型开始。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; ref, effect &#125; = <span class="title class_">Vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="title function_">ref</span>(<span class="string">&#x27;卖鱼强&#x27;</span>)</span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">innerText</span> = name.<span class="property">value</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  name.<span class="property">value</span> = <span class="string">&#x27;狂飙强&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>​上述代码现象：页面初始化的时候显示“卖鱼强”，2s之后，依赖触发，变成了“狂飙强”。通过现象与我们之前分析reactive的经验，这个我们可以将ref分为三大模块 <strong>初始化</strong> <strong>读取（依赖收集）</strong> <strong>赋值（依赖触发）</strong></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p><code>packages/reactivity/src/ref.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">ref</span>(<span class="params">value?: <span class="built_in">unknown</span></span>) &#123;</span><br><span class="line">  <span class="comment">// ref 实际上就是createRef</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createRef</span>(value, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createRef</span>(<span class="params">rawValue: <span class="built_in">unknown</span>, shallow: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果已经是ref，则直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">isRef</span>(rawValue)) &#123;</span><br><span class="line">    <span class="keyword">return</span> rawValue</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ref API 参数shallow 为 false 含义是 代理是否是浅层的,浅层则只会代理第一层数据</span></span><br><span class="line">  <span class="comment">// ref 就是RefImpl的实例</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RefImpl</span>(rawValue, shallow)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_value</span>: T <span class="comment">// 被代理对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_rawValue</span>: T <span class="comment">// 原始对象</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span> <span class="comment">// Dep是reative阶段声明的Set, 内部存放的是ReactiveEffect</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span> <span class="comment">// 将RefImpl实例默认为true, 未来的isRef判断就一定为true</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isShallow: <span class="built_in">boolean</span></span>) &#123; </span><br><span class="line">    <span class="comment">// 寻找原始类型，如果是基础类型不会做任何处理</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = <span class="title function_">toRaw</span>(value) </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 如果value是基础类型，toReactive内部不会做任何处理</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(value)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    newVal = <span class="title function_">toRaw</span>(newVal)</span><br><span class="line">    <span class="comment">// 判断新旧值是否一致，不一致进入if</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">      <span class="comment">// 每次value的值发生修改的时候，都保存一下原始对象</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_rawValue</span> = newVal</span><br><span class="line">     <span class="comment">// 如果value是基础类型 toReactive不会做任何处理</span></span><br><span class="line">     <span class="comment">// 如果value是复杂类型，则重新进行proxy处理</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(newVal)</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 依赖触发，后面单独说</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​通过源码分析，我们可以发现我们使用ref的本质就是<code>new RefImpl</code>，在RefImpl的内部，如果是基础类型，则通过class本身的get set完成对读取与赋值的操作的监听，然后更新RefImpl的_value，实现响应式</p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><p>调用<code>name.value</code>的时候，会触发<strong>RefImpl</strong>的**get value()**，方法内部返回最新的_value，完成读取。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// trackRefValue(this) // 依赖收集，后面单独说</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p><code>name.value</code>发生赋值的时候，会触发<strong>RefImpl</strong>的**set value()**方法，方法内部进行_value的赋值，完成数据更新。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断新旧值是否一致，不一致进入if</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">    <span class="comment">// 如果value是基础类型 toReactive不会做任何处理</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(newVal)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// triggerRefValue(this)// 依赖触发，后面单独说</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h3><h4 id="依赖收集"><a href="#依赖收集" class="headerlink" title="依赖收集"></a>依赖收集</h4><p>​根据我们解读<strong>reactive</strong>的源码经验，我们可以猜到，<strong>ref</strong>一定是在<strong>get</strong>中完成依赖收集；<strong>effect</strong>触发，内部<strong>fn</strong>被保存到<strong>activeEffect</strong>中，并触发<strong>fn</strong>，<strong>fn</strong>访问了<code>name.value</code>，触发了<strong>ref</strong>的<strong>get</strong>行为，所以接下来我们前往<strong>RefImpl</strong>实例中的<strong>get</strong>中，其内部是符合完成依赖收集的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// 依赖收集函数 将当前RefImpl实例传入方法</span></span><br><span class="line">  <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackRefValue</span>(<span class="params">ref</span>) &#123;</span><br><span class="line">  <span class="comment">// shouldTrack一定为true，activeEffect在effect执行阶段保存了fn，所以也一定为true</span></span><br><span class="line">  <span class="keyword">if</span> (shouldTrack &amp;&amp; activeEffect) &#123;</span><br><span class="line">    <span class="comment">// createDep我们在reactive中见过，含义为创建一个Set</span></span><br><span class="line">    <span class="comment">// 所以这个实际函数是给RefImpl实例的dep赋值为Set，然后在传入trackEffects方法</span></span><br><span class="line">  <span class="title function_">trackEffects</span>(ref.<span class="property">dep</span> || (ref.<span class="property">dep</span> = <span class="title function_">createDep</span>()))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackEffects</span>(<span class="params">dep: Dep,</span>) &#123;</span><br><span class="line">  <span class="comment">// 将当前activeEffect，也就是effect的fn，保存到当前RefImpl实例的dep中，effect成功被ref依赖收集到实例的dep中</span></span><br><span class="line"> dep.<span class="title function_">add</span>(activeEffect)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上源码，我们可以发现，他们都公用了<strong>activeEffect</strong>部分的逻辑，但是<strong>ref</strong>依赖收集的方式与<strong>reactive</strong>是存在一些差别的</p><ul><li><strong>reactive</strong>的依赖收集通过<strong>WeakMap</strong>，完成<strong>属性、变量与effect</strong>的绑定</li><li><strong>ref</strong>则通过将相关的<strong>effect</strong>保存到自身实例内部的dep变量中，进而完成依赖收集</li></ul><h4 id="依赖触发"><a href="#依赖触发" class="headerlink" title="依赖触发"></a>依赖触发</h4><p>​若干时间后，<code>name.value</code>的值修改，触发<strong>RefImpl</strong>实例<strong>set</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(newVal, <span class="variable language_">this</span>.<span class="property">_rawValue</span>)) &#123;</span><br><span class="line">    <span class="comment">// 完成赋值</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(newVal)</span><br><span class="line">    <span class="comment">// 依赖触发</span></span><br><span class="line">    <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerRefValue</span>(<span class="params">ref: RefBase&lt;<span class="built_in">any</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (ref.<span class="property">dep</span>) &#123; <span class="comment">// dep为依赖收集阶段收集到的依赖，内部为effect的fn</span></span><br><span class="line">    <span class="title function_">triggerEffects</span>(ref.<span class="property">dep</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerEffects</span>(<span class="params">dep: Dep</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> effects = <span class="title function_">isArray</span>(dep) ? dep : [...dep] <span class="comment">// 转为数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> effect <span class="keyword">of</span> effects) &#123;</span><br><span class="line">    <span class="comment">// 进入依赖触发函数</span></span><br><span class="line">      <span class="title function_">triggerEffect</span>(effect)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">triggerEffect</span>(<span class="params">effect: ReactiveEffect</span>) &#123;</span><br><span class="line">  <span class="comment">// 依次通过run触发被收集的effect的fn，至此完成依赖触发工作</span></span><br><span class="line">  effect.<span class="title function_">run</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​到此为止，我们完成了<strong>ref</strong>为基础类型的情况下，响应式相关逻辑。相比较于<strong>reactive</strong>，逻辑要稍微简单一点，因为该场景下，相关<strong>effect</strong>函数被实例本身的<strong>dep</strong>管理，没有构建复杂的<strong>WeakMap</strong>对象。</p><p>​<strong>ref</strong>与<strong>reactive</strong>的收集与触发的逻辑也不相同，其依赖收集与依赖触发的上层逻辑有所差别，<strong>ref通过set value手动触发</strong>、<strong>reactive通过字段的赋值自动触发set</strong>，然后找到需要触发的依赖，完成依赖触发。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​到此为止，我们基础类型场景的<strong>ref</strong>源码解读就结束了，我们简单做一下总结</p><ul><li>ref实际上是一个<strong>class</strong> <strong>RefImpl</strong>的实例</li><li>数据响应并不是通过<strong>proxy</strong>实现，而是通过<strong>class</strong> 的<strong>get</strong> <strong>set</strong>修饰符实现</li><li>依赖收集、触发并不是通过<strong>WeakMap</strong>实现，而是通过<strong>RefImpl</strong>实例的变量<strong>dep</strong>实现</li></ul><h2 id="Ref复杂类型"><a href="#Ref复杂类型" class="headerlink" title="Ref复杂类型"></a>Ref复杂类型</h2><p>​我们就想使用reactiv一样使用ref即可</p><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; ref, effect &#125; = <span class="title class_">Vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;卖鱼强&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">innerText</span> = obj.<span class="property">value</span>.<span class="property">name</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  obj.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;狂飙强&#x27;</span></span><br><span class="line">&#125;, <span class="number">4000</span>)</span><br></pre></td></tr></table></figure><h3 id="Ref初始化"><a href="#Ref初始化" class="headerlink" title="Ref初始化"></a>Ref初始化</h3><p>首先依旧是进入<strong>ref</strong>函数中，开始<strong>new RefImpl</strong>，前面流程一致，所以我们进入<strong>RefImpl</strong>内部</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_value</span>: T <span class="comment">// 被代理对象</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_rawValue</span>: T</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span> <span class="comment">// Dep是reative阶段声明的Set,内部存放的是ReactiveEffect</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span> <span class="comment">// 将RefImpl的实例全部置为true,下次isRef判断就会为true</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value: T, <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isShallow: <span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_rawValue</span> = <span class="title function_">toRaw</span>(value) <span class="comment">// toRaw 获取原始数据</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="title function_">toReactive</span>(value) <span class="comment">// 跳转到toReactive函数中 并且最终会获取到一个proxy对象</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toReactive = &lt;T <span class="keyword">extends</span> <span class="built_in">unknown</span>&gt;(<span class="attr">value</span>: T): <span class="function"><span class="params">T</span> =&gt;</span></span><br><span class="line">  <span class="title function_">isObject</span>(value) ? <span class="title function_">reactive</span>(value) : value <span class="comment">// value为object，进入reactive(value)逻辑 最终返回一个proxy的对象</span></span><br></pre></td></tr></table></figure><p>当<strong>ref</strong>的<strong>value</strong>是一个<strong>object</strong>的时候，我们可以发现，在<strong>RefImpl</strong>的<strong>constructor</strong>逻辑中，<strong>value</strong>被<strong>reactive API</strong>处理成了<strong>proxy</strong>对象，也就是说，此时ref内部的**_value<strong>实际上就是一个</strong>reactive**。</p><h3 id="读取-1"><a href="#读取-1" class="headerlink" title="读取"></a>读取</h3><p>调用<code>obj.value.name</code>的时候</p><p>​首先会触发<strong>ref</strong>的<strong>get</strong>方法，获取<code>obj.value</code>，而object类型的value在创建实例阶段，已经被toReactive处理成了proxy，所以接下来，会再触发<strong>reactive</strong>的<strong>get</strong>方法，获取<code>name</code></p><p>​也就是说，读取阶段，实际上触发了2次<strong>get</strong>，一次是<strong>ref</strong>本身的，一次是<strong>proxy</strong>的<strong>get</strong>，最终完成变量的读取。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// trackRefValue(this) // 依赖收集，后面单独说</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span> <span class="comment">// 获取到proxy类型的&#123;name: &#x27;张三&#x27;&#125;，进而再次触发proxy的get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值-1"><a href="#赋值-1" class="headerlink" title="赋值"></a>赋值</h3><p><code>obj.value.name</code>发生赋值的时候</p><p>​首先会触发<strong>ref</strong>的<strong>get</strong>，获取<code>obj.value</code>，然后触发<strong>reactive</strong>的<strong>set</strong>方法，完成name的赋值。</p><p>​整个赋值过程，实际上触发了一次<strong>get</strong>，一次<strong>set</strong>，<strong>get</strong>是<strong>ref</strong>的，目的是读取<code>obj.value</code>，<strong>set</strong>是<strong>proxy</strong>的，目的是为<code>name</code>赋值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ref 本身的set在value为object，并且没有直接修改ref.value的情况下，不会被触发</span></span><br><span class="line"><span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newVal</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="响应-1"><a href="#响应-1" class="headerlink" title="响应"></a>响应</h3><h4 id="依赖收集-1"><a href="#依赖收集-1" class="headerlink" title="依赖收集"></a>依赖收集</h4><p>​effect第一次执行的时候，会读取<code>obj.value.name</code>，首先会触发<strong>ref</strong>的<strong>get</strong>方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// 依赖收集函数 将当前ref本身传入方法</span></span><br><span class="line">  <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<strong>ref</strong>的<strong>get</strong>方法触发了<strong>trackRefValue</strong>，会在当前<strong>ref</strong>的<strong>dep</strong>中收集到<strong>effect</strong>，此处逻辑与ref为基础类型的逻辑一致。</p><p>​<strong>ref</strong>的依赖收集完成后，紧接着触发了<strong>reactive</strong>的<strong>get</strong>，然后<strong>get</strong>内部通过<strong>WeakMap</strong>再次完成依赖收集。</p><p>​我们会发现，在该阶段，我们内部实际上<strong>触发了2次依赖收集</strong>，一次是<strong>ref</strong>本身收集，将依赖存储在自身的<strong>dep</strong>中，第二次是reactive出发<strong>get</strong>事件，依赖存放在<strong>WeakMap</strong>中。</p><h4 id="依赖触发-1"><a href="#依赖触发-1" class="headerlink" title="依赖触发"></a>依赖触发</h4><p>以下2种赋值方式，从现象看似乎一致，但是内部流程是完全不一样的</p><h5 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&#x27;狂飙强&#x27;</span></span><br></pre></td></tr></table></figure><p>第一种<strong>不会破坏RefImpl初始化构建的proxy</strong>，仅修改的是已有的<strong>proxy</strong>内部的变量。</p><ol><li><p>首先触发的是<code>obj.value</code>的<strong>get</strong>行为（此时没有<strong>effet</strong>在执行，所以<strong>ReactiveEffect</strong>一定为空，不会发生依赖收集）。</p></li><li><p>然后<strong>ref</strong>的<strong>get</strong>函数返回<strong>proxy</strong>对象 <code>&#123;name:&#39;卖鱼强&#39;&#125; </code>，紧接着触发<strong>proxy</strong>的<strong>set</strong>，在set中，完成依赖触发。</p></li></ol><h5 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h5><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">obj.<span class="property">value</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;狂飙强&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​第二种方式，因为引用类型本身发生了变化，<strong>会破坏RefImpl初始化构建的_value的proxy</strong>，进而导致<strong>WeakMap</strong>中已有的依赖关系断掉，然后再通过<strong>ref</strong>本身的<strong>set</strong>去触发effect，进而触发<code>obj.value.name</code>的get，重建<strong>ref</strong>内部的<strong>proxy</strong>与<strong>effect</strong>的联系，<strong>这也是为什么value为object的时候，依赖会被收集2次</strong></p><ol><li>首先触发<code>obj.value</code>的<strong>set</strong>行为</li><li>新的<strong>value</strong>重新通过<strong>reactive</strong>函数重新生成为<strong>proxy</strong>，之前的proxy被抛弃。</li><li>触发<strong>set</strong>逻辑中的<strong>triggerRefValue</strong>，进而触发<strong>ref</strong>中<strong>dep</strong>中存放的<strong>ReactiveEffect</strong>，完成依赖触发。</li><li>依赖触发中，再次访问刚才被<strong>reactive</strong>处理过的新的<code>obj.value</code>，新的<code>obj.value</code>与<strong>effect</strong>再次建立联系，完成依赖收集。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​到此为止，我们的<strong>ref</strong>核心源码分析就全部完毕了，<strong>针对基础类型proxy无法进行代理的情况，ref实际上是使用class的get set修饰符进行完成，复杂类型的ref，实际上是通过class + reactive完成的</strong>。</p><p>​如果<code>ref.value</code>是基础类型，读取会触发<strong>class</strong> <strong>get</strong>，赋值会触发<strong>class</strong> <strong>set</strong>。</p><p>​如果<code>ref.value</code>是复杂类型</p><p>​读取<code>res.value.xxx</code>会先触发<strong>class</strong> <strong>get</strong>再触发<strong>proxy</strong> <strong>get</strong>，赋值会先触发<strong>class</strong> <strong>get</strong>再触发<strong>proxy</strong> <strong>set</strong>。</p><p>​读取<code>res.value</code>会触发<strong>class</strong> <strong>get</strong>，赋值会触发<strong>class</strong> <strong>set</strong>，同时完成新的<strong>value</strong>与<strong>effect</strong>完成依赖收集</p><p>​</p><p>​ref的源码解读完成后，我们下一个阶段将开始分析watch与computed。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	在上一篇文章中，我们了解了&lt;strong&gt;reactive&lt;/strong&gt;的实现原理，也发现了&lt;strong&gt;reactive&lt;/st</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（5）vue3 reactivity-computed源码解析</title>
    <link href="https://bluedancers.github.io/2023/02/03/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%885%EF%BC%89vue3%20reactivity-computed%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://bluedancers.github.io/2023/02/03/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%885%EF%BC%89vue3%20reactivity-computed%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-02-02T16:00:00.000Z</published>
    <updated>2023-02-18T06:20:37.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>熟悉<strong>computed</strong>的同学都知道，<strong>computed</strong>会在依赖属性发生变化的时候自动更新结果。</p><p>他有一个重要的特点：<strong>计算值是可缓存的，只有依赖项发生变化的时候，才会重新计算</strong></p><p>​通过之前的文章，我们已经了解了<strong>reactive</strong>，<strong>ref</strong>的实现原理，已经对<strong>vue</strong>响应式机制有所了解，今天我们就来了解一下<strong>computed</strong>是如何实现的。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> showName = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;我叫&#x27;</span> + obj.<span class="property">name</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">innerText</span> = showName.<span class="property">value</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>​以上代码运行后，我们可以看到如下现象</p><ul><li>页面显示：<strong>我叫张三</strong></li><li>2s后，页面显示<strong>我叫李四</strong></li></ul><p>先让我们看看<strong>computed</strong>内部都做了些什么吧</p><h3 id="computed初始化"><a href="#computed初始化" class="headerlink" title="computed初始化"></a>computed初始化</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 入口函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> computed&lt;T&gt;(</span><br><span class="line">  <span class="attr">getterOrOptions</span>: <span class="title class_">ComputedGetter</span>&lt;T&gt; | <span class="title class_">WritableComputedOptions</span>&lt;T&gt;) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">getter</span>: <span class="title class_">ComputedGetter</span>&lt;T&gt;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">setter</span>: <span class="title class_">ComputedSetter</span>&lt;T&gt;</span><br><span class="line">  <span class="comment">// 传入的是否是一个方法</span></span><br><span class="line">  <span class="keyword">const</span> onlyGetter = <span class="title function_">isFunction</span>(getterOrOptions)</span><br><span class="line">  <span class="keyword">if</span> (onlyGetter) &#123;</span><br><span class="line">    <span class="comment">// 如果是方法, 则直接赋值到getter</span></span><br><span class="line">    <span class="comment">// 同时屏蔽setter行为</span></span><br><span class="line">    getter = getterOrOptions</span><br><span class="line">    <span class="comment">// dev环境下 set函数给予提示</span></span><br><span class="line">    setter = __DEV__</span><br><span class="line">      ? <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&#x27;Write operation failed: computed value is readonly&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      : <span class="variable constant_">NOOP</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果不是方法,则认为是对象,将对象中的get set分别赋值到getter setter中</span></span><br><span class="line">    getter = getterOrOptions.<span class="property">get</span></span><br><span class="line">    setter = getterOrOptions.<span class="property">set</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> cRef = <span class="keyword">new</span> <span class="title class_">ComputedRefImpl</span>(getter, setter, onlyGetter || !setter, isSSR)</span><br><span class="line">  <span class="keyword">return</span> cRef</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​入口函数的逻辑还是非常简单的，如果传入的是一个匿名函数，这处理为<strong>getter</strong>，如果传入的是对象，这赋值<strong>getter</strong> <strong>setter</strong>，这部分逻辑符合Vue官方文档的描述。</p><p>​抹平两种传参方式的差异后，<strong>new ComputedRefImpl</strong>，并返回，看来核心实现都在<strong>ComputedRefImpl</strong>中了，我们接下来就进入该类中看看吧。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算属性的响应式也是通过class get set去实现的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ComputedRefImpl</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">public</span> dep?: <span class="title class_">Dep</span> = <span class="literal">undefined</span> <span class="comment">// 依赖收集处(effect)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> _value!: T  <span class="comment">// 存储计算属性结果的值</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> <span class="attr">effect</span>: <span class="title class_">ReactiveEffect</span>&lt;T&gt; <span class="comment">// 存储依赖</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">readonly</span> __v_isRef = <span class="literal">true</span> <span class="comment">// 所有的计算属性也会被识别为ref</span></span><br><span class="line">  <span class="keyword">public</span> _dirty = <span class="literal">true</span> <span class="comment">// 判断是否需要重新计算</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    getter: ComputedGetter&lt;T&gt;,</span></span><br><span class="line"><span class="params">    <span class="keyword">private</span> <span class="keyword">readonly</span> _setter: ComputedSetter&lt;T&gt;,</span></span><br><span class="line"><span class="params">    isReadonly: <span class="built_in">boolean</span>, <span class="comment">// 是否只读,如果存在setter,则为false</span></span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="comment">// 将计算属性的识别为effect，初始化一个ReactiveEffect</span></span><br><span class="line">    <span class="comment">// 初始化阶段仅仅声明 但是却没有触发</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span> = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(getter, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 脏变量（_dirty）的本质就是判断什么时候去触发依赖</span></span><br><span class="line">      <span class="comment">// 脏变量为false的时候才会触发  </span></span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123; </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 触发依赖</span></span><br><span class="line">        <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">effect</span>.<span class="property">computed</span> = <span class="variable language_">this</span> <span class="comment">// 赋值ReactiveEffect中的computed为当前this</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">value</span>() &#123;&#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">value</span>(<span class="params">newValue: T</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​在<strong>ComputedRefImpl</strong>初始化阶段，我们看到了非常熟悉的api，<strong>ReactiveEffect</strong>，在我们的effect源码分析中，我们使用这个api来完成关键步骤<strong>依赖收集</strong>，但是这里却又有点不同，完成声明却没有执行，并且还传入了第二个参数，一个匿名函数，现在还无法发挥它的作用，我们需要后面再说。</p><p>​总的来说，初始化的时候，生成了一个<strong>ReactiveEffect</strong>并保存到当前类的<strong>effect</strong>变量中，忘记<strong>ReactiveEffect</strong>记得去<strong>reactive</strong>章节看看其作用哦。</p><h3 id="computed的get行为"><a href="#computed的get行为" class="headerlink" title="computed的get行为"></a>computed的get行为</h3><p>当我们的实例中的api，<strong>effect</strong>初次执行的时候，我们会触发<code>showName.value</code>的<strong>get</strong>，也就是说，会触发<strong>ComputedRefImpl</strong>的<strong>get</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被读取的时候触发</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// 依赖收集</span></span><br><span class="line">  <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="comment">// 判断是否需要更新，如果需要则进入函数</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果更新过，这下一次就不需要更新了，</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// effect的run执行，也就是执行computed的fn，将会得到一次计算属性的结果</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="variable language_">this</span>.<span class="property">effect</span>.<span class="title function_">run</span>()! </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回computed的结果</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackRefValue</span>(<span class="params">ref: RefBase&lt;<span class="built_in">any</span>&gt;</span>) &#123;</span><br><span class="line">  <span class="comment">// 首次computed内部的dep是不存在的，会通过createDep生成一个Set</span></span><br><span class="line">  <span class="title function_">trackEffects</span>(ref.<span class="property">dep</span> || (ref.<span class="property">dep</span> = <span class="title function_">createDep</span>()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackEffects</span>(<span class="params">dep: Dep</span>) &#123;</span><br><span class="line">  <span class="comment">// 将activeEffect，此时是effect的fn，收集到computed的dep中</span></span><br><span class="line">  dep.<span class="title function_">add</span>(activeEffect!)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​当我们触发<strong>computed</strong>的<strong>get</strong>的时候，首先会触发<strong>trackRefValue</strong>，将当前<strong>activeEffect</strong>收集到类中的<strong>dep</strong>中，这正是依赖收集，这里effect被收集到了computed的dep中，<strong>建立起了computed与其被依赖项的联系</strong>。</p><p>​然后判断**_dirty<strong>是否为</strong>true<strong>，默认是</strong>true<strong>，所以进入判断中，首先将</strong>_dirty<strong>改为</strong>false<strong>，下一次则不会进入判断，直接返回</strong>computed**之前的结果，之后执行初始化阶段声明的ReactiveEffect，也就是我们computed本身。</p><p>​<strong>computed</strong>的<strong>effect.run</strong>一旦触发，<strong>activeEffect</strong>将会被替换当前api <strong>effect的fn</strong> ，并且触发<strong>computed</strong>依赖项<strong>obj.name</strong>的<strong>get</strong>，再次触发proxy的依赖收集，于是<strong>obj.name</strong>成功收集到了<strong>computed</strong>内部的<strong>effect</strong>，<strong>proxy与computed建立了联系</strong>；同时返回了最新的computed结果。</p><p>​<strong>computed的get行为触发的时候，我们发现computed收集了effect，reactive收集了computed，三者之间建立起了联系。</strong></p><p>​而且我们还发现了**_dirty<strong>变量的含义，第一次</strong>get<strong>后，赋值为</strong>false<strong>，下一次就不需要再计算</strong>computed**的结果，实现了数据缓存。</p><img src="http://www.vkcyan.top/FulT2b9ii1-iTvws8zj2z8vEn0Hn.png" style="zoom:33%;" /><h3 id="obj-name触发set，计算属性触发"><a href="#obj-name触发set，计算属性触发" class="headerlink" title="obj.name触发set，计算属性触发"></a>obj.name触发set，计算属性触发</h3><p><strong>2s</strong>后，我们触发了<strong>obj.name</strong>的<strong>set</strong>，所以首先触发<strong>obj.name</strong>的依赖触发，此时我们将可以通过WeakMap会找到之前收集到<strong>computed</strong>，我们直接进入依赖触发的逻辑。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target: <span class="built_in">object</span>,</span></span><br><span class="line"><span class="params">  <span class="keyword">type</span>: TriggerOpTypes,</span></span><br><span class="line"><span class="params">  key?: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  newValue?: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  oldValue?: <span class="built_in">unknown</span>,</span></span><br><span class="line"><span class="params">  oldTarget?: <span class="built_in">Map</span>&lt;<span class="built_in">unknown</span>, <span class="built_in">unknown</span>&gt; | <span class="built_in">Set</span>&lt;<span class="built_in">unknown</span>&gt;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">deps</span>: (<span class="title class_">Dep</span> | <span class="literal">undefined</span>)[] = []</span><br><span class="line">  deps.<span class="title function_">push</span>(depsMap.<span class="title function_">get</span>(key))</span><br><span class="line">  <span class="title function_">triggerEffects</span>(deps[<span class="number">0</span>]) <span class="comment">// 找到了之前收集到的computed中的effect</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 按照常理来说，我们找到指定依赖之后，就是触发依赖，但是计算属性有所不同，因为计算属性存在“调度器”</span></span><br><span class="line"><span class="comment">// 还记得computed初始化阶段，new ReactiveEffect传递的第二个参数吗?</span></span><br><span class="line"><span class="comment">// 该参数将会被保存到ReactiveEffect的scheduler(调度器)中</span></span><br><span class="line"><span class="comment">// 所以此时的ReactiveEffect中，fn是computed的匿名函数，scheduler是computed初始化阶段new ReactiveEffect的第二个参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerEffects</span>(<span class="params">dep: Dep | ReactiveEffect[]</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> effects = <span class="title function_">isArray</span>(dep) ? dep : [...dep]</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> effect <span class="keyword">of</span> effects) &#123;</span><br><span class="line">    <span class="title function_">triggerEffect</span>(effect, debuggerEventExtraInfo)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">triggerEffect</span>(<span class="params">effect: ReactiveEffect</span>) &#123;</span><br><span class="line"><span class="comment">// 调度器的优先级大于run，所以此时会执行调度器逻辑</span></span><br><span class="line">  <span class="keyword">if</span> (effect.<span class="property">scheduler</span>) &#123;</span><br><span class="line">    effect.<span class="title function_">scheduler</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    effect.<span class="title function_">run</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调度器代码</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">effect</span> = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(getter, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 还记得我们get之后将dirty改为false吗？</span></span><br><span class="line">  <span class="comment">// 此时computed的依赖发生变化，将_dirty改为true，表示下次重新计算</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 触发当前computed中收集了相关effect（依赖触发）</span></span><br><span class="line">    <span class="title function_">triggerRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerRefValue</span>(<span class="params">ref: RefBase&lt;<span class="built_in">any</span>&gt;, newVal?: <span class="built_in">any</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 公共依赖触发逻辑</span></span><br><span class="line">  <span class="title function_">triggerEffects</span>(ref.<span class="property">dep</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// computed的dep中收集的effect触发，再次触发computed的get</span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">  <span class="comment">// 依赖项发生变化的时候activeEffect不存在，所以此处收集不到任何依赖</span></span><br><span class="line">  <span class="title function_">trackRefValue</span>(<span class="variable language_">this</span>)</span><br><span class="line">  <span class="comment">// 刚才依赖项发生了变化，所以dirty为true，表示本次需要更新计算属性的结果</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_dirty</span>) &#123;</span><br><span class="line">    <span class="comment">// 计算后dirty改为false 除非依赖项发生变化，否则将不会再重新计算。</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_dirty</span> = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 重新计算 computed的结果</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = <span class="variable language_">this</span>.<span class="property">effect</span>.<span class="title function_">run</span>()! </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​计算属性的触发逻辑还是非常复杂的，首先<strong>proxy</strong>的set，触发<strong>computed</strong>的<strong>scheduler（调度器）</strong>，<strong>scheduler</strong>通过<strong>computed</strong>的<strong>dep</strong>找到相关<strong>effect</strong>，<strong>effect的fn</strong>执行又会触发<strong>computed</strong>的<strong>get</strong>，<strong>并与首次完成computed的计算，同时缓存最新的computed的结果</strong>，进而再完成effect的全部逻辑。</p><img src="https://www.vkcyan.top/Fu-QElucOgKlCPvYBJuMIQst0Fuo.png" style="zoom:33%;" /><h2 id="代码执行流程"><a href="#代码执行流程" class="headerlink" title="代码执行流程"></a>代码执行流程</h2><h3 id="依赖收集阶段"><a href="#依赖收集阶段" class="headerlink" title="依赖收集阶段"></a>依赖收集阶段</h3><ol><li><strong>computed</strong>初始化阶段，通过<strong>ReactiveEffect</strong>进行初始化，并且生成<strong>scheduler（调度器）</strong></li><li><strong>effect</strong>初始化，触发<strong>computed</strong>的<strong>get</strong>，将当前<strong>activeEffect（effect）</strong>收集到<strong>computed</strong>的<strong>dep</strong>中<strong>（computed将effect收集）</strong></li><li>执行<strong>computed</strong>自身逻辑，刷新全局<strong>activeEffect</strong></li><li>进而触发<strong>proxy</strong>的<strong>get</strong>事件触发，将当前<strong>activeEffect（computed）</strong>收集到<strong>WeakMap</strong>中<strong>（proxy将computed收集）</strong></li><li><strong>proxy</strong>的返回值返回<strong>computed</strong>，完成<strong>computed</strong>的计算逻辑</li><li>获取到<strong>computed</strong>结果，完成<strong>effect</strong></li></ol><h3 id="依赖触发阶段"><a href="#依赖触发阶段" class="headerlink" title="依赖触发阶段"></a>依赖触发阶段</h3><ol><li>触发<strong>proxy</strong>的<strong>set</strong>，<strong>set</strong>行为中触发依赖，触发之前保存的<strong>computed</strong>的<strong>调度器scheduler</strong>（proxy找到computed）</li><li><strong>调度器scheduler</strong>触发，<strong>dirty</strong>改为<strong>true</strong>，同时触发<strong>computed</strong>中保存的依赖，其中都是相关<strong>effec</strong>的<strong>fn</strong>。（computed找到effect）</li><li><strong>effect</strong>触发，<strong>fn</strong>执行，触发<strong>computed</strong>的<strong>get</strong>行为</li><li><strong>dirty</strong>为<strong>true</strong>，首次进行计算属性的重新计算（除非依赖项改变，否则下次不会重新计算），返回最新的<strong>computed</strong>结果，</li><li><strong>effect</strong>执行完成</li></ol><h2 id="回答一些问题"><a href="#回答一些问题" class="headerlink" title="回答一些问题"></a>回答一些问题</h2><h4 id="computed如何实现高性能缓存的？"><a href="#computed如何实现高性能缓存的？" class="headerlink" title="computed如何实现高性能缓存的？"></a>computed如何实现高性能缓存的？</h4><p>​通过<strong>调度器scheduler</strong> + <strong>脏值检查_dirty</strong>，实现依赖项不变化，不进行重新计算，依赖项变化后仅执行一次的逻辑，进而实现高性能缓存。</p><h4 id="为什么访问computed需要-value"><a href="#为什么访问computed需要-value" class="headerlink" title="为什么访问computed需要.value"></a>为什么访问computed需要.value</h4><p>​因为我们访问<strong>computed</strong>实际上是访问<strong>ComputedRefImpl</strong>这个<strong>Class</strong>的实例，他的内部通过<strong>get value</strong>返回被访问值，所以我们必须通过**.value**来访问</p><h4 id="简述computed的实现原理？"><a href="#简述computed的实现原理？" class="headerlink" title="简述computed的实现原理？"></a>简述computed的实现原理？</h4><blockquote><p>vue的响应式api都可以从依赖收集 依赖触发2个角度出发阐述其原理实现</p></blockquote><p>依赖收集阶段：computed通过首次get的完成相关effect的依赖收集，首次计算的时候proxy完成computed的依赖收集。</p><p>依赖触发阶段：computed的依赖项发生变化后，会通过proxy找到computed的调度器 scheduler，触发所有effect，effct中再出发computed的get，首次get将进行一次结果运算（后续不在运算，除非computed依赖项发生变化），effect触发完成</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​到此为止，我们<strong>computed</strong>的核心源码就解读完毕了，虽然总体依旧可以从<strong>依赖收集</strong>和<strong>依赖触发</strong>两个角度去理解实现原理，但是新增加的<strong>scheduler（调度器）</strong>与**_dirty（脏值检查）**机制，让逻辑复杂了很多。</p><p>​大家在理解computed源码的时候，一定要多走几遍流程，多捋几遍逻辑。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;熟悉&lt;strong&gt;computed&lt;/strong&gt;的同学都知道，&lt;strong&gt;computed&lt;/strong&gt;会在依赖属性发生变化的</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（3）vue3 reactivity-reactive源码解析</title>
    <link href="https://bluedancers.github.io/2023/02/01/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%883%EF%BC%89vue3%20reactivity-reactive%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://bluedancers.github.io/2023/02/01/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%883%EF%BC%89vue3%20reactivity-reactive%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2023-01-31T16:00:00.000Z</published>
    <updated>2023-02-15T10:50:31.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​从本篇文章开始，我们正式进入源码解析环节，<strong>vue3</strong>源码相对清晰，每个模块相互独立，我们首先分析**@vue&#x2F;reactivity** 中的<strong>reactive</strong>。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">let</span> &#123; reactive, effect &#125; = <span class="title class_">Vue</span></span><br><span class="line"> <span class="keyword">const</span> obj = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&#x27;卖鱼强&#x27;</span>,</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="title function_">effect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#app&#x27;</span>).<span class="property">innerText</span> = obj.<span class="property">name</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&#x27;狂飙强&#x27;</span></span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>​以上测试案例，我们涉及到了reactive的<strong>初始化、读取、修改、响应</strong>，接下来走入源码的世界，看看功能是如何实现的。</p><h3 id="reactive初始化"><a href="#reactive初始化" class="headerlink" title="reactive初始化"></a>reactive初始化</h3><blockquote><p>为了方便阅读与理解，文中仅贴出最核心的代码</p></blockquote><p><code>packages/reactivity/src/reactive.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">reactive</span>(<span class="params">target</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createReactiveObject</span>(</span><br><span class="line">    target, <span class="comment">// reactive里面的值</span></span><br><span class="line">    <span class="literal">false</span>,</span><br><span class="line">    mutableHandlers,</span><br><span class="line">    mutableCollectionHandlers,</span><br><span class="line">    reactiveMap</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createReactiveObject</span>(<span class="params">target, isReadonly, baseHandlers, collectionHandlers, proxyMap</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断是否已经被代理过了，如果是，则获取缓存中的值，并直接返回</span></span><br><span class="line">  <span class="comment">// 我们这里第一次指定，必然是不存在的，所以跳过这个</span></span><br><span class="line">  <span class="keyword">const</span> existingProxy = proxyMap.<span class="title function_">get</span>(target)</span><br><span class="line">  <span class="keyword">if</span> (existingProxy) &#123;</span><br><span class="line">    <span class="keyword">return</span> existingProxy</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 对reactive中的变量进行代理，我们这里的target类型是obejct，targetType为common，所以接下来进入baseHandlers逻辑</span></span><br><span class="line">  <span class="comment">// 而baseHandlers从reactive被当做参数传递过来的，实际执行的是mutableHandlers</span></span><br><span class="line">  <span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">    target,</span><br><span class="line">    baseHandlers</span><br><span class="line">  )</span><br><span class="line">  proxyMap.<span class="title function_">set</span>(target, proxy)</span><br><span class="line">  <span class="keyword">return</span> proxy</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// reactive中变量类型为object场景下，proxy的监听逻辑会走到这里</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mutableHandlers = &#123;</span><br><span class="line">  get, </span><br><span class="line">  set,</span><br><span class="line">  deleteProperty, <span class="comment">// 非核心逻辑 忽略（删除被代理对象中字段 以及删除相关依赖）</span></span><br><span class="line">  has, <span class="comment">// 非核心逻辑 忽略 （判断字段是否存在与对象中）</span></span><br><span class="line">  ownKeys <span class="comment">// 非核心逻辑 忽略（返回当前对象的所有字段）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​通过源码 我们可以看得出来，使用<strong>reactive</strong>，内部实际执行的是<strong>createReactiveObject</strong>，函数就是新建了<strong>proxy</strong>，并最终返回。</p><p>​不过要注意一点的是，经过<strong>reactive</strong>处理过的对象，都会以<strong>target</strong>为<strong>WeakMap</strong>键，<strong>proxy</strong>为值，进行一次缓存，这样同一个值再次进行<strong>reactive</strong>的时候就会读取缓存中的值。</p><p>​接下来，让我们看看<strong>proxy</strong>中核心的<strong>get set</strong>函数吧，看看内部做了些什么。</p><h3 id="读取（get）"><a href="#读取（get）" class="headerlink" title="读取（get）"></a>读取（get）</h3><p>当触发<code>obj.name</code>的读取行为的时候，就会触发代理对象的<strong>get</strong>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> get = <span class="title function_">createGetter</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver) <span class="comment">// 读取被代理对象</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 核心逻辑(track)：依赖收集，后续单独看</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果当前值是reactive则递归proxy处理</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">isObject</span>(res)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reactive</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​get内部的逻辑很简单，通过<strong>Reflect</strong>完成被代理对象的读取操作。</p><p>​如果被读取对象的属性是<strong>object</strong>则会再次进入<strong>reactive</strong>逻辑中进行<strong>proxy</strong>处理，确保嵌套对象的响应式。</p><h3 id="修改（set）"><a href="#修改（set）" class="headerlink" title="修改（set）"></a>修改（set）</h3><p>当触发<code>obj.name</code>的修改行为，将会触发代理对象的<strong>set</strong>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="title function_">createSetter</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span>(<span class="params">shallow = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">    <span class="comment">// 修改被代理数据，完成数据更新</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心逻辑(trigger)：依赖触发，后续单独看</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res <span class="comment">// true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​通过<strong>Reflect</strong>完成被代理对象值的更新，最后返回本次Reflect.set的结果，完成逻辑。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​以上代码是去除所有边界判断，以及响应式逻辑后，reactive中主流程的代码，我能可以发现，其实就是对<strong>proxy + Reflect</strong>的基础使用。</p><p>​目前数据已经具备响应式，但是数据变化后，引用数据的<strong>effect</strong>自动执行，也就是<strong>响应</strong>，目前还未实现。接下来我们就去看看，他是如何实现的。</p><h3 id="依赖收集（track）"><a href="#依赖收集（track）" class="headerlink" title="依赖收集（track）"></a>依赖收集（track）</h3><p>​我们回到测试demo中，根据我们使用<strong>vue3</strong>的预期，在初始化完成后，<strong>effect</strong>会触发一次，若干时间后，<strong>setTimeout</strong>内<strong>set</strong>触发，依赖<code>obj.name</code>的 <strong>effect</strong>的函数还会被触发一次，这又是如何实现的呢？</p><p>​我们通过源码去了解，effect的初始化的时候到底发生了什么，Vue是如何完成<strong>依赖收集</strong>与<strong>依赖触发</strong>的</p><p><code>packages/reactivity/src/effect.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当前被执行的effect</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> <span class="attr">activeEffect</span>: <span class="title class_">ReactiveEffect</span> | <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> _effect = <span class="keyword">new</span> <span class="title class_">ReactiveEffect</span>(fn) <span class="comment">// 首先执行new ReactiveEffect，所以我们跳转到ReactiveEffect中</span></span><br><span class="line">  _effect.<span class="title function_">run</span>() <span class="comment">// 并立刻执行了run方法，run方法内实际执行的就是effect内部函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">ReactiveEffect</span> &#123;</span><br><span class="line">  <span class="attr">parent</span>: <span class="title class_">ReactiveEffect</span> | <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line">  </span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    public fn: () =&gt; T, <span class="comment">// 这里的fn就是effect内部的匿名函数</span></span></span><br><span class="line"><span class="params">  </span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">run</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      activeEffect = <span class="variable language_">this</span> <span class="comment">// 将effect对象，也就是new ReactiveEffect的结果，保存到activeEffect</span></span><br><span class="line">      shouldTrack = <span class="literal">true</span> <span class="comment">// 表示开始依赖收集</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">fn</span>() <span class="comment">// 这里的fn，实际上就是effect内部的匿名函数 </span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>effect方法内部最终执行了一次<strong>fn</strong>，但是在执行之前，将activeEffect赋值为this，将自身保存到了公共变量之中。</p><p>而匿名函数的内部读取了<code>obj.name</code>，<strong>触发了被代理对象obj的get方法</strong>，所以接下来我们回到get方法中，查看之前忽略的依赖收集逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createGetter</span>(<span class="params">isReadonly = <span class="literal">false</span>, shallow = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params">target: Target, key: string | symbol, receiver: object</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver) <span class="comment">// 读取被代理对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isReadonly) &#123; <span class="comment">// obj为可读代码 所以isReadony一定为false 进入if中</span></span><br><span class="line">      <span class="title function_">track</span>(target, <span class="title class_">TrackOpTypes</span>.<span class="property">GET</span>, key) </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 依赖收集</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">track</span>(<span class="params">target, type, key</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (shouldTrack &amp;&amp; activeEffect) &#123; <span class="comment">// 在effect中执行run方法的时候，我们确保了shouldTrack为true activeEffect 存在值，所以进入判断</span></span><br><span class="line">    <span class="keyword">let</span> depsMap = targetMap.<span class="title function_">get</span>(target) <span class="comment">// targetMap是一个全局变量，实际上是一个new WeakMap 首次depsMap肯定是不存在的</span></span><br><span class="line">    <span class="keyword">if</span> (!depsMap) &#123;</span><br><span class="line">      <span class="comment">// 这里的target为被代理对象，&#123;name: &#x27;张三&#x27;&#125;，该值做为key，Map作为value</span></span><br><span class="line">      targetMap.<span class="title function_">set</span>(target, (depsMap = <span class="keyword">new</span> <span class="title class_">Map</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> dep = depsMap.<span class="title function_">get</span>(key) <span class="comment">// 当前key为name 首次也是不存在的</span></span><br><span class="line">    <span class="keyword">if</span> (!dep) &#123;</span><br><span class="line">      <span class="comment">// depsMap是一个Map结构，key是name value是createDep()的返回值，我们进入createDep</span></span><br><span class="line">      depsMap.<span class="title function_">set</span>(key, (dep = <span class="title function_">createDep</span>()))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将dep作为参数传递到trackEffects中，此时的dep为Set</span></span><br><span class="line">    <span class="title function_">trackEffects</span>(dep, <span class="literal">undefined</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">createDep</span> = (<span class="params">effects?</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Set</span>(effects) <span class="comment">// 实际上就是生成了Set结构（Set我们简单理解为元素不可重复的数组）</span></span><br><span class="line">  dep.<span class="property">w</span> = <span class="number">0</span></span><br><span class="line">  dep.<span class="property">n</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> dep</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trackEffects</span>(<span class="params"></span></span><br><span class="line"><span class="params">  dep: Dep,</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 一系列边界判断，合法的情况下shouldTrack为true</span></span><br><span class="line">  <span class="keyword">if</span> (shouldTrack) &#123;</span><br><span class="line">    dep.<span class="title function_">add</span>(activeEffect!) </span><br><span class="line">    <span class="comment">// 将全局变量activeEffect（包含effect的匿名函数）加入到dep（Set）中</span></span><br><span class="line">    <span class="comment">// 到这里 我们将响应式数据与effect函数建立起了联系 标志着我们完成了依赖收集</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>​<strong>effect</strong>内部的<strong>fn</strong>被触发，也是我们看到的初始化阶段的第一次执行，<strong>fn</strong>执行中触发了<strong>obj</strong>的<strong>get</strong>，<strong>get</strong>内部触发了<strong>依赖收集（track）</strong>，<strong>track</strong>内部构建了一个复杂对象<strong>targetMap</strong>，来维护变量与<strong>effect</strong>之间的关系。</p><p>​我们来梳理一下他的数据结构</p><ul><li><strong>WeakMap</strong><ul><li><strong>key：被代理对象（{name:’张三’}）</strong></li><li><strong>value：Map对象</strong><ul><li><strong>key：响应式对象的指定属性（name）</strong></li><li><strong>value：指定对象的指定属性的使用函数（effect的匿名函数）</strong></li></ul></li></ul></li></ul><img src="https://www.vkcyan.top/Fl5yIZxuITKTmxJaKmaQBiThPhA-.png" style="zoom:33%;" /><p>​在WeakMap中，我们不仅仅收集了所有的fn函数，还将fn函数与fn函数被读取的变量建立起了联系，在未来的依赖触发逻辑中，weakMap将会发挥巨大作用。</p><p>到此为止，effect内的匿名函数执行完毕，同时我们也完成了重要的依赖收集</p><h3 id="响应（trigger）"><a href="#响应（trigger）" class="headerlink" title="响应（trigger）"></a>响应（trigger）</h3><p>​继续回到demo中，2s后，<strong>obj.name</strong>赋值为李四，此时的现象是effect中的函数自动执行了，这又是如何实现的呢？</p><p>​此处首先一定是触发了代理对象的<strong>set</strong>，所以我们由此处开始分析。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createSetter</span>(<span class="params">shallow = <span class="literal">false</span></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params"></span></span><br><span class="line"><span class="params">    target,</span></span><br><span class="line"><span class="params">    key,</span></span><br><span class="line"><span class="params">    value,</span></span><br><span class="line"><span class="params">    receiver</span></span><br><span class="line"><span class="params">  </span>): boolean &#123;</span><br><span class="line">    <span class="keyword">let</span> oldValue = target[key] <span class="comment">// 保存之前的值 张三</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当前target是数组,并且本次修改的的是执行下标</span></span><br><span class="line">    <span class="comment">// 如果是 这判断是否是现有下标,是 true 否 false</span></span><br><span class="line">    <span class="comment">// 如果不是 这判断是否为自身属性 是 true 否 false</span></span><br><span class="line">   <span class="comment">// 当前场景下为true</span></span><br><span class="line">    <span class="keyword">const</span> hadKey =</span><br><span class="line">      <span class="title function_">isArray</span>(target) &amp;&amp; <span class="title function_">isIntegerKey</span>(key) <span class="comment">// isIntegerKey 判断是不是数值型字符串</span></span><br><span class="line">        ? <span class="title class_">Number</span>(key) &lt; target.<span class="property">length</span></span><br><span class="line">        : <span class="title function_">hasOwn</span>(target, key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver) <span class="comment">// 完成被代理对象的赋值操作</span></span><br><span class="line">    <span class="keyword">if</span> (target === <span class="title function_">toRaw</span>(receiver)) &#123; <span class="comment">// 判断是否还是一个对象，如果不是则说明被代理对象改变，则不进行后续逻辑 当前场景一定为true</span></span><br><span class="line">      <span class="keyword">if</span> (!hadKey) &#123;</span><br><span class="line">        <span class="title function_">trigger</span>(target, <span class="title class_">TriggerOpTypes</span>.<span class="property">ADD</span>, key, value)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_">hasChanged</span>(value, oldValue)) &#123;</span><br><span class="line">        <span class="comment">// 当前hadKey为true并且新旧值不一致，所以触发以下trigger方法</span></span><br><span class="line">        <span class="title function_">trigger</span>(target, <span class="title class_">TriggerOpTypes</span>.<span class="property">SET</span>, key, value, oldValue)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">trigger</span>(<span class="params"></span></span><br><span class="line"><span class="params">  target, type, key?, newValue?, oldValue?, oldTarget?</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 通过全局变量targetMap（weakMap）获取value</span></span><br><span class="line">  <span class="comment">// 在依赖收集阶段我们收集到了当前target，所以这时候 depsMap存在值 值为Map Map的key为name 值为Set Set内部是effect的fn</span></span><br><span class="line">  <span class="keyword">const</span> depsMap = targetMap.<span class="title function_">get</span>(target)</span><br><span class="line">  </span><br><span class="line"> <span class="title function_">triggerEffects</span>(depsMap.<span class="title function_">get</span>(key))</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">triggerEffects</span>(<span class="params">dep, debuggerEventExtraInfo?</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> effects = <span class="title function_">isArray</span>(dep) ? dep : [...dep] <span class="comment">// 将set处理为数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> effect <span class="keyword">of</span> effects) &#123;</span><br><span class="line">    <span class="title function_">triggerEffect</span>(effect, debuggerEventExtraInfo)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">triggerEffect</span>(<span class="params"></span></span><br><span class="line"><span class="params">  effect: ReactiveEffect, <span class="comment">// 每一个effect都是ReactiveEffect，内部的fn都是effect的fn</span></span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 此时的activeEffect为undefined，一定进入if中</span></span><br><span class="line">  <span class="keyword">if</span> (effect !== activeEffect || effect.<span class="property">allowRecurse</span>) &#123;</span><br><span class="line"> effect.<span class="title function_">run</span>() <span class="comment">// effect的run方法就是effect的fn，完成执行</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​经过以上代码，我们可以看到，<strong>obj.name</strong>的改变在触发了<strong>proxy</strong>的<strong>set</strong>方法的同时，也触发了<strong>依赖触发（trigger）</strong>，<strong>trigger</strong>中，通过依赖收集阶段生成的<strong>targetMap</strong>找到了对应的<strong>effect</strong>的<strong>fn</strong>，并完成执行。</p><p>​到此为止完成了整个响应式过程。</p><h3 id="reactive源码总结"><a href="#reactive源码总结" class="headerlink" title="reactive源码总结"></a>reactive源码总结</h3><p>我们简单总结一下，reactive中<strong>依赖收集</strong>与<strong>依赖触发</strong>的过程</p><ol><li>通过proxy处理reactive包裹的对象，被返回proxy代理对象</li><li>effect初始化，生成了类<strong>ReactiveEffect</strong>，并执行了其run方法</li><li>run方法执行后，当前<strong>ReactiveEffect</strong>被保存到了<strong>activeEffect(公共变量)<strong>，随后执行了</strong>effect的fn</strong></li><li><strong>effect的fn</strong>触发，函数内使用到了<code>obj.name</code>，触发了代理对象的<strong>get</strong></li><li><strong>get</strong>方法内部触发了<strong>依赖收集（track）</strong>，配合保存到全局的<strong>ReactiveEffect</strong>，最终通过<strong>WeakMap</strong>，建立了<strong>effect的fn</strong>与当前<strong>get的属性</strong>的联系，完成了依赖收集。</li><li>若干时间后，代理对象的<strong>set</strong>触发，同时触发了<strong>依赖触发（trigger）</strong></li><li><strong>trigger</strong>内部通过<strong>当前代理对象</strong>以及<strong>具体修改的属性</strong>，在依赖收集阶段保存的<strong>WeakMap</strong>中，找到所有需要触发的effect的fn。</li><li>触发effect的fn，完成响应式</li></ol><p>最后反映在我们眼前，就是<code>obj.name</code>改变的同时，所有使用到<strong>obj.name</strong>的<strong>effet</strong>都被自动触发了<strong>fn</strong>，完成响应式。</p><h3 id="补充知识（WeakMap）"><a href="#补充知识（WeakMap）" class="headerlink" title="补充知识（WeakMap）"></a>补充知识（WeakMap）</h3><p>​虽然我们完成了源码阅读，但是我们还需要补充一个重点API，<strong>WeakMap</strong>，<strong>weakMap</strong>和<strong>map</strong>一样都是<strong>key value</strong>格式的对象，但是他们还是存在一些差别。</p><ul><li><strong>weakMap</strong>的<strong>key</strong>必须是对象，并且是<strong>弱引用</strong>关系</li><li><strong>Map</strong>的<strong>key</strong>可以是任何值（基础类型+对象），但是key所引用的对象是<strong>强引用</strong>关系</li></ul><p>​通过查阅MDN我们可以发现，<strong>weakMap</strong>可以实现的功能，<strong>Map</strong>也是可以实现的，那为什么<strong>Vue3</strong>内部使用了<strong>WeakMap</strong>呢，问题就在<strong>引用关系</strong>上</p><p><strong>强引用：不会因为引用被清除而失效</strong></p><p><strong>弱引用：会因为引用被清除而自动被垃圾回收</strong></p><p>概念似乎还无法体现其实际作用，我们通过以下案例即可明白</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">map.<span class="title function_">set</span>(obj, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">obj = <span class="literal">null</span> <span class="comment">// obj的引用类型被垃圾回收</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map) <span class="comment">// map中key obj依旧存在</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// WeakMap</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line">map.<span class="title function_">set</span>(obj, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">obj = <span class="literal">null</span> <span class="comment">// obj的引用类型被垃圾回收</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map) <span class="comment">// weakMap中key为obj的键值对已经不存在</span></span><br></pre></td></tr></table></figure><p>通过以上案例我们可以了解到</p><ul><li>弱引用在<strong>对象与key共存</strong>场景存在优势，<strong>作为key的对象被销毁的同时，WeakMap中的key value也自动销毁了</strong>。</li><li>弱引用也解释了为什么<strong>weakMap</strong>的<strong>key</strong>不能是基础类型，因为基础类型存在栈内存中，不存在弱引用关系；</li></ul><p>反映到Vue3源码中，一旦被代理对象被置为null，<strong>weakMap</strong>中该<strong>key</strong>将会被垃圾回收，达到性能最大化的目的。</p><h3 id="reactive的局限性"><a href="#reactive的局限性" class="headerlink" title="reactive的局限性"></a>reactive的局限性</h3><ol><li>解构之后会失去响应性<ul><li>如果解构对象依旧是Object，这依旧具备响应式，但是，如果解构对象是基础类型，则无法被proxy代理，无法具备响应式</li></ul></li><li>reactive只能代理object，其他类型无法被代理</li></ol><p>因为以上不足，所有vue3提供了可以解决以上问题的方法的API<strong>ref</strong>，所以下一站，我们将前往ref。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	从本篇文章开始，我们正式进入源码解析环节，&lt;strong&gt;vue3&lt;/strong&gt;源码相对清晰，每个模块相互独立，我们首先分析**@v</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（2）Object.defineProperty vs proxy</title>
    <link href="https://bluedancers.github.io/2023/01/30/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%882%EF%BC%89Object.defineProperty%20vs%20proxy/"/>
    <id>https://bluedancers.github.io/2023/01/30/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%882%EF%BC%89Object.defineProperty%20vs%20proxy/</id>
    <published>2023-01-29T16:00:00.000Z</published>
    <updated>2023-02-18T06:21:52.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>熟悉<strong>vue3</strong>的同学都知道，<strong>vue3</strong>的底层的响应式实现由<strong>Object.defineProperty</strong>更换成了<strong>Proxy</strong>；</p><p><strong>为什么vue3要更换呢？proxy相对于前者又有何优势呢？</strong></p><p>接下来让我们一起找出问题的答案。</p><p>​</p><h2 id="当响应式不存在的时候"><a href="#当响应式不存在的时候" class="headerlink" title="当响应式不存在的时候"></a>当响应式不存在的时候</h2><p>我们先看一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shoes = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = shoes.<span class="property">num</span> * shoes.<span class="property">price</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total) <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line">shoes.<span class="property">num</span> = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total)  <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><p>第二次打印依旧是<strong>30</strong>，虽然我们的<strong>num</strong>发生了变化，但是下一次获取<strong>total</strong>的值依旧是之前的值，因为<strong>total</strong>已经被运算过了。</p><p>那应该怎么做，才能实时的获取到当前最新的<strong>total</strong>呢？</p><p>也很简单，我们每次获取之间，<strong>手动重新计算</strong>一次就好了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shoes = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  total = shoes.<span class="property">num</span> * shoes.<span class="property">price</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">effect</span>() <span class="comment">// 重新计算</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total) <span class="comment">// 30</span></span><br><span class="line"></span><br><span class="line">shoes.<span class="property">num</span> = <span class="number">5</span></span><br><span class="line"><span class="title function_">effect</span>() <span class="comment">// 重新计算</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(total) <span class="comment">// 50</span></span><br></pre></td></tr></table></figure><p>​我们增加<strong>effect</strong>方法来手动触发依赖，这样我们实现了需求。</p><p>​但是这样手动触发的方式，在真实业务中过于繁琐，难以维护，本质上依旧是命令式思维。</p><p>​<strong>如何实现值的修改，后续逻辑的自动执行呢？</strong></p><h2 id="vue2的解决方案"><a href="#vue2的解决方案" class="headerlink" title="vue2的解决方案"></a>vue2的解决方案</h2><p>通过<strong>Object.defineProperty</strong>来对字段进行代理，<strong>通过set，get方法，完成逻辑的自动触发</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">3</span></span><br><span class="line"><span class="keyword">let</span> shoes = &#123;</span><br><span class="line">  <span class="attr">num</span>: num,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始计算&#x27;</span>, shoes)</span><br><span class="line">  total = shoes.<span class="property">num</span> * shoes.<span class="property">price</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 被代理的值无法不可再get中使用了 因为会触发ett的死循环</span></span><br><span class="line"><span class="comment">// 所以,必须增加一个变量来做被代理的值,所以我们监听shoes.num的get set内部实际修改和读取的都是num</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(shoes, <span class="string">&#x27;num&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">newVal</span>) &#123;</span><br><span class="line">    num = newVal</span><br><span class="line">    <span class="title function_">effect</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​我们再以上代码，再次修改shoes.num，将触发代理中的set，进而触发effect，实现依赖的自动触发，vue2的底层也正是如此实现的，这样看起来我们的需求已经解决了，那为何vue3有放弃了<strong>Object.defineProperty</strong>呢？</p><p>​接下来我们就要聊聊他的缺陷。</p><h2 id="Object-defineProperty的缺陷"><a href="#Object-defineProperty的缺陷" class="headerlink" title="Object.defineProperty的缺陷"></a>Object.defineProperty的缺陷</h2><p>该API确实满足了我们上面提到的案例，但是他在一些场景也存在很多问题。</p><p>比如大家一定都遇到过的问题</p><ol><li>object中新增字段 没有响应性</li><li>array中指定下标的方式增加字段 没有响应性的</li></ol><p>为什么会这样呢？vue的官方解释是</p><p>由于 JavaScript 的限制，Vue <strong>不能检测</strong>数组和对象的变化。</p><p>尽管如此我们还是有一些办法来回避这些限制并保证它们的响应性。</p><p><strong>那JavaScript到底限制了什么呢？</strong></p><p>​<strong>object.defineProperty</strong>只能监听到指定对象的<strong>指定属性的get set</strong>，这些工作其实是vue初始化阶段完成，所以指定对象的指定元素发生变化的时候，我们可以监听到变化，vue中也确实是这么表现的；</p><p>​但是如果，我们在指定对象上面新增属性，<strong>object.defineProPerty</strong>是无法监听到的，无法监听则无法处理被新增的字段，自然字段就不具备响应式；</p><p>​在vue2中，如果想解决以上问题，需要使用<strong>Vue.$set</strong>进行手动增加响应式字段，解决无法监听到字段新增的问题。</p><h2 id="vue3的解决方案"><a href="#vue3的解决方案" class="headerlink" title="vue3的解决方案"></a>vue3的解决方案</h2><p><strong>vue3</strong>中改用了<strong>proxy</strong>，为什么响应式核心api做了修改，<strong>proxy</strong>是什么？我们先实现一个类似<strong>vue2</strong>的案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> shoes = &#123;</span><br><span class="line">  <span class="attr">num</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="attr">price</span>: <span class="number">10</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> shoesProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(shoes, &#123;</span><br><span class="line">  <span class="comment">// target 被代理对象 key 本次修改的对象中的键 newValue 修改后的值 receiver 代理对象</span></span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, newValue, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了写入事件&#x27;</span>)</span><br><span class="line">    shoes[key] = newValue</span><br><span class="line">    <span class="title function_">effect</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// target 被代理对象 key 本次读取的值 receiver 代理对象</span></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">tartget, key, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;触发了获取事件&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> shoes[key]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">0</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">effect</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始计算&#x27;</span>, shoes)</span><br><span class="line">  <span class="comment">// 如果使用被代理对象本身shoes,这不会触发</span></span><br><span class="line">  <span class="comment">// 如果使用代理对象shoesProxy,则这里会触发proxy的get事件</span></span><br><span class="line">  total = shoes.<span class="property">num</span> * shoes.<span class="property">price</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上代码，我们可以看到一些差别</p><p><strong>object.defineproperty</strong></p><ul><li><p>代理的并非对象本身，而是对象中的属性</p></li><li><p>只能监听到对象被代理的指定属性，无法监听到对象本身的修改</p></li><li><p>修改对象属性的时候，是对原对象进行修改的，原有属性，则需要第三方的值来充当代理对象</p></li></ul><p><strong>proxy</strong></p><ul><li>proxy针对对象本身进行代理</li><li>代理对象属性的变化都可以被代理到</li><li>修改对象属性的时候，我们针对代理对象进行修改</li></ul><p>无论是逻辑的可读性，还是API能力上，<strong>proxy</strong>都比<strong>object.defineProPerty</strong>要强很多，这也是vue3选择proxy的原因。</p><h2 id="proxy的好兄弟Reflect"><a href="#proxy的好兄弟Reflect" class="headerlink" title="proxy的好兄弟Reflect"></a>proxy的好兄弟Reflect</h2><p>​在<strong>vue3</strong>的源码中的**@vue&#x2F;reactivity<strong>中，</strong>我们会经常看到在proxy的set、get中存在Reflect的身影<strong>，但是从我们上面对</strong>proxy<strong>的使用来看，赋值 读取都实现了，为什么</strong>vue3<strong>中使用了</strong>Reflect**呢？</p><p>首先我们了解一下<strong>Reflect</strong>是干嘛的</p><p>官方解释：<strong>Reflect</strong> 是一个内置的对象，它提供拦截 JavaScript 操作的方法。</p><p>似乎比较难理解，我们举个例子吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">num</span>:<span class="number">10</span> &#125;</span><br><span class="line">obj.<span class="property">num</span> <span class="comment">// 10</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(obj,<span class="string">&#x27;num&#x27;</span>) <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>这么来看，似乎这个api很普通啊，反而把简单的读取值写复杂了。</p><p>这时候我们就要提一下Reflect.get 的第三个参数了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propertyKey, receiver]) <span class="comment">// receiver 如果target对象中指定了propertyKey，receiver则为getter调用时的this值。</span></span><br></pre></td></tr></table></figure><p>这次我们知道了，第三个参数receiver具有强制修改this指向的能力，接下来我们来看一个场景</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="string">&#x27;12岁&#x27;</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">useinfo</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span> + <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dataProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性被读取&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dataProxy.<span class="property">useinfo</span>)</span><br></pre></td></tr></table></figure><p>打印情况如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">属性被读取</span><br><span class="line">张三12岁</span><br></pre></td></tr></table></figure><p>​<strong>dataProxy.useinfo</strong>的get输出的值是正常的，但是get只被触发了一次，这是不正常的；</p><p>​因为useinfo里面还读取了被代理对象<strong>data</strong>的<strong>name</strong>、<strong>age</strong>，理想情况应当是<strong>get</strong>被触发三次。</p><p>​为什么会出现这样的情况呢，这是因为调用<strong>userinfo</strong>的时候，<strong>this指向了data，实际执行的是data.userinfo，此时的this指向data，而不是dataProxy</strong>，此时get自然是监听不到name、age的get了。</p><p>​这时候我们就用到了Reflect的第三个参数，<strong>来重置get set的this指向</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dataProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(data, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;属性被读取&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver) <span class="comment">// this强制指向了receiver</span></span><br><span class="line">    <span class="comment">// return target[key]</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印情况如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">属性被读取</span><br><span class="line">属性被读取</span><br><span class="line">属性被读取</span><br><span class="line">张三12岁</span><br></pre></td></tr></table></figure><p>现在打印就正常了，<strong>get</strong>被执行的3次，此时的<strong>this</strong>指向了<strong>dataProxy</strong>，<strong>Reflect</strong>很好的解决了以上的this指向问题。</p><p>​通过以上案例，我们可以看到使用<strong>target[key]<strong>有些情况下是不符预期的，比如案例中的被代理对象this指向问题，而使用</strong>Reflect</strong>则可以更加稳定的解决这些问题，在vue3源码中也确实是这么用的。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​通过本篇文章，我们认识到了<strong>object.defineproperty</strong>相较于<strong>proxy</strong>的劣势，以及搭配proxy出现的Reflect其存在的原因，了解了这些，我们接下来就可以走进vue3的源码世界了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;熟悉&lt;strong&gt;vue3&lt;/strong&gt;的同学都知道，&lt;strong&gt;vue3&lt;/strong&gt;的底层的响应式实现由&lt;strong&gt;O</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（1.1）搭建属于自己的vue3</title>
    <link href="https://bluedancers.github.io/2023/01/29/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%881.1%EF%BC%89%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84vue3/"/>
    <id>https://bluedancers.github.io/2023/01/29/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%881.1%EF%BC%89%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84vue3/</id>
    <published>2023-01-28T16:00:00.000Z</published>
    <updated>2023-02-14T03:28:05.420Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​我们本次源码的目的是最终完成一个简化版的vue3，我们将他称为vue3-mini，本节我们就开始项目的搭建工作。</p><h3 id="生成项目"><a href="#生成项目" class="headerlink" title="生成项目"></a>生成项目</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h3 id="引入ts"><a href="#引入ts" class="headerlink" title="引入ts"></a>引入ts</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -init</span><br></pre></td></tr></table></figure><p>tsconfig.json范本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 编辑器配置 </span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 根目录</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 严格模式标志</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 指定类型脚本如何从给定的模块说明符查找文件。</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// https://www.typescriptlang.org/tsconfig#esModuleInterop </span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// JS 语言版本</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许未读取局部变量</span></span><br><span class="line">    <span class="attr">&quot;noUnusedLocals&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许未读取的参数</span></span><br><span class="line">    <span class="attr">&quot;noUnusedParameters&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许解析 json</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 支持语法迭代:https://www.typescriptlang.org/tsconfig#downlevelIteration </span></span><br><span class="line">    <span class="attr">&quot;downlevelIteration&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许使用隐式的 any 类型(这样有助于我们简化 ts 的复杂度，从而更加专注于逻辑本身 </span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 模块化</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 转换为 JavaScript 时从 TypeScript 文件中删除所有注释。</span></span><br><span class="line">    <span class="attr">&quot;removeComments&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 禁用 sourceMap</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// https://www.typescriptlang.org/tsconfig#lib</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 设置路径映射</span></span><br><span class="line">    <span class="comment">// 设置后ts在打包过程中也会自动完成路径映射,需要其他地方再次设置</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@vue/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;packages/*/src&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;packages/*/src&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="引入代码格式化"><a href="#引入代码格式化" class="headerlink" title="引入代码格式化"></a>引入代码格式化</h3><p>vscode下载插件prettier</p><p>创建文件.prettierrc.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">singleQuote</span>: <span class="literal">true</span>, <span class="comment">// 单引号</span></span><br><span class="line">  <span class="attr">trailingComma</span>: <span class="string">&#x27;es5&#x27;</span>, <span class="comment">// 对象属性最后有 &quot;,&quot;</span></span><br><span class="line">  <span class="attr">semi</span>: <span class="literal">false</span>, <span class="comment">// 是否需要分号</span></span><br><span class="line">  <span class="attr">printWidth</span>: <span class="number">110</span>, <span class="comment">// 一行最多120</span></span><br><span class="line">  <span class="attr">jsxSingleQuote</span>: <span class="literal">true</span>, <span class="comment">// jsx使用单引号</span></span><br><span class="line">  <span class="attr">tabWidth</span>: <span class="number">2</span>, <span class="comment">// 一个tab代表几个空格数，默认就是2</span></span><br><span class="line">  <span class="attr">useTabs</span>: <span class="literal">false</span>, <span class="comment">// 不使用缩进符，而使用空格</span></span><br><span class="line">  <span class="attr">jsxBracketSameLine</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建文件.prettierignore</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Ignore artifacts:</span><br><span class="line">dist</span><br><span class="line">build</span><br><span class="line">coverage</span><br><span class="line">common</span><br><span class="line">tsconfig.json</span><br><span class="line">README.md</span><br></pre></td></tr></table></figure><p>后续的代码格式化工具上选择prettier即可</p><p>我们这里不使用eslint，不做非常强制的代码校验</p><h3 id="创建相关文件"><a href="#创建相关文件" class="headerlink" title="创建相关文件"></a>创建相关文件</h3><p>按照vue3源码中的结构进行创建，暂时只创建packages文件夹</p><h3 id="引入打包工具"><a href="#引入打包工具" class="headerlink" title="引入打包工具"></a>引入打包工具</h3><p>全局安装rollup</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global rollup</span><br></pre></td></tr></table></figure><p>项目创建rollup配置文件rollup.config.js</p><blockquote><p>output中的name暂时不生效</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-node-resolve&#x27;</span></span><br><span class="line"><span class="keyword">import</span> commonjs <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-commonjs&#x27;</span></span><br><span class="line"><span class="keyword">import</span> typescript <span class="keyword">from</span> <span class="string">&#x27;@rollup/plugin-typescript&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认导出一个数组,数组中,每个对象都是独立导出项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">input</span>: <span class="string">&#x27;packages/vue/src/index.ts&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>: [</span><br><span class="line">      <span class="comment">// 导出iife的包(自动执行 适用于script标签)</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&#x27;iife&#x27;</span>,</span><br><span class="line">        <span class="attr">sourcemap</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">file</span>: <span class="string">&#x27;./packages/vue/dist/vue.js&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Vue&#x27;</span>, <span class="comment">// 指定打包后的全局变量名（如果被打包代码，没有任何导出，将不存在导出名称）</span></span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="comment">// 让rollup 支持打包ts代码,并可以指定ts代码打包过程中的相关配置</span></span><br><span class="line">      <span class="title function_">typescript</span>(&#123;</span><br><span class="line">        <span class="attr">sourceMap</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// 与webpack不同的是,rollup并不知道如何寻找路径以外的依赖,比如node_module中的</span></span><br><span class="line">      <span class="comment">// 帮助程序可以在项目依赖中找到对应文件</span></span><br><span class="line">      <span class="title function_">resolve</span>(),</span><br><span class="line">      <span class="comment">// rollup默认仅支持es6的模块,但是还存在很多基于commonjs的npm模块,这就需要改插件来完成读取工作</span></span><br><span class="line">      <span class="title function_">commonjs</span>(),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>package.json中增加打包命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;rollup -c&quot;</span></span><br></pre></td></tr></table></figure><p>执行打包命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>然后我们在<code>packages/vue/src/index.ts</code>编写测试代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123; isArray &#125; from &#x27;@vue/shared&#x27; // ts部分我们配置了paths选项</span><br><span class="line"></span><br><span class="line">console.log(isArray([]))</span><br></pre></td></tr></table></figure><p>不出意外的话，这里肯定是正常打包了，并且会生成sourceMap文件。</p><h3 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h3><p>package的script中增加一个命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;rollup -c -w&quot;</span><br></pre></td></tr></table></figure><p>至此，基础的vue3框架环境我们就搭建完成了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​	我们本次源码的目的是最终完成一个简化版的vue3，我们将他称为vue3-mini，本节我们就开始项目的搭建工作。&lt;/p&gt;
&lt;h3 id=</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（1）vue3 源码解读前的准备工作</title>
    <link href="https://bluedancers.github.io/2023/01/28/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%881%EF%BC%89vue3%20%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://bluedancers.github.io/2023/01/28/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%881%EF%BC%89vue3%20%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</id>
    <published>2023-01-27T16:00:00.000Z</published>
    <updated>2023-02-18T06:22:06.001Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​在22年下半年就有想阅读vue3源码的想法了，但是因为很多不可抗力原因，一直在不断拖延。</p><p>​23年年初下定决心，一定要在半年内完成vue3的核心源码的解读，所有源码的阅读记录我都讲输出到本专栏中，目测可能有10片以上的文章，在输出中，我会尽力保证文字的简单易懂；</p><p>​话不多说，我们直接开始吧！</p><h3 id="下载vue3源码"><a href="#下载vue3源码" class="headerlink" title="下载vue3源码"></a>下载vue3源码</h3><p>仓库地址：<a href="https://github.com/vuejs/core">https://github.com/vuejs/core</a></p><p>本专栏版本为3.2.37，地址：<a href="https://github.com/vuejs/core/releases/tag/v3.2.37">https://github.com/vuejs/core/releases/tag/v3.2.37</a></p><p>克隆仓库地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/vuejs/core</span><br></pre></td></tr></table></figure><h3 id="打包与运行vue3源码"><a href="#打包与运行vue3源码" class="headerlink" title="打包与运行vue3源码"></a>打包与运行vue3源码</h3><p><strong>vue3</strong>采用<strong>monorepo</strong>进行包管理，而<strong>monorepo</strong>由<strong>pnpm</strong>提供，所以需要一定要预先安装<strong>pnpm</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pnpm</span><br></pre></td></tr></table></figure><p><strong>pnpm</strong>安装完成后，开始安装<strong>vue3</strong>的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install</span><br></pre></td></tr></table></figure><p>依赖安装完成后，开始<strong>vue3</strong>源码的打包工作，该步骤可能花费较长时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>​打包完成后，将会在<code>packages/vue/dist</code>，路径下生成打包后的vue3的代码，接下来我们去<code>packages/vue/examples</code>官方提供的案例中运行打包后代码，在目标html文件通过<strong>vscode启动live server</strong>，即可完成vue3示例的运行。</p><h3 id="打包vue3源码可能遇到的问题"><a href="#打包vue3源码可能遇到的问题" class="headerlink" title="打包vue3源码可能遇到的问题"></a>打包vue3源码可能遇到的问题</h3><h4 id="Error-Command-failed-with-exit-code-128-git-rev-parse-HEAD"><a href="#Error-Command-failed-with-exit-code-128-git-rev-parse-HEAD" class="headerlink" title="Error: Command failed with exit code 128: git rev-parse HEAD"></a>Error: Command failed with exit code 128: git rev-parse HEAD</h4><p>运行<code>build</code>之后，出现以上错误，原因是因为<strong>build</strong>的过程中，会读取了当前<strong>git</strong>的<strong>commit id</strong>，如果当前目录下没有**.git**文件，相关逻辑就会出错，所以需要注释掉<code>scripts/build.js</code>中以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">line34 const commit = execa.sync(&#x27;git&#x27;, [&#x27;rev-parse&#x27;, &#x27;HEAD&#x27;]).stdout.slice(0, 7)</span><br><span class="line">line97 `COMMIT:$&#123;commit&#125;`</span><br></pre></td></tr></table></figure><p><strong>跳过获取commitID相关逻辑代码，即可正确打包。</strong></p><h4 id="vue3示例中源码未支持SourceMap"><a href="#vue3示例中源码未支持SourceMap" class="headerlink" title="vue3示例中源码未支持SourceMap"></a>vue3示例中源码未支持SourceMap</h4><p>当我们完成上文的打包后，我们运行一个<strong>example</strong>，运行后就会发现一个问题，我们使用Vue3源码是打包后的代码，没有sourceMap，这样是无法调试源码的。</p><p><strong>vue3</strong>源码内提供了打开<strong>sourceMap</strong>的能力，修改打包命令<code>package.json</code>中的line7，即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node scripts/build.js -s</span><br></pre></td></tr></table></figure><p>为什么这个改动呢？我们还要从<code>rollup.config.js</code>入手</p><p>在<code>rollup.config.js</code>的<strong>line94</strong> 我们可以看到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">output.sourcemap = !!process.env.SOURCE_MAP // 反向取反，获取其对应的boolean类型的值</span><br></pre></td></tr></table></figure><p>要开启sourcemap首先需要修改process.env.SOURCE_MAP，而这个值来源于<code>scripts/build</code></p><p><code>scripts/build.js</code>中的<strong>line103</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sourceMap ? `SOURCE_MAP:true` : ``</span><br></pre></td></tr></table></figure><p>而这里的sourceMap来源于命令行后缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const args = require(&#x27;minimist&#x27;)(process.argv.slice(2))</span><br><span class="line">const sourceMap = args.sourcemap || args.s</span><br></pre></td></tr></table></figure><p><strong>所以我们只需要在脚本命令后增加<code>-s</code>即可开启sourcemap。</strong></p><p>至此为止，我们便可以在vue源码环境中进行阅读与调试了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;​	在22年下半年就有想阅读vue3源码的想法了，但是因为很多不可抗力原因，一直在不断拖延。&lt;/p&gt;
&lt;p&gt;​	23年年初下定决心，一定要在</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>（0）vue3源码解读前的准备工作</title>
    <link href="https://bluedancers.github.io/2023/01/26/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%880%EF%BC%89vue3%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    <id>https://bluedancers.github.io/2023/01/26/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/%EF%BC%880%EF%BC%89vue3%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%89%8D%E7%9A%84%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/</id>
    <published>2023-01-25T16:00:00.000Z</published>
    <updated>2023-02-18T06:22:01.620Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令式VS声明式"><a href="#命令式VS声明式" class="headerlink" title="命令式VS声明式"></a>命令式VS声明式</h2><h3 id="命令式"><a href="#命令式" class="headerlink" title="命令式"></a>命令式</h3><p>​我们的前端代码中，大部分都是命令式思维，这种思维与我们现实是具备一定的一致性的，也就是说他不抽象，这也是为什么JavaScript是一门容易入门的语言。</p><p>​比如我们想获取Dom1中的Dom2中的Dom3，并给其赋值“你好”，则我们的流程是</p><ol><li>获取dom1</li><li>获取dom1中的dom2</li><li>获取dom2中的dom3</li><li>给dom3赋值你好</li></ol><p>​命令式编程相对于结果更加强调过程，非常好理解，但是命令式也有他的缺点，那就是一旦命令很长，代码也会非常难以维护。</p><p>​</p><h3 id="声明式"><a href="#声明式" class="headerlink" title="声明式"></a>声明式</h3><p>​而声明式则更多关注结果，究竟是什么样的过程，这并不是开发者需要关心。</p><p>​我们依旧使用上面的例子，我们只需要在Dom3中进行<code>&#123;&#123; msg &#125;&#125;</code>声明，然后只关心何时更新其具体的值即可，msg是如何更新，这并不是开发者关心的问题，一般来说这些工作我们都是交给框架进行完成的。</p><h3 id="如何评价？"><a href="#如何评价？" class="headerlink" title="如何评价？"></a>如何评价？</h3><p>评价一个框架的好坏，我们一般从2个角度出发</p><ol><li>性能</li><li>可维护性</li></ol><p>命令式编程是JavaScript自带的编程方式，毫无疑问性能是最好多，声明式则需要我们内部进行一些运算，但是在可维护性的角度上来说，声明式的代码要更加简单、直观，项目越复杂，越能体现声明式的可维护性</p><p>总结一下</p><p>性能：命令式 &gt; 声明式（项目越大，差距越小）</p><p>可维护性：声明式 &gt; 命令式（项目越大，差距越大）</p><h3 id="企业应用的开发与设计原则"><a href="#企业应用的开发与设计原则" class="headerlink" title="企业应用的开发与设计原则"></a>企业应用的开发与设计原则</h3><p>企业开发中，公司关注的无非就是以下2点</p><ul><li>项目成本：就是开发周期的控制，如何更快更稳定的完成开发工作是首要目标</li><li>开发体验：开发体验式开发者的第一诉求（开发、维护难度），但是也符合公司诉求，因为好的开发体验可以加速开发进度</li></ul><p>所以在企业纬度，可维护性是非常看重的一点，所以企业更加愿意使用声明式的开发方式</p><p>但是在性能的角度来说，命令式是一定高于声明式的，难道性能就不重要吗？</p><h3 id="框架的取舍"><a href="#框架的取舍" class="headerlink" title="框架的取舍"></a>框架的取舍</h3><ul><li>在可维护性的角度 声明式 &gt; 命令式</li><li>从性能的角度 命令式 &gt;  声明式</li></ul><p>​所以框架设计上就希望可以兼顾两者，既要声明式，又要尽可能的保持性能不会太差，在性能与可维护性的基础上寻找一个平衡点，这就是框架的核心目标。</p><h3 id="声明式框架的实现要素"><a href="#声明式框架的实现要素" class="headerlink" title="声明式框架的实现要素"></a>声明式框架的实现要素</h3><p>​声明式框架需要提前在html中进行声明，这并不符合html的规范，所以我们的vue中的HTMl代码其实并非真实的代码，而是通过内部的编译后，形成一个真实运行的代码。</p><p>​而这在内部实现上，存在2个步骤</p><pre><code>1. 编译（compiler）1. 运行（runtime） </code></pre><p><img src="https://www.vkcyan.top/Fh1DxEJ7LsjiwdRXo92cGSOxSjJ_.png"></p><h3 id="编译时"><a href="#编译时" class="headerlink" title="编译时"></a>编译时</h3><blockquote><p>将模板代码编译为一种浏览器可读格式</p></blockquote><p>​框架为了开发体验，经常会提供一些更加人性化的写法，这些人性化的写法便于人类阅读，但是不利于机器阅读，所以需要将我们编写的代码编译为机器便于阅读的代码，在vue中，compile函数用于编译template为render函数认识的代码。</p><p>​</p><h3 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h3><blockquote><p>将vnode转变为当前平台实际运行的代码</p></blockquote><p>​在运行时阶段有两个非常重要的函数<strong>h render</strong>，h函数用于生成虚拟dom，也就是vnode，render函数则负责解析与渲染vnode到特定的平台，如果是web平台，则渲染为dom。</p><h3 id="vue为何采用编译时-运行时"><a href="#vue为何采用编译时-运行时" class="headerlink" title="vue为何采用编译时 + 运行时"></a>vue为何采用编译时 + 运行时</h3><ol><li>编译时+运行时的代码实现中，我们规避了直接操作dom，而是引入了vnode的概念，让我们对html的逻辑变成了对js的逻辑，运行速度大大增加</li><li>使用编译时 + 运行时可以将每个流程更加彻底的解耦合，使更多语言可以被编译，可以被运行到更多平台。</li></ol><h3 id="为什么vue3对ts支持更加友好？"><a href="#为什么vue3对ts支持更加友好？" class="headerlink" title="为什么vue3对ts支持更加友好？"></a>为什么vue3对ts支持更加友好？</h3><p><strong>首先vue3对ts支持友好并不是仅仅因为ts写的</strong>，这是一个片面的回答，vue3有用良好的类型校验与格式存在2种原因</p><ol><li>大量编写type类型文件，让vue3+ts代码非常严谨</li><li>api设计的前期就考虑到了这一点，尽管DSL实现类型推到非常麻烦，但是vue团队还是实现了</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;命令式VS声明式&quot;&gt;&lt;a href=&quot;#命令式VS声明式&quot; class=&quot;headerlink&quot; title=&quot;命令式VS声明式&quot;&gt;&lt;/a&gt;命令式VS声明式&lt;/h2&gt;&lt;h3 id=&quot;命令式&quot;&gt;&lt;a href=&quot;#命令式&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue3-配置环境</title>
    <link href="https://bluedancers.github.io/2023/01/19/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/vue3-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
    <id>https://bluedancers.github.io/2023/01/19/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/vue3-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</id>
    <published>2023-01-18T16:00:00.000Z</published>
    <updated>2023-01-20T08:54:02.258Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​使用vue3也有一年半的时间的，原本打算在22年的9月开始源码阅读的，一方面是作为一个前端人应当去了解技术原理，其二也是想通过源码解读来回答一些我心中对vue3的疑惑；但是后面因为公司业务相关事宜，实在是静不下心来完成源码学习的工作；转眼之间又来到了23年春节，赋闲在家，是一个难得的学习的机会，所以打算在2月中旬之前，完成vue3源码的学习与分析工作。那我们废话就不多说了，直接开始吧。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h4 id="vue2与vue3的对比"><a href="#vue2与vue3的对比" class="headerlink" title="vue2与vue3的对比"></a>vue2与vue3的对比</h4><ul><li>对Typescript支持不友好</li><li>大量的api都挂载在Vue的原型上，难以实现tree shaking</li><li>架构上对跨平台开发支持较差</li><li>composition-api 收到react hook的启发</li><li>对虚拟dom进行重写，对模板编译进行优化</li></ul><h4 id="monorepo介绍"><a href="#monorepo介绍" class="headerlink" title="monorepo介绍"></a>monorepo介绍</h4><ul><li>一种将多个package包打包到一个仓库的技术</li></ul><h4 id="monorepo环境搭建"><a href="#monorepo环境搭建" class="headerlink" title="monorepo环境搭建"></a>monorepo环境搭建</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	使用vue3也有一年半的时间的，原本打算在22年的9月开始源码阅读的，一方面是作为一个前端人应当去了解技术原理，其二也是想通过源码解读来</summary>
      
    
    
    
    <category term="Javascript-2023" scheme="https://bluedancers.github.io/categories/Javascript-2023/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>一个5年前端er的“前世今生”（前传）</title>
    <link href="https://bluedancers.github.io/2023/01/11/%E6%97%A5%E5%B8%B8/%E4%B8%80%E4%B8%AA5%E5%B9%B4%E5%89%8D%E7%AB%AFer%E7%9A%84%E2%80%9C%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%E2%80%9D%EF%BC%88%E5%89%8D%E4%BC%A0%EF%BC%89/"/>
    <id>https://bluedancers.github.io/2023/01/11/%E6%97%A5%E5%B8%B8/%E4%B8%80%E4%B8%AA5%E5%B9%B4%E5%89%8D%E7%AB%AFer%E7%9A%84%E2%80%9C%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F%E2%80%9D%EF%BC%88%E5%89%8D%E4%BC%A0%EF%BC%89/</id>
    <published>2023-01-10T16:00:00.000Z</published>
    <updated>2023-01-13T11:42:06.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​我是一名18年下半年工作的一名前端开发，现在是一家规模不大的公司的<strong>前端组长 + C端产品经理</strong>，今年是我进入前端岗位的第五个年头，做C端产品经理的第一年；22年外部环境较差，技术岗位似乎也不再狂热，也看到了很多同学面对技术岗位的疑问，<strong>前端是否还值得学？</strong>，<strong>我适不适合学编程？</strong>，23年初亦是一个改天换日的节骨眼，借此机会，我也重新审视一下自己。希望我的经历可以为大家答疑解惑，为大家的职业选择提供一些参考。</p><p>​篇幅较长，打算分两篇文章，前传写我是如何一步一步走向前端，以及学习开发的过程给我带来了怎样的改变。</p><p>​对应的是<strong>16年9月到18年6月</strong>，也就是我进入大学之后，进入工作岗位之前的时间。</p><p>​</p><h2 id="2016年"><a href="#2016年" class="headerlink" title="2016年"></a>2016年</h2><p>​我是一名没参加过高考的同学，因为高三期间已经我确定了本科无望，决定在16年春天专科的自主招生中提前走，当时对专业的选择很清晰，因为一直以来特喜欢研究电子产品，对计算机很有兴趣的，所以专业方向很明确。为了求稳，最后选择了相对冷门的“物联网技术与应用”专业，这个专业其实和计算机技术与应用差不多，2016年3月20号考试，300分卷子，考了280分。</p><p>​考试完成后，在家休息了10天，耐不住寂寞，就想出去挣钱，没想到意外开始了长达5个月的打工时光，那时候尚且未成年，9月还要上学，能找到一份有薪水的工作，且一个月有1600（对于当时的我来说，已然是一笔巨款），实属老天保佑，虽然是厂里面。这也是我人生中第一次进厂打工，那段日子，对我后来在大学中坚定学习信念产生的很大的影响，如果读者们兴趣的话，到时候再更新吧，我们回到主线故事。</p><p>​转眼就到了<strong>16年9月</strong>，大学生活正式开始了，大一上学期简直就是一塌糊涂，学校教的第一门编程语言是C，可能天赋不够，第二节课就听不懂了，<strong>那一年基本玩过来的，其实内心已经很焦虑，但是又找不到方向。</strong></p><p>​面对C语言课程，我的表情大概是这样的。</p><p><img src="https://www.vkcyan.top/Fm0KRR607hVdwAyCYhs6qju1nUqu.png"></p><p>​后来到了<strong>16年冬天</strong>，学长给我看了一个表白主题的H5，依稀记得是用canvas实现的，代码那时候肯定是看不懂的，但是还是无师自通的发现了可以用记事本全局替换文字，发现这个秘密后，我打算给刚谈恋爱不久的同学一个惊喜（直男行为，请勿模仿），把里面的名字，替换成我和她的名字，项目里面很多文件，我估摸着用记事本一个一个替换至少花了三小时，后来被人家踹了。大一上学期就这样在学生会、游戏、恋爱，网吧中荒废。。</p><p>​转眼到了<strong>17年春节</strong>，走亲访友下午回来后，一般都很闲，可能真的是太无聊了，竟然想学习一下之前的表白H5，学长告诉我，先学HTML+CSS，于是我就去了慕课网（imooc），学习了HTML+CSS的初级课程。不得不说，慕课网的课程做的很好，简单的同时，又充满了成就感，大约花了7天的时间，认认真真的把课程学完了，那时候还用本子做笔记，可惜本子现在找不到，要不然一定拍出来给大家看看。学习半个月后，我根据当时的全部知识，在2小时内使用Hbuilder临摹了百度的搜索首页，真的是成就感满满啊。</p><h2 id="2017年"><a href="#2017年" class="headerlink" title="2017年"></a>2017年</h2><p>​后来就到了大一的下学期，开始讲Java了，说实话，我也不清楚是老师问题，还是我的问题，我依旧上课听不懂。那时候已经不想荒废时间了，于是我上课就自己临摹网页，比如淘宝PC站点、网易新闻首页，看到啥就临摹啥。也算是认真学习了。还瞎折腾在阿里云上买了轻量级服务器和域名，配合wordpress，搭建个人博客；因为第一次接触阿里云，很多地方都无从下手，全靠自己摸索，一弄就是几个小时，急的我满头大汗，当然最终我还是部署成功了，<strong>回头来看，【折腾的过程】又何尝不是一种财富呢</strong>。</p><p>​随着临摹的网页越来越多，html+css也愈发熟练，我开始进入JavaScript的神奇世界，那大概是<strong>17年5月</strong>。看的是网易云课堂的李炎恢老师的JavaScript教程；虽然课程有年头了，但是老师教的很不错。JavaScript难度比html大多了，最终还是坚持下来了，完成了第一遍学习，到了这个阶段，真的已经学入迷了，<strong>每天晚上我都和狗皮膏药一样跟着准备竞赛的室友找一间没人的办公室学习</strong>。</p><p>​<strong>17年6月下旬</strong>，暑假前夕，在室友的引荐下，终于被竞赛老师注意到了，竞赛老师姓蔡，我们私下都叫他老蔡。</p><p>​我对竞赛是充满期待的，同时也意识到了这是一次非常难得的机会，可惜谈话并不顺利，我和老师非常充分了的说明了我想参加比赛的决心，老师也和我聊了老半天。但是对于比赛这件事，却让我再学习学习，扔了几本书给我打发走了。我记得其中有一本《JavaScript设计模式》，完全看不懂。最后在大学图书馆重新找了本JavaScript入门数据。而进入竞赛组的学生都去北京培训了，我不止一次的表示也想去培训，但是老师委婉的表示，没有前端培训，你暑假自己学学吧，说起来还挺失落的。</p><p>​比赛结束了我才知道，老师当时认定我不是正经人，其一是当时染了黄毛，其二是参加了学生会，其三是没有参加高考。</p><p>​<strong>17年的暑假</strong>，只能回家啦。在之前的工厂继续打工，还好工厂里面可以接触到电脑，一边打工一边继续学习css、临摹网页，暑假就这样过去了，这次的工资后来成了我校内生意的启动资金，帮我赚到了半年的生活费，这个也有空再聊吧。</p><p>​<strong>17年9月</strong>大二开始了，长期的学习已经让我铁了心想走前端路线了。自然不想把时间浪费在课程上了。我和老师请求能不能不上课，去没有人的教室自己学习，我们安卓老师比较好说话，说明情况后，老师让我和安卓竞赛组的学生一起学习，时至今日，依旧想说一声，感谢你，赵老师；</p><p>​大概就这样保持高强度学习到了9月底，机会终于来了，蔡老师的云计算竞赛组中，web + docker位置一直存在空缺，本届没有合适的学生，上一届同学已经功成名不想继续参加了，蔡老师最终还是给了我试一试的机会，<strong>10月7号，正式进入云计算竞赛组。</strong></p><p>​<strong>17年的10月初</strong>，进入实验室前夕，还朋友去南京玩了一圈，逛逛夫子庙、南京博物馆，与自由做一个告别。回来当晚就进入实验室。云计算竞赛组的规矩非常严格，作息时间：<strong>8:30 - 11:00&#x2F;14:00 - 18:00&#x2F;19:00 - 22:30，周一到周日全年无休，堪比互联网行业9107</strong>，但是对我来说这是得之不易的机会，因为兴趣，所以快乐。</p><p>​进来之后，蔡老师就给我定了目标，一个月之内搞定web项目，起初还是有信心的，但看到这个所谓的web项目实际上是java的SSH项目时，我懵了。</p><p>​整个项目web占比并不多，反而java开发量占比巨大，那个阶段我只会HTML CSS JavaScript（ES5），并且仅限静态页面的水平，web前端，HTTP，前后端交互完全不了解，更别说java了，<strong>相当于10级萌新直接挑战60级boss</strong>。初期异常困难，把ajax都写到java里面去了，还不知道为什么编译器报错，急的我天天都睡不着，好在整个10月学长一直对我进行指导，帮助我消化java部分，加上之前前端基础比较扎实，将绝大部分处理逻辑移到了前端侧后，11月初终于把ssh项目全部搞明白了，在实验室留了下来。</p><p>​后面<strong>11月、12月</strong>都是日复一日的不断的学习，也进入了高速学习阶段，linux、docker、mysql、git，都是竞赛的一部分，肯定需要学习的。于此同时，私下也在继续深入前端领域，开始进入前端工程化的世界，学习<strong>Vue</strong>，之前一直写的都是原生或者jquery，编码思维上是面向过程的，刚开始接触Vue，很蒙圈，也很新奇，此外也逐渐进入了大前端领域，包括webpack scss typescript nodejs，还有github npm，琳琅满目的框架与工具，进一步的让我感受到了技术的魅力。</p><p>​当然JavaScript不能放弃，那段时间把冴羽老师的JavaScript深入系列，专题系列认真看了一遍，当时只能看懂40%，但是依旧给了我莫大的帮助，对JavaScript的理解提升了一个档次，还有其他很多老师们的博客以及教学视频，非常感谢前辈们无私的奉献，有你们，技术世界会变得更好。</p><p>​一转眼就放寒假了，我们竞赛组留在在学校，17年冬天很冷，鹅毛大雪，宿舍门口杯口粗的树干都压断了，为了增加学习时间。我也搬到实验室住了；</p><img src="https://www.vkcyan.top/Fh7mSutfrTnszLkF5HrxcJJvco1f.png" style="zoom:33%;" /><p>​这里我重点说一下，我们云计算实验室，听起来很高大上，其实上环境非常差，没有空调，到处都是机房的线，墙壁发黄并且起壳；是我们睡觉 + 吃饭 + 学习的地方，同时还是我们老师的办公室，而且还是顶楼，窗户也关不严，冬天风嗖嗖的，夏天墙壁被晒得发烫又像烤箱。<strong>不过我不在乎，燕雀亦有鸿鹄之志</strong>。我们在过年的前三天回家了，学校还发了坚果之类的慰问品，咱们学校还是很不错的。我家距离学校并不远，都在一个城市，但是这却是我时隔半年，第一次回家；临走前，学长给我丢了一本书《深入理解ES6》，让我过年在家继续学习。</p><p>​动荡的2017年就这么过去了，年初还键盘都敲不利索的学习html css，而年底已经可以做一些独立开发，这一年经历了太多，从对未来的焦虑到对未来的兴奋，从荒废到废寝忘食的学习，，得到了竞赛老师的认可，进入了学习氛围浓厚的实验室，这是独一无二的一年。</p><h2 id="2018年"><a href="#2018年" class="headerlink" title="2018年"></a>2018年</h2><p>​<strong>18年春节</strong>，农历初五返回学校继续学习，在家的一个星期中也没歇着，加紧时间将《深入理解ES6》的全部内容看完，知识点很多，<strong>let、箭头函数、解构赋值、模板字符串、等等</strong>，受益匪浅，ES6是革命性的武器，后面我又断断续续学习 ES6 2年，足可见ES6的重要性，对了，深入ES6主要学习了《你不知道的JavaScript》，我们继续回到主线故事吧。</p><p>​18年上半年只有一个旋律，<strong>职业技能大赛</strong>，<strong>18年3月中旬</strong>进行安徽区的省赛，前三名可以参与5月下旬深圳举办的国赛，蔡老师慎重思考后，决定暂时不让我上，让上一届的学长参加省赛。我可以理解，竞赛老师要为比赛结果负责，而我资历最浅，自然风险最高。最终兄弟们在安徽芜湖的芜湖职业技术学院拿到了<strong>省赛第一名，顺利进入国赛</strong>。</p><p>​在比赛练习的间隙，我依旧保持了不断学习前端技术的习惯，具体学习方法是不断的看技术教程文章与视频、不断的写代码加深理解，那段时间经常看慕课网的付费Vue课程，老师们精彩的课程，在我理解现代前端上起到了很大的作用，另外就是技术胖老师的一些免费大前端课程，非常感谢老师们。同时也开始尝试写博客，进行输出，希望可以像帮助过我的前辈们一样，用我的能力帮助到更多前端人。</p><p>​省赛之后，老师找我聊天，和我说会尽力为我争取国赛上场的资格，对与这件事，我很感动，因为校领导是不希望我上场的，我的学长能力更强，并且已经有一年参赛经验，能抗大旗，<strong>最后是蔡老师和校领导拍桌子，将一起责任担在自己肩上</strong>，才争取到了我国赛上场的机会，这些事情都是比赛结束之后才知道的，因为老师怕我比赛心理压力太大。其实蔡老师没理由这样，他的立场和校领导一样，只是蔡老师想尽自己所能，尽力为每一个追梦赤子带来回报，哪怕承受巨大的外界压力，真乃恩师也。</p><p>​<strong>18年5月下旬</strong>，我们踏着初夏的晴日，带着8个月日日夜夜的努力，踏上了前往深圳的路程。到深圳的时候，已经是半夜2点，第二天8点无论是老师还是学生，依旧准时起床，做比赛前的最后冲刺，艰苦环境打不到意志坚定的人。</p><p>​我们在深圳的宾馆练习到最后一刻；5月26号，正式开始比赛，我们早早的进入了比赛场地，对机器进行最后的调试。</p><p>​真的进场了，到了最后一刻，其实也不紧张了，比赛时间2小时，因为我准备充分，我的题目都非常快速的完成了，拿到了可以拿的所有分数，团队中后期出现一些问题，但是最终都妥善解决了，没记错的话，最后存在小部分题目没有完成，但是这已经非常非常好了。</p><img src="https://www.vkcyan.top/Fk-hsPAXam6uf15klt06j4FvLjIc.png" style="zoom:30%;" /><p>​响铃，比赛结束，键盘敲击声逐渐停歇，人们开始根据引导逐步走出赛场，我的眼眶已经湿润，这一路太辛苦；从小我就爱玩，小学去游戏厅，中学去黑网吧，从来不好好学习，最后上了专科，其实不是不想学，只是因为一直断档，导致无法跟上学习节奏，随着年纪的增加，内心也越来越焦虑与自责，对未来充满迷茫，也愧对父母这么多年的养育之恩，<strong>但那一刻，我成了自己的英雄</strong>。</p><p>​我们小组另外2个人因为没有拿到满分，似乎心情不太好，情绪没有渲染到位，我又把眼泪憋回去了，冷静下来后，仔细分析了一下，因为有一些题目没完成，内心还是比较担忧的，怕辜负了老师和大家这么久的努力。当天晚上成绩出来了，我们在全国88支队伍里面，排名第3，前10名国赛一等奖，我们成功了！。</p><img src="https://www.vkcyan.top/Fm7PwRSnBjGt3ZZDE32zxgscHLCI.png" style="zoom: 30%;" /><p>​成绩出来当晚，原本打算去看看深圳世界之窗，但是因为和校领导喝酒应酬，没去成，至今也没去成，回去的路上蔡老师和我们说了很多，包括强行让我上场和校领导的翻脸，以及这么多年搞比赛，做竞赛指导老师的艰辛；恩师难求，我们亦没有辜负蔡老师的期望。</p><p>​第二天领奖仪式后，我们下午便启程返回合肥，学校专车过来拉横幅、送鲜花给我们拍照纪念，那种感觉还挺奇妙的。后来回到学校实验室后，也许真的是太开心了，紧绷的神经突然松开，似乎陷入到了一段甜蜜梦境，所以啊，那一段记忆怎么也回想不起来了。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​我偶尔会想，如果在另一个宇宙，我与蔡老师擦肩而过，是否还能走到前端这条路，会不会毕业就去工厂，亦或者毕业后花费几万元去培训，这些都是更加难走的路线。不过现在我有了答案，无论是何路线，都将走向现在技术岗位。</p><p>​因为决定性的钥匙已经被我捏在手中，那就是<strong>兴趣</strong>。</p><p>​这也是我想送给大家的答案，技术岗位似乎已经不像几年前那样火热，内卷非常严重，大厂开始裁员，互联网这么多年的发展似乎已经走到了尽头，不是这样的，可以独挡一面的开发，始终是稀缺的；但如果是奔着待遇来的，那么大概率拿不到高工资，并且职业上限很有限。<strong>只有兴趣，只有发自性的去做自己认定的事情，无论什么样的风雪都吹不灭的意志，才能带你突破重围，一定要不断思考自己，去探究本我，寻找自己的闪光点，然后不问结果的去做，直到最后一刻。如果历尽千辛万苦依旧失败，不必气馁，因为这一路的历练与坚持，会帮助你下一个的选择，如果成功了，将是人生的转折，就像《肖申克的救赎》中，Andy凭借超凡的信念与毅力，爬过长达500米的下水道，重获自由。</strong></p><p>​前传大概就到这里，后面还有坎坷的<strong>求职、专升本，</strong>那是一段与大学完全不同的经历，篇幅有限，下一篇我们再见吧！👋🏻</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	我是一名18年下半年工作的一名前端开发，现在是一家规模不大的公司的&lt;strong&gt;前端组长 + C端产品经理&lt;/strong&gt;，今年是我</summary>
      
    
    
    
    <category term="日常" scheme="https://bluedancers.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="记录" scheme="https://bluedancers.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>阅读、游历和爱情</title>
    <link href="https://bluedancers.github.io/2023/01/10/%E9%98%85%E8%AF%BB/%E9%98%85%E8%AF%BB%E3%80%81%E6%B8%B8%E5%8E%86%E5%92%8C%E7%88%B1%E6%83%85/"/>
    <id>https://bluedancers.github.io/2023/01/10/%E9%98%85%E8%AF%BB/%E9%98%85%E8%AF%BB%E3%80%81%E6%B8%B8%E5%8E%86%E5%92%8C%E7%88%B1%E6%83%85/</id>
    <published>2023-01-09T16:00:00.000Z</published>
    <updated>2023-01-24T09:54:08.409Z</updated>
    
    <content type="html"><![CDATA[<p>​这是梁永安老师的22年的初版的一本书，也是我第一次了解到老师，读了一部分，说实话，我觉得这本书写的还不错，虽然有些人会说，梁老师对某件事物的评价，都是套公式一样的废话，听了就像没听一样，说实话，我不这么认为，《阅读、游戏和爱情》这本书，有些文字确实存在看似“废话”的句子，但是人间的道理，不就是这么一回事吗，人类不就是需要在外力的引导下与自己和解吗？</p><p>​读了三章，挺不错的，能看得出来，梁老师是一个热爱生活同时存在沉淀的人，他的文字具有让年轻人坐下来看看仅仅阅读的力量。</p><p>好了，废话就说这么多了，下面我会针对每个小节，写一些自己的想法，做一些积累与分享吧！</p><h2 id="自我"><a href="#自我" class="headerlink" title="自我"></a>自我</h2><p>​我们这一代，很多人是没有自我的，因为我们是中国第一代多元社会的经历者，我们大多数人带着传统思维来都这个多元的社会，一下子就陷入了一种迷茫，传统的思想不断受到挑战，甚至开始否定自我；在认识自我之前，我首先想说的是，要认识本我，很多人因为收到了家庭、社会、朋友的影响，开始分不清自我与本我，这可能会让一个人定位迷失，活在自己想象的世界里面，在寻找本我的过程中其实就是寻找自己在这个社会中的定位与坐标。</p><p>​而我们现代社会因为历史阶段的复杂性，一方面我们没能脱离小农经济的影响，一方面我们需要像游牧民族那样快速适应，而中国社会本身有啥一个层叠社会，导致我们国家的价值观不是一元的，是有多重标准的，这都导致年轻去认识自我存在难度。</p><p>​在这样的纷杂的大环境中，年轻人应该如何真正的认识自我呢，梁老师的答案是经历与突破，我们原生家庭带来的准则未必是符合现代的，倒是那些符合，那些又不符合呢？这个就需要当下的年轻人自己去经历，去沉淀，最后形成完整自我，完成对自身的突破。</p><p>​有一句话是，世界上只有一种英雄主义，那就是看清了生活的真相后依然选择热爱他，其实这就是经历并且形成完整自我的结果，这个过程是艰难、挣扎、困惑的。</p><p>​最后，想谈论一点，那就是坚定自己，其实在我这几年的经历里面，我也与都了很多对人格的冲击，从几十年来的固有观念的冲击，甚至对自身的准则产生怀疑，其实这是对自己认识不充分的体现，而现代生活又是如此多元化，坚定自己就显得极其珍贵，这里的坚定自己并不是顽固的坚持自己，而是接受世界，思考，批判，最后形成更加立体的自我。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>​现代社会中，我们大部分人拥有了选择生活的机会，却又没有选择自己想要生活的权利，这有两方面的原因，一是固有观念的影响，二是社会本身的影响，我们现代社会是一个高度分工的社会，并且大家自由寻找的社会，其实这也是残酷的，因为岗位有好有坏，并且每隔10年也许就会发生变化，这样的环境充分的激发的大家的积极性，但是也加深了整个社会的焦虑；</p><p>​有些朋友可能还没有找到让自己满意的工作，其实越是这样的情况下，越是需要大家先去做，去深刻的体验，只有这样才能找到希望，找到自己的目标，如果一份工作你用尽全力依旧无法感受到自己的价值，那时候再带着这份工作带来的宝贵经验，再次出发，未必不是一件好事。</p><p>​关于“摸鱼文化”，梁老师提出了很多很有价值的想法，一方面我们认同这种“亚文化”的出现，年轻人并非不努力，而是无可奈何，并且我们也没有形成让年轻人发泄的文化，最后形成了“躺平文化”，而这主要是两个因素的影响，一是层叠社会，二是我国的发展阶段，我们的父辈在改革开放的大环境下，是激发潜能，能人辈出的年代，他们在这边土地通过自己的打拼获得了回报，大家都看到了努力的价值，另外我国国情目前达到了非常关键的中等收入进入高等收入阶段，整个国家都在奋起前进，但是这样的环境中，我们年轻人是后来者，我们实际上是被裹挟在大环境的，我们从小直接自由主义的熏陶，但是通过了，却发现工作没有自由，所以这一切都是很合理的，年轻人陷入了迷茫，他们嘲笑自己躺平，实际上都是对生活的一种思考，这是积极向上的体现，我相信很多年轻人在挣扎与思考后都会发现，我能发挥自己的能力去让这个世界变得更好，去解决问题、探索答案，却不是仅仅抱怨问题。</p><p>​肯定工作的价值，哪怕是阶段性的重复并且无聊的工作也未必就毫无价值，梁老师给了我们两个建议，第一是保持好奇，现代社会，前路是不可预测的，保持好奇才能更上脚步；第二是走出舒适圈，在新的领域寻找可能性，我们要去感受这个世界，人类，自然，情感，了解的多了，内心才能开阔，见识才能增长。</p><p>​关于最后的斜杠青年，梁老师的观点我非常认同感，可以斜杠，但是不能太斜杠，太斜杠就不算斜杠了，那又如何找到值得斜杠的技能呢，梁老师的答案百分百真诚，百分百坚持的做一件事，如果我们没有到深入的程度，我们就无法值得一件事是否适合我们，哪怕最后结果不好，过程的宝贵经验也是非常重要的财富，帮助我们再次上路。</p><h2 id="人格"><a href="#人格" class="headerlink" title="人格"></a>人格</h2><p>​人心是复杂的，好人与坏人也是界定不清晰的，现代社会的起点是文艺复兴，而文艺复兴最大的要点，就是释放人的本性亦或者说是欲望，人心这个社会是如此的多元化，也是如此的复杂，在这样大环境如何评价一个人格好与坏？这并没有答案，对于新鲜事物的好与坏的评价社会是存在一个缓慢的接纳过程的，就像“涂鸦文化”，早些年是一种反抗运动是坏的，但是几十年后，这成为了一种个性的表达，成了一种象征，我们无法用传统的人本主义去判断在这个“多元”社会发生的事情。</p><p>​而发生在我们身边，对好人的界定依旧是复杂，书中提到了一个例子，我觉得非常经典，《挪威的森林》中，男主是放荡并且热爱自由的人，而女主却将男主当做唯一，这给男主造成了巨大的压力，以至于男主一直做出在女主看来很坏的事情，这是男主对自己自由的捍卫，对男主而言，这是好的，你看不同视角来看，就是不一样的，很难有一个道德标准去评价人的好与坏。</p><p>​那倒是什么是好人呢？书中给了一个我很赞同的答案，身处迷茫的人，因为迷茫意味着思考，意味着自己探测，只有不断思考，接纳这个队员的社会，并去理解他，王阳明曾说：”知行合一，致良知“，做一个不断思考与接纳的好人。</p><h2 id="躺平与幸福"><a href="#躺平与幸福" class="headerlink" title="躺平与幸福"></a>躺平与幸福</h2><p>​躺平是不是坏事？其实这几年，躺平文化，确实是越来越被大众所熟知，我们已经进入了现代社会，自然不可用农业社会的道德标准去看待，农业社会中，日出而作日落而息，生活是规律性的，这自然是不允许躺平，而现代社会是细化分工的，是无规律的，年轻人具备了去躺平的条件，而躺平不是对生活的放弃，而是对迷茫生活的一种思考，对压力的一种宣泄方式，但是因为我们独有的内卷教育体系，我们无法像欧美国家那样，发展出摇滚，朋克文化，形成了我们独有的文化，就是躺平。</p><p>​所以躺平不仅不是年轻人对生活的放弃，而是对现阶段社会的反抗与反思，在躺平中，人们开始思考我追求的究竟是什么，我如何过好我的一生，这都是一个人极其重要的组成部分，去认识到这个世界的高度，与自己的无知，去了解过去发生在这片土地的故事，然后再站起来，追求自己的幸福。</p><p>​以上很多只是我有感而发，并非文中的想法，梁老师想告诉我们，远比我上面描述的要多的多，也更加体系化，总而言之，躺平不是不可取的，不是不被允许的，但是躺平之后要想想，好好体会一下，深入的思考一下，然后继续出发。</p><h2 id="女性文化"><a href="#女性文化" class="headerlink" title="女性文化"></a>女性文化</h2><p>​这是一个很新鲜的话题，因为历史原因，女性在历史上是被压迫的存在，结婚后，就要离开原生家庭成为漂泊的人，成为别人的拥有物，这就需要女性对自己进行封闭，封建社会对女性的异化是非常严重的，也不断的压迫女性追求自由的权利，直到工业革命的出现，劳动力开始稀缺，女性得到走向前台的机会，并且在某些领域做的比男性更加好，从此女性获得了劳动回报“工资”，则意味着女人不再必须依赖男人才能活下去，拥有资本则拥有权利，但是女性文化的进步亦是曲折的，因为早期资本的介入，女性被按照男人的想法塑造出来，最后变成了追逐金钱的游戏，比如经济泡沫之前的日本，年轻女性被资本教育成了“如果没有拥有一个名牌包包就白活”。</p><p>​女性文化真正的追求的是突破对自由的束缚，不仅是行为，更加是观念上的自由，不被封建思想左右，不被小农思维左右，去深度的思考突破不应存在的限制，这一点与追求完善的人格具有一定的相似性。</p><h2 id="谈女性写作"><a href="#谈女性写作" class="headerlink" title="谈女性写作"></a>谈女性写作</h2><p>​女性写作最早最早起源与工业革命，因为工厂进入城市，大量贵族进入乡下，将一些古典贵族特有的习惯带入到乡绅，其中便有读书，女性开始了更大范围的阅读，这位后面女性的创作提供了基础。</p><p>​女性的小说，相对与男性的宏达诗篇，冒险游记，其内容侧重点要更加细腻，以微观与心理描写为主，这也和女性的性格与生产环境存在一定的关系，而这些又深受工业革命背景下女性的喜爱；</p><p>​科学研究表示，女性的表达欲望是男性的三倍，并且更加注重情绪交换，但是这并不代表女性可以更加轻松的成为一名作家，写作是需要天分的，属于艺术范畴，我们一般认为这是一种突破常理的，虽然写作似乎很难，但是我们希望大家去尝试，也许这是自己被埋没的天赋，也许在这个多元世界受到新的启发后，就会产生一些第一五二的想法，去探索、探寻内心世界与思想的解放，其实这不论男女，都应该这样。</p><h2 id="我们为何相爱相杀"><a href="#我们为何相爱相杀" class="headerlink" title="我们为何相爱相杀"></a>我们为何相爱相杀</h2><p>​我倒是觉得，这并不是坏事，工业革命之后，女性开始拥有人权，打破了几千年来的男尊女卑，女性得到了快速的进步，也开始兴起女性权利斗争运行，这在几百年前都是无法想象的事情，正是女性地位的上升，男女的差异才得以释放。</p><p>​那么在现代社会，男女又应该如何相处呢，其实这一点我也经验尚欠，但是我赞成梁永安老师的想法，两个人在一起的价值就是一起创造独一无二的生活，相爱是存量的，而相杀的感情的增量，正是因为勇敢的相杀，彼此才能成长，而不是功利的去看待男女关系。</p><p>​另外还要再多说一点，两个人再一起，不仅要向内走，更加要向外看，寻求更大的精神空间，现代社会是复杂的，多元的，我们现在的生活也非常向美国20世纪20年代，大量的年轻人成了无根的人，人的思想在不同环境中被影响与塑造，产生了很多选择，正是这些选择让人们活的很纠结，很累，这样的环境下，大家都想找一个可以帮助自己减负的人，婚姻就变成了解决问题的方式，但是在剩下的人生中，我们还会遇到比物质匮乏更加难的问题，精神的匮乏，人的异化，这都不是功利可以解决的。</p><p>​最后，我想写单身并没有罪，我们90后身处传统意识与现代社会的交融点，是复杂的一代，一方面我们追求精神自由，一方面却无法摆脱传统思维，我亦是如此，观念上跨不过去，虚妄的恐惧统治了自己，希望后来者积极探索不一样的可能性。</p><h2 id="谈爱情"><a href="#谈爱情" class="headerlink" title="谈爱情"></a>谈爱情</h2><p>​读到这里，我基本确定了，梁老师这本书的基调，是以中国社会、世界文明的研究作为一切观点的基础，然后再延伸到各个方面，爱情、工作、关系。</p><p>​未来的世界一定是更加开源，更加自由的社会，我们身处的时代要比国外更加复杂，我们短短几十年完成了工业化，同时存在农耕时代、工业时代、网络时代，我们身处自由之中，却被旧时紧固，这样的环境下，爱情就变成了一个非常复杂的命题，应该遵循传统，还是跟随内心，究竟是主动出击，还是听从安排，其实问题答案大家心里大部分都有数，现代社会重人权的，自然一切从自身出发，但是历史快速转变的背景下，又有几个可以做到突破镣铐呢。</p><p>​爱一个人，万不可停留在臆想中，然后自以为找到了理想，一旦臆想逐渐破裂，就会形成巨大的悲剧，所以我们已经要走追求美好的勇气，也许要真正的看清自己看清您一半与拒绝一段感情的勇气。</p><p>​最后，跟随本我，用实践去理解爱情，勇敢的去学习与接受这个世界，去打破固有观念的限制，保持学习，培养自己抓住一瞬间的能力。</p><p>​</p><h2 id="谈孤独"><a href="#谈孤独" class="headerlink" title="谈孤独"></a>谈孤独</h2><p>​人类需要孤独，因为孤独，人们才有审视自己的机会，因为孤独人们才有体会到感情的可贵，如果人人都在漂流，又如何去了解自己呢。</p><p>​现今时代确实是一个纠结的时代，一方面是我们受到传统观念中一切寻求安稳与规律的影响，一方面我们接触这几十年改革开放，多元文化的快速进入，很多年轻人在安稳与自由之间举棋不定，因为自由伴随着困难与孤独，而安稳则无趣且不自由，这是两个完全不同的思想。</p><p>​从古至今，所有有思想的人都是孤独的，因为他们具有超乎时代的能力，这对社会其实是一种反叛，自然探索者都是孤独的，而对于现代的年轻人来说，其实孤独并不是坏事，我们身处历史的转折点，需要很多的时间，去看清我们与历史、未来的关系，没有孤独则没有思考，没有思考在无法了解自己，无法审视自己，何谓自己的追求，在这个自由社会，我是否真正的自由了，这都需要我们静下心来，跳出现有框架，去俯瞰自己，一直活着浮华之中，只会让内在空空如也。</p><p>​梁永安老师说，如果一个人完全忍受不了孤独那就出现大问题了，其实我不是很同意这个观点，其实这与很多因素有关，有些人的生长环境已经达到了自己的想象，甚至超越了，这就成了孤独最大的障碍，因为她当下没有理由去抛弃这一切，放弃现有的优待，去从零开始另一种生活无疑是困难的，这是一种生活态度，长远来看，也许懂得越少，活的越快乐呢，人活的成功，深度并不是唯一标准，</p><p>​但是请不要抗拒孤独，不要荒废孤独，孤独其实是奢侈的，可以放心自己的机会不常有，去静静的思考，去阅读，去感受自身独一无二的特性，思想的深度将会帮助你活的更加精彩。</p><h2 id="谈读书"><a href="#谈读书" class="headerlink" title="谈读书"></a>谈读书</h2><p>​书籍是人类智慧的结晶，是独特的人类立足世界的基础，通过书籍，我们得到了和世界、时空对话的机会，年轻人们需要去多读书，去链接自己与世界，梁永安老师对读书有一些更加深层次的理解，就是寻找自己的生命之书，以及书籍具有改变命运的能力，历史中有很多非常伟大的人物，都与书籍有密不可分的关系，例如历史上的拿破仑，他一路增长欧亚大陆都带着《少年维特的烦恼》，这本书给予了拿破仑很大的精神支持，让人们在纷乱的世界中保持清醒。</p><p>​另外梁老师谈到了一点我非常赞同，并且我去做了的事情，就是细读，我读书的速度一直都是慢于平均速度的，因为当我看一本书的时候，我会从，历史背景、作者背景、描述方式，等等多个角度去分析与欣赏一个作品，这让我每看一本书都受益匪浅。</p><p>​第二个要谈的话题是，读书可以激发一个人的灵性，回想儿时，其实我一直都爱读书，作为独生子女一代，我的童年的独孤，是童话故事、拓展阅读，然后是作文范文，在之后是意林，但是因为客观因素，我接触到的书其实并不多；让我第一次感受到“读书”的魅力的书，是一本家喻户晓的书《活着》，我第一次意识到我们的世界并不是一层不变的，这个世界既有广度也有深度，于是书籍成了我重要的信息窗口，读书的同时让我沉浸在自己的反思中，获得更加有价值的提升，这是一件极其美妙的事情。</p><p>​关于如何验证读书的作用，梁老师的观点是“写作”，除了这个观点之外，我还想说另一点，“交谈”能力，我近五年是认知提升，几乎都是读书带给我的，读书，让我的思想有了深度，让我有看到一件事更加底层的能力，以及对同龄人的观点输出能力，所以想验证读书的左右，除了写作，不妨也可以多试试深度交流，可以是你的群友、你的上级，甚至老板，而观点的碰撞，又会产生新的价值，这是非常宝贵的。</p><p>​我们的时代，是适合读书的一代，我们的父辈被工业时代和尚不丰富的物质生活裹挟，并且大多存在兄弟姐妹，他们大部分没有反思自己，没有去读书的几乎，但是我们95后，是非常不同的一代，独生子女+现代社会，让我们每个人都是成了个体，社会关系逐渐变淡，我们有更多时间，和反思自己的机会，如何去反思？我认为读书是最好的选择，书籍让我们有了一场精神交流，去探究生活更加深层次的意义，读书会让我们收获良多。</p><h2 id="谈生活"><a href="#谈生活" class="headerlink" title="谈生活"></a>谈生活</h2><p>​我们这一代年轻人其实是充满疑问的，因为我们是第一届无法循规蹈矩的一代，父母也好，父母的父母也好，他们都是一代继承一代，但是现在这个方法行不通了，我们的生活失去了最基本的框架，在现代社会，原本的价值观已经被打破，我们的生活出现了多样性，失去的同时，我们也获得了我们往上任何一代都不具备的选择权利，所以首当其冲的就是，了解我们可以拥有怎样的生活。</p><p>​上上一代在温饱线挣扎，上一代被住房压住，而我们这一代，已经没有了以上烦恼，我们这一代一定是在文化上有更多的需求，按照梁老师的说话，我们应当打开想象，不要局限在一种日出而作日落而息的生活中，去外面把好的感觉带回来，我们年轻人还有很大的成长空间，多样的生活已经在我们眼前，但是我们还没有积极的去获取，我们的电影，书籍还有很大的市场，自由的文明与中华文明的结合，需要我们去努力场次独一无二的种子，希望大家在生活上可以跳开父辈的惯性生活，走出去看看，也走进自己的类型看看，用好我们独一无二的财富“自由”，一个好的人生，一定是具备深度的，即在岸上，也在水里。</p><h2 id="谈社交"><a href="#谈社交" class="headerlink" title="谈社交"></a>谈社交</h2><p>​我们这一代的人的社交，是不同前人的，我们创造了属于我们的独特文化，例如“宅文化”“躺平文化”，我们引导如何看待现代的社交方式，我们需要谈两个关键因素，家庭 社会，家庭是我们最初的社交场，也会对我们的人生产生非常深远的影响，而我们这一代，大部分都是独生子女，并且父母多半是工业阶段，在家庭感情上投入甚少，所以我们90后其实大部分是孤独的一代；这样环境进入社会，自然也很难形成大规模的社交群体，每个人更加停留在自己的舒适圈中。</p><p>​而到了社会的第二阶段，我们逐渐融入社会，按理说应该会有所突破，但是实际上也没有，因为我们这一代是规模化教育，每个的人经历大致相同，人与人之间很难产生灿烂的火花，于此同时，互联网短视频，游戏的不断发展，助长了断社交是趋势，没有社交，大家依旧可以过得更好，最后再说一个梁老师的观点，就是传统文化对我们的隐形影响，中国自古以来强调自给自足，关起门来过自己的日子，久而久之便失去了社交性，自然我们骨子里蒙蔽了交流的价值，进而形成了我们现代的“宅文化”。</p><p>​梁老师是阅历丰富的人，他凭借敏锐的情感与经历，感受到了社交的价值，并且对中国先进社会的社交气氛有所反思，意识到了人想在这个社会生存下去，就需要与他人交流，通过整个市场将自己和他人连接起来，自有这样多方面才能全面发展，进而构成脱离小家小户的社会心态，我觉得，我们已经快做到了，我们有部分年轻人是有这样的趋势。</p><p>​另外还要说一点，就是无效社交，如果老朋友见面就是吃吃喝喝玩玩，这样是无法形成内心深处的情感交流，这样的社交无法让两个人形成更加深层次的链接，我们便永远无法拉进彼此的距离，需要大家尽可能的去输出与输出，寻找精神上的共鸣。</p><p>​社交是为了生活，从社会发展层面分析，我们的父辈，更多的投入到国家，公共事业之中，每个人都是国家的螺丝钉，个人的精神追求与国家深度绑定，虽然生活很艰苦，但是大部分人是具有一个相对可预见的未来的，但是我们这一代经历了改革开放后，私营企业承担了大部分就业，以前遍地都是的价值感，便需要我们自己去获取，所以现代大部分都是”自私”的，为自己而奋斗，其实这是很合理的事情，现在我们为资本打工，生活确实越来越好了，但是我们的精神也越发贫瘠，这不是社会可以解决的，需要自己我们去探索了，其实有价值的社交，就是探索的一种方式，所以不然让我们离开舒适区，对于土地，与风土人情，与朋友们进行一次更加深层次的交流吧。</p><h2 id="谈修养"><a href="#谈修养" class="headerlink" title="谈修养"></a>谈修养</h2><p>​我们这一代年轻人是很有修养的，我们接受了以往任何一代都没有的通识教育，接受到了来自全球的人文精神的影响，但是我们这一代是挑战巨大的，因为我们不断面临各种异化，资本主义，家庭，在现今社会，道德修养就显得尤为重要，因为你的行为取决于你的修养，这是我们每一个年轻人都需要去深入思考与提升到地方，梁老师给出了他的建议。</p><p>热爱自然 热爱人类 热爱生命这些修养然后我们形成自己的道德标准，</p><p>热爱自然比较好理解，就是认识到人类与自然的关系，然后从本初出发的道德准则</p><p>热爱人类是指我们不可丧失人性，回到人类本身，而不是功利的去看待这个世界。</p><p>热爱生命是人类是很多人难以做到的，包括我自己，我的理解就是对生命要充满敬畏，对自己的人生负责，去思考，去勇敢的做出自己的选择，不进行外界因素的拖鞋，不辜负生命，给自己的定制一个有点难度的目标，去充实自己，也去释放自己的，人就这样语法具有深度，语法理解休养的价值</p><p>除了以上三点，我再说一下我的关键，就是深度阅读能力，在深度阅读的过程中，会逐渐形成属于自己的更加深厚的修养，将会潜移默化的让个人具备超乎同龄人的思想高度。</p><p>​最后是尊重，尊重从何而来，如何评判是否应该被尊重，这些其实是源于个人的修养，这都是相辅相成的关系，坚持自己的价值与原则，判断不应来源外界的肯定与否定，而是源自你的内心。</p><h2 id="谈美"><a href="#谈美" class="headerlink" title="谈美"></a>谈美</h2><p>​什么是美？这其实是一个主观的认识，传统社会的人们认为男人雄壮是美，女人好生育是美，现代自然是另一个看法，还有其他国家呢，我们的审美进入现代社会后从实用化趋向于个人化，只是没有问题的，因为90后一代是开创性的一代，自然社会面的审美发生变化也是很合理的，但是这些都是表面的，</p><p>​所以我们不能从表面去评价什么美，这是片面且经不起推敲的，那对于你我来说，如何去评判何谓真正的美呢，我仔细的思考了梁老师的话，实践就是美，美即使真知；在纷乱复杂的社会中，只有实践才能理解美的含义，充满困惑依旧一往无前难道不是一种美？坚守底线不畏舆论也是一种美，这些都需要在实践中去理解。</p><p>​除了审美 作者也谈了审丑，我理解的审丑，其实即使审视自己，只有我们把那些荒诞的事情摆在我们眼前的时候，我们哈哈大笑的之后，才会发现其实我们是在笑自己，这又何尝不是发现美的途径呢。</p><h2 id="谈艺术"><a href="#谈艺术" class="headerlink" title="谈艺术"></a>谈艺术</h2><p>​何谓艺术？艺术就是打破有限，打破固有，正是如此，所以艺术可以带给人精神的宽度。</p><p>​我一直对这些虚无缥缈的因素很有兴趣，他有什么直接价值吗，甚至于所谓艺术接触的当时，我都无法理解，为何这是艺术？更多成分可能是不明觉厉。</p><p>​作为前端开发工程师，我可以通过编程创造性的解决问题，作为一名产品经理，我亦想创造性的满足用户需求，我们身处世界最前沿，虽然前路一片朦胧，但是却充满机遇，我们也获得了创造的权利，如果我们不把艺术局限于文学、绘画、舞蹈领域，你我未尝不是行动艺术家。</p><p>​我们上一辈的人，其实不理解艺术的价值，中国是一个务实的国家，我们强调传统意义上的价值，强调国有意志。所以我们中国可以产出如此多优秀的管理者，但是且很少做出革命性的事情，而现如今，我们之间意识到了艺术的价值，艺术充满了未知性，并且艺术无法用现在的价值标准去评判，古代大哲学家苏格拉底经常与当代哲学家一起探讨生存的意义，这些事情如果从那时的框架去思考是毫无意义的，但是却给后人带来了深远的影响，启发了一代又一代人，所以无用还是有用，我们再现有价值框架很难平淡，但是我们从历史来看，艺术给人类的发展做出了巨大的贡献。</p><p>​我认为的年轻人学习艺术，我所说的艺术，不仅是是传统艺术，自由、创造对我而言就是艺术，其实就是打破固有观念，关注自身正式的想法，人活着不仅仅只是肉体上的吃吃喝喝，精神也是需要喂养的，父母给了我们肉体活下去的机会，而我们自己则需要给自己活下去的机会。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​起初吸引我的是引言中对生活的描写，只言片语中，我真切感受到了梁老师对生活的热爱与时代的沉淀，这是我们当代年轻人最缺乏的2点，前者的匮乏来源与快速转折的社会，后者则来源与经历与反思。阅读的过程中，我仿佛看到了梁老师坐在我的面前，时而温声细语，时而语重心长，谈论了很多与每个人都息息相关的点，我们不必将梁老师的话作为绝对正确的答案，我们需要聆听与反思，找到自己的答案。</p><p>​通读全文，我认为最底层最重要是以下几点，<strong>自由 热爱 求知</strong>，这三把钥匙，帮助我们打开答案之门，我对梁老师口中的层叠社会概念受益匪浅，我作为一名95后，几乎一直活在现代社会，我本能性的认为这个世界是平面的，并且惯性的只向前看，而没想到，不知古，怎知今。</p><p>​通过层叠社会的发展规律，我们可以在宏观层面解释现如今社会层面的很多现象，再向前一点还是文艺复兴、工业革命，这都是人类历史重要的节点，真正理解了历史，看世界的角度就会高出了很多，也能够解释很多以前的疑虑，受益匪浅，谁说作为一个合订本，内容上存在一切重复，但是作为一名初读者，可以反复理解案例也未必不是一件好事，总体是非常推荐大家阅读的，走进梁老师的理想世界。</p><p><strong>2023-01-24完</strong></p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	这是梁永安老师的22年的初版的一本书，也是我第一次了解到老师，读了一部分，说实话，我觉得这本书写的还不错，虽然有些人会说，梁老师对某件事物的评价，都是套公式一样的废话，听了就像没听一样，说实话，我不这么认为，《阅读、游戏和爱情》这本书，有些文字确实存在看似“废话”的句子</summary>
      
    
    
    
    <category term="阅读-2023" scheme="https://bluedancers.github.io/categories/%E9%98%85%E8%AF%BB-2023/"/>
    
    
    <category term="阅读" scheme="https://bluedancers.github.io/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>更加优雅的web端上传文件</title>
    <link href="https://bluedancers.github.io/2023/01/03/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%9B%B4%E5%8A%A0%E4%BC%98%E9%9B%85%E7%9A%84web%E7%AB%AF%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>https://bluedancers.github.io/2023/01/03/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/%E6%9B%B4%E5%8A%A0%E4%BC%98%E9%9B%85%E7%9A%84web%E7%AB%AF%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/</id>
    <published>2023-01-02T16:00:00.000Z</published>
    <updated>2023-01-11T10:10:19.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​大家一起回想一下，我们在使用Element、Antd的时候，是如何实现图片、文件上传功能。</p><img src="http://www.vkcyan.top/FkmvkuGX712E-A7FFkPMnBuwOUkg.png" style="zoom: 33%;" /><p>​antd就不截图了，使用方法差不多，相信写过相关代码的同学，都会感觉比较繁琐。</p><ul><li>既要改html，还需要写JavaScript，开发效率低。</li><li>组件API复杂，很多时候，并不需要那么多功能，心智负担重。</li><li>等等</li></ul><p>​这时候，写过微信小程序的同学，心里肯定会想，小程序的上传图片API开发体验还可以，逻辑上也很直观，通过事件触发函数，函数内实现上传图片的逻辑，我们web端能否也能拥有类似的开发体验呢？</p><h2 id="npm地址"><a href="#npm地址" class="headerlink" title="npm地址"></a>npm地址</h2><p><strong>以下内容为实现思路以及关键代码，如果您仅仅想使用的话，请直接到<a href="https://www.npmjs.com/package/choose-to-file">npmjs</a></strong></p><p>文档地址：<a href="https://github.com/vkcyan/choose-to-file#readme">https://github.com/vkcyan/choose-to-file#readme</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i choose-to-file</span><br></pre></td></tr></table></figure><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>首先，web端使用文件上传功能，一般使用input标签进行实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span> =<span class="string">&quot;file&quot;</span> <span class="attr">onchange</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>最后在<code>onchange</code>callback中，获取本次的结果。</p><p>我们会发现，上传文件必须通过特定的标签才能触发。这么来看似乎与函数式相违背。</p><p>但这并不是死路一条，我们可以通过<code>input.click()</code>，自动指定点击事件，核心逻辑就是这样。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><ul><li>创建<code>input</code>标签</li><li>触发<code>&lt;input /&gt;</code>的<code>click</code>事件</li><li>监听上传结果，并作为结果返回，同时对临时数据进行销毁。</li></ul><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><p>实现不与具体框架做绑定，我们基于原生逻辑进行开发，天然兼容web端框架。</p><p><strong>理想使用方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">uploadImg</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">chooseToFile</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;file&#x27;</span>， res)</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来开始实现<code>chooseToFile</code>，首先我们创建input标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>)</span><br><span class="line">input.<span class="property">type</span> = <span class="string">&#x27;file&#x27;</span></span><br></pre></td></tr></table></figure><p>创建完成后，立刻执行自动点击事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">input.<span class="title function_">click</span>()</span><br></pre></td></tr></table></figure><p>然后监听<code>input</code>的<code>onchange</code> callback，并通过<code>Promise resolve</code>进行返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">input.<span class="property">onchange</span> = <span class="function">(<span class="params">evt</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">removeInput</span>(input) <span class="comment">// 删除dom</span></span><br><span class="line">  <span class="keyword">let</span> &#123; files &#125; = evt.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLInputElement</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">resolve</span>(files)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们的核心逻辑就完成了，还是很简单的~</p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><h3 id="初始化阶段调用无效，并且会弹出警告。"><a href="#初始化阶段调用无效，并且会弹出警告。" class="headerlink" title="初始化阶段调用无效，并且会弹出警告。"></a>初始化阶段调用无效，并且会弹出警告。</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">File chooser dialog can only be shown with a user activation. </span><br></pre></td></tr></table></figure><p>​这是因为浏览器的安全限制，不允许用户在没有任何”激活行为“的情况下，JavaScript调用窗口，针对此问题官网有详细的说明<a href="https://developer.chrome.com/blog/user-activation/">user-activation</a>。</p><p>​也就是说这是不允许的，大家开发中要规避这种行为。</p><h3 id="无取消上传callback"><a href="#无取消上传callback" class="headerlink" title="无取消上传callback"></a>无取消上传callback</h3><p>​当用户点击文件进行上传的时候，我们可以通过onchange组件进行获取，但是如果用户关闭了上传文件弹窗，或者点击”取消“按钮，input并未提供响应的回调函数。</p><p>​如果无法监听取消上传，逻辑将不知道何时销毁临时标签input，查阅了一些资料后，找到了解决方案。</p><p>​无论用户是否上传，只要当前用户有操作，上传行为结束，都会重新聚焦到body本身，也就会触发全局的focus方法，如果用户上传了文件则在onchange callback中将fileCancle赋值为false；</p><p>​之后focus事件触发的时候则不会进入if内逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileCancle = <span class="literal">true</span> <span class="comment">// 是否未上传文件</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">  <span class="string">&#x27;focus&#x27;</span>,</span><br><span class="line">  <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (fileCancle) &#123;</span><br><span class="line">        <span class="title function_">removeInput</span>(input)</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&#x27;upload canceled&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">500</span>)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><ul><li><p>调用函数，打开文件管理器</p><ul><li><p>用户上传文件：.then触发，收到上传的文件信息</p></li><li><p>用户取消上传：.catch触发，收到无文件上传错误</p></li></ul></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​功能的实现并不复杂，因为作者工作上vue用的较多，所以可以保证Vue是没问题，理论上React也是没问题的，欢迎大家体验，在使用中有任何问题，请评论区留言。</p><p>​祝你开发愉快。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	大家一起回想一下，我们在使用Element、Antd的时候，是如何实现图片、文件上传功能。&lt;/p&gt;
&lt;img src=&quot;http://w</summary>
      
    
    
    
    <category term="JavaScript-2023" scheme="https://bluedancers.github.io/categories/JavaScript-2023/"/>
    
    
    <category term="JavaScript" scheme="https://bluedancers.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>羊了个羊，怎么突然爆火了？</title>
    <link href="https://bluedancers.github.io/2022/09/19/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E7%88%86%E7%81%AB%EF%BC%8C%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://bluedancers.github.io/2022/09/19/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E7%88%86%E7%81%AB%EF%BC%8C%E5%88%B0%E5%BA%95%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2022-09-18T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.079Z</updated>
    
    <content type="html"><![CDATA[<p>中秋节后的几天内，每个互联网人都主动或被动地了解到了一个现象级小游戏<strong>羊了个羊</strong> ，该小游戏在一个星期内火速出圈，高频制造热点话题，火速出现大量梗图，段子，可以说一举一动都引发巨大话题热点。</p><p><img src="https://www.vkcyan.top/image-20220916193952997.png" alt="https://www.vkcyan.top/image-20220916193952997.png"></p><p>当我在各大平台看到这个关键字的时候，我的脑子里面只有一句话“发生了什么？”，直到9月15号铺天盖地的信息才让我意识到了他的火爆程度。</p><h2 id="微信指数-x2F-抖音指数"><a href="#微信指数-x2F-抖音指数" class="headerlink" title="微信指数&#x2F;抖音指数"></a>微信指数&#x2F;抖音指数</h2><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461351.png" alt="Untitled"></p><p>截止9月16号，其热度在微信与抖音都出现了指数级爆炸，同时在微博多次荣登热搜第一，以及多个热点话题，可能还有其他作者不知道的平台，微博 抖音 微信三个国民级app，已经包含了全国几乎所有的网民，这也为他后面的爆火埋下了伏笔，那他又是如何制造话题的呢？</p><h2 id="信息传播"><a href="#信息传播" class="headerlink" title="信息传播"></a>信息传播</h2><p>让我们坐上时间机器，回到中秋之前，羊了个羊刚刚上线的时间</p><p>9-9号 其官方账号在微博发布了一篇推文</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461352.png" alt="Untitled"></p><p>在随后的时间里面，发布了<strong>老师vs学生 打击作弊 服务器崩掉 再次崩掉</strong>等等一连串的话题，而根据微博指数显示13号开始，热点趋势开始疯狂增加，这也就表明9号到13号是第一波启动用户。</p><p>除了微博外，也在抖音进行短视频宣传，可惜抖音趋势无法显示14号之前的数据，但是我们可以推测得出来，其热点也是爆炸增长的。</p><p>而这个过程中其宣传的切入点，<strong>过关率极低，不睡觉也要玩</strong>网友热评等等口碑宣传也起到了早期非常重要的推波助澜作用，让我们来深入分析一下吧。</p><h3 id="价值冲突"><a href="#价值冲突" class="headerlink" title="价值冲突"></a>价值冲突</h3><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461353.png" alt="Untitled"></p><p>在不知道游戏内容的情况下，如何吸引用户进入游戏？羊了个羊在做出符合Z时代用户游戏界面的同时，创造了额外的动机<strong>。狼人VS吸血鬼 五仁VS莲蓉 学生VS老师 省份VS省份</strong>，一旦出现了站队，游戏便不仅仅是游戏，还包含个人价值是否被认同，如果你喜欢吃五仁，看待五仁落于下风，便存在内在动机去参与游戏进行支持，如果你喜欢吃莲蓉，便会进入胜利者的自嗨状态参与游戏寻求碾压对手。</p><p>一只羊一旦进入羊群，他便不仅仅是一只羊，而是羊群的一份子，自然带上了集体荣誉的帽子，排名靠前，自豪 快乐，排名靠后 焦虑 失望 甚至自责，无论如何，这都增加了玩游戏的动机。</p><h3 id="人类是天生的冒险家"><a href="#人类是天生的冒险家" class="headerlink" title="人类是天生的冒险家"></a>人类是天生的冒险家</h3><p>如果我告诉你，这一款消消乐游戏很好玩，音乐很魔性，你可能大概率会说我没兴趣，但是如果我告诉<strong>这个消消乐游戏，你第二关都过不去</strong>，是不是有试一试的冲动了？</p><p>还记得羊了个羊的官方简介吗？</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461354.png" alt="Untitled"></p><p>小游戏以简单休闲出名，很多玩家被极低的通关率所刺激，好奇心促使起主动打开小程序本着试试看的心态进行游戏。教学关卡确实非常简单，甚至会给人一种，后面的关卡也会这么简单的错觉，同时经过教学关卡的无脑通关，玩家也更加确定自己可以成为那0.1%的人。</p><p>结果大家都知道了，第二关的难度极大，在将上层较多的消除后，便进入极难的阶段，而到达这一步玩家已经在不知不觉中付出的大量的时间成本 心智成本，便有了足够的动机去看广告，然后复活，再用完所有道具，然后再次失败。</p><p>而人类天生爱好挑战，<strong>也很难接受与心理预期的巨大差距，也梦想在圈子种脱颖而出</strong>，明明是很简单的三消游戏，我怎么就过不了？便产生了再试一局的心态，<strong>游戏结束会显示今日挑战了多少次</strong>，结果越玩越久，又投入了更大的时间成本 心智成本，便更加不愿意放弃，开始自己和自己较劲（是不是很像拼多多的邀请好友获得100元）。</p><h3 id="情绪引导"><a href="#情绪引导" class="headerlink" title="情绪引导"></a>情绪引导</h3><p>游戏会在很多关键的裂变阶段下足了心思。</p><p>羊了个羊的分享文案几乎都是激发玩家胜负欲的主题加上非常魔性的，符合Z时代风格的分享图，事实证明一种方案确实很管用，在不假思索的情况下，我会有很大的概率去点击，尤其是圈子内的分享，例如室友圈 班级圈 好友圈。</p><p>而游戏通过给予道具的形式引导玩家进行分享，大部分首次观看广告复活的玩家再次面对困难的时候，便有了足够的动机去分享给朋友，这样每个玩家便会产生三次分享。</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461355.png" alt="Untitled"></p><p>在你道具用完，游戏失败的时候同样进行引导，可以说是精准了抓住了用户的心理</p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461356.png" alt="Untitled" style="zoom:33%;" /><p>我们可以看到，除了外部话题营销的爆火之外，产品类的裂变也在玩家的私域圈子内形成最直接的近距离触达，进而引发了指数级别的爆炸。</p><h3 id="小程序的“天然优势”"><a href="#小程序的“天然优势”" class="headerlink" title="小程序的“天然优势”"></a>小程序的“天然优势”</h3><p>小程序触达路径极短，app内打开，无需下载，即点即玩，登录流程短，借助平台能力即可实现一键登录，这些特性显著<strong>降低了使用门槛</strong>。</p><p>推广能力强，传播渠道多，抖音视频，公众号文章，微信视频，用户可能在多个场景下触发。</p><p>开发、上线成本低，没有类似版号的限制</p><p>也难怪国内各大app都做小程序生态，从商业的角度上，小程序的优点实在是太多。</p><h2 id="一些tips"><a href="#一些tips" class="headerlink" title="一些tips"></a>一些tips</h2><h3 id="登门槛效应"><a href="#登门槛效应" class="headerlink" title="登门槛效应"></a>登门槛效应</h3><p>也被称给得寸进尺效应，是指一个人一旦接受了他人一个微不足道的要求，为了避免认知上的不协调，或者想给对方前后一致的印象，就有可能接受更大的要求</p><p>回想羊了个羊的关卡设计中第一关极度简单，随便点点就过了，而来自固有观念的路径依赖，会让用户产生后面也会很简单的想法，结果第二关直接地狱难度，与用户的期望结果出现偏差，此时用户为了证明自己，便会走进死胡同。</p><p>还有用户首次获得道具需要进行分享，之后再想获取道具便需要看视频，相对于看视频必然分享更加低成本，当用户第二次在想获得道具需要他看广告的时候，因为玩家已经有了分享获取道具的动作，这时候再让用户看广告获取道具便不会让用户非常抗拒。</p><h3 id="羊群效应"><a href="#羊群效应" class="headerlink" title="羊群效应"></a>羊群效应</h3><p>经济学里面经常用“羊群”效应来描述经济个体从众跟风心理，同时从众心理也会也会导致盲从，进而陷入骗局或者遭受失败。</p><p>不可否认高难度折叠类三消游戏确实好玩，但是在我看到开发方是非常恶趣味的，完成第二关的就可以加入羊群，成为“领头羊”，如果某位幸运儿过了第二关，那一定会大肆宣传，满足自己的社交情绪，殊不知最大受益者正式游戏方本身，因为你的榜样，更多的人开始盲目跟风，攀比，争取加入盐羊群，于是便开始不断挑战高难度第二关。等到小羊们反应过来的时候，游戏方早已赚得盆满钵满，潇洒离去。</p><p>而游戏的爆火也顺带其“周边产业”的爆火，</p><h3 id="上瘾模型分析"><a href="#上瘾模型分析" class="headerlink" title="上瘾模型分析"></a>上瘾模型分析</h3><p>我们使用经典的上瘾模型进行分析，看看羊了个羊是如何让用户成为”犟驴”的</p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461357.png" alt="Untitled" style="zoom:33%;" /><p><strong>触发</strong></p><p>外部触发：微博 抖音多平台 微信分享文案 切入0.01%过关率 话题营销 好友分享 Z时代画风</p><p>内部触发：人类的好奇心 胜负欲 社交需要</p><p><strong>行动</strong></p><p>行动 &#x3D; 动机 + 行为 + 触发</p><p>动机：好奇心 胜负欲 社交需要 话题PK 三消游戏的趣味性</p><p>行动：年轻群体 + 三线用户具备时间充裕，追求快乐的属性</p><p>触发：小程序无需下载，打开即玩的特点极大地降低了触发难度</p><p><strong>多变的酬赏</strong></p><ol><li>游戏内每次三消带来的正向反馈</li><li>游戏话题热度带来的大量奶头乐信息</li></ol><p><strong>投入</strong></p><ol><li>当前场次，今日已经挑战场次的时间、精力成本的投入</li><li>社交关系的投入</li></ol><p>而投入最终也成为用户下一次触发的原因，亦或者不服输的驴脾气，亦或者身边的社交唤醒，形成了上瘾模型的闭环。</p><p>但是我们可以看到酬赏环节相对薄弱，如果用户一直无法过关，便最终失去兴趣，而话题营销保质期是有限的，并且其游戏内部实现已经被扒了个底朝天，负面消息充斥互联网平台，可以预见在15天内，其流量会跌回他原本的高度（猜测是最高点的10%-20%）。</p><h2 id="目标人群"><a href="#目标人群" class="headerlink" title="目标人群"></a>目标人群</h2><p>作者是9月15号知晓的时候，已经是产品最火的时候了，我们可以发挥想象简单分析一下，作者经过反复的外部触发，才打开小程序，很明显高强度上班族不是他的目标客户，9号到13号的用户才算是他的第一批用户，<strong>而他的第一批用户是时间较多的大学生，工作强度不大的年轻人为主，</strong>这部分人时间多，并且喜爱追热点话题。</p><p>而开发商也精准了抓住了目标用户的特点，从<strong>传播</strong>切入点 <strong>分享</strong>切入点 <strong>游戏画风</strong>等多方面进行针对性开发与策划，保证准确挠到目标用户的痒点，从这个角度看，其实羊了个羊小游戏火起来是存在实力的，不是一个简单的demo产品，大家也不要把他的爆火完全归功于传播营销，产品能力也是其热度持续引爆的原因之一。</p><p>非常遗憾在巨量算数中都无法看到9-13号的用户数据，无法验证结论，只能看看14号之后的数据。</p><p><img src="https://www.vkcyan.top/69b685d4-8782-4361-8eae-1a3287b461358.png" alt="Untitled"></p><p>从巨量数据来看，越年轻的用户越频繁触发关键词，而31-40岁的用户虽然也非常多，但是TGI数值已经非常低，基本是符合我们推测的结论的。</p><h2 id="潮起与潮落"><a href="#潮起与潮落" class="headerlink" title="潮起与潮落"></a>潮起与潮落</h2><p>9月16号是热度的转折点，不夸张的说，三天内（14-16）号，全国几乎所有网民都听说了一个新名词“羊了个羊”，凭借魔性的画风以及超难的第二关而破圈，而热度也伴随争议随之而来，抄袭，游戏无解，骗人看广告还赚了几百万。</p><p>流量的双刃剑已经挥下，这些消息也火速在网上传播开来，也让很多人意识到，原来玩家自己才是“羊”，自然羊群效应带来的用户也火速消失，如果没有这些争议点，也许该游戏可以多保持几天热度，截至19号，微博数据已经下跌了80%-90%，抖音也出现了大幅度的下滑，微信因为社交关系的原因稍微平稳一点，但是可以预见，最多半个月，便会回归到正常的水平，而这几天开发商已经赚的盆满钵满，开始研究下一个热点小游戏。</p><p>而微信 抖音，也等到开发商们为其带来下一个热点。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我们大多数人从小大到接受的是非常正向的教育理念，相信正义一定打败邪恶，游戏一定是给人带来快乐，哪怕类似《茶杯头》《坐在罐子里面的男人》都仅仅是极大的游戏难度，很难，看似无解，但是本质上都是有解的，但是羊了个羊在实现上采用伪真随机的方式进行打乱，导致游戏无法保证一定有解，也就是说很多时候注定是玩不过去的，也就是说就算你是三消游戏的天才，你也要看广告，他这样的目的是利用玩家的不愿放弃沉没成本、渴望社交酬赏、赌徒心理诱导你看广告而已。</p><p>而这样畸形的游戏却能火起来值得我们深思。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;中秋节后的几天内，每个互联网人都主动或被动地了解到了一个现象级小游戏&lt;strong&gt;羊了个羊&lt;/strong&gt; ，该小游戏在一个星期内火速出圈，高频制造热点话题，火速出现大量梗图，段子，可以说一举一动都引发巨大话题热点。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://w</summary>
      
    
    
    
    <category term="产品经理" scheme="https://bluedancers.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="产品分析" scheme="https://bluedancers.github.io/tags/%E4%BA%A7%E5%93%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>vue3相对于vue2做了什么？</title>
    <link href="https://bluedancers.github.io/2022/09/18/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/vue3%E7%9B%B8%E5%AF%B9%E4%BA%8Evue2%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <id>https://bluedancers.github.io/2022/09/18/%E5%85%B3%E4%BA%8Evue3%E7%9A%84%E7%A0%94%E7%A9%B6/vue3%E7%9B%B8%E5%AF%B9%E4%BA%8Evue2%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F/</id>
    <published>2022-09-17T16:00:00.000Z</published>
    <updated>2023-01-19T03:01:31.318Z</updated>
    
    <content type="html"><![CDATA[<p>vue3.0更加注重模块上的拆分，在2.0版本中所有vue相关的逻辑都相互耦合在一起，就算仅仅使用vue的一小部分，也需要引入完成的vue，造成了空间的浪费，而vue3则在模块层面上进行拆分，通过tree-shaking实现按需导入，减少用户打包体积，同时每个项目单独管理，单独发布，更加具备稳定性</p><p>​模块拆分成npm包，独立使用，独立发布</p><p>虽然底层出现大量改动，但是顶层设计理念没有发生改变，依旧是声明式架构。</p><h3 id="Monorepo："><a href="#Monorepo：" class="headerlink" title="Monorepo："></a>Monorepo：</h3><ul><li>一个仓库下可以维护多个模块</li><li>方便版本管理，依赖管理，模块间引用。</li></ul><p><img src="https://www.vkcyan.top/image-20220914110426629.png"></p><h2 id="搭建vue3仓库"><a href="#搭建vue3仓库" class="headerlink" title="搭建vue3仓库"></a>搭建vue3仓库</h2><h4 id="通过pnpm初始化项目"><a href="#通过pnpm初始化项目" class="headerlink" title="通过pnpm初始化项目"></a>通过pnpm初始化项目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm init</span><br></pre></td></tr></table></figure><h4 id="创建Monorepo仓库环境"><a href="#创建Monorepo仓库环境" class="headerlink" title="创建Monorepo仓库环境"></a>创建Monorepo仓库环境</h4><p>新建文件夹<code>packages</code></p><p>新建文件<code>pnpm-workspace.yaml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">packages:</span><br><span class="line">  - &#x27;packages/*&#x27; // 含义为怕package目录下的每个文件都是一个单独的仓库</span><br></pre></td></tr></table></figure><p>安装公共依赖</p><p>项目根目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm install vue -w // w 为workspace-root的缩写，代表该包为全局依赖</span><br></pre></td></tr></table></figure><p>幽灵依赖</p><p>​vue依赖了abc包，我们下载vue的时候abc包就被下载到项目，我们可以直接使用abc，但是vue可能在某一个版本就不再使用abc，这就会造成依赖丢失，这些依赖就被成为幽灵依赖</p><h2 id="生成相关配置信息"><a href="#生成相关配置信息" class="headerlink" title="生成相关配置信息"></a>生成相关配置信息</h2><p>创建packages内部的package环境</p><p>通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm tsc --init</span><br></pre></td></tr></table></figure><p>生成ts默认配置文件</p><p>并且增加配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;baseUrl&quot;</span>: <span class="string">&quot;.&quot;</span>,</span><br><span class="line"><span class="string">&quot;paths&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;@vue/*&quot;</span>: [<span class="string">&quot;packages/*/src&quot;</span>] <span class="comment">// 引入库关系映射</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现构建流程"><a href="#实现构建流程" class="headerlink" title="实现构建流程"></a>实现构建流程</h2><ol><li>编写每个组件的package.json</li><li>编写公共打包文件，可以打包packages中的所有库</li><li>编写esbuild打包代码</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue3.0更加注重模块上的拆分，在2.0版本中所有vue相关的逻辑都相互耦合在一起，就算仅仅使用vue的一小部分，也需要引入完成的vue，造成了空间的浪费，而vue3则在模块层面上进行拆分，通过tree-shaking实现按需导入，减少用户打包体积，同时每个项目单独管理，</summary>
      
    
    
    
    <category term="Javascript-2022" scheme="https://bluedancers.github.io/categories/Javascript-2022/"/>
    
    
    <category term="Vue" scheme="https://bluedancers.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>现代心理学七种观点</title>
    <link href="https://bluedancers.github.io/2022/08/15/%E5%BF%83%E7%90%86%E5%AD%A6%E4%B8%8E%E7%94%9F%E6%B4%BB/%E7%8E%B0%E4%BB%A3%E5%BF%83%E7%90%86%E5%AD%A6%E4%B8%83%E7%A7%8D%E8%A7%82%E7%82%B9/"/>
    <id>https://bluedancers.github.io/2022/08/15/%E5%BF%83%E7%90%86%E5%AD%A6%E4%B8%8E%E7%94%9F%E6%B4%BB/%E7%8E%B0%E4%BB%A3%E5%BF%83%E7%90%86%E5%AD%A6%E4%B8%83%E7%A7%8D%E8%A7%82%E7%82%B9/</id>
    <published>2022-08-14T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.085Z</updated>
    
    <content type="html"><![CDATA[<h3 id="心理动力学观点"><a href="#心理动力学观点" class="headerlink" title="心理动力学观点"></a>心理动力学观点</h3><p>​行为是由强大的内部力量驱使或者激发，这种观点认为，人的行为是由先天的本本和生物驱力产生，而且试图解决个人需要和社会要求之间的冲突。剥夺状态，生理唤起以及冲突都为行动提供了力量，就像煤为蒸汽机供应燃料一样，在这个模型中，当机体的需要得到了满足而驱力降低时，机体就会停止反应。行为的主要目的是降低紧张度。</p><h3 id="行为主义观点"><a href="#行为主义观点" class="headerlink" title="行为主义观点"></a>行为主义观点</h3><p>​寻求理解特定环境刺激如何控制特定类型的行为，首先行为主义者分析向前的环境条件，他们把反应行作为主要研究对象，是为想要理解，预测和控制的行为</p><h3 id="人本主义观点"><a href="#人本主义观点" class="headerlink" title="人本主义观点"></a>人本主义观点</h3><p>​人们既不是如弗洛伊德主义者假设的由强大本能理想所驱使，也不是如行为主义提出的由环境因素所操纵，相反人是具有能动性的生物，本性善良而且具有选择能力。</p><h3 id="认知观点"><a href="#认知观点" class="headerlink" title="认知观点"></a>认知观点</h3><p>​人的思维以及所有的认识过程，注意、思考、记忆和理解。从认识的观点看，人们行动是因为他们思考，而人们思考是因为他们是人类，处于大脑的精细构造</p><h3 id="生物学观点"><a href="#生物学观点" class="headerlink" title="生物学观点"></a>生物学观点</h3><p>​在基因、大脑、神经系统以及内分泌系统中寻找行为的原因，心理现象与社会现象能够最终依据生物化学过程加以理解：及时最复杂的现象，也能够通过被分析或简化为更小、更具体的单位来理解。</p><h3 id="进化论观点"><a href="#进化论观点" class="headerlink" title="进化论观点"></a>进化论观点</h3><p>​能更好的适应环境的有机体，倾向于比那些适应性较差的有机体更能成功的产生后代，经过很多时代，物种朝着更具适应性的方向发展</p><p>​</p><h3 id="社会文化观点"><a href="#社会文化观点" class="headerlink" title="社会文化观点"></a>社会文化观点</h3><p>​研究行为的原因和结果中跨文化差异。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;心理动力学观点&quot;&gt;&lt;a href=&quot;#心理动力学观点&quot; class=&quot;headerlink&quot; title=&quot;心理动力学观点&quot;&gt;&lt;/a&gt;心理动力学观点&lt;/h3&gt;&lt;p&gt;​	行为是由强大的内部力量驱使或者激发，这种观点认为，人的行为是由先天的本本和生物驱力产生，而且试图</summary>
      
    
    
    
    <category term="产品经理" scheme="https://bluedancers.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://bluedancers.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>pinia源码分析【5】- 150行代码实现mini版pinia</title>
    <link href="https://bluedancers.github.io/2022/07/29/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%905%E3%80%91-%20150%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0mini%E7%89%88pinia/"/>
    <id>https://bluedancers.github.io/2022/07/29/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%905%E3%80%91-%20150%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0mini%E7%89%88pinia/</id>
    <published>2022-07-28T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码解析系列文章"><a href="#源码解析系列文章" class="headerlink" title="源码解析系列文章"></a>源码解析系列文章</h2><p><a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a></p><p><a href="https://juejin.cn/post/7117131804229763079">Pinia源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831">pinia源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>别人还在学习使用pinia，看过文章的你直接了解核心原理，无论是实际使用，还是面试都将更上一层楼~</p></blockquote><p>​前段时间完成了对<code>pinia</code>核心源码的解读，因为源码存在难度，也间接到了分析文章具有较高的阅读门槛，为了解决这一问题，可以让更多人参与到pinia的源码阅读中，所以今天给大家带来一个mini版pinia的核心实现，核心代码压缩到100行左右，极大了降低了源码阅读难度。</p><p>​mini版pinia实现了<strong>state，getters，action，$patch，$reset，$dispose</strong>；居家旅行<strong>面试</strong>常备~</p><p>​同时为了降低阅读门槛，方便TypeScript不熟练的同学，本版本全部使用any，话不多说我们直接开始！</p><p>​mini版pinia开源地址：<a href="https://github.com/vkcyan/mini-pinia">https://github.com/vkcyan/mini-pinia</a></p><h2 id="mini版逻辑流程图"><a href="#mini版逻辑流程图" class="headerlink" title="mini版逻辑流程图"></a>mini版逻辑流程图</h2><p><img src="https://www.vkcyan.top/image-20220729092737403.png" alt="image-20220729092737403"></p><h2 id="简单版实现"><a href="#简单版实现" class="headerlink" title="简单版实现"></a>简单版实现</h2><p>我们在代码结构上尽量与正式源码保持一致，仅仅做一些逻辑上的简化与压缩，保证核心实现的质量。</p><h3 id="注册到vue"><a href="#注册到vue" class="headerlink" title="注册到vue"></a>注册到vue</h3><blockquote><p>这里主要参照官方实现，如果不清楚effectScope，请看<a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a>，如果想深入了解createPinia，请看<a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建Pinia</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createPinia</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 创建响应空间</span></span><br><span class="line">  <span class="keyword">const</span> scope = <span class="title function_">effectScope</span>(<span class="literal">true</span>);</span><br><span class="line">  <span class="keyword">const</span> state = scope.<span class="property">run</span>&lt;<span class="title class_">Ref</span>&lt;<span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">StateTree</span>&gt;&gt;&gt;(<span class="function">() =&gt;</span></span><br><span class="line">    ref&lt;<span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">StateTree</span>&gt;&gt;(&#123;&#125;)</span><br><span class="line">  )!;</span><br><span class="line">  <span class="comment">// markRaw使其不具备响应式</span></span><br><span class="line">  <span class="keyword">const</span> pinia = <span class="title function_">markRaw</span>(&#123;</span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app: App</span>) &#123;</span><br><span class="line">      <span class="comment">// 注入pinia</span></span><br><span class="line">      app.<span class="title function_">provide</span>(piniaSymbol, pinia);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">use</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">    <span class="attr">_s</span>: <span class="keyword">new</span> <span class="title class_">Map</span>&lt;<span class="built_in">string</span>, <span class="title class_">StoreGeneric</span>&gt;(), <span class="comment">// 保存处理后的store数据全部数据</span></span><br><span class="line">    state, <span class="comment">// 保存可访问state</span></span><br><span class="line">    <span class="attr">_e</span>: scope, <span class="comment">// 相应空间</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> pinia;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现defineStore"><a href="#实现defineStore" class="headerlink" title="实现defineStore"></a>实现defineStore</h3><p>实现一个基础功能的pinia，简单来说，我们只需要做最核心的两件事</p><ol><li><strong>将state转为ref，使其具有响应式</strong></li><li><strong>将getters处理为computed</strong></li><li>如果需要实现$Action还需要对action中所有事件进行拦截处理（mini版不实现$Action）</li></ol><h3 id="defineStore"><a href="#defineStore" class="headerlink" title="defineStore"></a>defineStore</h3><blockquote><p>defineStore中的useStore主要做一些初始化判断，如果是store第一次被使用，则需要初始化，进入createOptionsStore，非第一次直接获取_s中已被处理好的缓存。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建store（仅支持单对象创建方式）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">options</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defineStore</span>(<span class="params">options: &#123;</span></span><br><span class="line"><span class="params">  id: string;</span></span><br><span class="line"><span class="params">  state: any;</span></span><br><span class="line"><span class="params">  getters: any;</span></span><br><span class="line"><span class="params">  actions: any;</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; id &#125; = options;</span><br><span class="line">  <span class="comment">// 实际运行函数</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentInstance = <span class="title function_">getCurrentInstance</span>(); <span class="comment">// 获取实例</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">pinia</span>: any;</span><br><span class="line">    <span class="keyword">if</span> (currentInstance) &#123;</span><br><span class="line">      pinia = <span class="title function_">inject</span>(piniaSymbol); <span class="comment">// 获取install阶段的pinia</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pinia) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;super-mini-pinia在mian中注册了吗?&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pinia.<span class="property">_s</span>.<span class="title function_">has</span>(id)) &#123;</span><br><span class="line">      <span class="comment">// 第一次会不存在，单例模式</span></span><br><span class="line">      <span class="title function_">createOptionsStore</span>(id, options, pinia);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> store = pinia.<span class="property">_s</span>.<span class="title function_">get</span>(id); <span class="comment">// 获取当前store的全部数据</span></span><br><span class="line">    <span class="keyword">return</span> store;</span><br><span class="line">  &#125;</span><br><span class="line">  useStore.<span class="property">$id</span> = id;</span><br><span class="line">  <span class="keyword">return</span> useStore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createOptionsStore"><a href="#createOptionsStore" class="headerlink" title="createOptionsStore"></a>createOptionsStore</h3><blockquote><p><strong>使用ref处理state，使用computed处理getters</strong>，但是此处尚未运行，将setup函数作为参数传值到createSetupStore。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理state getters</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">id</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">options</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">pinia</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createOptionsStore</span>(<span class="params">id: string, options: any, pinia: any</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; state, actions, getters &#125; = options;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    pinia.<span class="property">state</span>.<span class="property">value</span>[id] = state ? <span class="title function_">state</span>() : &#123;&#125;; <span class="comment">// pinia.state是Ref</span></span><br><span class="line">    <span class="keyword">const</span> localState = <span class="title function_">toRefs</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[id]);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(</span><br><span class="line">      localState, <span class="comment">// 被ref处理后的state</span></span><br><span class="line">      actions, <span class="comment">// store的action</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(getters || &#123;&#125;).<span class="title function_">reduce</span>(<span class="function">(<span class="params">computedGetters, name</span>) =&gt;</span> &#123;</span><br><span class="line">        computedGetters[name] = <span class="title function_">markRaw</span>(</span><br><span class="line">          <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> store = pinia.<span class="property">_s</span>.<span class="title function_">get</span>(id)!;</span><br><span class="line">            <span class="keyword">return</span> getters![name].<span class="title function_">call</span>(store, store);</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> computedGetters;</span><br><span class="line">      &#125;, &#123;&#125; <span class="keyword">as</span> <span class="title class_">Record</span>&lt;string, <span class="title class_">ComputedRef</span>&gt;) <span class="comment">// 将getters处理为computed</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> store = <span class="title function_">createSetupStore</span>(id, setup, pinia);</span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="createSetupStore"><a href="#createSetupStore" class="headerlink" title="createSetupStore"></a>createSetupStore</h3><blockquote><p>​声明当前store的方法，并且运行上一个函数组建的setup函数，其中包含state，getters，我们将其响应式存储到pinia._e中，便于后面对数据变化进行监听，以及统一管理。</p><p>​最后将setup返回的对象与存放方法的partialStore对象进行assign，完成store的全部初始化逻辑，并将其加入_s，下次使用该store则直接取值，最后返回当前store。全部逻辑结束。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理action以及配套API将其加入store</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">$id</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">setup</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> <span class="variable">pinia</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSetupStore</span>(<span class="params">$id: string, setup: any, pinia: any</span>) &#123;</span><br><span class="line">  <span class="comment">// 所有pinia的methods</span></span><br><span class="line">  <span class="keyword">let</span> partialStore = &#123;</span><br><span class="line">    <span class="attr">_p</span>: pinia,</span><br><span class="line">    $id,</span><br><span class="line">    <span class="attr">$reset</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reset&quot;</span>), <span class="comment">// 该版本不实现</span></span><br><span class="line">    <span class="attr">$patch</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;patch&quot;</span>), <span class="comment">// 该版本不实现</span></span><br><span class="line">    <span class="attr">$onAction</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;onAction&quot;</span>), <span class="comment">// 该版本不实现</span></span><br><span class="line">    <span class="attr">$subscribe</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;subscribe&quot;</span>), <span class="comment">// 该版本不实现</span></span><br><span class="line">    <span class="attr">$dispose</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dispose&quot;</span>), <span class="comment">// 该版本不实现</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将effect数据存放如pinia._e、setupStore</span></span><br><span class="line">  <span class="keyword">let</span> scope!: <span class="title class_">EffectScope</span>;</span><br><span class="line">  <span class="keyword">const</span> setupStore = pinia.<span class="property">_e</span>.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    scope = <span class="title function_">effectScope</span>();</span><br><span class="line">    <span class="keyword">return</span> scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> <span class="title function_">setup</span>());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并methods与store</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">store</span>: any = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title function_">toRaw</span>(&#123;&#125;), partialStore, setupStore)</span><br><span class="line">  );</span><br><span class="line">  <span class="comment">// 将其加入pinia</span></span><br><span class="line">  pinia.<span class="property">_s</span>.<span class="title function_">set</span>($id, store);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> store;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​我们nimi版pinia的核心实现便完成了，真实的pinia源码中存在许多边际判断，为了方便阅读作者仅仅保留核心逻辑，剔除ts，简化分叉流程，极大的降低了了解pinia核心实现的门槛。</p><h3 id="增加一些方法"><a href="#增加一些方法" class="headerlink" title="增加一些方法"></a>增加一些方法</h3><blockquote><p>$Action $subscribe因为涉及到<strong>订阅发布模块</strong>，所以代码量比较大，mini版就忽略了，对其原理有兴趣的请看<a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p></blockquote><h4 id="patch"><a href="#patch" class="headerlink" title="$patch"></a>$patch</h4><blockquote><p>将状态补丁应用于当前状态</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$patch</span>(<span class="params">partialStateOrMutator: any</span>) &#123;</span><br><span class="line">    <span class="comment">// mini版实现仅支持传入function</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> partialStateOrMutator === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">partialStateOrMutator</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[$id]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="reset"><a href="#reset" class="headerlink" title="$reset"></a>$reset</h4><blockquote><p>初始化state</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="property">$reset</span> = <span class="keyword">function</span> <span class="title function_">$reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newState = state ? <span class="title function_">state</span>() : &#123;&#125;; <span class="comment">// 通过闭包获取最初定义的state</span></span><br><span class="line">    <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">$state: any</span>) =&gt;</span> &#123; <span class="comment">// 借用$patch完成state数据的替换</span></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">assign</span>($state, newState);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="dispose"><a href="#dispose" class="headerlink" title="$dispose"></a>$dispose</h4><blockquote><p>停止store的所有effect，并且删除其注册信息</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">    scope.<span class="title function_">stop</span>(); <span class="comment">// effect作用于停止</span></span><br><span class="line">    pinia.<span class="property">_s</span>.<span class="title function_">delete</span>($id); <span class="comment">// 删除effectMap结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h3><p>我们首先将实现的函数导出出去</p><p><code>src\super-mini-pinia\index.ts</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createPinia &#125; from &quot;./createPinia&quot;;</span><br><span class="line">import &#123; defineStore &#125; from &quot;./store&quot;;</span><br><span class="line"></span><br><span class="line">export &#123; createPinia as myCreatePinia, defineStore &#125;;</span><br></pre></td></tr></table></figure><p>在项目中的main.ts进行注册</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; myCreatePinia &#125; <span class="keyword">from</span> <span class="string">&quot;./super-mini-pinia/index&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&quot;./App-super-mini.vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">myCreatePinia</span>());</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>);</span><br></pre></td></tr></table></figure><p>在页面增加一些测试代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div&gt;state.num:&#123;&#123; useStore.num &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;getters.dnum:&#123;&#123; useStore.dnum &#125;&#125;&lt;/div&gt;</span><br><span class="line">    &lt;button @click=&quot;addNum&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; watchEffect &#125; from &quot;vue&quot;;</span><br><span class="line">import &#123; useCounterStore &#125; from &quot;./super-mini-store/counter&quot;;</span><br><span class="line"></span><br><span class="line">const useStore = useCounterStore();</span><br><span class="line"></span><br><span class="line">watchEffect(() =&gt; &#123;</span><br><span class="line">  console.log(useStore.num);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">function addNum() &#123;</span><br><span class="line">  useStore.addNum();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>预期效果</p><ol><li>action正常触发</li><li>num与dnum随着action的触发更新UI</li></ol><h2 id="mini版pinia测试"><a href="#mini版pinia测试" class="headerlink" title="mini版pinia测试"></a>mini版pinia测试</h2><p><img src="https://www.vkcyan.top/59mhu-59cji.gif" alt="59mhu-59cji"></p><p>​ 到此为止，我们便完成了mini版pinia的开发，代码虽少，但是核心逻辑五脏俱全，看懂了mini版pinia便是了解了pinia最核心的实现逻辑。</p><p>​ 我已将mini版pinia的开源到<a href="https://github.com/vkcyan/mini-pinia">github</a>，如果你对pinia核心实现有兴趣，欢迎fock、clone，有任何问题请评论区留言。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​到此为止pinia源码解读系列便全部结束了，总体来说难度不算太大，作者前前后后花费了半个月时间，从零开始搭建环境，逐步深入阅读，读懂pinia源码的也让作者vue3 reactivity核心响应机制，闭包，订阅发布有了更深入的理解，值得阅读；也欢迎大家一起阅读源码，交流讨论~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;源码解析系列文章&quot;&gt;&lt;a href=&quot;#源码解析系列文章&quot; class=&quot;headerlink&quot; title=&quot;源码解析系列文章&quot;&gt;&lt;/a&gt;源码解析系列文章&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/71242790610350</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://bluedancers.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Pinia" scheme="https://bluedancers.github.io/tags/Pinia/"/>
    
  </entry>
  
  <entry>
    <title>pinia源码分析【4】- Pinia Methods</title>
    <link href="https://bluedancers.github.io/2022/07/18/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%904%E3%80%91-%20Pinia%20Methods/"/>
    <id>https://bluedancers.github.io/2022/07/18/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%904%E3%80%91-%20Pinia%20Methods/</id>
    <published>2022-07-17T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏导航"><a href="#专栏导航" class="headerlink" title="专栏导航"></a>专栏导航</h2><p><a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a></p><p><a href="https://juejin.cn/post/7117131804229763079">Pinia源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831">pinia源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章参考源码<code>pinia V2.0.14</code></p><p>源码分析仓库：<a href="https://github.com/vkcyan/goto-pinia">https://github.com/vkcyan/goto-pinia</a></p><p>​上一章我们对<code>store</code>的核心流程完成了分析，从而了解了一个<code>store</code>从定义到被使用的实现逻辑，但是<code>store</code>相关的方法，我们还未进行分析，本章我们就重点分析分析<code>store</code>自带的<strong>Methods</strong></p><h2 id="onAction"><a href="#onAction" class="headerlink" title="$onAction"></a>$onAction</h2><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><p>订阅当前<code>store</code>所有<code>action</code>操作，每当<code>action</code>被执行的时候，便会触发该方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  useCounter1.$onAction(<span class="function">(<span class="params">option</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; after, onError, args, name, store &#125; = option;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    useCounter1.<span class="property">counter</span>++;</span><br><span class="line">    <span class="comment">// useCounter1.increment();</span></span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><h4 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h4><p>在<code>$Action</code>声明的地方，我们可以看到一段这样的函数</p><blockquote><p>第一个参数传<code>null</code>，则不改变this指向，并且在后续的调用依旧是该this。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> partialStore = &#123;</span><br><span class="line">  <span class="attr">$onAction</span>: addSubscription.<span class="title function_">bind</span>(<span class="literal">null</span>, actionSubscriptions), <span class="comment">// action事件注册函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​也就是说，当我们使用<code>store.$Action</code>的时候实际上触发的是<code>addSubscription</code>函数，并将我们<code>$Action</code>中的回调函数传入<code>createSetupStore</code>中的<code>actionSubscriptions</code>中，<strong>也就是订阅了我们的callback</strong></p><p>​运行<code>store.$Action</code>后得到了<code>addSubscription</code>方法的返回值<code>removeSubscription</code>方法，让我们可以执行其返回值，达到取消订阅的目的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> addSubscription&lt;T <span class="keyword">extends</span> _Method&gt;(</span><br><span class="line">  <span class="attr">subscriptions</span>: T[], <span class="comment">// createSetupStore中的actionSubscriptions</span></span><br><span class="line">  <span class="attr">callback</span>: T, <span class="comment">// 我们传入的callback</span></span><br><span class="line">  detached?: boolean, <span class="comment">// 如果为true，则该$Action在页面销毁之后依旧有效</span></span><br><span class="line">  <span class="attr">onCleanup</span>: <span class="function">() =&gt;</span> <span class="keyword">void</span> = noop</span><br><span class="line">) &#123;</span><br><span class="line">  <span class="comment">// 使用$Action的时候就会触发本函数</span></span><br><span class="line">  subscriptions.<span class="title function_">push</span>(callback)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">removeSubscription</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> idx = subscriptions.<span class="title function_">indexOf</span>(callback)</span><br><span class="line">    <span class="keyword">if</span> (idx &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      subscriptions.<span class="title function_">splice</span>(idx, <span class="number">1</span>)</span><br><span class="line">      <span class="title function_">onCleanup</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!detached &amp;&amp; <span class="title function_">getCurrentInstance</span>()) &#123;</span><br><span class="line">    <span class="comment">// 如果detached参数不存在，则在当前页面卸载的时候，去除该订阅事件</span></span><br><span class="line">    <span class="title function_">onUnmounted</span>(removeSubscription)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> removeSubscription</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="触发订阅"><a href="#触发订阅" class="headerlink" title="触发订阅"></a>触发订阅</h4><p>​在<code>useStore</code>中对<code>action</code>进行处理的逻辑中，存在这样的一段代码，这段代码中的hot在正常使用的业务场景下都是undefined，所以会走后面的逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actionValue =  <span class="title function_">wrapAction</span>(key, prop) <span class="comment">// hot为undefined的情况下</span></span><br></pre></td></tr></table></figure><p><img src="https://www.vkcyan.top/image-20220720184122095.png" alt="image-20220720184122095"></p><p>​所有的<code>action</code>在初始化阶段都会被<code>wrapAction</code>方法拦截，也就代表我们执行<code>action</code>的时候，实际上执行的是<code>wrapAction</code>函数，那就让我们就看看，在<code>wrapAction</code>中究竟发生了什么</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 包装一个action来处理订阅</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> <span class="variable">name</span> - store的名称</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> <span class="variable">action</span> - 需要被包装的action</span></span><br><span class="line"><span class="comment">* <span class="doctag">@returns</span> a wrapped action to handle subscriptions</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wrapAction</span>(<span class="params">name: string, action: _Method</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"><span class="variable language_">this</span>: any</span>) &#123;</span><br><span class="line">        <span class="title function_">setActivePinia</span>(pinia);</span><br><span class="line">        <span class="comment">// 获取当前action的参数</span></span><br><span class="line">        <span class="keyword">const</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="attr">afterCallbackList</span>: <span class="title class_">Array</span>&lt;<span class="function">(<span class="params">resolvedReturn: any</span>) =&gt;</span> any&gt; = [];</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">onErrorCallbackList</span>: <span class="title class_">Array</span>&lt;<span class="function">(<span class="params">error: unknown</span>) =&gt;</span> unknown&gt; = [];</span><br><span class="line">        <span class="comment">// 声明after方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">after</span>(<span class="params">callback: _ArrayType&lt;<span class="keyword">typeof</span> afterCallbackList&gt;</span>) &#123;</span><br><span class="line">            <span class="comment">// 将after的call放入list中</span></span><br><span class="line">            afterCallbackList.<span class="title function_">push</span>(callback);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 声明error方法</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">onError</span>(<span class="params">callback: _ArrayType&lt;<span class="keyword">typeof</span> onErrorCallbackList&gt;</span>) &#123;</span><br><span class="line">            onErrorCallbackList.<span class="title function_">push</span>(callback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// @ts-expect-error</span></span><br><span class="line">        <span class="comment">// 触发actionSubscriptions中订阅的store.$Action的全部回调函数,并将参数传入</span></span><br><span class="line">        <span class="comment">// 此时store.$Action的callback已经执行,但是after onError的回调函数尚未执行</span></span><br><span class="line">        <span class="title function_">triggerSubscriptions</span>(actionSubscriptions, &#123;</span><br><span class="line">            args,</span><br><span class="line">            name,</span><br><span class="line">            store,</span><br><span class="line">            after,</span><br><span class="line">            onError,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">ret</span>: any; <span class="comment">// ret为action的返回值</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ret = action.<span class="title function_">apply</span>(<span class="variable language_">this</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">$id</span> === $id ? <span class="variable language_">this</span> : store, args);</span><br><span class="line">            <span class="comment">// handle sync errors</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="comment">// 如果action执行出错,则直接执行错误回调,终止函数</span></span><br><span class="line">            <span class="title function_">triggerSubscriptions</span>(onErrorCallbackList, error);</span><br><span class="line">            <span class="keyword">throw</span> error;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果ret是promise,则当前结果未知，会通过上方的try catch，但是会在action结尾增加then catch进行结果捕捉</span></span><br><span class="line">        <span class="keyword">if</span> (ret <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line">                .<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">triggerSubscriptions</span>(afterCallbackList, value);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;)</span><br><span class="line">                .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">triggerSubscriptions</span>(onErrorCallbackList, error);</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// allow the afterCallback to override the return value</span></span><br><span class="line">        <span class="comment">// 如果try catch 通过，并且当前action不是Promise，则逻辑进行到此处，触发所有 触发真正的after函数，并将当前action的返回值传入其中，至此完成对action触发的监听。</span></span><br><span class="line">        <span class="title function_">triggerSubscriptions</span>(afterCallbackList, ret);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​之前在<code>$Action</code>中的回调函数在此处发挥了作用，每当一个<code>action</code>触发的都会遍历之前订阅的所有<code>$Action</code>的回调函数，其内部执行<code>action</code>方法，<code>action</code>执行正常在触发<code>after</code>的<code>callback</code>，执行异常则触发<code>onError</code>的<code>callback</code>。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p><img src="https://www.vkcyan.top/image-20220721143852948.png" alt="image-20220721143852948"></p><p>本质上来说$Action就是一个订阅发布模式。</p><p><strong>$Action 订阅者</strong></p><p><strong>store.action 发布者</strong></p><p><strong>actionSubscriptions - 事件注册中心</strong></p><p><strong>triggerSubscriptions - 调度中心</strong></p><p>​通过<strong>订阅者（$Action）</strong>把对<strong>发布者（action）</strong>的订阅注册到<strong>事件注册中心（actionSubscriptions）</strong>中，当<strong>发布者（action）</strong>触发时，通知<strong>调度中心（triggerSubscriptions）</strong>，<strong>调度中心（triggerSubscriptions）</strong>触发事件注册中心中的所有订阅。</p><h2 id="subscribe"><a href="#subscribe" class="headerlink" title="$subscribe"></a>$subscribe</h2><h3 id="使用示例-1"><a href="#使用示例-1" class="headerlink" title="使用示例"></a>使用示例</h3><p>​订阅当前<code>store</code>中的<code>state</code>的变化，<code>state</code>发生任意更改都会触发其回调函数，他还会返回一个用来删除的回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> abc = useCounter1.$subscribe(</span><br><span class="line">    <span class="function">(<span class="params">option, state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过store.num = xxxx修改，type为direct</span></span><br><span class="line">        <span class="comment">// 通过store.$patch(&#123; num: &#x27;xxx&#x27; &#125;)修改，type为directpatchObject</span></span><br><span class="line">        <span class="comment">// 通过store.$patch((state) =&gt; num.name=&#x27;xxx&#x27;)修改，type为patchFunction</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// storeId为当前store的id</span></span><br><span class="line">        <span class="comment">// events 当前改动说明</span></span><br><span class="line">        <span class="keyword">let</span> &#123; events, storeId, type &#125; = option;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(events, storeId, type, state);</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">detached</span>: <span class="literal">false</span> &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="源码分析-1"><a href="#源码分析-1" class="headerlink" title="源码分析"></a>源码分析</h3><p>当我们使用<code>$subscribe</code>并传入<code>callback</code>的时候，首先会将当前的<code>callback</code>加入注册中心中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> removeSubscription = <span class="title function_">addSubscription</span>(</span><br><span class="line">    subscriptions, <span class="comment">// 事件注册中心</span></span><br><span class="line">    callback, <span class="comment">// $subscribe传入的callback</span></span><br><span class="line">    options.<span class="property">detached</span>, <span class="comment">// 页面卸载的时候是否取消监听</span></span><br><span class="line">    <span class="function">() =&gt;</span> <span class="title function_">stopWatcher</span>() <span class="comment">// 执行stopWatcher实际上执行的是scope.run返回的watch，而执行watch的返回函数，也就是停止当前watch</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​前三个参数经过对<code>$Action</code>的分析后已经比较熟悉，这里我们重点说明一下第四个参数</p><p>​<code>stopWatcher</code>是当前<code>store</code>中的<code>effectScope</code>，我们将对当前<code>state</code>的<code>watch</code>放入<code>scope</code>中，以便于销毁<code>store</code>的时候统一处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stopWatcher = scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span></span><br><span class="line">    <span class="title function_">watch</span>(</span><br><span class="line">        <span class="function">() =&gt;</span> pinia.<span class="property">state</span>.<span class="property">value</span>[$id] <span class="keyword">as</span> <span class="title class_">UnwrapRef</span>&lt;S&gt;, <span class="comment">// 监听state的变化</span></span><br><span class="line">        <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 在不使用$patch的情况下，则两个参数都为true，callback一定会执行</span></span><br><span class="line">            <span class="keyword">if</span> (options.<span class="property">flush</span> === <span class="string">&quot;sync&quot;</span> ? isSyncListening : isListening) &#123;</span><br><span class="line">                <span class="title function_">callback</span>(</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">storeId</span>: $id, <span class="comment">// </span></span><br><span class="line">                        <span class="attr">type</span>: <span class="title class_">MutationType</span>.<span class="property">direct</span>,</span><br><span class="line">                        <span class="attr">events</span>: debuggerEvents <span class="keyword">as</span> <span class="title class_">DebuggerEvent</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    state</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">assign</span>(&#123;&#125;, $subscribeOptions, options)</span><br><span class="line">    )  </span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><img src="https://www.vkcyan.top/image-20220722170139137.png" alt="image-20220722170139137"></p><p>​<code>$subscribe</code>主要依赖<code>vue3</code>的<code>watch</code>进行实现，在<code>subscriptions</code>中注册<code>callback</code>，但是注册的<code>callback</code>不通过<code>triggerSubscriptions</code>进行触发，仅仅作为保存，<code>watch</code>的触发函数中通过闭包触发<code>$subscribe</code>中的<code>callback</code>，达到<code>store</code>中任意值发生变化的时候都执行<code>callback</code>的目的</p><p>​在<code>addSubscription</code>的返回值<code>removeSubscription</code>中，不仅会在<code>subscriptions</code>(注册中心)删除订阅，同时也会执行<code>() =&gt; stopWatcher()</code>，停止<code>watch</code>监听。达到完全停止监听的目的。</p><h2 id="patch"><a href="#patch" class="headerlink" title="$patch"></a>$patch</h2><h3 id="使用示例-2"><a href="#使用示例-2" class="headerlink" title="使用示例"></a>使用示例</h3><p>直接更新当前<code>state</code>，可以通过传入<strong>对象</strong>与<strong>callback</strong>两种方式进行<code>state</code>更新，允许传递嵌套值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象</span></span><br><span class="line">useCounter1.$patch(&#123; <span class="attr">counter</span>: <span class="number">2</span> &#125;);</span><br><span class="line"><span class="comment">// function</span></span><br><span class="line">useCounter1.$patch(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    state.<span class="property">counter</span> = <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="源码分析-2"><a href="#源码分析-2" class="headerlink" title="源码分析"></a>源码分析</h3><p>​<code>$patch</code>的主体逻辑不算很复杂，针对不同的参数类型进行分别处理，其中<code>partialStateOrMutator</code>是传入的方法，我们将当前<code>store</code>传入其中，通过其<code>callback</code>直接完成<code>state</code>的修改，而传入类型为<code>object</code>的时候，则通过<code>mergeReactiveObjects</code>进行处理。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$patch</span>(<span class="params">stateMutation: (state: UnwrapRef&lt;S&gt;) =&gt; <span class="built_in">void</span></span>): <span class="built_in">void</span>; <span class="comment">// Fun传参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">$patch</span>(<span class="params">partialState: _DeepPartial&lt;UnwrapRef&lt;S&gt;&gt;</span>): <span class="built_in">void</span>; <span class="comment">// 对象传参</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">$patch</span>(<span class="params"></span></span><br><span class="line"><span class="params">partialStateOrMutator:</span></span><br><span class="line"><span class="params"> | _DeepPartial&lt;UnwrapRef&lt;S&gt;&gt;</span></span><br><span class="line"><span class="params"> | ((state: UnwrapRef&lt;S&gt;) =&gt; <span class="built_in">void</span>)</span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">subscriptionMutation</span>: <span class="title class_">SubscriptionCallbackMutation</span>&lt;S&gt;;</span><br><span class="line">    isListening = isSyncListening = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// reset the debugger events since patches are sync</span></span><br><span class="line">    <span class="comment">/* istanbul ignore else */</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__) &#123;</span><br><span class="line">        debuggerEvents = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果参数是方法，走以下处理逻辑</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> partialStateOrMutator === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">partialStateOrMutator</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[$id] <span class="keyword">as</span> <span class="title class_">UnwrapRef</span>&lt;S&gt;);</span><br><span class="line">        subscriptionMutation = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">MutationType</span>.<span class="property">patchFunction</span>,</span><br><span class="line">            <span class="attr">storeId</span>: $id,</span><br><span class="line">            <span class="attr">events</span>: debuggerEvents <span class="keyword">as</span> <span class="title class_">DebuggerEvent</span>[],</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果参数是对象，走以下处理逻辑</span></span><br><span class="line">        <span class="title function_">mergeReactiveObjects</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[$id], partialStateOrMutator);</span><br><span class="line">        subscriptionMutation = &#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="title class_">MutationType</span>.<span class="property">patchObject</span>,</span><br><span class="line">            <span class="attr">payload</span>: partialStateOrMutator,</span><br><span class="line">            <span class="attr">storeId</span>: $id,</span><br><span class="line">            <span class="attr">events</span>: debuggerEvents <span class="keyword">as</span> <span class="title class_">DebuggerEvent</span>[],</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> myListenerId = (activeListener = <span class="title class_">Symbol</span>());</span><br><span class="line">    <span class="title function_">nextTick</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (activeListener === myListenerId) &#123;</span><br><span class="line">            isListening = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    isSyncListening = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 在上方逻辑中，我们将isListening isSyncListening 重置为false，不会触发$subscribe中的callback，所以需要手动进行订阅发布</span></span><br><span class="line">    <span class="title function_">triggerSubscriptions</span>(</span><br><span class="line">        subscriptions,</span><br><span class="line">        subscriptionMutation,</span><br><span class="line">        pinia.<span class="property">state</span>.<span class="property">value</span>[$id] <span class="keyword">as</span> <span class="title class_">UnwrapRef</span>&lt;S&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $patch传入参数为Object的处理逻辑</span></span><br><span class="line"><span class="keyword">function</span> mergeReactiveObjects&lt;T <span class="keyword">extends</span> <span class="title class_">StateTree</span>&gt;(</span><br><span class="line">  <span class="attr">target</span>: T,</span><br><span class="line">  <span class="attr">patchToApply</span>: _DeepPartial&lt;T&gt;</span><br><span class="line">): T &#123;</span><br><span class="line">  <span class="comment">// no need to go through symbols because they cannot be serialized anyway</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> patchToApply) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!patchToApply.<span class="title function_">hasOwnProperty</span>(key)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">const</span> subPatch = patchToApply[key];</span><br><span class="line">    <span class="keyword">const</span> targetValue = target[key];</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="title function_">isPlainObject</span>(targetValue) &amp;&amp;</span><br><span class="line">      <span class="title function_">isPlainObject</span>(subPatch) &amp;&amp;</span><br><span class="line">      target.<span class="title function_">hasOwnProperty</span>(key) &amp;&amp;</span><br><span class="line">      !<span class="title function_">isRef</span>(subPatch) &amp;&amp;</span><br><span class="line">      !<span class="title function_">isReactive</span>(subPatch)</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="comment">// 如果被修改的值 修改前修改后都是object类型并且不是Function类型、并且不是ref 不是isReactive，则递归mergeReactiveObjects达到修改嵌套object的目的</span></span><br><span class="line">      target[key] = <span class="title function_">mergeReactiveObjects</span>(targetValue, subPatch);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// @ts-expect-error: subPatch is a valid value</span></span><br><span class="line">      <span class="comment">// 如果是简单类型 则直接进行state的修改，这里的target为pinia.state.value[$id]</span></span><br><span class="line">      <span class="comment">// 按我们的示例来实际分析：pinia.state.value[$id].counter = 2</span></span><br><span class="line">      target[key] = subPatch;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​完成对<code>mergeReactiveObjects</code>的分析后，<code>$patch</code>的核心逻辑就全部结束了，但是还有一点我们没完成，就是通过<code>$patch</code>修改的<code>state</code>，<code>$subscribe</code>是否可以监听到。</p><h3 id="patch触发-subscribe"><a href="#patch触发-subscribe" class="headerlink" title="$patch触发$subscribe"></a>$patch触发$subscribe</h3><p>​在<code>$patch</code>执行的中，我们会修改当前<code>store</code>中的<code>state</code>，<code>$subscribe</code>中的<code>watch</code>在<code>flush=&#39;sync&#39;</code>的情况下可以立刻监听到，但是也无法执行<code>callback</code>，因为<code>$patch</code>函数最开始的地方将<code>isListening，isSyncListening</code>置为<code>false</code></p><p>​在对值完成修改后，我们将<code>isSyncListening</code>置为true，并且手动订阅<code>$subscribe</code>的<code>callback</code>，达到通过<code>$patch</code>修改<code>state</code>也能被<code>$subscribe</code>监听到的目的。</p><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><p>​<code>$patch</code>的源码相对来说比较简单，但是关于触发<code>$subscribe</code>的部分代码逻辑比较复杂，尤其是当<code>$subscribe</code> <code>option</code>设置中的<code>flush</code>为sync的时候，修改<code>state</code>立刻就会触发<code>$subscribe</code>的<code>watch</code>，虽然最终呈现出来的结果是一致的，但是内部对不同情况的兼容没有看起来那么简单。</p><p><img src="https://www.vkcyan.top/image-20220723162542035.png" alt="image-20220723162542035"></p><h2 id="dispose"><a href="#dispose" class="headerlink" title="$dispose"></a>$dispose</h2><p>调用该方法后将会注销当前<code>store</code></p><p><code>scope</code>中存储当前<code>store</code>中的相关反应，当前<code>state</code>的<code>watch</code>，<code>ref</code>，等等<code>effect</code>都通过<code>scope.run</code>创建，就是为了方便统一处理，这里调用<code>scope.stop()</code>所有的<code>effect</code>便被全部注销了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">$dispose</span>(<span class="params"></span>) &#123;</span><br><span class="line">  scope.<span class="title function_">stop</span>();</span><br><span class="line">  subscriptions = []; <span class="comment">// $subscribe注册中心</span></span><br><span class="line">  actionSubscriptions = []; <span class="comment">// $Action的注册中心</span></span><br><span class="line">  pinia.<span class="property">_s</span>.<span class="title function_">delete</span>($id); <span class="comment">// 删除effectMap结构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="reset"><a href="#reset" class="headerlink" title="$reset"></a>$reset</h2><p>调用该方法可以将当前<code>state</code>重置为初始化的状态</p><p>但是有点需要注意，如果<code>defineStore</code>通过<code>setup类型</code>声明，则无法调用该函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> $reset = __DEV__</span><br><span class="line">? <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">            <span class="string">`🍍: Store &quot;<span class="subst">$&#123;$id&#125;</span>&quot; is built using the setup syntax and does not implement $reset().`</span></span><br><span class="line">        );</span><br><span class="line">&#125;</span><br><span class="line">: noop; <span class="comment">// noop为空函数</span></span><br></pre></td></tr></table></figure><p>如果通过<code>option类型</code>进行声明，则会<strong>重写$reset</strong>方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">store.<span class="property">$reset</span> = <span class="keyword">function</span> <span class="title function_">$reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// state通过闭包机制获得最初state定义的状态</span></span><br><span class="line">    <span class="keyword">const</span> newState = state ? <span class="title function_">state</span>() : &#123;&#125;;</span><br><span class="line">    <span class="comment">// 通过$patch完成对state中数据的更新</span></span><br><span class="line">    <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">$state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">assign</span>($state, newState);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​至此，我们就完成了对<code>pinia</code>所有方法的源码解读，而<code>pinia</code>源码解读系列文章也将告一段落，我们从<code>pinia</code>的初始化到了解如何实现<strong>state，getters</strong>的响应式，最后完成对<code>pinia metnods</code>的全部解读，也算是完全了解了其核心实现，最后我们将会实现一个<strong>mini版的pinia</strong>，仅仅保留核心实现，降低阅读门槛，让大多数人可以轻松了解pinia的核心实现原理~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏导航&quot;&gt;&lt;a href=&quot;#专栏导航&quot; class=&quot;headerlink&quot; title=&quot;专栏导航&quot;&gt;&lt;/a&gt;专栏导航&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7124279061035089927&quot;&gt;分析pinia源码</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://bluedancers.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Pinia" scheme="https://bluedancers.github.io/tags/Pinia/"/>
    
  </entry>
  
  <entry>
    <title>pinia源码分析【3】- defineStore</title>
    <link href="https://bluedancers.github.io/2022/07/18/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%903%E3%80%91-%20defineStore/"/>
    <id>https://bluedancers.github.io/2022/07/18/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%903%E3%80%91-%20defineStore/</id>
    <published>2022-07-17T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏导航"><a href="#专栏导航" class="headerlink" title="专栏导航"></a>专栏导航</h2><p><a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a></p><p><a href="https://juejin.cn/post/7117131804229763079">Pinia源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831">pinia源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章参考源码<code>pinia V2.0.14</code></p><p>源码分析记录：<a href="https://github.com/vkcyan/goto-pinia">https://github.com/vkcyan/goto-pinia</a></p><p>在上一节，我们完成了<code>createPinia</code>相关逻辑的源码解读，了解了<code>pinia</code>注册到<code>vue</code>的阶段具体做了哪些工作，以及<code>pinia</code>核心对象的生成逻辑，本文我们就要一起解读<code>pinia</code>中最重要的方法<strong>defineStore</strong>的实现原理</p><p><img src="https://www.vkcyan.top/image-20220718114312824.png" alt="image-20220718114312824"></p><h2 id="关于store的初始化"><a href="#关于store的初始化" class="headerlink" title="关于store的初始化"></a>关于store的初始化</h2><h3 id="三种创建方法"><a href="#三种创建方法" class="headerlink" title="三种创建方法"></a>三种创建方法</h3><p><img src="https://www.vkcyan.top/image-20220708105442886.png" alt="image-20220708105442886"></p><p>源码中对<code>defineStore</code>的三种类型描述便解释了为何我们可以用以上三种方式创建。</p><p>在<code>defineStore</code>声明中，我们需要传入三种的参数。</p><ul><li><strong>id</strong>：定义<code>store</code>的唯一id，单独传参或者通过<code>options.id</code>进行传参</li><li><strong>options</strong>：具体配置信息包含如果传参是对象，则可以传，<code>state</code>，<code>getters</code>，<code>action</code>，<code>id</code>，例如上图1 2 种声明方式；如果传参是<code>Function</code>，则自主声明变量方法，例如上图第三种声明方式</li><li><strong>storeSetup</strong>：仅限第三种<code>store</code>的声明方式，传入函数</li></ul><h3 id="defineStore执行逻辑"><a href="#defineStore执行逻辑" class="headerlink" title="defineStore执行逻辑"></a>defineStore执行逻辑</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">defineStore</span>(<span class="params"></span></span><br><span class="line"><span class="params">  <span class="comment">// <span class="doctag">TODO:</span> add proper types from above</span></span></span><br><span class="line"><span class="params">  idOrOptions: any,</span></span><br><span class="line"><span class="params">  setup?: any,</span></span><br><span class="line"><span class="params">  setupOptions?: any</span></span><br><span class="line"><span class="params"></span>): <span class="title class_">StoreDefinition</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">id</span>: string;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">options</span>: <span class="comment">// ....</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 对三种store创建形式进行兼容。</span></span><br><span class="line">  <span class="keyword">const</span> isSetupStore = <span class="keyword">typeof</span> setup === <span class="string">&quot;function&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> idOrOptions === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    id = idOrOptions;</span><br><span class="line">    options = isSetupStore ? setupOptions : setup;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    options = idOrOptions;</span><br><span class="line">    id = idOrOptions.<span class="property">id</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params">pinia?: Pinia | <span class="literal">null</span>, hot?: StoreGeneric</span>): <span class="title class_">StoreGeneric</span> &#123;</span><br><span class="line">      <span class="comment">//.....下面单独分析</span></span><br><span class="line">  &#125;</span><br><span class="line">  useStore.<span class="property">$id</span> = id;</span><br><span class="line">  <span class="comment">// 将useStore执行结果返回，在该store在使用之前被返回函数不会执行。</span></span><br><span class="line">  <span class="comment">// 所以defineStore早于在Vue种注册pinia也不会出现错误。</span></span><br><span class="line">  <span class="keyword">return</span> useStore;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​通过对<code>defineStore</code>的源码大致分析可以得知，只有在<code>store</code>被执行的时候才会运行被返回的函数<code>useStore</code>，<code>useStore</code>才是核心store的创建逻辑，我们接下便要重点分析其实现原理。</p><h2 id="useStore逻辑分析"><a href="#useStore逻辑分析" class="headerlink" title="useStore逻辑分析"></a>useStore逻辑分析</h2><h3 id="useStore之前的逻辑执行顺序"><a href="#useStore之前的逻辑执行顺序" class="headerlink" title="useStore之前的逻辑执行顺序"></a>useStore之前的逻辑执行顺序</h3><p>我们在<code>App.vue</code>中使用我们创建的<code>store</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> useCounter1 = <span class="title function_">useCounterStore1</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>main</code> <code>createPinia</code> <code>defineStore</code> <code>useStore</code>初始化处增加日志</p><p><img src="https://www.vkcyan.top/image-20220708145541424.png" alt="image-20220708145541424"></p><ol><li><code>defineStore</code>初始化</li><li>main.ts -&gt; createPinia -&gt; vue.use -&gt; install（注册逻辑）</li><li>执行useStore（页面逻辑）</li></ol><p>代码执行与我们想象的一致，<code>defineStore</code>是一个函数，会在引用阶段执行，并返回未执行函数<code>useStore</code>，之后便是一连串的初始化，最后是页面中使用<code>pinia</code>而运行的<code>useStore</code>。</p><h3 id="useStore准备工作"><a href="#useStore准备工作" class="headerlink" title="useStore准备工作"></a>useStore准备工作</h3><p><img src="https://www.vkcyan.top/image-20220718112122831.png" alt="image-20220718112122831"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useStore接受两个参数，一个是pinia的实例，另一个与热更新相关。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params">pinia?: Pinia | <span class="literal">null</span>, hot?: StoreGeneric</span>): <span class="title class_">StoreGeneric</span> &#123;</span><br><span class="line"><span class="comment">// 首先会通过getCurrentInstance获取当前组件实例，并处理参数pinia，组件实例可以被正常获取，接下来通过inject(piniaSymbol)获取pinia实例（在install阶段保存）。</span></span><br><span class="line">    <span class="keyword">const</span> currentInstance = <span class="title function_">getCurrentInstance</span>();</span><br><span class="line">    pinia =</span><br><span class="line">        (__TEST__ &amp;&amp; activePinia &amp;&amp; activePinia.<span class="property">_testing</span> ? <span class="literal">null</span> : pinia) ||</span><br><span class="line">        (currentInstance &amp;&amp; <span class="title function_">inject</span>(piniaSymbol));</span><br><span class="line">    <span class="comment">// 设置当前活跃的pinia，如果存在多个pinia实例，方便后续逻辑获取当前pinia实例</span></span><br><span class="line">    <span class="keyword">if</span> (pinia) <span class="title function_">setActivePinia</span>(pinia);</span><br><span class="line">    <span class="comment">// 在dev环境并且全局变量activePinia获取不到当前pinia实例，则说明未全局注册，抛出错误</span></span><br><span class="line">    <span class="keyword">if</span> (__DEV__ &amp;&amp; !activePinia) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(</span><br><span class="line">            <span class="string">`[🍍]: getActivePinia was called with no active Pinia. Did you forget to install pinia?\n`</span> +</span><br><span class="line">            <span class="string">`\tconst pinia = createPinia()\n`</span> +</span><br><span class="line">            <span class="string">`\tapp.use(pinia)\n`</span> +</span><br><span class="line">            <span class="string">`This will fail in production.`</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取最新pinia，并断言pinia一定存在（猜测这里主要为了断言，此时两个变量就是一个值）</span></span><br><span class="line">    pinia = activePinia!;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="核心store创建"><a href="#核心store创建" class="headerlink" title="核心store创建"></a>核心store创建</h3><p><img src="https://www.vkcyan.top/image-20220718112358146.png" alt="image-20220718112358146"></p><p>​当我们第一次运行<code>store</code>的时候，才会进行相关逻辑的执行，通过单例模式创建，未来再次使用该<code>store</code>将会直接从<code>pinia._s</code>中获取已经被处理过的store并返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">useStore</span>(<span class="params">pinia?: Pinia | <span class="literal">null</span>, hot?: StoreGeneric</span>): <span class="title class_">StoreGeneric</span> &#123;</span><br><span class="line">    <span class="comment">// .....</span></span><br><span class="line">    <span class="comment">// 如果是第一次使用创建store逻辑，后面则跳过</span></span><br><span class="line">    <span class="keyword">if</span> (!pinia.<span class="property">_s</span>.<span class="title function_">has</span>(id)) &#123;</span><br><span class="line">        <span class="comment">// 如果defineStore的时候第二个参数是函数则为true，否则为false</span></span><br><span class="line">        <span class="keyword">if</span> (isSetupStore) &#123;</span><br><span class="line">            <span class="title function_">createSetupStore</span>(id, setup, options, pinia);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">createOptionsStore</span>(id, options <span class="keyword">as</span> any, pinia);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从_s中获取当前id对应的store信息</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">store</span>: <span class="title class_">StoreGeneric</span> = pinia.<span class="property">_s</span>.<span class="title function_">get</span>(id)!;</span><br><span class="line"><span class="comment">// 这里返回的值实际上就是我们实际获取到值</span></span><br><span class="line">    <span class="keyword">return</span> store <span class="keyword">as</span> any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>useStore</code>的大致逻辑比较简单，我们假设第一次使用，并且通过非Function进行传参，进入<strong>createOptionsStore</strong>函数。</p><h3 id="createOptionsStore"><a href="#createOptionsStore" class="headerlink" title="createOptionsStore"></a>createOptionsStore</h3><p><code>defineStore</code>的第二个参数使用非<code>Function</code>进行声明将会走入该逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> createOptionsStore&lt;</span><br><span class="line">  <span class="title class_">Id</span> <span class="keyword">extends</span> string,</span><br><span class="line">  S <span class="keyword">extends</span> <span class="title class_">StateTree</span>,</span><br><span class="line">  G <span class="keyword">extends</span> _GettersTree&lt;S&gt;,</span><br><span class="line">  A <span class="keyword">extends</span> _ActionsTree</span><br><span class="line">&gt;(</span><br><span class="line">  <span class="attr">id</span>: <span class="title class_">Id</span>, <span class="comment">// storeid</span></span><br><span class="line">  <span class="attr">options</span>: <span class="title class_">DefineStoreOptions</span>&lt;<span class="title class_">Id</span>, S, G, A&gt;, <span class="comment">// state action getters</span></span><br><span class="line">  <span class="attr">pinia</span>: <span class="title class_">Pinia</span>, <span class="comment">// 当前store实例</span></span><br><span class="line">  hot?: boolean</span><br><span class="line">): <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; state, actions, getters &#125; = options;</span><br><span class="line">  <span class="comment">// 获取state中是否已经存在该store实例</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">initialState</span>: <span class="title class_">StateTree</span> | <span class="literal">undefined</span> = pinia.<span class="property">state</span>.<span class="property">value</span>[id];</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;initialState&quot;</span>, initialState);</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">store</span>: <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!initialState &amp;&amp; (!__DEV__ || !hot)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isVue2) &#123;</span><br><span class="line">        <span class="title function_">set</span>(pinia.<span class="property">state</span>.<span class="property">value</span>, id, state ? <span class="title function_">state</span>() : &#123;&#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 将数据存储到state中，因为state时通过ref进行创建</span></span><br><span class="line">        pinia.<span class="property">state</span>.<span class="property">value</span>[id] = state ? <span class="title function_">state</span>() : &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 避免在 pinia.state.value 中创建状态</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>, pinia.<span class="property">state</span>.<span class="property">value</span>[id]);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">22</span>, <span class="title function_">toRefs</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[id]));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> localState =</span><br><span class="line">      __DEV__ &amp;&amp; hot</span><br><span class="line">        ? <span class="comment">// 使用 ref() 来解开状态 TODO 中的 refs：检查这是否仍然是必要的</span></span><br><span class="line">          <span class="title function_">toRefs</span>(<span class="title function_">ref</span>(state ? <span class="title function_">state</span>() : &#123;&#125;).<span class="property">value</span>)</span><br><span class="line">        : <span class="title function_">toRefs</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[id]);</span><br><span class="line">    <span class="comment">// 经过toRefs的处理后，localState.xx.value 就等同于给state中的xx赋值</span></span><br><span class="line">    <span class="keyword">let</span> aa = <span class="title function_">assign</span>(</span><br><span class="line">      localState, <span class="comment">// state =&gt; Refs(state)</span></span><br><span class="line">      actions, <span class="comment">//</span></span><br><span class="line">      <span class="title class_">Object</span>.<span class="title function_">keys</span>(getters || &#123;&#125;).<span class="title function_">reduce</span>(<span class="function">(<span class="params">computedGetters, name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (__DEV__ &amp;&amp; name <span class="keyword">in</span> localState) &#123;</span><br><span class="line">          <span class="comment">// 如果getters名称与state中的名称相同，则抛出错误</span></span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">warn</span>(</span><br><span class="line">            <span class="string">`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with &quot;<span class="subst">$&#123;name&#125;</span>&quot; in store &quot;<span class="subst">$&#123;id&#125;</span>&quot;.`</span></span><br><span class="line">          );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// markRow 防止对象被重复代理</span></span><br><span class="line">        computedGetters[name] = <span class="title function_">markRaw</span>(</span><br><span class="line">          <span class="comment">// 使用计算属性处理getters的距离逻辑，并且通过call处理this指向问题</span></span><br><span class="line">          <span class="title function_">computed</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">setActivePinia</span>(pinia);</span><br><span class="line">            <span class="comment">// 它是在之前创建的</span></span><br><span class="line">            <span class="keyword">const</span> store = pinia.<span class="property">_s</span>.<span class="title function_">get</span>(id)!;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// allow cross using stores</span></span><br><span class="line">            <span class="comment">/* istanbul ignore next */</span></span><br><span class="line">            <span class="keyword">if</span> (isVue2 &amp;&amp; !store.<span class="property">_r</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// @ts-expect-error</span></span><br><span class="line">            <span class="comment">// return getters![name].call(context, context)</span></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> avoid reading the getter while assigning with a global variable</span></span><br><span class="line">            <span class="comment">// 将store的this指向getters中实现getters中this的正常使用</span></span><br><span class="line">            <span class="keyword">return</span> getters![name].<span class="title function_">call</span>(store, store);</span><br><span class="line">          &#125;)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> computedGetters;</span><br><span class="line">      &#125;, &#123;&#125; <span class="keyword">as</span> <span class="title class_">Record</span>&lt;string, <span class="title class_">ComputedRef</span>&gt;)</span><br><span class="line">    );</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aa&quot;</span>, aa);</span><br><span class="line">    <span class="keyword">return</span> aa;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用createSetupStore创建store</span></span><br><span class="line">  store = <span class="title function_">createSetupStore</span>(id, setup, options, pinia, hot, <span class="literal">true</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 重写$store方法</span></span><br><span class="line">  store.<span class="property">$reset</span> = <span class="keyword">function</span> <span class="title function_">$reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> newState = state ? <span class="title function_">state</span>() : &#123;&#125;;</span><br><span class="line">    <span class="comment">// 我们使用补丁将所有更改分组到一个订阅中</span></span><br><span class="line">    <span class="variable language_">this</span>.$patch(<span class="function">(<span class="params">$state</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">assign</span>($state, newState);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> store <span class="keyword">as</span> any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<code>createOptionsStore</code>函数在获取<code>defineStore</code>声明的数据后，在其内部构建了<strong>setup函数</strong>，该函数将<strong>option形式的state</strong>与<strong>getters</strong>分别转化为<strong>ref</strong>与<strong>computed</strong>，这样就与<strong>setup形式</strong>声明的<code>store</code>保持一致。</p><p>​<strong>这一块代码非常核心，初步解释了为何state具备响应式，为何getters具备computed的效果</strong></p><p>​最后不论是<strong>option</strong>方式创建还是<strong>setup</strong>的形式创建，最后都统一通过<code>createSetupStore</code>完成对<code>store</code>最后的处理</p><h3 id="createSetupStore"><a href="#createSetupStore" class="headerlink" title="createSetupStore"></a>createSetupStore</h3><p><img src="https://www.vkcyan.top/image-20220718112449354.png" alt="image-20220718112449354"></p><blockquote><p>无论是何种<code>defineStore</code>创建方式，最终都会走向<code>createSetupStore</code>，在这里进行最终store的生成以及相关methods的实现。</p><p>注：这一块代码实在是复杂，关于$reset $patch等API，我们放下一个系列文章</p></blockquote><p>​经过<code>createOptionsStore</code>的处理，已经将<strong>option</strong>形式的字段全部转化为<strong>setup</strong>形式进行返回，现在无论何种创建方式，执行此处的setup函数，都会得到同一个结果。</p><p><img src="https://www.vkcyan.top/image-20220715170700824.png" alt="image-20220715170700824"></p><p>以上三种创建方式，内部运行setup函数都会得到如下结果</p><p><img src="https://www.vkcyan.top/image-20220715170712733.png" alt="image-20220715170712733"></p><p>接下来，我们就需要对其数据进行处理，获取到所有变量与方法，并对action通过wrapAction进行处理，便于实现后续的订阅发布模式 methods<code>$Action</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> setupStore = pinia.<span class="property">_e</span>.<span class="title function_">run</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    scope = <span class="title function_">effectScope</span>();</span><br><span class="line">    <span class="keyword">return</span> scope.<span class="title function_">run</span>(<span class="function">() =&gt;</span> <span class="title function_">setup</span>());</span><br><span class="line">&#125;)!;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> setupStore) &#123;</span><br><span class="line">    <span class="keyword">const</span> prop = setupStore[key];</span><br><span class="line">    <span class="keyword">if</span> ((<span class="title function_">isRef</span>(prop) &amp;&amp; !<span class="title function_">isComputed</span>(prop)) || <span class="title function_">isReactive</span>(prop)) &#123;</span><br><span class="line">    <span class="comment">// 如果当前props是ref并且不是计算属性与reative</span></span><br><span class="line">        <span class="keyword">if</span> (!isOptionsStore) &#123;</span><br><span class="line"><span class="comment">// option结构已经在createOptionsStore将其加入pinia</span></span><br><span class="line">            <span class="keyword">if</span> (isVue2) &#123;</span><br><span class="line">                <span class="title function_">set</span>(pinia.<span class="property">state</span>.<span class="property">value</span>[$id], key, prop);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pinia.<span class="property">state</span>.<span class="property">value</span>[$id][key] = prop;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> prop === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果当前函数是fun</span></span><br><span class="line">        <span class="comment">// wrapAction 会将当前prop也就是函数增加调用错误与正常的回调函数</span></span><br><span class="line">        <span class="keyword">const</span> actionValue = __DEV__ &amp;&amp; hot ? prop : <span class="title function_">wrapAction</span>(key, prop);</span><br><span class="line">        <span class="keyword">if</span> (isVue2) &#123;</span><br><span class="line">            <span class="title function_">set</span>(setupStore, key, actionValue);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setupStore[key] = actionValue;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将其函数同步到optionsForPlugin中</span></span><br><span class="line">        optionsForPlugin.<span class="property">actions</span>[key] = prop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​经过以上逻辑处理后，<code>setupStore</code>方式进行创建的<code>store</code>也会被添加到<code>pinia.state</code>中，而所有的<code>function</code>都会被<code>wrapAction</code>进行包装处理。</p><p>​对state，action进行处理的同时，还需要对当前<code>store</code>可调用API进行处理，例如<code>$reset</code>，<code>$patch</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> partialStore = &#123;</span><br><span class="line">    <span class="attr">_p</span>:pinia,</span><br><span class="line">    $id,</span><br><span class="line">    $Action,</span><br><span class="line">    $patch,</span><br><span class="line">    $reset,</span><br><span class="line">    $subscribe,</span><br><span class="line">    $dispose</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">store</span>: <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt; = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title function_">assign</span>(</span><br><span class="line">        __DEV__ &amp;&amp; <span class="variable constant_">IS_CLIENT</span></span><br><span class="line">        ? <span class="comment">// devtools custom properties</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">_customProperties</span>: <span class="title function_">markRaw</span>(<span class="keyword">new</span> <span class="title class_">Set</span>&lt;string&gt;()),</span><br><span class="line">            _hmrPayload,</span><br><span class="line">        &#125;</span><br><span class="line">        : &#123;&#125;,</span><br><span class="line">        partialStore</span><br><span class="line">        <span class="comment">// must be added later</span></span><br><span class="line">        <span class="comment">// setupStore</span></span><br><span class="line">    )</span><br><span class="line">) <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...将变量 方法合并到store中</span></span><br><span class="line"><span class="title function_">assign</span>(<span class="title function_">toRaw</span>(store), setupStore);</span><br></pre></td></tr></table></figure><p>​最终将相关<code>methods</code>与<code>store</code>内的数据进行合并，存储以当前store的id为key的<code>Map</code>中，<code>createSetupStore</code>的核心逻辑便全部结束了。</p><h2 id="useStore后续逻辑"><a href="#useStore后续逻辑" class="headerlink" title="useStore后续逻辑"></a>useStore后续逻辑</h2><p>我们再回到<code>defineStore</code>的逻辑中，获取到<code>createSetupStore</code>最后放入<code>pinia._s</code>中的当前store被处理后的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ....</span></span><br><span class="line"><span class="comment">// 从_s中获取当前store的effect数据</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">store</span>: <span class="title class_">StoreGeneric</span> = pinia.<span class="property">_s</span>.<span class="title function_">get</span>(id)!;</span><br><span class="line"><span class="comment">// StoreGeneric cannot be casted towards Store</span></span><br><span class="line"><span class="keyword">return</span> store <span class="keyword">as</span> any;</span><br></pre></td></tr></table></figure><p>​最后将通过<code>createSetupStore</code>处理后的数据进行返回，我们便得到了使用当前<code>store</code>中变量与方法以及各种方法的能力。</p><p><img src="https://www.vkcyan.top/312434234234.png" alt="img"></p><h2 id="拓展：为什么访问defineStore创建的state不需要-value"><a href="#拓展：为什么访问defineStore创建的state不需要-value" class="headerlink" title="拓展：为什么访问defineStore创建的state不需要.value"></a>拓展：为什么访问defineStore创建的state不需要.value</h2><p>​通过以上源码分析可以得知，state的数据都会被处理为ref，那访问ref自然是需要.value，但是我们日常使用pinia似乎从来没有.value。</p><p>我们先看一个小例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="title function_">ref</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> age = <span class="title function_">ref</span>(<span class="string">&quot;24&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> info = <span class="title function_">reactive</span>(&#123; name, age &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">name</span>); <span class="comment">// 张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">age</span>); <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><p>​简单来说就是reactive中嵌套ref的时候，修改reactive内的值不需要.value</p><p>​在官方文档（<a href="https://vuejs.org/api/reactivity-core.html#reactive%EF%BC%89%E4%B8%AD%EF%BC%8C%E6%88%91%E4%BB%AC%E4%B9%9F%E8%83%BD%E6%89%BE%E5%88%B0%E7%9B%B8%E5%85%B3%E8%AF%B4%E6%98%8E">https://vuejs.org/api/reactivity-core.html#reactive）中，我们也能找到相关说明</a></p><blockquote><p>注意：reactive嵌套ref的场景下，对象与数组格式存在差异，有兴趣可以了解一下</p></blockquote><p><img src="https://www.vkcyan.top/image-20220716160727154.png" alt="image-20220716160727154"></p><p>根据文档我们简单的翻阅了一下vuejs&#x2F;core&#x2F;…&#x2F;baseHandlers.ts的源码</p><blockquote><p>源码地址：<a href="https://github.com/vuejs/core/blob/main/packages/reactivity/src/baseHandlers.ts">https://github.com/vuejs/core/blob/main/packages/reactivity/src/baseHandlers.ts</a></p></blockquote><p><strong>line 131 - 134 createGetter()</strong></p><p><img src="https://www.vkcyan.top/image-20220716161515875.png" alt="image-20220716161515875"></p><p><strong>line 131 - 134 createSetter()</strong></p><p><img src="https://www.vkcyan.top/image-20220716161502977.png" alt="image-20220716161502977"></p><p>可以发现，逻辑实现与文档描述相符。</p><p>最后再看一下我们的pinia源码中<code>createSetupStore</code>函数中<code>store</code>声明的那一段函数，这便解释了为什么在使用<code>pinia</code>修改值、读取值的时候都不需要进行.value了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">store</span>: <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt; = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title function_">assign</span>(</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">      partialStore</span><br><span class="line">    )</span><br><span class="line">  ) <span class="keyword">as</span> unknown <span class="keyword">as</span> <span class="title class_">Store</span>&lt;<span class="title class_">Id</span>, S, G, A&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line"><span class="keyword">if</span> (isVue2) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">assign</span>(<span class="title function_">toRaw</span>(store), setupStore); <span class="comment">// 将defineStore的数据合并到reactive声明的store中</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​<strong>虽然代码量比较大，但是核心逻辑就是将state处理为ref，将getters处理为computed，将action进行二次封装，提供若干方法，最后组合对象存储到Pinia中。</strong></p><p>​在这一章我们完成了最核心<code>store</code>创建流程的源码分析，但是通过<code>partialStore</code>增加的方法我们还没有一一了解。下一篇我们将会重点介绍<code>store</code>相关<code>Methods</code>的具体实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏导航&quot;&gt;&lt;a href=&quot;#专栏导航&quot; class=&quot;headerlink&quot; title=&quot;专栏导航&quot;&gt;&lt;/a&gt;专栏导航&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7124279061035089927&quot;&gt;分析pinia源码</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://bluedancers.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Pinia" scheme="https://bluedancers.github.io/tags/Pinia/"/>
    
  </entry>
  
  <entry>
    <title>Pinia源码分析【2】- createPinia</title>
    <link href="https://bluedancers.github.io/2022/07/07/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%902%E3%80%91-%20createPinia/"/>
    <id>https://bluedancers.github.io/2022/07/07/pinia%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/pinia%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E3%80%902%E3%80%91-%20createPinia/</id>
    <published>2022-07-06T16:00:00.000Z</published>
    <updated>2022-12-11T13:51:24.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="专栏导航"><a href="#专栏导航" class="headerlink" title="专栏导航"></a>专栏导航</h2><p><a href="https://juejin.cn/post/7124279061035089927">分析pinia源码之前必须知道的API</a></p><p><a href="https://juejin.cn/post/7117131804229763079">Pinia源码分析【1】- 源码分析环境搭建</a></p><p><a href="https://juejin.cn/post/7119788423501578277">Pinia源码分析【2】- createPinia</a></p><p><a href="https://juejin.cn/post/7121661056044236831">pinia源码分析【3】- defineStore</a></p><p><a href="https://juejin.cn/post/7123504805892325406">pinia源码分析【4】- Pinia Methods</a></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>参考源码<code>pinia V2.0.14</code></p><p>源码分析仓库：<a href="https://github.com/vkcyan/goto-pinia">https://github.com/vkcyan/goto-pinia</a></p><p>上一篇文章我们主要介绍了如何搭建一个pinia源码阅读环境；本文主要介绍pinia在vue3初始化阶段相关逻辑，以及如何构建pinia对象。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>根据官方文档，我们使用<code>pinia</code>首先需要是将它注册到<code>vue</code>中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>();</span><br><span class="line">app.<span class="title function_">use</span>(pinia);</span><br></pre></td></tr></table></figure><p><code>createPinia</code>阶段究竟做了什么，他又是如何被注册到vue中呢？我们要从<code>createPinia</code>中寻找答案。</p><h3 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h3><p>我们通过<code>pinia\src\index.ts</code>找到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;./createPinia&#x27;</span> <span class="comment">// `pinia\src\createPinia.ts为源码文件`</span></span><br></pre></td></tr></table></figure><h3 id="createPinia函数"><a href="#createPinia函数" class="headerlink" title="createPinia函数"></a>createPinia函数</h3><p>​在函数的最开头，我们就可以看到通过<code>effectScope</code>声明了一个<code>ref</code>，并赋值给了<strong>state</strong>，这里的<code>effectScope</code>是高级API，未来会单独介绍，有兴趣的同学可以看一下<a href="https://vuejs.org/api/reactivity-advanced.html#effectscope">官方文档</a>，我们将其<strong>简单理解为声明了一个ref并赋值给state</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createPinia</span>(<span class="params"></span>): <span class="title class_">Pinia</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> scope = <span class="title function_">effectScope</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">const</span> state = scope.<span class="property">run</span>&lt;<span class="title class_">Ref</span>&lt;<span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">StateTree</span>&gt;&gt;&gt;(<span class="function">() =&gt;</span></span><br><span class="line">       ref&lt;<span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">StateTree</span>&gt;&gt;(&#123;&#125;)</span><br><span class="line">    )!;</span><br><span class="line">    <span class="comment">// 简化理解</span></span><br><span class="line">    <span class="comment">// const state = ref(&#123;&#125;)</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​<code>pinia</code>通过<code>markRaw</code>进行包装，将其<strong>标记为不会转化为响应式</strong>，最终<code>pinia</code>对象被<code>createPinia</code>函数返回，执行<code>vue.use(pinia)</code>的时候便会执行<code>pinia</code>对象中的<code>install</code>函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createPinia</span>(<span class="params"></span>): <span class="title class_">Pinia</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">_p</span>: <span class="title class_">Pinia</span>[<span class="string">&quot;_p&quot;</span>] = []; <span class="comment">// 所有需要安装的插件</span></span><br><span class="line">  <span class="keyword">let</span> <span class="attr">toBeInstalled</span>: <span class="title class_">PiniaPlugin</span>[] = []; <span class="comment">// install之前保存的待安装插件</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用markRaw标记pinia使其不会被响应式</span></span><br><span class="line">  <span class="keyword">const</span> <span class="attr">pinia</span>: <span class="title class_">Pinia</span> = <span class="title function_">markRaw</span>(&#123;</span><br><span class="line">    <span class="comment">// vue.use实际执行逻辑</span></span><br><span class="line">    <span class="title function_">install</span>(<span class="params">app: App</span>) &#123;</span><br><span class="line">      <span class="title function_">setActivePinia</span>(pinia); <span class="comment">// 设置当前使用的 pinia</span></span><br><span class="line">      <span class="keyword">if</span> (!isVue2) &#123; <span class="comment">// 如果是vue2，全局注册已经在PiniaVuePlugin完成，所以这段逻辑将跳过</span></span><br><span class="line">        pinia.<span class="property">_a</span> = app; <span class="comment">// 保存app实例</span></span><br><span class="line">        app.<span class="title function_">provide</span>(piniaSymbol, pinia); <span class="comment">// 通过provide传递pinia实例，提供给后续使用</span></span><br><span class="line">        app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">$pinia</span> = pinia; <span class="comment">// 设置全局属性 $pinia</span></span><br><span class="line">        toBeInstalled.<span class="title function_">forEach</span>(<span class="function">(<span class="params">plugin</span>) =&gt;</span> _p.<span class="title function_">push</span>(plugin)); <span class="comment">// 处理未执行插件</span></span><br><span class="line">        toBeInstalled = [];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">use</span>(<span class="params">plugin</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">_a</span> &amp;&amp; !isVue2) &#123; <span class="comment">// 如果use阶段为初始化完成则暂存toBeInstalled中</span></span><br><span class="line">        toBeInstalled.<span class="title function_">push</span>(plugin);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _p.<span class="title function_">push</span>(plugin);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    _p, <span class="comment">// 所有pinia的插件</span></span><br><span class="line">    <span class="attr">_a</span>: <span class="literal">null</span>, <span class="comment">// app实例，在install的时候会被设置</span></span><br><span class="line">    <span class="attr">_e</span>: scope, <span class="comment">// pinia的作用域对象，每个store都是单独的scope</span></span><br><span class="line">    <span class="attr">_s</span>: <span class="keyword">new</span> <span class="title class_">Map</span>&lt;string, <span class="title class_">StoreGeneric</span>&gt;(),  <span class="comment">// store缓存 key为pinia的id value为pinia的对外暴露数据</span></span><br><span class="line">    state, <span class="comment">// pinia所有state的合集 key为pinia的id value为store下的所有state（所有可访问变量）</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> pinia;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="返回值的含义以及作用"><a href="#返回值的含义以及作用" class="headerlink" title="返回值的含义以及作用"></a>返回值的含义以及作用</h3><p><img src="https://www.vkcyan.top/image-20220713153012540.png" alt="image-20220713153012540"></p><p>​初始化的逻辑相对比较简单，只需要了解<code>effectScope</code> <code>markRaw</code>便能完全读懂，<code>install</code>阶段组成的<code>pinia</code>对象被<code>setActivePinia</code>保存了下来，而这个对象贯穿<code>pinia</code>整个生命周期，每个字段的作用在后面的源码解读中都会有所体现。</p><h2 id="关于Vue2"><a href="#关于Vue2" class="headerlink" title="关于Vue2"></a>关于Vue2</h2><p>​通过<code>pinia</code>官网，我们可以了解到<code>pinia</code>支持<code>vue2</code>，不过<code>vue2</code>环境需要在使用<code>createPinia</code>之前，预先安装插件<code>PiniaVuePlugin</code>，通过<code>pinia</code>的入口文件了解到<code>PiniaVuePlugin</code>的源码入口为<code>pinia\src\vue2-plugin.ts</code></p><p>​<code>PiniaVuePlugin</code>是<code>vue2</code>插件比较主流的实现方式，<strong>获取Vue实例，通过mixin实现数据共享</strong>。如果了解过<code>vuex</code>的源码，相信对以下代码会十分熟悉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">PiniaVuePlugin</span>: <span class="title class_">Plugin</span> = <span class="keyword">function</span> (<span class="params">_Vue</span>) &#123;</span><br><span class="line">    <span class="comment">// Equivalent of</span></span><br><span class="line">    <span class="comment">// app.config.globalProperties.$pinia = pinia</span></span><br><span class="line">    <span class="comment">// pinia在vue2中的注册逻辑与vuex核心逻辑几乎一致，</span></span><br><span class="line">    <span class="comment">// 注入全局mixin的beforeCreate</span></span><br><span class="line">    _Vue.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">        <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> options = <span class="variable language_">this</span>.<span class="property">$options</span>;</span><br><span class="line">            <span class="comment">// 在根节点通过vue.use中注册了pinia</span></span><br><span class="line">            <span class="keyword">if</span> (options.<span class="property">pinia</span>) &#123;</span><br><span class="line">                <span class="keyword">const</span> pinia = options.<span class="property">pinia</span> <span class="keyword">as</span> <span class="title class_">Pinia</span>;</span><br><span class="line">                <span class="comment">// defineProperty版provided实现</span></span><br><span class="line">                <span class="keyword">if</span> (!(<span class="variable language_">this</span> <span class="keyword">as</span> any).<span class="property">_provided</span>实现) &#123;</span><br><span class="line">                    <span class="keyword">const</span> provideCache = &#123;&#125;;</span><br><span class="line">                    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">this</span>, <span class="string">&quot;_provided&quot;</span>, &#123;</span><br><span class="line">                        <span class="attr">get</span>: <span class="function">() =&gt;</span> provideCache,</span><br><span class="line">                        <span class="attr">set</span>: <span class="function">(<span class="params">v</span>) =&gt;</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(provideCache, v),</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                (<span class="variable language_">this</span> <span class="keyword">as</span> any).<span class="property">_provided</span>[piniaSymbol <span class="keyword">as</span> any] = pinia;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 首次注册变量不存在，进行存储</span></span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">$pinia</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">$pinia</span> = pinia;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 保存Vue实例</span></span><br><span class="line">                pinia.<span class="property">_a</span> = <span class="variable language_">this</span> <span class="keyword">as</span> any;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable constant_">IS_CLIENT</span>) &#123;</span><br><span class="line">                    <span class="title function_">setActivePinia</span>(pinia);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">$pinia</span> &amp;&amp; options.<span class="property">parent</span> &amp;&amp; options.<span class="property">parent</span>.<span class="property">$pinia</span>) &#123;</span><br><span class="line">                <span class="comment">// 所有子组件/页面都继承上一层的pinia</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$pinia</span> = options.<span class="property">parent</span>.<span class="property">$pinia</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">_pStores</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="关于devTool"><a href="#关于devTool" class="headerlink" title="关于devTool"></a>关于devTool</h2><p>在<code>createPinia</code>中存在这样一段代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__DEV__ &amp;&amp; <span class="variable constant_">IS_CLIENT</span> &amp;&amp; !__TEST__) &#123;</span><br><span class="line">    pinia.<span class="title function_">use</span>(devtoolsPlugin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是开发环境，并且是浏览器环境，并且不是测试环境，就会向pinia注册<code>devtoolsPlugin</code>，也就是将<code>pinia</code>注册到浏览器插件<strong>Vue.js devtools</strong>中。</p><p><img src="https://www.vkcyan.top/image-20220713170645056.png" alt="image-20220713170645056"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​<strong>createPinia</strong>的源码解读就全部结束了，现在我们已经了解初始化的具体流程，以及生成的pinia对象中存在什么参数，这些参数在运行阶段都会发挥它应用的价值。</p><p>​下一章我们将要解析<strong>创建以及使用pinia</strong>的相关源码，<code>defindStore</code>函数实现逻辑，在<code>defindStore</code>中我们将会了解到<code>install</code>阶段每个字段的实际用途，以及pinia的核心响应原理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;专栏导航&quot;&gt;&lt;a href=&quot;#专栏导航&quot; class=&quot;headerlink&quot; title=&quot;专栏导航&quot;&gt;&lt;/a&gt;专栏导航&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/7124279061035089927&quot;&gt;分析pinia源码</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://bluedancers.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="Pinia" scheme="https://bluedancers.github.io/tags/Pinia/"/>
    
  </entry>
  
</feed>
