<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vkcya Blog</title>
  
  
  <link href="https://vkcyan.github.io/atom.xml" rel="self"/>
  
  <link href="https://vkcyan.github.io/"/>
  <updated>2022-06-18T09:37:35.579Z</updated>
  <id>https://vkcyan.github.io/</id>
  
  <author>
    <name>vkcyan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript设计模式</title>
    <link href="https://vkcyan.github.io/2022/06/18/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://vkcyan.github.io/2022/06/18/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2022-06-17T16:00:00.000Z</published>
    <updated>2022-06-18T09:37:35.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript设计模式基础"><a href="#JavaScript设计模式基础" class="headerlink" title="JavaScript设计模式基础"></a>JavaScript设计模式基础</h2><p>JavaScript是一门经典动态类型语言，对变量类型的宽容给实际编码带来了很大灵活性。由于无需进行类型检测，我们可能尝试调用对象的任何方法，而无需去考虑它原本是否被设计拥有该方法。</p><p>​这一切都建立在鸭子类型的概念上，鸭子类型：如果它走起路来像鸭子，叫起来像鸭子，那他就是鸭子</p><p>​利用鸭子类型，我们就不必借助类型的帮助，实现一个动态语言专有原则：面向接口编程，而不是面向实现变成，例如一个对象，具备length属性，那我们就可以将其视为数组，而不需要关心它的实际类型。</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>​同一个操作作用于不同的对象上面，可以产生不同的解释和不同的执行结果</p><p>​例如：小狗汪汪叫 小猫喵喵叫 他们都是动物，都会发生，但是各自发出的声音并不一样</p><p>​其背后的思想是将“做什么”于“谁去做以及怎么样”分离开来，也就是将“不变的事物”于“变化的事物”分离开来。这给予了我们拓展程序的能力，程序看起来是可生长的，也是符合开放封闭原则的，相对于修改代码，增加代码显然优雅安全的多。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sound</span>(<span class="params">animal</span>) &#123;</span><br><span class="line">  animal.<span class="title function_">sound</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Dog</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Dog</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sound</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;汪汪汪&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Cat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Cat</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sound</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;喵喵喵&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Dog</span>().<span class="title function_">sound</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Cat</span>().<span class="title function_">sound</span>()</span><br></pre></td></tr></table></figure><p>如果是强类型语言就需要借助继承来实现<strong>向上转型</strong>，从狗可以发出叫声转变为动物可以发出叫声，从而避免我们指定了发出声音对象是某一个类型，他就不可能被替换成为另一个类型。</p><p>​多态最根本的作用就是通过把过程化的条件分支语句转化为对象的多态性，从而消除这些条件分支语句。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装的目的是将信息隐藏，封装应该被视为“任何形式的封装”，也就是说，封装不仅仅是隐藏数据，还包括隐藏实现细节，设计细节以及隐藏对象的类型。</p><h3 id="原型编程"><a href="#原型编程" class="headerlink" title="原型编程"></a>原型编程</h3><p>JavaScript本身就是基于原型的面向对象语言，它的对象系统就是使用原型模式来搭建的，在这里称之为原型编程范型业务更加合适。</p><p>​在JavaScript中不存在类的概念，对象也并非从类中创建出来，所有的JavaScript对象都是从某个对象上复制出来的。</p><p>​原型编程存在一个重要特性，即当对象无法响应某个请求的时候，就会把该请求委托给自己的原型；这里更好的说法是把请求委托给它的构造器的原型</p><p>​在JavaScript中，一个function并不一定仅仅是一个普通函数，也可以是一个函数构造器，当使用new运算符来调用函数的时候，此时函数就是一个构造器。使用new运算符来创建对象的过程，实际上也只是先克隆<code>Object.prototype</code>，再进行一些其他额外操作的过程。</p><h4 id="原型链查找对象的过程"><a href="#原型链查找对象的过程" class="headerlink" title="原型链查找对象的过程"></a>原型链查找对象的过程</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">A.<span class="property"><span class="keyword">prototype</span></span> = &#123; <span class="attr">name</span>: <span class="string">&quot;sven&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> B = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><ol><li>首先尝试遍历对象b中的所有属性，但是没有找到name这个属性</li><li>查找name属性的请求被委托到对象b的构造器原型，它被<code>b._proto_</code>记录并指向B.prototype，而B.prototype又直线new A()创建的对象</li><li>再该对象中依旧没有找到name属性，于是请求又被委托到这个对象的构造器的原型A.prototype</li><li>在A.prototype中找到了name属性，返回值</li></ol><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><h4 id="闭包案例"><a href="#闭包案例" class="headerlink" title="闭包案例"></a>闭包案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    a++;</span><br><span class="line">    <span class="title function_">alert</span>(a);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ff = <span class="title function_">func</span>();</span><br><span class="line"><span class="title function_">ff</span>();</span><br><span class="line"><span class="title function_">ff</span>();</span><br><span class="line"><span class="title function_">ff</span>();</span><br></pre></td></tr></table></figure><p>​局部变量在函数执行结束后将会被销毁，但是以上的例子中，局部变量a并没有消失，而是似乎一直在某个地方存活着。这是因为当执行func的时候，func返回了一个匿名函数的引用，它可以访问到func被调用时产生的环境，而局部变量所在的环境一直处于这个环境中。既然局部变量所处的环境还能被外界访问，这个局部变量就有了不被销毁的理由；在这样的闭包结构中，局部变量实现了生命的延续。</p><h4 id="闭包与面向对象"><a href="#闭包与面向对象" class="headerlink" title="闭包与面向对象"></a>闭包与面向对象</h4><p><strong>过程与数据的结合</strong>是形容面向对象中的<strong>对象</strong>时常用的表达</p><p>对象以方法的形式包含了过程，而闭包则是在过程中以环境的形式包含了数据</p><p>通常用面向对象实现的功能，用闭包也能实现，反之亦然。</p><p>闭包版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> value = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">call</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      value++;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">App</span> = <span class="title function_">app</span>();</span><br><span class="line"><span class="title class_">App</span>.<span class="title function_">call</span>(); <span class="comment">// 1</span></span><br><span class="line"><span class="title class_">App</span>.<span class="title function_">call</span>(); <span class="comment">// 2</span></span><br><span class="line"><span class="title class_">App</span>.<span class="title function_">call</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="对象版本"><a href="#对象版本" class="headerlink" title="对象版本"></a>对象版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">call</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 1</span></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 2</span></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="类版本"><a href="#类版本" class="headerlink" title="类版本"></a>类版本</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">App</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">App</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span>++;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">App</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 1</span></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 2</span></span><br><span class="line">app.<span class="title function_">call</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>高阶函数是指最少满足下列条件之一的函数</p><ul><li>函数可以作为参数被传递</li><li>函数可以作为返回值输出</li></ul><p>​JavaScript语言的函数显然满足高阶函数，在实际开发中将函数作为参数进行传递，让函数的执行结果返回一个另一个函数都是非常普遍的情况，例如函数执行的callback函数。</p><p>​通过高阶特性，我们可以实现AOP，也就是面向切面编程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 面向切面编程</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">before</span> = <span class="keyword">function</span> (<span class="params">beforeFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        beforeFn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 执行before本身</span></span><br><span class="line">        <span class="keyword">return</span> _self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 返回函数本身</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">after</span> = <span class="keyword">function</span> (<span class="params">afterFn</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> _self = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> ret = _self.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 先执行before</span></span><br><span class="line">        afterFn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>); <span class="comment">// 最后执行after</span></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">func = func</span><br><span class="line">    .<span class="title function_">before</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">after</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">func</span>();</span><br></pre></td></tr></table></figure><ul><li>首先执行<code>before</code>，打印‘before’，然后执行<code>after</code>，打印‘after’</li><li>执行func()，开始执行after，进入after闭包中，然后执行ret，进入before</li><li>before中首先执行了自己beforeFn，打印‘1’，然后执行func本身，打印‘2’，并返回本身</li><li>ret执行结束，开始执行afterFn，打印‘3’，返回func本身</li></ul><h4 id="高阶应用-函数柯里化"><a href="#高阶应用-函数柯里化" class="headerlink" title="高阶应用 - 函数柯里化"></a>高阶应用 - 函数柯里化</h4><p>​柯里化又被称为部分求值，一个柯里化函数首先会接受一些参数，接收参数后不会立刻求职而是继续返回当前函数，之前传入的值在函数形成的闭包种被保存了起来。待函数真正需要求值的时候，之前传入的所有参数都会被一次性求值。</p><p>​例如实现一个计算每个月花费多少钱的函数，但是在实现中，我们并不关心吗，每天花费了多少，只想知道月底花掉了多少，实际上只需要计算一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> res = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">            args = [];</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [].<span class="property">push</span>.<span class="title function_">apply</span>(args, <span class="variable language_">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">arguments</span>.<span class="property">callee</span>; <span class="comment">// 当前正在执行的函数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cost = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> money = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = <span class="variable language_">arguments</span>.<span class="property">length</span>; i &lt; l; i++) &#123;</span><br><span class="line">            money += <span class="variable language_">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> money;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> cost = <span class="title function_">currying</span>(cost);</span><br><span class="line"><span class="title function_">cost</span>(<span class="number">100</span>)(<span class="number">100</span>)(<span class="number">100</span>)(<span class="number">100</span>);</span><br><span class="line"><span class="title function_">cost</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cost</span>()); <span class="number">500</span></span><br><span class="line"><span class="title function_">cost</span>(<span class="number">100</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">cost</span>()); <span class="number">600</span></span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>​要实现一个单例模式并不复杂，无非是用一个变量来标志是否已经为某个类创建过对象，如果是，则下一次获取该类的实例，直接返回之前创建的对象。</p><blockquote><p>vue2.x 中的vuex在页面与组件中进行挂载使用的就是单例模式</p></blockquote><h3 id="使用代理实现单例模式"><a href="#使用代理实现单例模式" class="headerlink" title="使用代理实现单例模式"></a>使用代理实现单例模式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> createDiv = <span class="keyword">function</span> (<span class="params">html</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">html</span> = html;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">init</span>();</span><br><span class="line">&#125;;</span><br><span class="line">createDiv.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">html</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxySingletonCreateDiv = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">html</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title function_">createDiv</span>(html);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title function_">proxySingletonCreateDiv</span>(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title function_">proxySingletonCreateDiv</span>(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a === b); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript的单例模式"><a href="#JavaScript的单例模式" class="headerlink" title="JavaScript的单例模式"></a>JavaScript的单例模式</h3><p>​单例模式的核心是确保只有一个实例，比提供全局访问。在JavaScript中很多都会通过全局变量进行实现，但是JavaScript的全局变量并不是非常好的特性，在中大型项目中会存在命名冲突问题，所以应当尽量使用命名空间。</p><h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><p>​在未使用之前，相关逻辑不会被创建，并且只有第一次使用的时候才会创建，同时我们别忘记了单一职责原则</p><p>​在下面的代码中，我们将创建单例与具体单例逻辑进行分离，这两个方法独立变化而且互不影响，这样避免了下次出现其他元素，我们需要将整个单例函数都复制一遍的情况，而是只需要创建对应的创建函数即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getSingle</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> result || (result = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createLoginLayer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    div.<span class="property">innerHTML</span> = <span class="string">&quot;我是登录弹窗&quot;</span>;</span><br><span class="line">    div.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">    <span class="keyword">return</span> div;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> createSingLoginLayer = <span class="title function_">getSingle</span>(createLoginLayer);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;loginBtn&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> loginLayer = <span class="title function_">createSingLoginLayer</span>();</span><br><span class="line">    loginLayer.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>​单例模式是一种简单，但是非常实用的模式，特别是惰性单例技术，在合适的时候再去创建对象，并且只创建唯一一个，同时我们将创建对象与管理单例的职责分开到不同方法中，这样的模式更加体验单例模式的优势。</p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><p>​策略模式：定义一系列的算法，把它们一个个的封装起来，并且使它们可以相互替换。</p><p>​案例：某个公司年终奖方式为基础工资乘以效绩等级，S为基础工资的4倍，A为基础工资的3倍，我们实用策略模式进行实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> performatceS = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;; <span class="comment">// 效绩为S 工资算法</span></span><br><span class="line">performatceS.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> performatceA = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;; <span class="comment">// 效绩为A 工资算法</span></span><br><span class="line">performatceA.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">calculate</span> = <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Bonus</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = <span class="literal">null</span>; <span class="comment">// 基础工资</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">strategy</span> = <span class="literal">null</span>; <span class="comment">// 具体算法</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setSalary</span> = <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">salary</span> = salary;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setStrategy</span> = <span class="keyword">function</span> (<span class="params">strategy</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">strategy</span> = strategy;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Bonus</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getBonus</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">strategy</span>.<span class="title function_">calculate</span>(<span class="variable language_">this</span>.<span class="property">salary</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bonus1 = <span class="keyword">new</span> <span class="title class_">Bonus</span>();</span><br><span class="line">bonus1.<span class="title function_">setSalary</span>(<span class="number">10000</span>);</span><br><span class="line">bonus1.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title function_">performatceS</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;效绩为A&quot;</span>, bonus1.<span class="title function_">getBonus</span>()); <span class="comment">// 40000</span></span><br><span class="line"></span><br><span class="line">bonus1.<span class="title function_">setStrategy</span>(<span class="keyword">new</span> <span class="title function_">performatceA</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;效绩为A&quot;</span>, bonus1.<span class="title function_">getBonus</span>()); <span class="comment">// 30000</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript中策略模式的体现"><a href="#JavaScript中策略模式的体现" class="headerlink" title="JavaScript中策略模式的体现"></a>JavaScript中策略模式的体现</h3><p>以上是类的实现方法，在JavaScript中我们可以通过函数进行实现，代码将会简洁很多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> srtategies = &#123;&#125;;</span><br><span class="line">srtategies.<span class="property">S</span> = <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line">srtategies.<span class="property">A</span> = <span class="keyword">function</span> (<span class="params">salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> calclateBonus = <span class="keyword">function</span> (<span class="params">level, salary</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> srtategies[level](salary);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;效绩为S&quot;</span>, <span class="title function_">calclateBonus</span>(<span class="string">&quot;S&quot;</span>, <span class="number">10000</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;效绩为A&quot;</span>, <span class="title function_">calclateBonus</span>(<span class="string">&quot;A&quot;</span>, <span class="number">10000</span>));</span><br></pre></td></tr></table></figure><h3 id="多态在策略模式中的体现"><a href="#多态在策略模式中的体现" class="headerlink" title="多态在策略模式中的体现"></a>多态在策略模式中的体现</h3><p>​通过使用策略模式，我们可以消除程序中大量的ifelse语句，并将我们将具体逻辑与实际执行函数进行分离，执行函数没有计算能力，而是委托某个策略对象来完成奖金计算，这正是多态性的体现。</p><h3 id="策略模式在表单校验的应用"><a href="#策略模式在表单校验的应用" class="headerlink" title="策略模式在表单校验的应用"></a>策略模式在表单校验的应用</h3><p>​在通过JavaScript表单校验的场景中,我们可以通过ifelse进行校验判断，但是这种方式不符合单一职责，开放封闭原则，我们可以通过策略模式来优化他，将通用的校验逻辑与具体校验条件进行解耦合。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 校验逻辑</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果同时设置了required与verify，将会忽略required</span></span><br><span class="line"><span class="comment"> * verify为自定义校验函数 可以理解为一旦写了verify,其他参数都不需要写了</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> data 被校验对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> validate 校验规则</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isOne 是否校验到错误就立刻返回</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">starValidate</span>(<span class="params">data, validate, isOne</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="attr">errBack</span>: any[] = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (validate[key]) &#123;</span><br><span class="line">      <span class="keyword">if</span> (validate[key].<span class="property">verify</span>) &#123;</span><br><span class="line">        validate[key].<span class="title function_">verify</span>(&#123; <span class="attr">data</span>: data[key], <span class="attr">allData</span>: data &#125;, <span class="function">(<span class="params">errMsg</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (errMsg) &#123;</span><br><span class="line">            errBack.<span class="title function_">push</span>(errMsg)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            errBack.<span class="title function_">push</span>(validate[key].<span class="title function_">callback</span>(data))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 开启校验</span></span><br><span class="line">        <span class="keyword">if</span> (validate[key].<span class="property">required</span>) &#123;</span><br><span class="line">          <span class="comment">// 数据不存在</span></span><br><span class="line">          <span class="keyword">if</span> (!data[key]) &#123;</span><br><span class="line">            errBack.<span class="title function_">push</span>(validate[key].<span class="title function_">callback</span>(data))</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isOne &amp;&amp; errBack.<span class="property">length</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;处理结果&#x27;</span>, errBack)</span><br><span class="line">  <span class="keyword">if</span> (errBack.<span class="property">length</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isOne) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(errBack[<span class="number">0</span>])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(errBack)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 校验条件</span></span><br><span class="line"><span class="keyword">const</span> validateRules = &#123;</span><br><span class="line">  <span class="attr">cashingInstructions</span>: &#123;</span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">callback</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">selector</span>: <span class="string">&#x27;.open_prize&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;请输入字段cashingInstructions&#x27;</span> &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">lotteryDescription</span>: &#123;</span><br><span class="line">    <span class="attr">verify</span>: <span class="function">(<span class="params">&#123; data &#125;, err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (data == <span class="string">&#x27;[]&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">err</span>(&#123;</span><br><span class="line">          <span class="attr">selector</span>: <span class="string">&#x27;.launch_total&#x27;</span>,</span><br><span class="line">          <span class="attr">message</span>: <span class="string">&#x27;请输入字段lotteryDescription&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line"><span class="attr">cashingInstructions</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">lotteryDescription</span>:<span class="string">&#x27;[]&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现表单校验</span></span><br><span class="line"> <span class="title function_">starValidate</span>(data, validateRules, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="策略模式的优缺点"><a href="#策略模式的优缺点" class="headerlink" title="策略模式的优缺点"></a>策略模式的优缺点</h3><p>优点</p><ul><li>策略模式利用组合，委托和多态等技术与思想，可以有效避免多重条件选择语句</li><li>策略模式符合开放封闭原则，将具体逻辑单独封装，使其易于理解易于拓展</li><li>策略模式的策略函数可以再多项目之间复用，避免复制粘贴工作</li></ul><p>缺点</p><ul><li>相对于ifelse，策略模式的整体代码量会有所增加</li><li>调用者需要对策略细节可能了解，才能很好的使用该策略，这违反了最少知识原则，增加了使用成本</li></ul><h3 id="一等公民函数与策略模式"><a href="#一等公民函数与策略模式" class="headerlink" title="一等公民函数与策略模式"></a>一等公民函数与策略模式</h3><p>​在函数作为一等公民的语言中，策略模式是隐形的具体策略的值就是函数变量。</p><p>​在JavaScript这种将函数作为一等对象的语言中，策略模式已经融入到语言中，例如我们经常使用高阶函数来封装不同行为，并且将它传递到另一个函数中，当我们对这些函数发出“调用”的消息，不同的函数会返回不同的结果，函数对象的多态性来到更加简单。</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>​代理模式的关键是，当客户不方便直接访问一个对象或者不满足需要的时候，提供一个提升对象来控制对这个对象的访问，客户实际上访问的是替身对象。</p><p>小红想找心仪的对象让小明作为自己的媒人(代理人)</p><p>保护代理：张三找过来了，但是张三没车没房，小红便直接帮他拒绝</p><p>虚拟代理：介绍给小明是非常重要的事情，李四对小红有兴趣，给小明好处费，小明便在小红心情好的时候给其介绍（延迟到正常需要的时候再创建）</p><h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p>​对一个类&#x2F;函数&#x2F;对象而言，应该仅有一个引起它变化的原因，如果一个对象承担了多种职责，就意味着这个对象将变得巨大，引起它变化的原因将会有多种。面向对象估计设计将行为分布到细颗粒度的对象中，如果一个对象承担的职责过多，等于把这些职责耦合在一起，这种耦合会导致脆弱和低内聚的设计，当变化发生时，设计会遭到意外的破坏。</p><h3 id="开放封闭原则"><a href="#开放封闭原则" class="headerlink" title="开放封闭原则"></a>开放封闭原则</h3><p>​例如我们为了更好的性能将一些数据处理成为另外的数据格式，但是2年后上游帮助我们处理过了，我们不再需要额外处理，就不得不在改动原本函数中的代码</p><p>​我们可以使用代理模式 达到不改动原对象的情况下，为其提供新的行为，他们各自变化，也不影响对象。</p><h3 id="代理与本体接口的一致性"><a href="#代理与本体接口的一致性" class="headerlink" title="代理与本体接口的一致性"></a>代理与本体接口的一致性</h3><p>​通常来说，代理对象对外提供的方法名称会与本体名称保持一致，这样可以在任何使用本体的地方替换成使用代理</p><h3 id="代理模式-合并http请求"><a href="#代理模式-合并http请求" class="headerlink" title="代理模式-合并http请求"></a>代理模式-合并http请求</h3><p>​这是一个应用案例，文中的例子我在日常生活中也经历过，将每次点击都请求转变为收集2s类所有请求，并统一发送出去，发送请求时一个函数，何时发送，发送什么，时另一个函数，其中用到了节流函数来控制请求频率</p><h3 id="代理模式-空间复杂度换取时间复杂度"><a href="#代理模式-空间复杂度换取时间复杂度" class="headerlink" title="代理模式 - 空间复杂度换取时间复杂度"></a>代理模式 - 空间复杂度换取时间复杂度</h3><p>面对非常复杂的计算逻辑，我们可以保存每一次的计算结果，下一个再来同样的参数可以直接走缓存，不再需要计算，这样增加空间，但是缩小了时间。</p><h3 id="代理模式示例"><a href="#代理模式示例" class="headerlink" title="代理模式示例"></a>代理模式示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> muit = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    a = a * <span class="variable language_">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plus = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    a = a + <span class="variable language_">arguments</span>[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理模式函数</span></span><br><span class="line"><span class="keyword">var</span> ceateProxyFactory = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> cache = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">join</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (args <span class="keyword">in</span> cache) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;存在缓存&quot;</span>, args,cache);</span><br><span class="line">      <span class="keyword">return</span> cache[args];</span><br><span class="line">    &#125;</span><br><span class="line">    cache[args] = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">return</span> cache[args];</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> muitFun = <span class="title function_">ceateProxyFactory</span>(muit);</span><br><span class="line"><span class="keyword">var</span> plusFun = <span class="title function_">ceateProxyFactory</span>(plus);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">muitFun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 120</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">muitFun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 走缓存 120</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">plusFun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">plusFun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 走缓存 15</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​总体来说代理模式相对简单并且常用，就算一名开发人员没听过这个名词也会写出比较优秀的代理模式代码，并且代理模式不需要预先考虑，需要用到的时候再编写代理函数也不迟。</p><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><h3 id="内部迭代器"><a href="#内部迭代器" class="headerlink" title="内部迭代器"></a>内部迭代器</h3><p>​完全接手整个迭代过程，外部只需要初始调用即可，外界不需要关心迭代器的内部实现，但是这也是内部迭代器的缺点</p><p>​例如JavaScript的<code>map</code> <code>forEach</code></p><h3 id="外部迭代器"><a href="#外部迭代器" class="headerlink" title="外部迭代器"></a>外部迭代器</h3><p>​外部迭代器必须显式的请求迭代下一个元素，外部迭代器增加了程序的复杂度，但是也增强了迭代器的灵活性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> current = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> aa = <span class="keyword">function</span> (<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> next = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    current += <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> getItem = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[current];</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next,</span><br><span class="line">    getItem,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​再具体业务中，使用何种迭代器并无优劣，根据实际场景而定。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>​大部分语言已经内置了迭代器，并且使用频率高、门槛低；迭代器是一种非常简单设计模式，简单到大部分人不认为他是一种迭代器。</p><h2 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h2><p>​发布-订阅模式它订阅了一种一对多的依赖关系,当一个对象的状态发生改变的时，所有依赖于它的对象都将得到通知</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>​小明看重了某一个小区的热门户型，并且得到消息，后期还会开放一批，但是时间未知，于是小明找到售楼处，预留了自己的电话号码，让售楼处在开发房源的时候通知他，同理，小张、小王都预留了手机号码，于是售楼处就会在房源发布的时候通知预留电话的客户。</p><p>​客户想知道房源开售消息，于是他订阅了售楼处，售楼处得到消息后，第一时间将消息发布给订阅者，这样具备显而易见的优点。</p><ul><li>小明不需要天天给售楼处打电话，在合适的时间售楼处会通知购房者</li><li>购房者于售楼处不再有强耦合关系</li></ul><h3 id="发布-订阅模式的作用"><a href="#发布-订阅模式的作用" class="headerlink" title="发布-订阅模式的作用"></a>发布-订阅模式的作用</h3><p>​以上场景于程序中的异步场景是非常相似的，例如我们订阅ajax的error事件，我们无需关心异步运行期间的内部状态，只需要订阅需要的事件发生点即可。</p><p>​另外发布-订阅模式可以取代对象之间硬编码的通知机制，一个对象不用再显式的调用另一个对象的某个接口。</p><h3 id="dom事件"><a href="#dom事件" class="headerlink" title="dom事件"></a>dom事件</h3><p>​我们使用dom绑定事件函数就是发布-订阅模式的实际应用，我们不知道用户会在什么时候点击点击，所以我们订阅了dom本身的click事件。</p><h3 id="自定义发布-订阅事件"><a href="#自定义发布-订阅事件" class="headerlink" title="自定义发布-订阅事件"></a>自定义发布-订阅事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> salesOffices = &#123;&#125;;</span><br><span class="line">salesOffices.<span class="property">clientList</span> = [];</span><br><span class="line">salesOffices.<span class="property">listen</span> = <span class="keyword">function</span> (<span class="params">key, fn</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建订阅关联关系</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">clientList</span>[key]) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">clientList</span>[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">clientList</span>[key].<span class="title function_">push</span>(fn);</span><br><span class="line">&#125;;</span><br><span class="line">salesOffices.<span class="property">trigger</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取订阅数组</span></span><br><span class="line">    <span class="keyword">var</span> key = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="variable language_">this</span>.<span class="property">clientList</span>[key];</span><br><span class="line">    <span class="comment">// 不存在订阅数组则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!fns || fns.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 执行订阅数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> fn = fns[i];</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 小明订阅</span></span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="string">&quot;sq88&quot;</span>, <span class="keyword">function</span> (<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是小明，88平方&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格=&quot;</span>, price);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="string">&quot;sq88&quot;</span>, <span class="keyword">function</span> (<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是小强，88平方&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格=&quot;</span>, price);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 小红订阅</span></span><br><span class="line">salesOffices.<span class="title function_">listen</span>(<span class="string">&#x27;sq110&#x27;</span>, <span class="keyword">function</span> (<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我是小红，110平方&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格=&quot;</span>, price);</span><br><span class="line">&#125;);</span><br><span class="line">salesOffices.<span class="title function_">trigger</span>(<span class="string">&quot;sq88&quot;</span>, <span class="number">20000000</span>);</span><br><span class="line">salesOffices.<span class="title function_">trigger</span>(<span class="string">&quot;sq110&quot;</span>, <span class="number">30000000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我是小明，88平方</span></span><br><span class="line"><span class="comment">// 价格=20000000</span></span><br><span class="line"><span class="comment">// 我是小强，88平方</span></span><br><span class="line"><span class="comment">// 价格=20000000</span></span><br><span class="line"><span class="comment">// 我是小红，110平方</span></span><br><span class="line"><span class="comment">// 价格=30000000</span></span><br></pre></td></tr></table></figure><h3 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h3><p>​取消订阅只需要将订阅数组中的指定订阅函数删除即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * key 订阅类型</span></span><br><span class="line"><span class="comment"> * fn 订阅函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">salesOffices.<span class="property">remove</span> = <span class="keyword">function</span> (<span class="params">key, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="variable language_">this</span>.<span class="property">clientList</span>[key];</span><br><span class="line">    <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">        <span class="comment">// 没有传入具体的回调地址，则取消所有订阅函数</span></span><br><span class="line">        <span class="keyword">if</span> (fns) &#123;</span><br><span class="line">            fns.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> fnItem = fns[i];</span><br><span class="line">            <span class="keyword">if</span> (fnItem === fn) &#123;</span><br><span class="line">                fns.<span class="title function_">splice</span>(i, <span class="number">1</span>); <span class="comment">// 删除订阅函数回调</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="关于网站登录的实际应用"><a href="#关于网站登录的实际应用" class="headerlink" title="关于网站登录的实际应用"></a>关于网站登录的实际应用</h3><p>场景：用户登录完成后，我们需要刷新不相邻模块的数据，这种异步问题，我们一般通过回调函数的方式解决</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">login.<span class="title function_">succ</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">header.<span class="title function_">setAvatar</span>(data.<span class="property">avatar</span>)</span><br><span class="line">    nav.<span class="title function_">setAvatar</span>(data.<span class="property">avatar</span>)</span><br><span class="line">    message.<span class="title function_">refresh</span>()</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>​这种编写方式将组件数据于信息产生了强耦合关系，如果在未来，我们又增加了一个模块，则需要再次修改改回调函数</p><p>​而通过发布-订阅模式，我们就可以在不同模块中订阅用户信息状态的变化，当登录成功的时候，登录模块发布消息到订阅他的模块中，至于各个模块做了什么，登录模块并不关心。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">login.<span class="title function_">listen</span>(<span class="string">&#x27;loginSucc&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 登录成功，用户数据获取完毕</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="全局模式下的发布-订阅模式"><a href="#全局模式下的发布-订阅模式" class="headerlink" title="全局模式下的发布-订阅模式"></a>全局模式下的发布-订阅模式</h3><p>​全局状态下的发布-订阅可以在两个毫不相关的模块之间进行使用，这样就能保持模块的封装性</p><p>​但是这里也需要留意一个问题，如果模块之间又太多的全局发布-订阅模式，就会造成消息流向混乱问题，这会导致维护上出现一些问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Event</span> = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> clientList = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> listen;</span><br><span class="line">    <span class="keyword">var</span> trigger;</span><br><span class="line">    <span class="keyword">var</span> remove;</span><br><span class="line">    listen = <span class="keyword">function</span> (<span class="params">key, fn</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建订阅关联关系</span></span><br><span class="line">        <span class="keyword">if</span> (!clientList[key]) &#123;</span><br><span class="line">            clientList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        clientList[key].<span class="title function_">push</span>(fn);</span><br><span class="line">    &#125;;</span><br><span class="line">    trigger = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 获取订阅数组</span></span><br><span class="line">        <span class="keyword">var</span> key = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">        <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line">        <span class="comment">// 不存在订阅数组则直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (!fns || fns.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 执行订阅数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> fn = fns[i];</span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    remove = <span class="keyword">function</span> (<span class="params">key, fn</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> fns = clientList[key];</span><br><span class="line">        <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">            <span class="comment">// 没有传入具体的回调地址，则取消所有订阅函数</span></span><br><span class="line">            <span class="keyword">if</span> (fns) &#123;</span><br><span class="line">                fns.<span class="property">length</span> = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; fns.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">const</span> fnItem = fns[i];</span><br><span class="line">                <span class="keyword">if</span> (fnItem === fn) &#123;</span><br><span class="line">                    fns.<span class="title function_">splice</span>(i, <span class="number">1</span>); <span class="comment">// 删除订阅函数回调</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        listen,</span><br><span class="line">        trigger,</span><br><span class="line">        remove,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> xm = <span class="keyword">function</span> (<span class="params">price</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;小明价格&quot;</span>, price);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">Event</span>.<span class="title function_">listen</span>(<span class="string">&quot;sq88&quot;</span>, xm); <span class="comment">// 订阅</span></span><br><span class="line"><span class="title class_">Event</span>.<span class="title function_">listen</span>(<span class="string">&quot;sq110&quot;</span>, xm); <span class="comment">// 订阅</span></span><br><span class="line"><span class="title class_">Event</span>.<span class="title function_">remove</span>(<span class="string">&quot;sq88&quot;</span>, xm); <span class="comment">// 取消订阅</span></span><br><span class="line"><span class="title class_">Event</span>.<span class="title function_">trigger</span>(<span class="string">&quot;sq88&quot;</span>, <span class="number">220000</span>); <span class="comment">// 发布</span></span><br><span class="line"><span class="title class_">Event</span>.<span class="title function_">trigger</span>(<span class="string">&quot;sq110&quot;</span>, <span class="number">2020000</span>); <span class="comment">// 发布</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript实现发布-订阅模式的便利性"><a href="#JavaScript实现发布-订阅模式的便利性" class="headerlink" title="JavaScript实现发布-订阅模式的便利性"></a>JavaScript实现发布-订阅模式的便利性</h3><h4 id="推模型"><a href="#推模型" class="headerlink" title="推模型"></a>推模型</h4><p>​事情发生的时候，发布者会一次性将所有改变的状态与数据都推送给订阅者</p><h4 id="拉模型"><a href="#拉模型" class="headerlink" title="拉模型"></a>拉模型</h4><p>​事情发生的时候，发布者只会告诉所有订阅者，需要订阅者手动去拉去</p><p>​而在JavaScript中，因为语言特性的存在，是我们可以非常方便的将所有参数通过arguments传入订阅者，所以我们使用推模型来完成消息的订阅与发布。</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>对象之间的解耦合，可以帮助我们写出更好的应对异步编程的场景。</li><li>通过订阅-发布模式可以实现以此为特性的解决方案，例如MVVM。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>创建订阅-发布模式需要消耗一定的时间与内存。</li><li>订阅的消息会一直留存在内存中，产生了无意义的消耗。</li><li>过度使用订阅-发布会导致程序难以追踪与维护。</li></ul><p>​</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>​有时候需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是什么。此时希望用一种松耦合的方式来设计程序，使得请求发送者与请求接收者能够消除彼此之间的耦合关系</p><p>​命令模式还需要支持撤销、排队等等操作</p><h3 id="命令模式的例子-菜单程序（面向对象）"><a href="#命令模式的例子-菜单程序（面向对象）" class="headerlink" title="命令模式的例子-菜单程序（面向对象）"></a>命令模式的例子-菜单程序（面向对象）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn2&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> btn3 = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn3&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> setCommand = <span class="keyword">function</span> (<span class="params">btn, commm</span>) &#123;</span><br><span class="line">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        commm.<span class="title function_">execute</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MenuBar</span> = &#123;</span><br><span class="line">    <span class="attr">refresh</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;刷新菜单目录&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">SubMenu</span> = &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;增加子菜单&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">del</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除子菜单&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RefreshMenuBarCommand</span> = <span class="keyword">function</span> (<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">RefreshMenuBarCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">refresh</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">AddSubMenuCommand</span> = <span class="keyword">function</span> (<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">AddSubMenuCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">add</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">DelSubMenuCommand</span> = <span class="keyword">function</span> (<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span> = receiver;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">DelSubMenuCommand</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">execute</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">receiver</span>.<span class="title function_">del</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="keyword">new</span> <span class="title class_">RefreshMenuBarCommand</span>(<span class="title class_">MenuBar</span>);</span><br><span class="line"><span class="keyword">var</span> addSubMenuCommand = <span class="keyword">new</span> <span class="title class_">AddSubMenuCommand</span>(<span class="title class_">SubMenu</span>);</span><br><span class="line"><span class="keyword">var</span> delSubMenuCommand = <span class="keyword">new</span> <span class="title class_">DelSubMenuCommand</span>(<span class="title class_">SubMenu</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setCommand</span>(btn1, refreshMenuBarCommand); <span class="comment">// 将div与方法做好绑定关系,同时约定一个触发指令点击btn1触发refresh内部预留的execute方法</span></span><br><span class="line"><span class="title function_">setCommand</span>(btn2, addSubMenuCommand);</span><br><span class="line"><span class="title function_">setCommand</span>(btn3, delSubMenuCommand);</span><br></pre></td></tr></table></figure><h3 id="命令模式的例子-菜单程序（面向函数）"><a href="#命令模式的例子-菜单程序（面向函数）" class="headerlink" title="命令模式的例子-菜单程序（面向函数）"></a>命令模式的例子-菜单程序（面向函数）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindClick = <span class="keyword">function</span> (<span class="params">btn, func</span>) &#123;</span><br><span class="line">    btn.<span class="property">onclick</span> = func;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">bindClick</span>(btn1, <span class="title class_">MenuBar</span>.<span class="property">refresh</span>);</span><br><span class="line"><span class="title function_">bindClick</span>(btn2, <span class="title class_">SubMenu</span>.<span class="property">add</span>);</span><br><span class="line"><span class="title function_">bindClick</span>(btn3, <span class="title class_">SubMenu</span>.<span class="property">del</span>);</span><br></pre></td></tr></table></figure><p>命令模式的由来，其实就是回调（callback）函数的一个面向对象的替代品</p><p>而再JavaScript这样函数作为一等公平的语言中，命令模式早已经融入到语言之中，函数本身就可以被四处传递，即时我们依旧需要请求“接收者”，那也未必使用面向对象的方式，闭包同样可以完成同样的功能。</p><h3 id="命令模式的例子-菜单程序（闭包）"><a href="#命令模式的例子-菜单程序（闭包）" class="headerlink" title="命令模式的例子-菜单程序（闭包）"></a>命令模式的例子-菜单程序（闭包）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> setCommand = <span class="keyword">function</span> (<span class="params">btn, func</span>) &#123;</span><br><span class="line">    btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">func</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">RefreshMenuBarCommand</span> = <span class="keyword">function</span> (<span class="params">receiver</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        receiver.<span class="title function_">refresh</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> refreshMenuBarCommand = <span class="title class_">RefreshMenuBarCommand</span>(<span class="title class_">MenuBar</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">setCommand</span>(btn1, refreshMenuBarCommand);</span><br></pre></td></tr></table></figure><h3 id="命令模式-回放"><a href="#命令模式-回放" class="headerlink" title="命令模式 - 回放"></a>命令模式 - 回放</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Ryu</span> = &#123;</span><br><span class="line">    <span class="attr">attack</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;攻击&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">defense</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;防御&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">jump</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;跳跃&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">crouch</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;蹲下&quot;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> makeCommand = <span class="keyword">function</span> (<span class="params">receiver, state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        receiver[state]();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> commandStack = []; <span class="comment">// 保存命令堆栈</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onkeypress</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> commands = &#123;</span><br><span class="line">        <span class="number">119</span>: <span class="string">&quot;jump&quot;</span>, <span class="comment">// w</span></span><br><span class="line">        <span class="number">115</span>: <span class="string">&quot;crouch&quot;</span>, <span class="comment">// s</span></span><br><span class="line">        <span class="number">97</span>: <span class="string">&quot;defense&quot;</span>, <span class="comment">// a</span></span><br><span class="line">        <span class="number">100</span>: <span class="string">&quot;attack&quot;</span>, <span class="comment">// d</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (commands[ev.<span class="property">keyCode</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> command = <span class="title function_">makeCommand</span>(<span class="title class_">Ryu</span>, commands[ev.<span class="property">keyCode</span>]);</span><br><span class="line">        <span class="title function_">command</span>(); <span class="comment">// 执行命令</span></span><br><span class="line">        commandStack.<span class="title function_">push</span>(command); <span class="comment">// 保存到堆栈</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;replay&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> command;</span><br><span class="line">    <span class="keyword">while</span> ((command = commandStack.<span class="title function_">shift</span>())) &#123;</span><br><span class="line">        <span class="title function_">command</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="宏命令"><a href="#宏命令" class="headerlink" title="宏命令"></a>宏命令</h3><p>​宏命令是一组命令的集合，通过执行宏命令的方式，可以一次执行一批命令。</p><p>​在创建命令模式的时候，增加一个add方法来增加命令，并保存到任务对略，最后调用execute方法依次执行即可</p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>​命令模式在JavaScript中因为高阶函数的存在，让其不太显眼，本质上他是将具体调用与调用的具体逻辑进行分离，具体逻辑就是命令的体现。</p><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>​组合模式需要通过对象的多态性进行体现，是的用户对单个对象和组合对象的使用具有一致性</p><p><img src="https://www.vkcyan.top/image-20220618165949858.png" alt="image-20220618165949858"></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>​这里定义了一个通用函数execute来作为组合模式的桥梁，完成对象树的构建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">&quot;button&quot;</span>&gt;按我&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> <span class="title class_">MacroCommand</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">commandsList</span>: [],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">command</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">commandsList</span>.<span class="title function_">push</span>(command);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">commandsList</span>.<span class="property">length</span>; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">commandsList</span>[i].<span class="title function_">execute</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> openAcCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开空调&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> openTvCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开电视&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> openSoundCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开音响&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> macroCommand1 = <span class="title class_">MacroCommand</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand1.<span class="title function_">add</span>(openTvCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand1.<span class="title function_">add</span>(openSoundCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> closeDoorCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;关门&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> openPcCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打开电脑&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> openQQCommand = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">execute</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;登录QQ&quot;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> macroCommand2 = <span class="title class_">MacroCommand</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand2.<span class="title function_">add</span>(closeDoorCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand2.<span class="title function_">add</span>(openPcCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand2.<span class="title function_">add</span>(openQQCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> macroCommand = <span class="title class_">MacroCommand</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand.<span class="title function_">add</span>(openAcCommand); <span class="comment">// 如果是基本对象,就是直接触发到其本身的execute方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand.<span class="title function_">add</span>(macroCommand1); <span class="comment">// 如果是复杂对象,则触发到下一级的execute,然后以深度优点遍历直到最底部的基本对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">macroCommand.<span class="title function_">add</span>(macroCommand2);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> setCommand = (<span class="keyword">function</span> (<span class="params">command</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;button&quot;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        command.<span class="title function_">execute</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)(macroCommand);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>​组合模式最大的优点在于可以一致地对待组合对象与基本对象。客户不需要关心当前处理的是谁，只要它是一个命令，并且有execute方法，这个命令就可以被执行。</p><p>​得益于JavaScript是动态类型语言，对象的多态性与生俱来，不会存在编辑器检查，所以我们实现组合模式并不需要编写抽象类，只需要保证组合对象与叶对象拥有相同的方法即可，并且用鸭子类型的思想进行接口检查</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JavaScript设计模式基础&quot;&gt;&lt;a href=&quot;#JavaScript设计模式基础&quot; class=&quot;headerlink&quot; title=&quot;JavaScript设计模式基础&quot;&gt;&lt;/a&gt;JavaScript设计模式基础&lt;/h2&gt;&lt;p&gt;JavaScript是一门经</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/categories/JavaScript/"/>
    
    
    <category term="设计模式" scheme="https://vkcyan.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>随选朗读 - 给长辈更好的手机使用体验</title>
    <link href="https://vkcyan.github.io/2022/06/12/%E9%9A%8F%E9%80%89%E6%9C%97%E8%AF%BB%20-%20%E8%B5%8B%E4%BA%88%E9%95%BF%E8%BE%88%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E8%83%BD%E5%8A%9B/"/>
    <id>https://vkcyan.github.io/2022/06/12/%E9%9A%8F%E9%80%89%E6%9C%97%E8%AF%BB%20-%20%E8%B5%8B%E4%BA%88%E9%95%BF%E8%BE%88%E6%89%8B%E6%9C%BA%E4%BD%BF%E7%94%A8%E8%83%BD%E5%8A%9B/</id>
    <published>2022-06-11T16:00:00.000Z</published>
    <updated>2022-06-14T01:32:06.561Z</updated>
    
    <content type="html"><![CDATA[<img src="https://www.vkcyan.top/bce45768408b4df9025528fa6a02427e1a0f434a22.jpg" alt="bce45768408b4df9025528fa6a02427e1a0f434a22" style="zoom:57%;" /><h2 id="时代背景"><a href="#时代背景" class="headerlink" title="时代背景"></a>时代背景</h2><p>​在历史上的1952年5月24日是一个特殊的日子，在那一天正式开始大规模扫盲运动。新中国成立之初，全国5.5亿人口，80%都是文盲，农村的文盲率达到了95%以上，让我们把时间拉回2022年的今天，今天我想描述的是90后的父母一代，大约是<strong>1960-1975</strong>诞生于华夏文明的人，根据官方调查90后父母一代的文盲率大约为40%。</p><p>​90后父母一代是疲惫的，他们大多从农村出来，为城市建设添砖加瓦，拿着微薄的薪水，做着繁重的工作，赶上了房价翻了一番又一番，他们的压力从来不会出现在主流媒体中，他们也大多数已经年过半百，身体机能开始衰退，视力开始下降，在互联网时代与90、00后赚个满怀的时候，他们只能踉踉跄跄的跟紧时代的步伐，他们是社会上看不见的大多数。而随着岁月的流失，亦或者时代的影响，存在很大一部分人因为视力问题，或者文盲，失去了使用手机的能力。</p><h2 id="随选朗读"><a href="#随选朗读" class="headerlink" title="随选朗读"></a>随选朗读</h2><p><img src="https://www.vkcyan.top/image-20220610135834344.png" alt="image-20220610135834344"></p><p>​大部分年轻人可能并不知道这个名词，因为我们正值身体的最佳状态，本身便不存在工具来创造无障碍的场景，我们来了解一下“随选难度”的官方定义吧。</p><p>​“随选难度”可帮助障碍用户在无法使用视觉获取信息、阅读困难等情况下通过读取屏幕的无障碍接口来获取用户想要阅读的界面的文本信息，然后再调用语音库将之朗读出来。<strong>简而言之，用户在开启该功能后，可将他想获取的文本信息转化为音频被接收。</strong></p><h2 id="目标人群"><a href="#目标人群" class="headerlink" title="目标人群"></a>目标人群</h2><ul><li><p>低视力、老花眼人群</p></li><li><p>低文化水平、文盲人群</p></li><li><p>场景性障碍人群</p></li></ul><p>​随着岁数的增加，亦或者长期疲劳用眼，老花眼必然会出现在人类的生命轨迹之中，面对这样的情况，一般需要配一个老花镜，在阅读较小较密集文字的时候带上眼镜才能看清文字，正常生活并不需要长时间戴眼镜，而有了随选朗读功能后，查看手机咨询只需要滑动文字区域，即可让手机完成其识别与阅读，规避用眼场景，这将大幅度改善中老年人的手机使用体验。</p><p>​90后的父母一代，文盲比例已经相对较少，但是在华夏大地庞大的人口基数下，也算是5%也是非常大的人口体量，因为不认识字，他们使用手机困难重重，但是又不得不使用智能手机，例如在进出都需要扫码的疫情时代，遍地移动支付的互联网时代，如果没有家人或者朋友的反复教学，他们可能永远都无法正常使用智能手机，甚至家人微信聊天都只能发送语音，而随选朗读则给予了文盲人群识别文字的能力，遇到不认识的字，滑动一下就会读出来，这给予了文盲用户独立使用智能手机的能力，作为晚辈也减小了压力。</p><p>​最后是场景性障碍人群，例如开车中，做饭中暂时无法看长时间看屏幕的场景，不过从现实来看此类场景需求不大，因为长文可以等会看，一小段文本则很快就看完了，此处便不再赘述。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="小米手机"><a href="#小米手机" class="headerlink" title="小米手机"></a>小米手机</h3><p><strong>设置 - 更多设置 - 无障碍 - 视觉 - 随选朗读</strong></p><p>开启后点击小喇叭就会出现一个红色按钮，即可选中你想被阅读的区域，松手即可开始朗读，朗读完毕后自动关闭，如果想下次使用，可以再次点击小喇叭，不同手机入口显示方式不同，有些是显示小人形状。</p><img src="https://www.vkcyan.top/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220610140237.jpg" alt="微信图片_20220610140237" style="zoom:20%;" /><h3 id="华为手机"><a href="#华为手机" class="headerlink" title="华为手机"></a>华为手机</h3><p>设置 - 辅助功能 - 无障碍 - 随选朗读 - 开启</p><h3 id="iphone"><a href="#iphone" class="headerlink" title="iphone"></a>iphone</h3><p>设置 - 辅助功能 - 朗读内容 - 朗读屏幕 - 语音控制器 - 打开显示控制器</p><p><img src="https://www.vkcyan.top/image-20220610143710700.png" alt="image-20220610143710700"></p><h3 id="其他手机"><a href="#其他手机" class="headerlink" title="其他手机"></a>其他手机</h3><p>​身边手机有限，就算一个品牌的手机不同版本设置路径也存在一定区别，不过可以放心无障碍功能所有手机都有，因为这是android，ios系统原生功能，一般都在<strong>其他设置&#x2F;无障碍</strong>菜单中。</p><h3 id="没有随选朗读"><a href="#没有随选朗读" class="headerlink" title="没有随选朗读"></a>没有随选朗读</h3><p>​我把周围同事的手机大致都研究了一遍，发现如果是20年之前的手机，大部分是没有“随选朗读”功能的，无障碍套件由安卓系统提供，低版本系统存在没有随选朗读的现象，手机没有自带没有关系，可以第三方下载，我在百度网盘放了一个，<a href="https://pan.baidu.com/s/1Y0kPB9xZcCdlu-KR5WxWoQ?pwd=o7k7">android无障碍套件v12.1</a>，有需要的朋友请自取。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​看到这里，不知道你是否想到了长辈们，为了看手机上的微信消息而着急寻找眼镜的匆忙场景，是否想到了长辈们因为看不懂文字而无法正常使用手机的窘境，而通过简单设置，就可以赋予有困难的长辈们更好使用智能手机的能力，机器无情，人间有情，沉舟侧畔千帆过，病树前头万木春，记得多回头看看驻留在原地的那群可爱的人。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;https://www.vkcyan.top/bce45768408b4df9025528fa6a02427e1a0f434a22.jpg&quot; alt=&quot;bce45768408b4df9025528fa6a02427e1a0f434a22&quot; style=&quot;zoo</summary>
      
    
    
    
    <category term="玩机技巧" scheme="https://vkcyan.github.io/categories/%E7%8E%A9%E6%9C%BA%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="无障碍" scheme="https://vkcyan.github.io/tags/%E6%97%A0%E9%9A%9C%E7%A2%8D/"/>
    
    <category term="随选朗读" scheme="https://vkcyan.github.io/tags/%E9%9A%8F%E9%80%89%E6%9C%97%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>三辆自行车</title>
    <link href="https://vkcyan.github.io/2022/06/10/%E4%B8%89%E8%BE%86%E8%87%AA%E8%A1%8C%E8%BD%A6/"/>
    <id>https://vkcyan.github.io/2022/06/10/%E4%B8%89%E8%BE%86%E8%87%AA%E8%A1%8C%E8%BD%A6/</id>
    <published>2022-06-09T16:00:00.000Z</published>
    <updated>2022-06-14T01:34:55.933Z</updated>
    
    <content type="html"><![CDATA[<p>​初中的时候，我特别想要一个自行车，大概觉得骑车很酷吧，或者是幼年的虚荣心作祟，那时候家里条件还很差，三口之家租住在一个没有空调的老旧矮楼的二楼第一间，大约12平方的四方四正的小屋，大家可以想象一下电视剧蜗居的样子吧，父母自然不同意卖一辆自行车，上学的路程只有2公里，这点距离还要骑自行车，在爸妈眼里是不可理喻的，可终究是拗不过我，在那个夏天的夜晚，爸带我到一个破破烂烂的修车铺，那是一辆蓝色有点破旧的小轮自行车，依稀记得车头是一个T形的，黑漆上零星的白点，刹车线已经泛黄仿佛蒙上了茶油的滤镜，这似乎在告诉我它的年纪，我爸对此很满意，大约150吧，带着我带着它一起回家了，我相信爸妈是开心的，因为终于不用听这小子天天嚷嚷了，我也就是这么迷迷糊糊的有了一台自行车。</p><p>​好景不长，这辆蓝色小轮车骑起来轴承里面会发出宛如鞭炮一样哒哒哒的，这让一个刚刚满12岁的小孩内心倍感自卑，因为我害怕因为这个声音招来马路上嘲笑的目光，以至于放学路上同学都骑走了，我才会开始骑车，我又开始不断嚷嚷自行车的问题，我妈耳根子软，心里虽然气愤儿子不懂事，但是依旧妥协了，没多久换了一辆新的凤凰牌自行车，蓝色小车被我爸骑电瓶车带回了老家，给了在村里的表姐，因为离镇上很远，她非常需要一辆车，而我终于如愿以偿的得到了一辆崭新的真正的自行车，那是一辆的银灰色自行车，车架在阳光下发射着宛如银河的色彩，黑色的车头一尘不染的深邃，仿佛在告诉全世界，他的诞生，也终于没有了哒哒哒的骑行背景音乐；而这属于我的第一辆新自行车的命运却是如此的凄惨，在我还没来得及和他好好人认识的时候，便戛然而止，是的，没多久他就被偷了；记得那天早上我骑着它到补习班，补习班对面是人流量很大的商业街，我用买车赠送的那把蓝色细锁火速锁好车便跑进补习班，等到中午补习结束回到停车点的时候，我傻眼了，同学一个个离开，而我在那片不大的地方反复寻找，恨不得把地下的砖都扒开，我可能找了半小时，最后我浑浑噩噩的走回家，那段路挺远，大概4个路口，回到家已经12点多了，我妈没有打我，但是我害怕极了，后续发生了什么也记不清了，也许是因为选择性忘记，最后，补习班和老师还赔了200块。</p><p>​车丢了，但是习惯已经养成了，自然还是要买自行车，人总是贪婪的，得到了谷子就想得到糖，得到了糖就想得到肉，十三岁的我自然也不例外，这次我斗胆提议要一辆变速山地自行车，每次放学我都会偷偷观察同桌的捷安特，那卡卡的变速声音不断挠动我心中的痒，夜里做梦都想拥有一辆这样的自行车，去享受大家羡慕的目光；变速自行车比较贵，是普通自行车的2-3倍，爸妈自然非常不愿意，毕竟赚钱真的很不容易，那时候依旧在12平小屋中，夏天的下午会被太阳从侧面暴晒，晚上睡觉都能感受到从墙体深处散发的热浪，实在无法忍受，加装了空调；耐不住我的软磨硬泡，耐不住这是他的儿子，最后还是给我买了，就在我丢掉凤凰牌自行车的商业街附近，我获得了我人生中第三辆自行车</p><p>​那是一辆黑红相见的变速山地自行车，品牌名为“巨凤”，不是名牌所以也比较便宜，不过我依旧很喜欢，他看起来是那么具有运动感，如此的个性鲜明，花费了500多，这对我们家庭来说已经是一笔巨款，我带着它回家了，我至今都记得，在回家的路上有一段上坡，我将变速调节到比较省力的轮档，我向往常一样踩着踏板，但是这却是一种未曾有过的体验，如此的轻巧，如此安稳，第二天早上5点多我便醒来，迫不及待的我想骑上的我新车去学校，那时已经是晚秋，我踏着淡淡曙光，仿佛骑行在云端之上，到学校的时候，天都未亮，对于那一刻的我来说，我的虚荣心大概已经得到了满足。在后来的日子里，我经常骑着它去偏远的谭冲湖，去几公里外的古梗公园，去杂草丛生的老肥西火车站，没有理由，随便定一个目标的骑行，在我那平淡如水的初中时光，我和“巨凤”游览了肥西大大小小很多角落。在天气还不算燥热的初夏，在平坦又人际罕见的单排公路，路旁的山丘跑向我的身后，柏油路前方看不见尽头，河水流淌声不断微弱，我不断加速，尽情的享受与风的交流。</p><p>​在我初中阶段中，我对自行车是如此的执着，我认为我热爱自行车，但是我错了；在买“巨凤”的第二年，我初三了，中考勉勉强强的考上了高中，但是分数线只够去比较远的地方，我与我的“巨凤”便失联了，我再次见到的他的时候，它已经落满了灰尘，斜靠在墙角，嶙峋的轮胎上满是龟裂，前轮已经完全漏气，夕阳下，他就像一匹消瘦的老马，我路过很多次都没注意到他，直到在大学入学前夕，我对家恋恋不舍的时候，我终于注意到了它，我已经不记得当时面对它的表情，是我抛弃了它，就像随着岁月不断被丢弃的东西们一样。</p><p>​前往古梗公园的路依旧平整，谭冲湖的河水依旧川流不息，到现在也依旧会时常回想起与它们们在路上的时光，只是再也找不回记忆中的强风拂过的感觉。</p><p>​</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​	初中的时候，我特别想要一个自行车，大概觉得骑车很酷吧，或者是幼年的虚荣心作祟，那时候家里条件还很差，三口之家租住在一个没有空调的老旧矮楼的二楼第一间，大约12平方的四方四正的小屋，大家可以想象一下电视剧蜗居的样子吧，父母自然不同意卖一辆自行车，上学的路程只有2公里，这点</summary>
      
    
    
    
    <category term="随想集" scheme="https://vkcyan.github.io/categories/%E9%9A%8F%E6%83%B3%E9%9B%86/"/>
    
    
    <category term="童年" scheme="https://vkcyan.github.io/tags/%E7%AB%A5%E5%B9%B4/"/>
    
    <category term="随想" scheme="https://vkcyan.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>【5000字长文】（开源） 低代码H5可视化搭建系统 - 易动v3.0</title>
    <link href="https://vkcyan.github.io/2022/05/25/%E3%80%905000%E5%AD%97%E9%95%BF%E6%96%87%E3%80%91%EF%BC%88%E5%BC%80%E6%BA%90%EF%BC%89%20%E4%BD%8E%E4%BB%A3%E7%A0%81H5%E5%8F%AF%E8%A7%86%E5%8C%96%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%BB%9F%20-%20%E6%98%93%E5%8A%A8v3.0/"/>
    <id>https://vkcyan.github.io/2022/05/25/%E3%80%905000%E5%AD%97%E9%95%BF%E6%96%87%E3%80%91%EF%BC%88%E5%BC%80%E6%BA%90%EF%BC%89%20%E4%BD%8E%E4%BB%A3%E7%A0%81H5%E5%8F%AF%E8%A7%86%E5%8C%96%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%BB%9F%20-%20%E6%98%93%E5%8A%A8v3.0/</id>
    <published>2022-05-24T16:00:00.000Z</published>
    <updated>2022-05-26T06:04:32.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​作者在2020年的时候开源了易动第一个版本<a href="https://juejin.cn/post/6844904095971540999">（开源）从0打造H5可视化搭建系统 - 易动（vue+ts+egg）</a>，这两年在公司针对装修技术方案做了大量的实践，使用过<strong>draggable方案</strong> <strong>iframe装修方案</strong> <strong>绝对定位方案</strong>，对其在技术，产品层面都存在更深入的理解，今天给大家带来新一代企业级H5装修方案<strong>易动v3.0</strong></p><p><img src="https://www.vkcyan.top/image-20220525165904705.png" alt="image-20220525165904705"></p><h2 id="开源地址"><a href="#开源地址" class="headerlink" title="开源地址"></a>开源地址</h2><blockquote><p>拖拽生成h5页面，支持页面全局设置，组件，自定义URL，插件市场，公共npm组件库</p><p>基于最新vue技术栈， <a href="http://39.103.198.52:3005/">易动v3.0</a> 已上线，欢迎体验~~</p></blockquote><p><a href="https://github.com/vkcyan/YD">YD 管理端</a></p><p><a href="https://github.com/vkcyan/YD_Client">YD_Client 客户端</a></p><p>开源不易，给个Star吧~</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><p>管理端：vue3 + vite + pinia + vueuse + TypeScript</p><p>客户端：vue3 + vite + TypeScript</p><p>集成组件库（ydh5-ui）：基于Vue3 + TypeScript进行开发</p><p>服务端：serverLess</p><h2 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h2><p>​在正文开始之前先为大家介绍一下项目架构，我们从底层到上层依次介绍</p><p>​易动3使用腾讯云serverless作为后端服务，serverless在易动系统中提供组件schema的数据存储服务，为什么使用serverless下文在说明。</p><p>​易动3将客户端、管理端的公共装修组件进行了统一封装发布成为npm包，解决了以往存在的一个组件需要写、改两遍代码的核心问题。</p><p>​易动管理端是项目的最核心系统，除了核心的保存，修改之外，以及一系列提供装修效率的功能，例如组件市场、辅助线、复制、粘贴、撤销、放撤销，这个低代码装修系统的上限于下限皆由此项目决定。</p><p>​易动客户端功能比较单纯，主要是根据约定好的js Schema结合集成组件库进行数据渲染于逻辑触发。</p><img src="https://www.vkcyan.top/image-20220519092211855.png" alt="image-20220519092211855" style="zoom:67%;" /><h2 id="使用方向"><a href="#使用方向" class="headerlink" title="使用方向"></a>使用方向</h2><p>​这几年关于低代码领域开始不断有大厂入场，这也变相的说明了该领域巨大的提效需求，愿望是美好的，但是现实是骨感的，低代码无法做到全盘通吃，只能聚焦某个领域，<code>易动v3.0</code>也是这样的，他无法处理存在大量逻辑的页面，所以<code>易动v3.0</code>选择专注于<strong>营销单页</strong>，在营销单页领域他可以发挥自己的优势。</p><p>​除了基础的按钮、图片组件外，业务组件可以做很多场景化组件，例如banner，商品专区，甚至从接口获取数据的组件都可以通过<strong>js Schema</strong>的约定进行实现</p><p>​而营销单页的需求络绎不绝，这样的工作就像在工厂“打螺丝”，大部分前端开发者并不愿意做这件事情，并且工作流程比较繁琐，可能因为业务原因频繁改动，大致工作流程如下</p><p>​<img src="https://www.vkcyan.top/image-20220519102613376.png" alt="image-20220519102613376"></p><p>​一个再简单的单页都需要走一样的固定流程，并且一旦某个环节出现了问题就需要回滚好几步，在这儿个过程中开发者也需要跟着回滚，遍出现了频繁改样式，重复机械行为。</p><p>​如果有了低代码平台 流程可以变成这样</p><p><img src="https://www.vkcyan.top/image-20220519102817422.png" alt="image-20220519102817422"></p><p>​这样的架构中权责变的更加清晰，开发者从“螺丝钉”变成了技术解决方案开发者</p><p>​而业务的决定权也掌握在专人手中；大家各司其职，技术根据实际需求不断优化技术解决方案，运营使用低代码平台的搭建能力 物料能力也能提高运营的效率。</p><h2 id="H5装修常见方案"><a href="#H5装修常见方案" class="headerlink" title="H5装修常见方案"></a>H5装修常见方案</h2><p>​据作者了解，目前市面上所有的低代码平台几乎都是基于Schema进行实现的，这种方案的核心原理比较简单</p><img src="https://www.vkcyan.top/image-20220519103955455.png" alt="image-20220519103955455" style="zoom:67%;" /><p>​基于这样的Schema结构，便衍生出来了多种实现方案，在这里简单描述一下我在实际工作中都使用过方案以及他们的优缺点；</p><h3 id="绝对定位方案"><a href="#绝对定位方案" class="headerlink" title="绝对定位方案"></a>绝对定位方案</h3><p>​简介：所有的装修组件都是再后台直接拖拽放置，没有组件群组的概念，可以任意放置你的组件到任何地方。</p><p>​优点：灵活</p><p>​缺点：无法流式布局，需要维护公共组件库，操作门槛较高，需要通过技术能力填补，例如吸附辅助线。</p><h3 id="流式布局方案"><a href="#流式布局方案" class="headerlink" title="流式布局方案"></a>流式布局方案</h3><p>​简介：装修组件遵循流式布局，从上到下从左到右进行排序，就像搭积木一件，这种方案仅限移动端</p><p>​优点：操作简单</p><p>​缺点：组件不够灵活，因为只能上下移动，想做到非常规布局比较麻烦，需要维护公共组件库</p><h3 id="iframe方案"><a href="#iframe方案" class="headerlink" title="iframe方案"></a>iframe方案</h3><p>​简介：将客户端通过iframe内嵌到装修管理端中，再通过postMessage进行项目间通信，客户端识别环境开启装修模式与后台进行实时通信</p><p>​优点：不需要维护公共组件库 ，只需要维护客户端代码</p><p>​缺点：客户端与管理端代码耦合严重 装修操作部分代码需要写在客户端中</p><h3 id="流式布局-绝对定位方案"><a href="#流式布局-绝对定位方案" class="headerlink" title="流式布局 + 绝对定位方案"></a>流式布局 + 绝对定位方案</h3><p>​简介：为绝对定位组件增加一个流式布局的父级容器，让装修数据具备二级结构，</p><p>​优点：灵活 具备可生成代码的规范结构 </p><p>​缺点：操作麻烦，存在一定学习成本 ，需要维护公共组件库，相对其他方案多了一层结构，难度相对更加大</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="易动3选择的方案"><a href="#易动3选择的方案" class="headerlink" title="易动3选择的方案"></a>易动3选择的方案</h2><p>​在公司生产环境项目中，凭借<code>易动v1.0</code>的经验，我使用了流式布局方案，最初效果还是非常不错的，那时候没想到将公共组件发布到npm，两端项目公用组件的方案，后期组件改动频繁，出现了极大的维护问题，这迫使我寻找其他出路。</p><p>​为了解决流式布局中一套组件，两套代码问题，在生产环境项目中实验性的使用管理端 + 客户端耦合的iframe方案，满足了公司的需求只需要维护一套代码，并且可以将Schema抽象出来应用到单页中，实现活动页装修，iframe装修方案在公司也是沿用至今，帮助公司搭建了200+的页面。</p><p>​再后来，我准备重启易动项目，开发<code>易动v2.0</code>，我们在<code>易动v2.0</code>中实验性的尝试了<strong>流式布局 + 绝对定位方案</strong>，在开发之前普遍觉得这是一个天才的主意，同时具备流式布局与绝对定位方案的优点，而且<code>易动v2.0</code>开发技术中还存在类似易企秀的多页的需求，大概经过2个月的代码编写，最终发现还是我们的想法过于理想化，首先操作上就存在比较高的门槛，技术难度也很大，而且因为Schema结构复杂，后期代码难度也是几何级别的提升，最终我们PASS了这个方案。</p><p>​在后面一段时间我一直在思考一个问题，也就是低代码的边界性，他应该做什么，他可以做什么，我们如何通过低代码来创造产品价值，在不断的思考中我也逐渐明确了开发方向，不再去想他还能做什么，而是在开发之前就确定一个目标，<strong>易动3.0将会在营销领域发挥它的作用，所有的功能都围绕这个核心目标</strong></p><p>​基于这样的目标，<code>易动v3.0</code>再出发，依旧采用<strong>绝对定位方案</strong>，因为绝对定位方案符合需求，难度最小，具备拓展性，后期维护性更强。</p><p>​方案确定好了，接下来将会介绍一些核心的实现思路。</p><h2 id="核心实现思路"><a href="#核心实现思路" class="headerlink" title="核心实现思路"></a>核心实现思路</h2><h3 id="Schema的编写"><a href="#Schema的编写" class="headerlink" title="Schema的编写"></a>Schema的编写</h3><p>​schema的结构将会决定你的装修系统的上限，一个良好的设计结构将会为后面的开发降低很大的难度，我们需要定义好<strong>页面的结构</strong>与<strong>组件的结构</strong>。</p><p><img src="https://www.vkcyan.top/image-20220520163303273.png" alt="image-20220520163303273"></p><p>​而在代码中增加组件，或者增加组件类的数据，例如在轮播图组件中增加一项轮播图，都需要通过函数return的方式进行对象创建，以免出现多个组件使用的数据为一个数据源。</p><p>在项目中增加一个组件，只需要将组件Schema push到模板变量中即可</p><blockquote><p>代码位置：<a href="https://github.com/vkcyan/YD/blob/main/src/modules/component/index.ts">https://github.com/vkcyan/YD/blob/main/src/modules/component/index.ts</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组件信息列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name 组件名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tempLen 本次层级</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">baseComList</span>(<span class="params">name: string, tempLen</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">list</span>: baseComponent[] = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">id</span>: <span class="title function_">guid</span>(),</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;y-img&#x27;</span>,</span><br><span class="line">      <span class="attr">showTitle</span>: <span class="string">`图片<span class="subst">$&#123;tempLen&#125;</span>`</span>, <span class="comment">// 显示组件名称</span></span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">cssModule</span>: &#123;</span><br><span class="line">        ...<span class="title function_">absolute</span>(tempLen),</span><br><span class="line">        ...<span class="title function_">borderData</span>(),</span><br><span class="line">        ...<span class="title function_">compSize</span>(<span class="number">100</span>, <span class="number">60</span>),</span><br><span class="line">        <span class="string">&#x27;background-color&#x27;</span>: <span class="string">&#x27;#ffffff00&#x27;</span>,</span><br><span class="line">      &#125;, <span class="comment">// 样式</span></span><br><span class="line">      <span class="attr">staticData</span>: &#123;</span><br><span class="line">        <span class="attr">imglUrl</span>:<span class="string">&#x27;xxxx.png&#x27;</span>,</span><br><span class="line">        ...<span class="title function_">linkData</span>(),</span><br><span class="line">      &#125;, <span class="comment">// 行为</span></span><br><span class="line">      <span class="attr">function</span>: &#123;&#125;, <span class="comment">// 方法</span></span><br><span class="line">      <span class="attr">animation</span>: [], <span class="comment">// 动画</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line">  ]</span><br><span class="line">  <span class="keyword">return</span> list.<span class="title function_">find</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e.<span class="property">name</span> == name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​例如增加一个图片组件，我们只需要将参数’y-img’，传入函数，即可得到一个图片组件的Schema，这样我们便具备搭建页面Schema树的能力。</p><h3 id="实现拖拽"><a href="#实现拖拽" class="headerlink" title="实现拖拽"></a>实现拖拽</h3><blockquote><p>实现良好的拖拽是一件非常有难度的事情，它不仅仅是简单元素的移动，而是通过技术的手段降低装修的操作门槛。</p></blockquote><h4 id="元素位移"><a href="#元素位移" class="headerlink" title="元素位移"></a>元素位移</h4><p>​在<code>易动v3.0</code>中，弃用了以往采用的监听鼠标单次移动距离实现方案，因为这会导致快速移动后出现坐标不准确的情况，改成获取相对父级绝对坐标。</p><p>​全局鼠标监听使用vueuse的<a href="https://vueuse.org/core/usemouseinelement/">useMouseInElement</a>API，帮助我们获取每次的相对位置，鼠标按下同时保存元素下标，再通过watchEffect全局监听<code>useMouseInElement</code>的变化，拿着鼠标<strong>按下阶段</strong>保存的<strong>下标</strong>去寻找需要位移的元素，不断更新其Schema中的cssModule字段中的<strong>top</strong>与<strong>left</strong>值，进而实现元素移动。</p><h4 id="元素缩放"><a href="#元素缩放" class="headerlink" title="元素缩放"></a>元素缩放</h4><img src="https://www.vkcyan.top/image-20220525114422478.png" alt="image-20220525114422478" style="zoom:67%;" /><p>​我们为元素增加 <code>上</code> <code>下</code> <code>左</code> <code>右</code> <code>左上</code> <code>左下</code> <code>右上</code> <code>右下</code>，八个操作点，是元素支持任意缩放功能，再点击任意缩放点的时候，我们都会保存一个标识，来确定当前点击的点是什么，然后在 全局监听鼠标移动的watchEffect中执行对应缩放逻辑，来不断更新选中的元素的 <strong>top</strong> <strong>left</strong> <strong>width</strong> <strong>height</strong>的组合值，进而实现元素缩放功能。</p><h3 id="元素多选"><a href="#元素多选" class="headerlink" title="元素多选"></a>元素多选</h3><img src="https://www.vkcyan.top/image-20220525114934419.png" alt="image-20220525114934419" style="zoom:50%;" /><p>​支持元素<strong>位移</strong>与<strong>缩放</strong>其实已经完成了装修的最核心功能，已经可以完成简单的页面搭建了，但是仅凭位移与缩放操作起来不方便，这时候就需要开发多选功能，我们把之前保存的单个选中下标改成一个选中数组。</p><p>​这里说明一下为什么保存数组下标，而不是组件的唯一id，这是一个时间复杂度的问题，如果保存组件唯一id，更新组件数据就需要通过循环再找到下标，进而通过下标更新数据，这时候时间复杂度为<strong>On</strong>，而直接保存数组下标，在通过下标直接更新数据，时间复杂度为<strong>O1</strong>。</p><p>​回到正题，我们开发一个选中框组件，在拖动选中框的时候判断是否包含了组件，不断更新当前选中框多选的元素，进而实现多选删除，多选拖动，等等多选功能。</p><p>​目前多选框计算逻辑还比较单一，仅支持从左上向右下拖动，后续有时间会继续完善。</p><h3 id="辅助线"><a href="#辅助线" class="headerlink" title="辅助线"></a>辅助线</h3><img src="https://www.vkcyan.top/image-20220525171846398.png" alt="image-20220525171846398" style="zoom:47%;" /><p>​辅助线是低代码系统必备功能，这将会极大的降低使用门槛，实现辅助线相对来说也是非常复杂的，假如页面有4个组件，我们点击了任意一个的时候，就需要去保存其他3个组件的 <code>top</code> <code>top + height/2</code> <code>top + height</code> <code>left</code> <code>left + width/2</code> <code>left+width</code>，并且将其数组保存成为<strong>字典结构</strong>，也就是<strong>ES6</strong>的<strong>Set</strong>，相对数组实现可以将时间复杂度从On2降低到On，有效避免了卡顿的情况，在被选中元素不断拖动的时候，我们会不断对比当前变化坐标与之前保存的3个组件的坐标，一旦对比到了一致，就会将其值push到存储变量，并在页面上显示，表明已经对齐。</p><h3 id="辅助线吸附"><a href="#辅助线吸附" class="headerlink" title="辅助线吸附"></a>辅助线吸附</h3><p>​先声明一下，辅助线吸附作者的实现还存在瑕疵，目前还在寻找更好的方案，也希望有大佬可以指点一二，目前吸附还存在一点操作上的不流畅情况，所以这部分我便不多赘述。找到最佳解决方案再更新。</p><h3 id="时间旅行"><a href="#时间旅行" class="headerlink" title="时间旅行"></a>时间旅行</h3><blockquote><p>pinia的subscribes存在差异，并且events在生产环境无法获取，导致现在线上无法相关使用</p></blockquote><p>​所谓时间旅行就是可以进行撤销 反撤销操作操作，，具体原理感兴趣可以看看vuex版本的实现，本质原理都是一样的，<a href="https://juejin.cn/post/6844904056792547341">基于vuex实现 撤销 与 反撤销 的plugins</a>，采用数组 + 单指针进行实现。</p><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>​移动端如何读取schema，使其还原装修效果；如何实现二次编辑组件的保存到创建市场；还有很多拖拽细节的实现；章节有限，这里不再一一赘述，有兴趣可以加入微信群在一起聊聊。</p><h2 id="基础组件or业务组件"><a href="#基础组件or业务组件" class="headerlink" title="基础组件or业务组件"></a>基础组件or业务组件</h2><blockquote><p>基础组件：按钮 图片 输入框 文字 模块（html自带的标签元素）</p><p>业务组件：富文本 轮播图 若干营销组件（由开发人员定制化产出的标签元素）</p></blockquote><p>​在早期开发低代码，无代码产品的时候，我将绝对定位方案与基础组件绑定，业务组件与流式布局绑定，随着对低代码的深入理解，我在这里必须纠正之前的偏见，正确的观点应该是：<strong>基础组件 + 绝对定位方案更加和谐</strong>、<strong>业务组件 + 流式布局方案更加和谐</strong>。</p><p>​随着将装修组件发布成为npm包，他们的隔阂已经几乎不存在，全部视为公共组件，公共npm组件包中将会抹平平台差异，任何可以描绘的组件可以看作为静态结构组件都可以被低&#x2F;无代码平台使用。</p><h2 id="关于低代码"><a href="#关于低代码" class="headerlink" title="关于低代码"></a>关于低代码</h2><p>​这几年关于低代码讨论也非常多，最近一直看到大厂开源的低代码工具，例如腾讯的<a href="https://juejin.cn/post/7096660785077846046">tmagic-editor</a>，阿里的<a href="https://juejin.cn/post/7088121411981541390">LowCodeEngine</a>，还有5月28号掘金直播低代码的探索与实践，其背后是前沿开发者们对效率的思考，是从局部效率转变到全局效率思想的转变。</p><p>​在技术条件有限的情况下，低代码产品的广度与深度只能选择其一，我们自然希望低代码可以做的事情越多越好，生成页面，生成代码，直接编写事件，支持单页，支持多页，支持无限嵌套dom，达到降低门槛，提效降成本的作用，甚至解放劳动力，创造更大的社会价值，但是如果没有足够的技术基础，做的功能越多，就死的越惨。所以如果你也发现存在类似需求，切勿在产品设计期间不断加功能，要专注细分领域，只有这样，低代码项目才有发光发热的机会，有了经验之后再决定做什么也不迟。</p><p>​<strong>从发现需求到明确定位有很长的路要走，低代码产品从可用到好用还有很长的路要走。</strong></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="为什么易动v3-0选择绝对定位方案"><a href="#为什么易动v3-0选择绝对定位方案" class="headerlink" title="为什么易动v3.0选择绝对定位方案"></a>为什么易动v3.0选择绝对定位方案</h3><p>​<code>易动v3.0</code>考虑到营销页面的多样化，他并不是理想化的流式布局，而是多样化的，甚至你意想不到的UI实现方式，这也是<code>易动v3.0</code>使用绝对定位方案实现的一个重要原因，后续作者也会不断加强可用性，进一步降低搭建门槛。贯彻技术为业务服务，而不是业务为技术服务的理念。</p><h3 id="为什么使用serverless"><a href="#为什么使用serverless" class="headerlink" title="为什么使用serverless"></a>为什么使用serverless</h3><p>​做出这个决定处于两点考虑</p><ol><li>大部分公司不会使用node作为服务端框架，接入会重写服务端。</li><li>本人是前端工程师，node 以及服务端周边服务不算精通，低代码的项目核心也不在服务端，serverless满足了作者的需求，后续我会提供表结构，以及关联关系。</li><li>因为腾讯云serverless已经开始收费了，后续可能会换成fastify进行服务端编写，主要看作者是否有时间，也非常欢迎有志之士为开源做出贡献。</li></ol><h3 id="关于PC端"><a href="#关于PC端" class="headerlink" title="关于PC端"></a>关于PC端</h3><p>​易动3的实现方案是绝对定位方案，这让实现pc端装修的可能性，但是个人感觉这部分需求比较小，B端的客户都是ToC，所以并没有做相关功能开发，但是理论上可以实现的。</p><h2 id="后续还会做什么"><a href="#后续还会做什么" class="headerlink" title="后续还会做什么"></a>后续还会做什么</h2><blockquote><p>目前易动v3.0 并不是完整状态，因为作者比较忙碌，很多功能依旧在开发中，大家也可以提出需求，如果存在价值，作者会加入后面的工作计划。</p></blockquote><ul><li>数据分析能力：页面的曝光情况是客户非常关心的指标，这也是易动v3.0非常关注的功能</li><li>模板市场功能：物料市场也是低代码平台非常重要的功能，配合组件市场，实现团队资源最大化利用，降低搭建门槛</li><li>丰富业务组件：根据客户需求开发其满足业务场景的组件，达到一次开发，多次使用的效果</li><li>增强装修能力：组件旋转，多选组件辅助对齐，搭建页面快捷操作，进一步降低大家门槛</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>​这个开源项目将会一直做下去，未来可能也会尝试做收费版本，毕竟为爱发电还是过于理想化了，如果你也是同道中人或者有这样的潜在需求，可以加入微信群，一起交流学习，共同进步~</p><h2 id="讨论群"><a href="#讨论群" class="headerlink" title="讨论群"></a>讨论群</h2><img src="https://www.vkcyan.top/d6dad8dd3c29960e6ed1e01d73eb1d8.jpg" alt="d6dad8dd3c29960e6ed1e01d73eb1d8" style="zoom:30%;" />]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	作者在2020年的时候开源了易动第一个版本&lt;a href=&quot;https://juejin.cn/post/684490409597154</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
    <category term="低代码" scheme="https://vkcyan.github.io/tags/%E4%BD%8E%E4%BB%A3%E7%A0%81/"/>
    
    <category term="h5装修" scheme="https://vkcyan.github.io/tags/h5%E8%A3%85%E4%BF%AE/"/>
    
    <category term="Vue3" scheme="https://vkcyan.github.io/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>关于免登录的一些实践与思考</title>
    <link href="https://vkcyan.github.io/2022/05/24/%E9%92%88%E5%AF%B9%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://vkcyan.github.io/2022/05/24/%E9%92%88%E5%AF%B9%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/</id>
    <published>2022-05-23T16:00:00.000Z</published>
    <updated>2022-05-24T07:34:17.938Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​<strong>听用户说，但是不要照着做。</strong></p><p>​这句话来自苏杰的《人人都是经理》这本书；在产品维度我们遵循这样的原则，其实在程序维度，也需要遵循这样的原则，如果没有意识到这一点我们也许会深陷泥潭。</p><h2 id="案例：免登录到商品详情页面"><a href="#案例：免登录到商品详情页面" class="headerlink" title="案例：免登录到商品详情页面"></a>案例：免登录到商品详情页面</h2><p>聊一个我们之前遇到的问题，场景是这样的</p><ol><li>用户在第三方平台登录，用户登录后点击商品会免登录到我们商城</li><li>跳转过来后，我们商城需要完成免登录操作，服务端同时给用户发放优惠券，在这个过程中必须保证通过免登录进入后同步调用登录 发券  获取商品详情接口顺序。</li></ol><p>​场景就是这么简单，似乎并不是太难的问题，于是我们将我方的商品详情URL给对方，对方在URL后面拼接token，web端拿到token之后将token给后台，完成登录  发券 获取详情逻辑，流程图如下</p><img src="http://www.vkcyan.top/image-20220524143533606.png" alt="image-20220524143533606" style="zoom:67%;" /><p>​按照我们上面的思路似乎没啥问题，无非就是用Promise控制代码顺序，但是在逻辑达到一定复杂程度后，这个问题就会变的非常棘手。</p><h3 id="问题：非业务逻辑与业务逻辑的耦合"><a href="#问题：非业务逻辑与业务逻辑的耦合" class="headerlink" title="问题：非业务逻辑与业务逻辑的耦合"></a>问题：非业务逻辑与业务逻辑的耦合</h3><p>​本质上来说，从第三方平台免登陆到我们商城中，并不属于购买商品逻辑，那就不应该将其逻辑写在商品详情页中</p><p>​况且这必须同步，用户没有完成我们这边的登录逻辑之前，我们不能发起商品详情接口，因为我们的商品详情数据包括用户最新的优惠券信息，如果异步，就会出现用户第一次进入是没有券的情况；这样的规则就导致我们需要对商品详情页面的业务逻辑进行改动。</p><p>​在这样的不安中，我们修改了商品详情页面的生命周期逻辑，一旦检测到需要免登录就会先执行登录再执行商品详情的获取。</p><p>​后续又多次出现了其他平台免登录到商品详情页面，并且流程都不太一样，最终导致了我们的商品详情页生命周期代码凌乱不堪，异步流程难以维护，甚至会出现逻辑相互冲突的情况。</p><h3 id="问题2：封装问题"><a href="#问题2：封装问题" class="headerlink" title="问题2：封装问题"></a>问题2：封装问题</h3><p>​最后我们商城对接的免登录越来越多，慢慢的我们便在逻辑层面进行了封装，但是依旧还是要动具体页面生命周期代码，而有些页面比如首页就存在很多第三方平台登录进来的，在生命周期代码中就出现大量的来源判断用来调用我们封装好的免登录逻辑，并且有些第三方还是具备时效性的，虽然我们在技术层面已经尽力，但是开发起来依旧很别扭，尤其是对于频繁需要维护的模块。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>​再后面遇到这样一件事情，存在一个<strong>第三方商城免登录到我们的任意页面</strong>，听到需求的时候，我内心有点凌乱，因为我们目前免登录逻辑都是一对一的针对单个页面</p><p>​最开始我们聊了能否在nginx中进行统一拦截，后面觉得性能很差，也有种走进死胡同的感觉，后台后端同事提出一个方案，这是一个技术上微不足道，但是却非常好的解决这个问题的方案。</p><p>​我们将免登录的封装维度从单个逻辑的角度，提升为在对方跳转到我们目标页面中间的一层拦截</p><p>举个例子</p><p>​原本 <a href="http://www.abc.com/goods/index?token=xxxxx%EF%BC%8C%E6%88%91%E4%BB%AC%E5%9C%A8%E5%85%B7%E4%BD%93%E9%A1%B5%E9%9D%A2%E4%B8%AD%E5%A4%84%E7%90%86">www.abc.com/goods/index?token=xxxxx，我们在具体页面中处理</a></p><p>​最新 <a href="http://www.abc.com/autoLogin?sc=xxx&amp;redirectUrl=www.abc.com/goods/index&amp;token=xxxxx">www.abc.com/autoLogin?sc=xxx&amp;redirectUrl=www.abc.com/goods/index&amp;token=xxxxx</a></p><blockquote><p>如果redirectUrl存在参数一定要将该参数encodeURIComponent处理以下，以免参数解析异常</p></blockquote><p><img src="http://www.vkcyan.top/image-20220524143545282.png" alt="image-20220524143545282"></p><p>这样做有三个优点也有一个缺点</p><p><strong>优点一</strong>：非业务逻辑与业务逻辑的耦合的问题，将免登录代码与业务代码完美的隔离开了，不论有多少，多个性化的免登录场景，都不会影响被跳转页面的逻辑</p><p><strong>优点二</strong>：不再需要逻辑封装，直接将与服务端交互的代码写在该页面即可，因为他已经与业务逻辑解耦合了</p><p><strong>优点三</strong>：可以形成对接规范，降低开发对接门槛，以及出现问题的可能性。</p><p><strong>缺点一</strong>：对于用户来说需要多跳转一层页面，有可能需要多等待20-100ms。这一点就要看取舍了，我们是单页应用，站内跳转很快，从线上效果来看对用户影响很小，几乎忽略不计。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​回头看优化后的实现方案，其实技术难度非小，如果把需求说明白了，这是一个大学生都能写好的需求，这样一个毫无技术难度的方案，在项目中却完成让人非常头疼的<strong>部分非业务逻辑与业务逻辑的解耦合</strong>。</p><p>​虽然作为一名开发人员，我们的本质工作就是实现需求，但是实现需求并不代表别人怎么说你就怎么做，而是根据需求加以自己的思考，在非开发角度提供自己宝贵的建议，也许，换一种思路，一个非常复杂的需求就会变得如此简单。</p><p>​现在让我们回到文章开头的那句话，<strong>听用户说，但是不要照着做</strong>，是不是有点感悟了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	&lt;strong&gt;听用户说，但是不要照着做。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​	这句话来自苏杰的《人人都是经理》这本书；在产品维度我们遵</summary>
      
    
    
    
    <category term="日常开发" scheme="https://vkcyan.github.io/categories/%E6%97%A5%E5%B8%B8%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="关于C端" scheme="https://vkcyan.github.io/tags/%E5%85%B3%E4%BA%8EC%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>上瘾模型如何应用到产品</title>
    <link href="https://vkcyan.github.io/2022/05/23/%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B%E5%A6%82%E4%BD%95%E5%BA%94%E7%94%A8%E5%88%B0%E4%BA%A7%E5%93%81/"/>
    <id>https://vkcyan.github.io/2022/05/23/%E4%B8%8A%E7%98%BE%E6%A8%A1%E5%9E%8B%E5%A6%82%E4%BD%95%E5%BA%94%E7%94%A8%E5%88%B0%E4%BA%A7%E5%93%81/</id>
    <published>2022-05-22T16:00:00.000Z</published>
    <updated>2022-05-23T10:51:27.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​为什么有些产品有抓住我们的注意力，而其他产品却不能？是什么让我们出于习惯而建立与产品的联系？是否有一种潜在模式能够通过技术将用户紧紧吸引，欲罢不能。</p><p>​这是《上瘾》的引言，我相信看到上面这些话的时候，你的脑海中一定出现了让你上瘾的产品，比如抖音，这样现象级的产品是如何被设计出来的呢？《上瘾》通过大量实验案例，社会调研，总结并抽象了用户上瘾的产品设计原则。最后提炼出一个通用模型，掌握这样的通用模型，你就会得到一个产品设计框架。</p><p>当你从0到1设计产品的时候，或者分析市面上的产品，你就可以将上瘾模型应用到你的产品。</p><h2 id="上瘾模型是什么"><a href="#上瘾模型是什么" class="headerlink" title="上瘾模型是什么"></a>上瘾模型是什么</h2><p>触发 行动 多变的奖励 投入</p><p><img src="http://www.vkcyan.top/1.png" alt="1"></p><h3 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h3><p> <img src="http://www.vkcyan.top/2.png" alt="2"></p><h4 id="内部触发"><a href="#内部触发" class="headerlink" title="内部触发"></a>内部触发</h4><p>​内部触发是用户与产品建立的感情链接，不需要被打广告，不需要被通知，我主动去使用，就好像短视频APP，没有给我钱，也没有被推广，但是我们每天都高频使用，内部触发是给予用户情感的满足，让产品融入到了生活，是用户内心真实情感的触发，获得快乐、认同与安慰，具体类型会在行动中说明</p><p>下班后无聊，打开短视频APP</p><p>自拍几张照片，发布到社交平台</p><p>​这就是发生在我们身边的日常，我们选择某个产品是因为它能够为我们带来快乐或者解决烦恼，这就是为什么说要洞察用户的用户需求，而内部触发就是研究用户需求，而且是最深处的情感需求</p><p>​    所以常说做产品是发现用户需求，要去思考，我们的产品能够为用户解决什么问题，这自然是需要深入了解用户的痛苦与挣扎，然后设计出给予用户安慰的产品。</p><h4 id="外部触发"><a href="#外部触发" class="headerlink" title="外部触发"></a>外部触发</h4><p>指用户在非主动情况下接收的信息，有清晰的动作指令进行行动召唤</p><p>付费型触发：电梯广告 APP中推广</p><p>回馈型触发：某某软件因为做的好，被APP Store上了推荐位</p><p>人际型触发：小明觉得某个软件特别有意思，推荐给小红</p><p>自主型触发：小明毕业了需要找工作，下载了一个BOOS直聘</p><p>​一般会采用简单重复或者“经典+创新”的方式来完成外部触发，效果更加好，例如蜜雪冰城 还有很多老歌+新词的电梯广告 </p><h3 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h3><p> <img src="http://www.vkcyan.top/3.png" alt="3"></p><p>​用户完成触发后，就会来到产品中，让用户开始使用产品就是行动，而长时间高频率的行动才能养成用户习惯</p><p><strong>用户行为模型公式：行动 &#x3D; 动机 * 能力 *触发</strong></p><p>​如果一个用户想完成一个行动，这三者是缺一不可的。例如，周末你打算找你朋友开黑王者荣耀，但是朋友突然有事，你放弃了周末打王者</p><p>动机：渴望快乐 能力：有手机 有网络 有时间 触发：和朋友一起玩做王者荣耀</p><p>然后因为朋友突然放弃了，缺少触发条件，放弃</p><p>亦或者网络太差，缺少能力，放弃</p><p>亦或者由于某种突发紧急事件，没心情去体会游戏里面的快乐，缺少动机，放弃</p><h4 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h4><p>能够驱使用户采取行动的核心动机无非就是以下三种</p><p>-    追求快乐，逃避痛苦</p><p>-    追求希望，逃避恐惧</p><p>-    追求认同，逃避排斥</p><p>​补充：相对与失去快乐，人们更加害怕痛苦，就像捡到100块钱，你会很快乐，但是你丢失一百块钱，你会非常痛苦，这远比捡到100块情绪更加激烈，这在产品中常常表现为厌恶损失心理</p><h4 id="能力"><a href="#能力" class="headerlink" title="能力"></a>能力</h4><p>能力是行动的门槛，福格教授提出六要素</p><p>-    时间：完成这件事情需要的时间</p><p>-    金钱：从事这件事情需要的经济投入</p><p>-    体力：完成这件事所消耗的体力</p><p>-    脑力：完成这件事所消耗的脑力</p><p>-    社会偏差：他人对这项活动的接受度</p><p>-    非常规性：该活动与常规活动的匹配程度或矛盾程度</p><p>​一个行动需要的能力越少，用户就越轻松使用你的产品，所以我们反复强调降低用户使用门槛，从而减少因为能力问题而造成的流失</p><h3 id="多变的奖励"><a href="#多变的奖励" class="headerlink" title="多变的奖励"></a>多变的奖励</h3><p><img src="http://www.vkcyan.top/4.png" alt="4"></p><p>​    用户通过触发进入产品，并做出了行动，但是如果用户在你的产品中没有得到物质或者精神的奖励，用户自然会离你而去</p><h4 id="猎物奖励"><a href="#猎物奖励" class="headerlink" title="猎物奖励"></a>猎物奖励</h4><p>​猎物奖励就是获取自己想要的资源，刷抖音，寻找带来满足的视频，刷知乎，发现自己感兴趣的问题与回答，这就像原始人类追逐猎物一样，抓住他会充满获得感的</p><h4 id="社交奖励"><a href="#社交奖励" class="headerlink" title="社交奖励"></a>社交奖励</h4><p>​    社交奖励即为被认同，被赞美，被尊重，人类是情感动物，对社交奖励非常上瘾，会陶醉到社交带来的快乐中，这是及其有效的奖励方式，所以社交类产品经久不衰的原因，他的本质是获得一种社会认同</p><h4 id="自我奖励"><a href="#自我奖励" class="headerlink" title="自我奖励"></a>自我奖励</h4><p>​    自我奖励主要为使用产品时候的成就感，满足感，控制感。比如你喜欢收集手办，没人让你收集，收集了也没钱，但是让自己快乐了，同时找到了志同道合的朋友，我把我的手办发布到社区，被点赞，被评论这就很快乐，还有例如蚂蚁森林浇水，这都会带来内心的满足，从而实现自我价值</p><h4 id="多变性"><a href="#多变性" class="headerlink" title="多变性"></a>多变性</h4><p>​    灵长动物大都喜欢新奇的东西，一件事情，如果已经经历过很多次，再次经历将会失去兴趣，你的大脑不会获取快乐，因为你已经可以预感到下一步的行动，预感到你将会得到什么，大数据精准推荐、千人千面都是为了满足用户喜欢新奇的心理</p><p>​    如果某一次刷新知乎，推荐的都是你看过的或者不感兴趣的问答，那你自然不会上瘾，反之，如果你总是给用户带来新奇感，用户必定会进行更多的行动，来获取更多奖励，所以多变性是奖励的核心概念</p><p>​    最后补充一点，除了让用户经常获得奖励之外，让用户在第一次接触你的东西就有一个好印象也是关键点，例如首次打开小红书，QQ，他的登录背景视频是美好切令人向往的，让你感受到产品倡导的价值，如果恰好这也是你向往的，这个产品毫无疑问会吸引了你的注意力，你将会继续使用他</p><h3 id="投入"><a href="#投入" class="headerlink" title="投入"></a>投入</h3><p> <img src="http://www.vkcyan.top/5.png" alt="5"></p><p>​想象一个简单的场景，小明经过朋友推荐下载了王者荣耀，玩了1年时间，在游戏中达到了王者段位，期间在王者荣耀中购买了大量付费皮肤，同时认识了游戏好友；这时候出来了另一个竞品，不比王者荣耀逊色</p><p>​但是该竞品想吸引小明，难度是极大的，因为小明已经在王者荣耀中投入太多，时间，皮肤，游戏好友，对局资料，绝活英雄，这都会让小明无法脱离。</p><p>​    投入是上瘾模型闭环的最后一步，当用户通过触发，采取了行动，并获得了奖励，这时候如果能让用户进一步进行投入，那么这个产品在用户心中的地址将会达到顶峰</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><p>​    在微信上添加好友，添加群，这都是内容，随着使用的时间越长，你就会越离不开微信，让你换掉微信，那真的比登天还难</p><h4 id="数据资料"><a href="#数据资料" class="headerlink" title="数据资料"></a>数据资料</h4><p>​    以作者为例子，作为一名前端开发者，我的开源代码都存放在GitHub，随着我工作年限越长，我越舍不得离开GitHub，我的大量资料都在github中，对我而言，他有很高的价值</p><h4 id="关注者"><a href="#关注者" class="headerlink" title="关注者"></a>关注者</h4><p>​    小红是一位大厂产品经理，通过长期在知乎发表高质量文章获得了20w关注，随着人数的变多，小红将会越来越离不开知乎，微博，小红书 B站社区都是这样，关注者对于当事人来说是不可忽视的隐形价值</p><h4 id="信誉"><a href="#信誉" class="headerlink" title="信誉"></a>信誉</h4><p>​    小明觉得咸鱼不错，经常在咸鱼上售卖一些东西，你已经售卖一些东西，在未来会越来越关注你的信用情况，你就会花更多的经历去经营他</p><h4 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h4><p>​    以我自己举例子，学习编程的时候，使用的是vscode（编程开发软件），至今我已经使用了5年，已经对他产生了依赖，通过他学会了编辑技能，投入了很大的时间成本，学习成本，尽管竞品某些细节更好，但者依旧很难让我行动起来去换掉vscode</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​至此我们走完了上瘾模型，我们回顾一下，首先通过外部或者内部触发来让用户进入行动阶段，在行动中给予用户多变的奖励，最后让用户不断投入，时间，金钱，内容，或者资料，也可以为用户到来价值 信誉 关注这，经过这样的闭环后，用户将会越来越依赖你的产品</p><p>​似乎这个模型很棒，是一个值得思考的方法论，但是一个有价值的产品是一切的前提，如果产品没有挠到用户痒点，或者本身就是伪需求，那上瘾模型也无济于事，他不是救命稻草，而是锦上添花，让你的产品变的更加好。</p><p>​屏幕前的你此时此刻是否脑海中已经想到了很多，或者是对产品的理解，或者是对你正在进行中的项目产生了新的想法；后续内容提供了基于上瘾模型的产品设计模板，通过这样的模板可以分析别人的项目，也可以构建你准备开发或者正在进行中的项目</p><h2 id="将上瘾模型应用到产品中"><a href="#将上瘾模型应用到产品中" class="headerlink" title="将上瘾模型应用到产品中"></a>将上瘾模型应用到产品中</h2><h4 id="以内部触发为起点"><a href="#以内部触发为起点" class="headerlink" title="以内部触发为起点"></a>以内部触发为起点</h4><p>​    如果一款产品无法让用户内部触发，这就意味着用户感知不到其价值，产品的本质是满足客户需求，帮助用户解决问题；在这阶段我们需要研究、定位我们的客户群体，提炼特性，描述用户画像，通过丰田5Why法，深入了解用户的核心诉求，保证内部触发的合理性</p><h4 id="设计多变的奖励"><a href="#设计多变的奖励" class="headerlink" title="设计多变的奖励"></a>设计多变的奖励</h4><p>​    一款产品可以为用户带来什么？这是极其重要的问题，我们通过内部触发确定我们的用户群体，下一步就需要思考给予用户什么奖励，猎物奖励更好，还是社交奖励更好，同时要在奖励环节中贯彻多变性原则，这里再次强调：多变性是奖励的关键</p><p>注：如何给用户第一次良好的体验，让用户感知到价值，引导其内部触发，这也是关键的一环，其中越是生命周期短的产品，首次的啊哈时刻（一个用户对产品感知最强的点）必须要越早出现</p><h4 id="用户可以投入什么"><a href="#用户可以投入什么" class="headerlink" title="用户可以投入什么"></a>用户可以投入什么</h4><p>​    用户可以在你的产品中生产什么样的内容，数据资料，还是关注者，找准类型，同时要研究用户心理，找到用户可能想投入的实际，再引导用户去完成</p><h4 id="利用外部触发推广"><a href="#利用外部触发推广" class="headerlink" title="利用外部触发推广"></a>利用外部触发推广</h4><p>​    上瘾模型一旦形成，便需要源源不断的用户进入其中，这里可以根据自身的产品类型来选择外部触发方式，例如自身有钱，可以付费完成触发，或者通过社群进行人际型触发，具体触发方式需要根据产品特性来决定</p><h4 id="重复测试迭代优化"><a href="#重复测试迭代优化" class="headerlink" title="重复测试迭代优化"></a>重复测试迭代优化</h4><p>​当用户进行上瘾模型，并产生依赖之后，我们就需要不断检查每个环节是否符合预期，是否存在短板，根据实际数据进行测试，并进行优化迭代，不断完善上瘾模型</p><h2 id="对抽奖助手小程序的上瘾模型分析"><a href="#对抽奖助手小程序的上瘾模型分析" class="headerlink" title="对抽奖助手小程序的上瘾模型分析"></a>对抽奖助手小程序的上瘾模型分析</h2><p><img src="http://www.vkcyan.top/6.png" alt="6"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>参考文章：<a href="http://www.woshipm.com/pd/5386132.html">http://www.woshipm.com/pd/5386132.html</a></p><p>参考书籍：上瘾：让用户养成使用习惯的四大产品逻辑 尼尔·埃亚尔 瑞安·胡佛</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	为什么有些产品有抓住我们的注意力，而其他产品却不能？是什么让我们出于习惯而建立与产品的联系？是否有一种潜在模式能够通过技术将用户紧紧吸引</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="产品日常" scheme="https://vkcyan.github.io/tags/%E4%BA%A7%E5%93%81%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>Vue + webpack项目的移动端适配</title>
    <link href="https://vkcyan.github.io/2022/05/20/vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8vw%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    <id>https://vkcyan.github.io/2022/05/20/vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8vw%E8%BF%9B%E8%A1%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</id>
    <published>2022-05-19T16:00:00.000Z</published>
    <updated>2022-05-24T07:59:39.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2022-5-20更新"><a href="#2022-5-20更新" class="headerlink" title="2022-5-20更新"></a>2022-5-20更新</h2><p>技术栈：vue3 + webpack5</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-px-to-viewport -D</span><br></pre></td></tr></table></figure><h3 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h3><p>新建配置文件<code>postcss.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">      <span class="attr">autoprefixer</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">&quot;postcss-px-to-viewport&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">unitToConvert</span>: <span class="string">&quot;px&quot;</span>, <span class="comment">// 需要转换的单位，默认为&quot;px&quot;</span></span><br><span class="line">        <span class="attr">viewportWidth</span>: <span class="number">750</span>, <span class="comment">//  设计稿的视口宽度</span></span><br><span class="line">        <span class="attr">unitPrecision</span>: <span class="number">5</span>, <span class="comment">// 单位转换后保留的精度</span></span><br><span class="line">        <span class="attr">propList</span>: [<span class="string">&quot;*&quot;</span>], <span class="comment">// 能转化为vw的属性列表</span></span><br><span class="line">        <span class="attr">viewportUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">//  希望使用的视口单位</span></span><br><span class="line">        <span class="attr">fontViewportUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 字体使用的视口单位</span></span><br><span class="line">        <span class="attr">selectorBlackList</span>: [<span class="string">&quot;.ignore&quot;</span>, <span class="string">&quot;.hairlines&quot;</span>, <span class="string">&quot;.ig-&quot;</span>], <span class="comment">// 需要忽略的CSS选择器</span></span><br><span class="line">        <span class="attr">minPixelValue</span>: <span class="number">1</span>, <span class="comment">// 最小的转换数值，如果为1的话，只有大于1的值会被转换</span></span><br><span class="line">        <span class="attr">mediaQuery</span>: <span class="literal">false</span>, <span class="comment">// 媒体查询里的单位是否需要转换单位</span></span><br><span class="line">        <span class="attr">replace</span>: <span class="literal">true</span>, <span class="comment">// 是否直接更换属性值，而不添加备用属性</span></span><br><span class="line">        <span class="attr">include</span>: <span class="literal">undefined</span>, <span class="comment">// 如果设置了include，那将只有匹配到的文件才会被转换，例如只转换 &#x27;src/mobile&#x27; 下的文件 (include: /\/src\/mobile\//)</span></span><br><span class="line">        <span class="attr">landscape</span>: <span class="literal">false</span>, <span class="comment">// 是否添加根据 landscapeWidth 生成的媒体查询条件 @media (orientation: landscape)</span></span><br><span class="line">        <span class="attr">landscapeUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 横屏时使用的单位</span></span><br><span class="line">        <span class="attr">landscapeWidth</span>: <span class="number">568</span>, <span class="comment">// 横屏时使用的视口宽度</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>以下配置已经过时，请看最新内容</p><p>需要安装一下的插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-aspect-ratio-mini postcss-px-to-viewport postcss-write-svg postcss-cssnext postcss-viewport-units cssnano cssnano-preset-advanced postcss-import postcss-url --S</span><br></pre></td></tr></table></figure><p><code>postcss.config.js</code>配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;postcss-import&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-url&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-aspect-ratio-mini&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-write-svg&#x27;</span>: &#123; <span class="attr">utf8</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-cssnext&#x27;</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-px-to-viewport&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">viewportWidth</span>: <span class="number">750</span>, <span class="comment">// 视窗的宽度，对应的是我们设计稿的宽度，一般是750</span></span><br><span class="line">      <span class="attr">viewportHeight</span>: <span class="number">1334</span>, <span class="comment">// 视窗的高度，根据750设备的宽度来指定，一般指定1334，也可以不配置</span></span><br><span class="line">      <span class="attr">unitPrecision</span>: <span class="number">3</span>, <span class="comment">// 指定`px`转换为视窗单位值的小数位数（很多时候无法整除）</span></span><br><span class="line">      <span class="attr">viewportUnit</span>: <span class="string">&#x27;vw&#x27;</span>, <span class="comment">// 指定需要转换成的视窗单位，建议使用vw</span></span><br><span class="line">      <span class="attr">selectorBlackList</span>: [<span class="string">&#x27;.ignore&#x27;</span>, <span class="string">&#x27;.hairlines&#x27;</span>], <span class="comment">// 指定不转换为视窗单位的类，可以自定义，可以无限添加,建议定义一至两个通用的类名</span></span><br><span class="line">      <span class="attr">minPixelValue</span>: <span class="number">0</span>, <span class="comment">// 小于或等于`1px`不转换为视窗单位，你也可以设置为你想要的值</span></span><br><span class="line">      <span class="attr">mediaQuery</span>: <span class="literal">false</span> <span class="comment">// 允许在媒体查询中转换`px`</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;postcss-viewport-units&#x27;</span>: &#123;</span><br><span class="line">      <span class="attr">filterRule</span>: <span class="function"><span class="params">rule</span> =&gt;</span> rule.<span class="property">nodes</span>.<span class="title function_">findIndex</span>(<span class="function"><span class="params">i</span> =&gt;</span> i.<span class="property">prop</span> === <span class="string">&#x27;content&#x27;</span>) === -<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cssnano</span>: &#123;</span><br><span class="line">      <span class="attr">preset</span>: <span class="string">&#x27;advanced&#x27;</span>,</span><br><span class="line">      <span class="attr">autoprefixer</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">&#x27;postcss-zindex&#x27;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里注意假如生成的项目里面没有.postcssrc.js 说明写在package.json里面,记得把package里面的部分配置删除</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;postcss&quot;: &#123;</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>最后在index.html里面进行引入viewport-units-buggyfill解决兼容问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;//g.alicdn.com/fdilab/lib3rd/viewport-units-buggyfill/0.6.2/??viewport-units-buggyfill.hacks.min.js,viewport-units-buggyfill.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="property">viewportUnitsBuggyfill</span>.<span class="title function_">init</span>(&#123; <span class="attr">hacks</span>: <span class="variable language_">window</span>.<span class="property">viewportUnitsBuggyfillHacks</span> &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果遇到图片无法正常显示</p><p>1.img图片不显示：</p><p>全局引入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img &#123; </span><br><span class="line">content: normal !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.与第三方UI库兼容问题：</p><p>使用postcss-px-to-viewport-opt，然后使用exclude配置项，具体参考 <a href="https://zhuanlan.zhihu.com/p/36913200">Vue+ts下的移动端vw适配（第三方库css问题）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2022-5-20更新&quot;&gt;&lt;a href=&quot;#2022-5-20更新&quot; class=&quot;headerlink&quot; title=&quot;2022-5-20更新&quot;&gt;&lt;/a&gt;2022-5-20更新&lt;/h2&gt;&lt;p&gt;技术栈：vue3 + webpack5&lt;/p&gt;
&lt;h3 id=&quot;安装</summary>
      
    
    
    
    <category term="移动端" scheme="https://vkcyan.github.io/categories/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
    
    <category term="vue3" scheme="https://vkcyan.github.io/tags/vue3/"/>
    
    <category term="webpack5" scheme="https://vkcyan.github.io/tags/webpack5/"/>
    
    <category term="响应式" scheme="https://vkcyan.github.io/tags/%E5%93%8D%E5%BA%94%E5%BC%8F/"/>
    
    <category term="vw" scheme="https://vkcyan.github.io/tags/vw/"/>
    
  </entry>
  
  <entry>
    <title>NPDP产品经理国际资格认证</title>
    <link href="https://vkcyan.github.io/2022/03/18/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://vkcyan.github.io/2022/03/18/NPDP%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:34:34.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="产品经理与项目经理对比"><a href="#产品经理与项目经理对比" class="headerlink" title="产品经理与项目经理对比"></a>产品经理与项目经理对比</h2><table><thead><tr><th>内容</th><th>产品经理</th><th>项目经理</th></tr></thead><tbody><tr><td>职责</td><td>发现并定义范围</td><td>执行并交付范围</td></tr><tr><td>范围</td><td>对产品整个生命周期负责</td><td>阶段性对项目负责</td></tr><tr><td>角色</td><td>母亲，定义目标，发布计划，然后在生命周期的各个阶段继续培育产品</td><td>像家庭教师，一直待在产品旁边，帮助产品成长，让他最后成为产品满意的样子</td></tr></tbody></table><h2 id="主题知识"><a href="#主题知识" class="headerlink" title="主题知识"></a>主题知识</h2><p>组合管理</p><p>新产品开发战略 新产品流程 产品生命周期管理</p><p>文化，组织与团队</p><p>工具与效绩度量</p><p>市场研究</p><h2 id="知识点分布"><a href="#知识点分布" class="headerlink" title="知识点分布"></a>知识点分布</h2><p>新产品流程 20%</p><p>新产品开发 20%</p><p>组合管理 10%</p><p>产品生命周期管理 10%</p><p>市场研究 10%</p><p>工具与绩效度量 20%</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;产品经理与项目经理对比&quot;&gt;&lt;a href=&quot;#产品经理与项目经理对比&quot; class=&quot;headerlink&quot; title=&quot;产品经理与项目经理对比&quot;&gt;&lt;/a&gt;产品经理与项目经理对比&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>工具与绩效度量</title>
    <link href="https://vkcyan.github.io/2022/03/18/%E5%B7%A5%E5%85%B7%E4%B8%8E%E7%BB%A9%E6%95%88%E5%BA%A6%E9%87%8F/"/>
    <id>https://vkcyan.github.io/2022/03/18/%E5%B7%A5%E5%85%B7%E4%B8%8E%E7%BB%A9%E6%95%88%E5%BA%A6%E9%87%8F/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:33:01.270Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9种创意工具"><a href="#9种创意工具" class="headerlink" title="9种创意工具"></a>9种创意工具</h2><table><thead><tr><th>名称</th><th>内容</th></tr></thead><tbody><tr><td>SCAMPER</td><td>特别是在生产改进现有产品，产生新的产品的想法上很有帮助，SCAMPER是一些行为东西的首字母缩略词。又叫奔驰法 奔奔法<br />S：替代 C： 合并 A：改造 M：调整 P：改变用途 E：去除 R：逆向操作</td></tr><tr><td>头脑风暴</td><td>在群体决策中，由于群体成员心理相互作用影响，易屈于权威或大多数人意见，形成“群体思维”。群体思维削弱了</td></tr><tr><td>思维导图</td><td>在各种信息或创意之间建立思维链接的图形化技术。首先，讲一个关键字或者短语写在一页纸的中间，然后，从这一中心点触发，将其与不同方向的新创意连接，从而建立起<strong>网络式思维关系</strong></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;9种创意工具&quot;&gt;&lt;a href=&quot;#9种创意工具&quot; class=&quot;headerlink&quot; title=&quot;9种创意工具&quot;&gt;&lt;/a&gt;9种创意工具&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thea</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>文化、组织与团队</title>
    <link href="https://vkcyan.github.io/2022/03/18/%E6%96%87%E5%8C%96%E3%80%81%E7%BB%84%E7%BB%87%E4%B8%8E%E5%9B%A2%E9%98%9F/"/>
    <id>https://vkcyan.github.io/2022/03/18/%E6%96%87%E5%8C%96%E3%80%81%E7%BB%84%E7%BB%87%E4%B8%8E%E5%9B%A2%E9%98%9F/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:33:27.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文化"><a href="#文化" class="headerlink" title="文化"></a>文化</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>​组织中人们共同拥有接受的信念、核心价值观、行为准则、思维方式、假设与期望</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>反应组织的价值观，彰显与习惯、仪式、典礼、故事、英雄榜样</li><li>指出如何完成工作</li><li>表达生存力，即为了活下去我们应当做些什么</li></ul><h3 id="文化是否正确取决于组织本身"><a href="#文化是否正确取决于组织本身" class="headerlink" title="文化是否正确取决于组织本身"></a>文化是否正确取决于组织本身</h3><p>​一个组织中运作良好的文化可能对于另一个组织是完全错误的</p><h3 id="成功的创新文化具备的共同特点"><a href="#成功的创新文化具备的共同特点" class="headerlink" title="成功的创新文化具备的共同特点"></a>成功的创新文化具备的共同特点</h3><ul><li>清晰的方向和目标</li><li>鼓励尝试</li><li>个人绩效与组织绩效密切相关</li><li>契合创新文化是招聘标准之一</li><li>鼓励内部和外部的有效沟通</li><li>鼓励建设性冲突</li><li>让工作尽可能愉悦有回报</li></ul><h2 id="氛围"><a href="#氛围" class="headerlink" title="氛围"></a>氛围</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>​是员工可直接或者间接感知到的工作环境特点的集合，对员工的行为有重大的影响</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><ul><li>领导人水平、沟通、责任、信任、公平的认可与回报、机会，员工参与</li></ul><h2 id="新产品开发中的管理者角色"><a href="#新产品开发中的管理者角色" class="headerlink" title="新产品开发中的管理者角色"></a>新产品开发中的管理者角色</h2><h3 id="战略纬度"><a href="#战略纬度" class="headerlink" title="战略纬度"></a>战略纬度</h3><table><thead><tr><th>管理内容</th><th>角色与职责分配</th></tr></thead><tbody><tr><td>使命愿景、价值观</td><td>整体的企业愿景、使命价值观是由公司高管以及关键职能部门的负责人一起指定，在董事会层面通过</td></tr><tr><td>业务战略</td><td>通常由某个特定的业务单元的执行团队指定（有歧义）</td></tr><tr><td>职能战略</td><td>职能部门负责人以及高管团队定制</td></tr><tr><td>产品战略</td><td>高级产品经理（高级产品副总裁，首席产品官等）指定</td></tr><tr><td>创新战略</td><td>跨职能团队的高级经理定制，由一位董事会成员领导</td></tr></tbody></table><h3 id="流程纬度"><a href="#流程纬度" class="headerlink" title="流程纬度"></a>流程纬度</h3><table><thead><tr><th>角色</th><th>管理内容</th><th></th></tr></thead><tbody><tr><td>流程拥护人<br />process champion</td><td>负责推动组织内正式商业流程的日常工作，对流程进行调整、创新和持续改进</td><td>类似考委会，负责定制和改进考试规则</td></tr><tr><td>流程主管<br />process owner</td><td>对新产品开发流程的战略性结果，包括生产能力、输出质量和组织类的参与度负责的执行经理，敏捷中由PO和敏捷教练来负责</td><td>类似巡场老师，负责监督规则的执行效果</td></tr><tr><td>流程经理<br />process manager</td><td>确保流程中的创意和项目按时有序进行的运营经理。有时被成为业务流程经理或者工艺经理</td><td>类似监考老师，负责规则的按时有序执行</td></tr><tr><td>项目经理<br />project manager</td><td>采用组织认可的流程，负责管理特定的产品开发项目</td><td>类似班主任，组织学生按规则试试考试项目</td></tr></tbody></table><h3 id="组织与团队"><a href="#组织与团队" class="headerlink" title="组织与团队"></a>组织与团队</h3><table><thead><tr><th>职责</th><th>说明</th></tr></thead><tbody><tr><td>建立文化氛围</td><td>组织的文化和氛围由最高层管理者领导，并受其影响</td></tr><tr><td>推动积极氛围</td><td>是职能经理和各个团队或项目经理的职责</td></tr><tr><td>团队开发</td><td>整体团队开发的责任由高级产品开发经理承担，包括：团队成员的选拔，高绩效团队的建立，气氛的保持</td></tr></tbody></table><h3 id="产品管理者的关键职责"><a href="#产品管理者的关键职责" class="headerlink" title="产品管理者的关键职责"></a>产品管理者的关键职责</h3><p>落实产品开发战略，跨职能合作。</p><table><thead><tr><th>职位</th><th>职责</th></tr></thead><tbody><tr><td>首席产品官</td><td>先CEO回报，定制整体的产品战略，监控、管理好产品的营销与开发</td></tr><tr><td>高级副总裁</td><td>领导大型产品经理团队，与工程、销售、制造、营销职能的主要领导紧密配合工作，确保开发中的产品是正确的，且有助于实现公司目标</td></tr><tr><td>产品群经理</td><td>为负责某个产品群的产品团队提供指导，负责执行高级管理者指定的战略，领导跨职能团队</td></tr><tr><td>产品经理</td><td>对具体的产品和产品类别负责</td></tr></tbody></table><h3 id="产品经理-VS-项目经理"><a href="#产品经理-VS-项目经理" class="headerlink" title="产品经理 VS 项目经理"></a>产品经理 VS 项目经理</h3><table><thead><tr><th>产品经理</th><th>项目经理</th></tr></thead><tbody><tr><td>发现与定义范围（要做什么，做成什么样）</td><td>范围的执行与交付（执行并交付产品）</td></tr><tr><td>对产品整个生命周期负责</td><td>阶段性的对项目负责</td></tr></tbody></table><h2 id="团队领导者的角色和职责-高级管理者"><a href="#团队领导者的角色和职责-高级管理者" class="headerlink" title="团队领导者的角色和职责-高级管理者"></a>团队领导者的角色和职责-高级管理者</h2><p>新产品开发中高级管理者角色<strong>为战略负责</strong></p><p>定制<strong>企业级和事业群级战略</strong>的终极责任在于<strong>高级管理者</strong></p><p>而包括<strong>产品研发战略在内的职能型战略</strong>定制的责任人在于<strong>职能部门负责人</strong> </p><h3 id="高级管理者角色"><a href="#高级管理者角色" class="headerlink" title="高级管理者角色"></a>高级管理者角色</h3><p>倡导者：项目倡导者并非团队的一员，可能是市场部或者是研发部的总经理，他们对项目充满了热情，有感染力，并且愿意为推进项目承担风险，能够帮助团队获得资源，帮助团队承担风险</p><p>发起者：提供项目所需的资源，总资源需求承诺以及优化配置，评估绩效，提供激励奖励，关口评审，运营规划等</p><p>引导者：帮助团队尽量减少官僚主义，突破繁文缛节的限制和其他组织壁垒，从而提高生产力</p><h3 id="高级管理者任务"><a href="#高级管理者任务" class="headerlink" title="高级管理者任务"></a>高级管理者任务</h3><p>方向引领者：</p><ul><li>奖励公司战略</li><li>确保为新产品所做的一切努力是一致的</li></ul><p>产品线缔造者</p><ul><li>为理解目前及未来的产品线确立框架</li><li>定义产品类型</li></ul><p>组合管理</p><ul><li>确定项目设置</li><li>匹配项目容量、生产力</li></ul><h3 id="高级管理者总结"><a href="#高级管理者总结" class="headerlink" title="高级管理者总结"></a>高级管理者总结</h3><p><img src="http://www.vkcyan.top/image-20220424182709993.png" alt="image-20220424182709993"></p><h2 id="跨职能团队和矩阵结构"><a href="#跨职能团队和矩阵结构" class="headerlink" title="跨职能团队和矩阵结构"></a>跨职能团队和矩阵结构</h2><h3 id="组织结构类型"><a href="#组织结构类型" class="headerlink" title="组织结构类型"></a>组织结构类型</h3><p>​矩阵结构式一种组织结构，其中的汇报关系按网格或者矩阵奖励，而不按照传统的层级结构，换言之，一个员工具有双重的回报关系，通常是指职能经理和产品经理（项目经理）汇报</p><img src="http://www.vkcyan.top/image-20220424190519903.png" alt="image-20220424190519903" style="zoom:67%;" /><h3 id="矩阵结构"><a href="#矩阵结构" class="headerlink" title="矩阵结构"></a>矩阵结构</h3><table><thead><tr><th>团队类型</th><th>项目经理</th><th>上下级</th><th>团队成员</th><th>团队能力</th><th>适合的产品任务类型</th></tr></thead><tbody><tr><td>职能型团队</td><td>无</td><td>有</td><td>分散</td><td>最弱</td><td>改进的，轻微的<br />（支持型项目）</td></tr><tr><td>轻量级团队</td><td>有<br />无实权</td><td>无</td><td>兼职</td><td>弱</td><td>派生的扩张产品线<br />（衍生型项目）</td></tr><tr><td>重量型团队</td><td>有<br />有实权</td><td>无<br />（交叉）</td><td>临时专职</td><td>强</td><td>新领域，不确定，复杂的<br />（平台型项目）</td></tr><tr><td>自主型团队</td><td>创业团队领导</td><td>有</td><td>专职</td><td>最强</td><td>全新的，长周期，高风险<br />（突破性项目）</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;文化&quot;&gt;&lt;a href=&quot;#文化&quot; class=&quot;headerlink&quot; title=&quot;文化&quot;&gt;&lt;/a&gt;文化&lt;/h2&gt;&lt;h3 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h3&gt;&lt;p&gt;​	组</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>新产品开发战略</title>
    <link href="https://vkcyan.github.io/2022/03/18/%E6%96%B0%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%88%98%E7%95%A5/"/>
    <id>https://vkcyan.github.io/2022/03/18/%E6%96%B0%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E6%88%98%E7%95%A5/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:33:40.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="战略"><a href="#战略" class="headerlink" title="战略"></a>战略</h2><p>定义：能够引向未来的一种方法与战略，例如，某个目标的实现路径或某个问题的解决方法</p><h3 id="商业环境下的战略定义："><a href="#商业环境下的战略定义：" class="headerlink" title="商业环境下的战略定义："></a>商业环境下的战略定义：</h3><ul><li>战略能够定义与传播一个组织的独特定位，说明应当如何调整组织的资源、技能与能力以获取竞争优势（波特，2008）</li><li>给予行业定位、机遇和资源，企业为实现长远目标而定制的计划（科特勒 2012）</li></ul><img src="http://www.vkcyan.top/image-20220322154209060.png" alt="image-20220322154209060" style="zoom: 50%;" /><h3 id="经营战略的设计步骤"><a href="#经营战略的设计步骤" class="headerlink" title="经营战略的设计步骤"></a>经营战略的设计步骤</h3><img src="http://www.vkcyan.top/image-20220322165614790.png" alt="image-20220322165614790" style="zoom:67%;" /><h3 id="战略制定与执行责任人"><a href="#战略制定与执行责任人" class="headerlink" title="战略制定与执行责任人"></a>战略制定与执行责任人</h3><p>​整体的企业愿景和使命通常由公司高管团队以及关键职能部门（财务、营销、制造等）的负责人一起正式制定，这些内容在董事会层面得到了正式通过</p><p>业务战略：通常由某个特定的业务单元的执行团队进行制定</p><p>职能战略：通常由职能部门负责人及高管管理团队（财务，营销）进行制定</p><p>产品战略：通常由高级产品经理（如高级产品管理副总裁）进行制定</p><p>创新战略：同工厂由跨职能部门的高级经理制定，由一位董事会成员领导，他可能是创新副总裁，首席技术官或首席执行官</p><h2 id="使命-愿景-价值观"><a href="#使命-愿景-价值观" class="headerlink" title="使命 愿景 价值观"></a>使命 愿景 价值观</h2><h3 id="使命"><a href="#使命" class="headerlink" title="使命"></a>使命</h3><p>定义： 公司信念、哲学、目的、经营原则或者企业信仰的声明</p><p>目的：阐述企业为什么存在(Why)。为了凝聚公司能量与资源</p><p>案例： 发布创意 克服困难(3M公司使命)</p><h3 id="愿景"><a href="#愿景" class="headerlink" title="愿景"></a>愿景</h3><p>定义： 透过预见与洞察的现象，透过实际上的限制，借此想象出企业对于未来发展的可能性</p><p>目的：阐述企业要往哪里(Where)</p><p>案例： 设计各式精良，优异的家居用品，并且价格低到让许多人都买得起(IKEA宜家家居愿景)</p><h3 id="价值观"><a href="#价值观" class="headerlink" title="价值观"></a>价值观</h3><ol><li>参与的成员为了完成任务需要遵守的行为准则</li><li>一个人或者公司带来某种程度的情感来遵守一个原则</li></ol><p>目的： 阐述企业的行为准则与价值观(How)</p><p>案例： 诚信正直 承诺 创新 客户伙伴关系(TSMC公司价值观)</p><h2 id="四种创新战略框架"><a href="#四种创新战略框架" class="headerlink" title="四种创新战略框架"></a>四种创新战略框架</h2><h3 id="波特战略框架"><a href="#波特战略框架" class="headerlink" title="波特战略框架"></a>波特战略框架</h3><p>波特将公司优势最终划分成为2个部分：成本优势与差异化</p><p>通过运营这些优势或宽或窄的范围，定义了三种通用战略</p><ul><li>成本领先战略</li><li>差异化战略</li><li>细分市场战略</li></ul><img src="http://www.vkcyan.top/FiYc3Fg_dljrhfFVsW0KpGPboTw2.png" style="zoom： 50%;" /><table><thead><tr><th>战略名称</th><th>特点</th><th>优势</th><th>劣势</th><th>例子</th></tr></thead><tbody><tr><td>成本领先战略</td><td>吸引价格敏感性客户<br />提升市场份额<br />规模生产<br />降低成本<br />优化供应链</td><td>在价格竞争激烈市场中有保持竞争的方法</td><td>利润低<br />降低成本影响质量导致客户流失<br /></td><td>世界工厂，中国制造</td></tr><tr><td>差异化战略</td><td>聚焦较宽产品基础<br />交付优质产品<br />建立忠诚客户关系获取市场份额<br /><br />更关注产品品质和性能</td><td>利于建立客户忠诚度<br />可以获得更高的利润率</td><td>必须持续创新，开发新产品吸引客户<br />性能不好可能导致市场份额的大幅度下滑</td><td>星巴克<br />苹果</td></tr><tr><td>细分市场战略</td><td>也称”聚焦战略”<br />适用于狭小市场<br />对市场有深入认识与独特见解</td><td>聚焦营销和新产品开发工作<br />具备很高的竞争壁垒<br />增加产品开发投入提高利润率<br /></td><td>依赖单一狭小市场<br />风险大<br />新技术冲击</td><td>医美行业<br />月子中心</td></tr></tbody></table><h3 id="迈尔斯-斯诺战略框架"><a href="#迈尔斯-斯诺战略框架" class="headerlink" title="迈尔斯.斯诺战略框架"></a>迈尔斯.斯诺战略框架</h3><p>基于企业对于变更响应的研究，提供有用框架去描述产品开发战略方法</p><table><thead><tr><th>类型</th><th>动作</th><th>方式</th></tr></thead><tbody><tr><td>探索者<br />Prospector</td><td>首先上市<br />寻求增长<br />敢于冒险</td><td>开发和应用新技术<br />借助快速上市，占领市场份额</td></tr><tr><td>分析者<br />Analyzer</td><td>快速跟随<br />产品通常更好</td><td>经常跟随探索型公司，开发模仿产品<br />被称为”快速跟随者”<br />新产品开发成本低</td></tr><tr><td>防御者<br />Defender</td><td>在稳定市场中维护其市场份额</td><td>风险厌恶型，聚焦于狭窄的，稳定的市场与产品类别<br />通常不具备技术进攻能力</td></tr><tr><td>反应者<br />Eeactor</td><td>只有在遭遇威胁时才会有所反应</td><td>没有清晰的战略目标<br />没有明确的技术开发计划和市场进入计划</td></tr></tbody></table><h3 id="持续式创新-VS-颠覆式创新"><a href="#持续式创新-VS-颠覆式创新" class="headerlink" title="持续式创新 VS 颠覆式创新"></a>持续式创新 VS 颠覆式创新</h3><p>持续式创新</p><ul><li>不创造新的市场与新价值主张，致力于把现有产品做的更加好</li><li>从审美，功能，特性或成本角度关注产品变更和改进的渐进过程</li></ul><p>颠覆式创新</p><blockquote><p>克莱顿.克里斯坦森首次提出颠覆式创新的概念(1997)</p></blockquote><ul><li>有助于创建新市场与新的价值网络(价值主张)</li><li>初期关注小众有影响力的目标市场，该市场产品具有重要的新特性或功能，但是因为开发成熟度不够充分，还无法与现在已被广泛接受的产品竞争</li><li>初期在目标市场的影响力加上产品改进将会扩大市场，导致现有产品最终退出市场</li><li>促成和创造颠覆式影响的通常是一个商业模式，而非是一项技术</li><li>颠覆式创新不会一夜之间实现，而是逐渐发生的</li></ul><h3 id="皮萨诺战略框架-创新画布"><a href="#皮萨诺战略框架-创新画布" class="headerlink" title="皮萨诺战略框架 - 创新画布"></a>皮萨诺战略框架 - 创新画布</h3><p>在技术与商业模式创新的两个方面有效分配精力和资源</p><img src="http://www.vkcyan.top/image-20220319164114876.png" style="zoom： 67%;" /><h2 id="其他战略"><a href="#其他战略" class="headerlink" title="其他战略"></a>其他战略</h2><h3 id="库珀的战略"><a href="#库珀的战略" class="headerlink" title="库珀的战略"></a>库珀的战略</h3><blockquote><p>库珀是门径管理流程的奠基人，库珀的战略从技术和市场的角度来讨论</p></blockquote><p>差异化战略： 与波特的差异化战略类似，提供高价格，高质量的产品，满足客户需求</p><p>高成本战略： 研发成本高，较少关注市场和客户需求</p><p>技术推动战略： 最新技术，高度创新想法，较少关注用户需求</p><p>保守战略： 低风险，有限研发投入，非差异化产品</p><p>非博弈战略： 与迈尔斯.斯诺的反应者战略类似</p><h3 id="平台战略"><a href="#平台战略" class="headerlink" title="平台战略"></a>平台战略</h3><p>平台战略被定为为一系列子系统及其接口，由此可以建一个通用架构，继而高效的开发，制造出其延伸产品</p><p>优势：</p><ul><li>快速，连续的推出一系列产品</li><li>鼓励从长期视角定制产品战略</li><li>能大幅度提升运营效率</li><li>公司与市场能清晰理解产品平台的底层要素</li><li>能带来巨大的差异化，使自身产品与竞争产品得以区分开来</li></ul><h3 id="技术战略"><a href="#技术战略" class="headerlink" title="技术战略"></a>技术战略</h3><p>技术战略是一份有关技术维护和技术发展的计划，这些技术能够支持组织的未来发展，有助于组织战略目标的实现</p><p>技术战略与经营战略和创新战略相连</p><p>技术预测方法</p><ul><li>头脑风暴法 专家小组法 德尔菲法 (专家 匿名 多轮 趋向一致)</li><li>SWOT法 专利分析法 趋势分析法</li></ul><p>技术S曲线基本上显示了大多数技术的生命周期阶段</p><ul><li>引入期</li><li>成长期</li><li>成熟期</li></ul><h3 id="知识产权战略"><a href="#知识产权战略" class="headerlink" title="知识产权战略"></a>知识产权战略</h3><p>知识产权： 智力制造出来东西，比如发明、文学、艺术、设计、符号、名称、商业用户图像的所有权；同其他产权一样可以出售，授权，交换或者被拥有者放弃；知识产权被法律保护，例如专利、版权和商标可以让所有人从他们的创造中获取荣誉和金钱回报。</p><h4 id="知识产权的类型"><a href="#知识产权的类型" class="headerlink" title="知识产权的类型"></a>知识产权的类型</h4><p>专利：在一定时间阶段生效的，由政府授权或许可的权利，特别指禁止他人制造，使用或者销售一个发明的所有权力</p><p>版权：一定年限内，给予原创者独家的，指定的法律权利，可以印刷，发行，制作</p><p>商标：代表公司、产品的经由法定注册或许可的符号，单词或者词组</p><p>植物品种权： 给予独家权力生产和销售某种可繁殖的植物</p><p>商业机密：和企业相关的保密信息</p><h2 id="营销战略"><a href="#营销战略" class="headerlink" title="营销战略"></a>营销战略</h2><p>从业务目标到营销计划，其中包含业务目标、营销战略、公司组合、营销计划</p><h3 id="市场营销组合4P"><a href="#市场营销组合4P" class="headerlink" title="市场营销组合4P"></a>市场营销组合4P</h3><p>产品Product：外观 功能 特色 质量 包装 支持 质保 品牌</p><p>促销Promotion：主题&#x2F;信息 社交媒体 公关 销售团体 商品展会 纸质媒体</p><p>定价Price：目录价格 折扣 捆绑销售 信用条款 渗透定价（低价占领市场） 撇脂定价（高价回收成本）</p><p>地点Place：渠道 库存 物流 实体分销</p><h3 id="如何定价"><a href="#如何定价" class="headerlink" title="如何定价"></a>如何定价</h3><ul><li>无论何时何地，对产品经理而言必须明确点：总利润比市场份额、效率更加重要</li><li>维持低成本是产品的事情，维持高售价是运营的事情</li><li>降价是最昂贵的运营策略，而提价的效果未必会有想象中的糟糕</li></ul><h3 id="如何应对竞争对手的价格变化"><a href="#如何应对竞争对手的价格变化" class="headerlink" title="如何应对竞争对手的价格变化"></a>如何应对竞争对手的价格变化</h3><p>​某一家酒企的一款酒经过多年经营，在市场上占有率一度达到20%，后来竞争对手也出了类似的产品，比他要低1美元，这时候酒企应该进行价格竞争吗？显然这会导致自己总利润降低，这时候决策者决定，将这款酒提价1美元，同时出这款酒的不同包装的产品，可以理解为青春版，其价格更加低廉，以此与对手竞争，一方面提高了前者酒的地位，一方面拉低了对手的品牌力，使销售量增加，利润量增加</p><h3 id="如何“忽悠”用户付费"><a href="#如何“忽悠”用户付费" class="headerlink" title="如何“忽悠”用户付费"></a>如何“忽悠”用户付费</h3><p>在一定得到3w 80%的几率得到4w，20%的概念得到0元面前，大部分用户会选择前者</p><p>在一定失去3w 80%的几率失去4w，20%的概念失去0元面前，大部分用户会选择后者</p><p>结论：人性在面对<strong>失去</strong>与<strong>风险</strong>的时候更加害怕失去</p><p>策略：不要告诉用户买了产品会得到什么，而是告诉用户不购买会失去什么</p><p>场景：儿童兴趣班 阅读到一半的付费阅读</p><h3 id="营销理念的历史演变-4P-4C-4R"><a href="#营销理念的历史演变-4P-4C-4R" class="headerlink" title="营销理念的历史演变 4P - 4C - 4R"></a>营销理念的历史演变 4P - 4C - 4R</h3><table><thead><tr><th>4P 产品导向</th><th>4C 顾客导向</th><th>4R 顾客忠诚度导向</th></tr></thead><tbody><tr><td>产品（product）</td><td>顾客需求（Consumer）</td><td>关系（Relation）</td></tr><tr><td>促销（promotion）</td><td>便利性（Convenience）</td><td>反应（Respond）</td></tr><tr><td>价格（price）</td><td>沟通（Communication）</td><td>回报（Return）</td></tr><tr><td>分销（place）</td><td>成本（Cost）</td><td>关联（Relevancy）</td></tr></tbody></table><h2 id="产品三环靶"><a href="#产品三环靶" class="headerlink" title="产品三环靶"></a>产品三环靶</h2><p>核心利益：产品核心价值（不是有形物理属性）</p><p>有形性能：赋予产品外观和功能的物理和美学设计特征</p><p>附加性能： 产品提供的额外性能可以是免费的</p><p><img src="http://www.vkcyan.top/image-20220321112332260.png" alt="image-20220321112332260"></p><h2 id="产品描述FAB"><a href="#产品描述FAB" class="headerlink" title="产品描述FAB"></a>产品描述FAB</h2><h3 id="每个产品或者品牌都具备的三个要素"><a href="#每个产品或者品牌都具备的三个要素" class="headerlink" title="每个产品或者品牌都具备的三个要素"></a>每个产品或者品牌都具备的三个要素</h3><blockquote><p>产品的F-A-B结构（总结每个产品的卖点，特点，优势和利益）</p></blockquote><ul><li>特点（Feature）：对产品本身的技术性解释，通常包含产品专业化词语</li><li>优势（Advantage）：由于产品本身的特性所导致的产品表现</li><li>利益（benefit）：与消费者的感受密切相关，由产品带给消费者的价值</li></ul><p>基于感觉上的体验，往往是针对个人而言，相对的，类比的，定性的</p><h3 id="采用FAB表述产品卖点示例"><a href="#采用FAB表述产品卖点示例" class="headerlink" title="采用FAB表述产品卖点示例"></a>采用FAB表述产品卖点示例</h3><table><thead><tr><th>名称</th><th>特点（F）</th><th>优势（A）</th><th>利益（B）</th></tr></thead><tbody><tr><td>海飞丝</td><td>富含最新丝源蛋白</td><td>头屑去无踪</td><td>秀发更出众</td></tr><tr><td>潘婷</td><td>含丰富的维他命原B5</td><td>能由发根渗透到发烧，补充养分</td><td>使他浦发健康，亮泽</td></tr><tr><td>飘柔</td><td>含丝质润发素</td><td>洗发洗护一次完成</td><td>令头发柔顺飘逸</td></tr></tbody></table><h3 id="为产品卖点塑造画面感（场景）"><a href="#为产品卖点塑造画面感（场景）" class="headerlink" title="为产品卖点塑造画面感（场景）"></a>为产品卖点塑造画面感（场景）</h3><table><thead><tr><th>产品卖点</th><th>普通文案</th><th>有画面感的文案</th></tr></thead><tbody><tr><td>耳机音质好</td><td>声声震撼，激发梦想</td><td>犹如置身音乐会现场</td></tr><tr><td>笔记本噪音低</td><td>创想极致，精心由我</td><td>闭上眼睛，感受不到电脑开机</td></tr><tr><td>工资辛苦，不如旅行</td><td>乐享生活，畅意人生</td><td>你写PPT时，阿拉斯加的鳕鱼正跃出水面</td></tr></tbody></table><h2 id="波士顿矩阵分析"><a href="#波士顿矩阵分析" class="headerlink" title="波士顿矩阵分析"></a>波士顿矩阵分析</h2><p><img src="http://www.vkcyan.top/image-20220321144744747.png" alt="image-20220321144744747"></p><h2 id="商业画布主要内容与要点"><a href="#商业画布主要内容与要点" class="headerlink" title="商业画布主要内容与要点"></a>商业画布主要内容与要点</h2><img src="http://www.vkcyan.top/image-20220322182231364.png" alt="image-20220322182231364" style="zoom:67%;" /><h4 id="亚马逊商业画布"><a href="#亚马逊商业画布" class="headerlink" title="亚马逊商业画布"></a>亚马逊商业画布</h4><img src="http://www.vkcyan.top/image-20220321175850181.png" alt="image-20220321175850181" style="zoom:50%;" /><h2 id="能力战略"><a href="#能力战略" class="headerlink" title="能力战略"></a>能力战略</h2><h3 id="能力来源"><a href="#能力来源" class="headerlink" title="能力来源"></a>能力来源</h3><p>能力要求</p><ul><li>技术</li><li>营销</li><li>研发</li></ul><p>内部来源</p><ul><li>保持现有能力</li><li>获取新能力</li><li>重新培训，重新开发现有能力</li></ul><p>外部来源</p><ul><li>兼并或收购</li><li>合资企业</li><li>开放式创新</li><li>咨询</li></ul><h3 id="封闭式创新-VS-开放式创新"><a href="#封闭式创新-VS-开放式创新" class="headerlink" title="封闭式创新 VS 开放式创新"></a>封闭式创新 VS 开放式创新</h3><table><thead><tr><th>封闭式创新的基本原则</th><th>开放式创新的基本原则</th></tr></thead><tbody><tr><td>本行业里最聪明的员工为我们工作</td><td>并非所有的聪明人都给我们工作，我们需要和企业内外部的聪明人合作</td></tr><tr><td>为了从研发中会哦你，我们必须自己进行发明创造，开发产品并推向市场</td><td>外部研发工作可以穿在巨大价值，而要分享其中的一部分，则必须进行内部研发</td></tr><tr><td>如果我们自己进行研究，就能最先把产品推向市场</td><td>我们不是非要自己进行研究才能从中受益</td></tr><tr><td>最先将创新商业化的企业将成为赢家</td><td>建立一个更好的商业模式要比贸然冲进市场好很多</td></tr><tr><td>如果我们创造出商业中最多最好的创意，我们必将胜利</td><td>如果我们能充分利用企业内外部的创意，我们必将胜利</td></tr><tr><td>我们必须控制知识产权，这样竞争对手就无从我们的创意中获利</td><td>我们应当通过让他人使用我们的知识产权而从中获利，同时应当购买他人的知识产权<br />只要它能提升我们的商业模式</td></tr></tbody></table><h3 id="保持市场竞争优势的办法"><a href="#保持市场竞争优势的办法" class="headerlink" title="保持市场竞争优势的办法"></a>保持市场竞争优势的办法</h3><blockquote><p>如果在一个相对封闭的行业，应当着重发展内生优势，提升自身能力<br>但产业融合与跨界合作兴起时，生态优势的重要性会特别明显</p></blockquote><h4 id="定位观"><a href="#定位观" class="headerlink" title="定位观"></a>定位观</h4><p>​认为决定竞争优势的因素有两个，一是行业盈利能力，二是企业在行业中的地位。因此企业的盈利能力取决于其竞争战略选择，而竞争战略的选择则是：选择有吸引力、高潜在利润的行业并建立自己的优势竞争地位</p><h4 id="资源能力观"><a href="#资源能力观" class="headerlink" title="资源能力观"></a>资源能力观</h4><p>​认为企业在竞争优势产生与企业内部运作（组织过程，包括协调&#x2F;整合、学习&#x2F;重构与转变）、流程和当前所处位置，具有路径依赖性</p><h4 id="生态优势观"><a href="#生态优势观" class="headerlink" title="生态优势观"></a>生态优势观</h4><p>​认为在新技术应用层出不穷、产业环境日趋动荡、消费者对一体化解决方案的期望越来越高的背景下，产业边界逐渐模糊，跨界合作与价值共创成为潮流，他不仅仅关注自身的价值链还要重新定义和优化价值网上面的活动，管理好未拥有的资源</p><h2 id="互联网思维“孤独九剑”剑谱"><a href="#互联网思维“孤独九剑”剑谱" class="headerlink" title="互联网思维“孤独九剑”剑谱"></a>互联网思维“孤独九剑”剑谱</h2><img src="http://www.vkcyan.top/image-20220322141454900.png" alt="image-20220322141454900" style="zoom:67%;" /><h2 id="互联网"><a href="#互联网" class="headerlink" title="互联网+"></a>互联网+</h2><p>​“互联网+”就是“互联网+各个传统行业”，但这并不是简单的两者相加，而是利用信息通信技术以及互联网平台，让互联网与传统行业进行深度融合，创造新的发证生态</p><p>​“互联网+”行动加护将重点促进云计算、物联网、大数据为代表的新一代信息技术与现代制造业、生产性服务业等的融合创新，发展壮大新兴业态，打造新的产品增长点，为大众创业、万众创新提供环境，为企业智能化提供支撑，增强新的经济发展动力，促进国民经济提质增效升级</p><h2 id="互联网-开展的前提"><a href="#互联网-开展的前提" class="headerlink" title="互联网+ 开展的前提"></a>互联网+ 开展的前提</h2><h4 id="用户中心不充分"><a href="#用户中心不充分" class="headerlink" title="用户中心不充分"></a>用户中心不充分</h4><ul><li>行业通点多，低效环节多，用户体验不好的行业</li><li>充分竞争市场，行政垄断少，市场化长度比较高的地方</li></ul><h4 id="数据驱动不充分"><a href="#数据驱动不充分" class="headerlink" title="数据驱动不充分"></a>数据驱动不充分</h4><ul><li>产品或者服务可虚拟化、数据化的行业</li><li>价值环节可数据化的地方，将面临数据化改造</li></ul><h4 id="生态协作不充分"><a href="#生态协作不充分" class="headerlink" title="生态协作不充分"></a>生态协作不充分</h4><ul><li>利用信息不对称，靠中介型的商业模式盈利的地方，会被改变</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;战略&quot;&gt;&lt;a href=&quot;#战略&quot; class=&quot;headerlink&quot; title=&quot;战略&quot;&gt;&lt;/a&gt;战略&lt;/h2&gt;&lt;p&gt;定义：能够引向未来的一种方法与战略，例如，某个目标的实现路径或某个问题的解决方法&lt;/p&gt;
&lt;h3 id=&quot;商业环境下的战略定义：&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>新产品流程</title>
    <link href="https://vkcyan.github.io/2022/03/18/%E6%96%B0%E4%BA%A7%E5%93%81%E6%B5%81%E7%A8%8B/"/>
    <id>https://vkcyan.github.io/2022/03/18/%E6%96%B0%E4%BA%A7%E5%93%81%E6%B5%81%E7%A8%8B/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:33:50.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><h2 id="管控产品失败（降低不确定性）的方法"><a href="#管控产品失败（降低不确定性）的方法" class="headerlink" title="管控产品失败（降低不确定性）的方法"></a>管控产品失败（降低不确定性）的方法</h2><h3 id="不确定性、累计成本与开发阶段的关系"><a href="#不确定性、累计成本与开发阶段的关系" class="headerlink" title="不确定性、累计成本与开发阶段的关系"></a>不确定性、累计成本与开发阶段的关系</h3><p><img src="http://www.vkcyan.top/image-20220324204825223.png" alt="image-20220324204825223"></p><h3 id="标准的决策框架"><a href="#标准的决策框架" class="headerlink" title="标准的决策框架"></a>标准的决策框架</h3><p><img src="http://www.vkcyan.top/image-20220324204830469.png" alt="image-20220324204830469"></p><h2 id="产品开发流程基本阶段"><a href="#产品开发流程基本阶段" class="headerlink" title="产品开发流程基本阶段"></a>产品开发流程基本阶段</h2><ul><li>探索（Exploration）</li><li>筛选（Screening）</li><li>商业评估（Business Evaluation）</li><li>开发（Development）</li><li>测试（Testing）</li><li>商业化（Commercialization）</li></ul><h2 id="常见产品开发流程"><a href="#常见产品开发流程" class="headerlink" title="常见产品开发流程"></a>常见产品开发流程</h2><ul><li>门径管理流程（Stage - Gate@）</li><li>集成产品开发（IPD）</li><li>精益开发（Lean）</li><li>敏捷开发（Agil）</li><li>设计思维（Design Thinking）</li></ul><h2 id="模糊前端FFE"><a href="#模糊前端FFE" class="headerlink" title="模糊前端FFE"></a>模糊前端FFE</h2><p>​模糊前段（Fuzzy front end，FFE）：产品开发项目的前端是一个早期极端的起点，在进入正式的产品开发流程前，组织在该阶段识别机会，形成概念。</p><p>​该阶段包括创意生成阶段，初始概念发展阶段和高级业务阶段。</p><p>​是项目中定义最不确定的一个阶段</p><p>​注：创意阶段可能有5个，概念开发阶段经过淘汰与融合变成了2个，最后立项分析，确定要做的项目</p><img src="http://www.vkcyan.top/image-20220326140418592.png" alt="image-20220326140418592" style="zoom:80%;" /><h2 id="门径管理流程"><a href="#门径管理流程" class="headerlink" title="门径管理流程"></a>门径管理流程</h2><img src="http://www.vkcyan.top/image-20220326142104796.png" alt="image-20220326142104796" style="zoom:67%;" /><h2 id="阶段-关口概念"><a href="#阶段-关口概念" class="headerlink" title="阶段-关口概念"></a>阶段-关口概念</h2><h3 id="什么是阶段"><a href="#什么是阶段" class="headerlink" title="什么是阶段"></a>什么是阶段</h3><p>产品开发流程中的一个确认区域，包括：</p><p>活动：项目负责人及团队成员依照项目计划必须完成的工作</p><p>综合分析：通过跨职能部门及团队成员依照项目计划必须完成的工作</p><p>可交付成果：是综合分析结果的呈现，这是团队必须完成的并在关口时所以提交的内容</p><h3 id="什么是关卡"><a href="#什么是关卡" class="headerlink" title="什么是关卡"></a>什么是关卡</h3><p>基本上，他是产品开发流程中的一个确认节点，在该阶段时需要做出有关项目未来的关键决策。包括</p><p>可交付成果：关口评审点的输入内容（阶段中的可交付成果）。它是前阶段行为的结果，是实现确定的，在每个关口都有一个可交付成功的标准清单</p><p>标准：判断项目是继续还是停止以及优先级决策的标准，这些标准通过以分数呈现，包括财务和定向标准</p><p>输出：关口评审结果。关口必须有明确的输出包括一个决策（继续或者停止）以及下一个阶段的路径</p><h2 id="阶段-关口（Stage-Gate）新产品开发过程"><a href="#阶段-关口（Stage-Gate）新产品开发过程" class="headerlink" title="阶段 - 关口（Stage - Gate）新产品开发过程"></a>阶段 - 关口（Stage - Gate）新产品开发过程</h2><blockquote><p>根据需要，可灵活裁剪与添加</p></blockquote><p>分为六个阶段，由来自公司内部不同职能领域的人员一起完成：</p><p>发现（Discovery）：寻找新机会和新产品创意</p><p>筛选（Scoping）：也叫观察，初步评选市场机会、技术需求以及能力的可获得性</p><p>立项分析（Business Case）：也叫构建产品框架，建立在筛选阶段之上的一个关键阶段，包括更为深入的技术，市场和商业可行性分析</p><p>开发（Development）：产品设计，原生制造，生产设计，制造准备和上市规划</p><p>测试与修正（Testing and Validation）：也翻译成测试与确认，测试产品以及商业化计划的所有方面，以修正所有假设和结论，和证实对产品的预期和总结</p><p>上市（Launch）：也翻译为投放市场，产品的完整商业化，包括规模制造以及商业化上市</p><p>阶段：一个确定区域，包括 活动，综合分析，可交付成果</p><p>关卡：一个确定阶段，必须又明确的输出包括一个决策（继续或者停止等）以及下一阶段的路径。包括：可交付成果，标准，输出</p><h2 id="瀑布模型"><a href="#瀑布模型" class="headerlink" title="瀑布模型"></a>瀑布模型</h2><ul><li>要求：了解要设计产品需要什么功能、目的、用户需求</li><li>设计：确定完成项目所需的软件与硬件，之后被转化为物理设计</li><li>实施：根据项目要求和设计规范编写实际代码</li><li>验证：确保产品符合顾客的期望</li><li>维护：通过客户确定产品设计中的不足或错误，进行修正</li></ul><p><img src="http://www.vkcyan.top/image-20220328174347453.png" alt="image-20220328174347453"></p><h2 id="集成产品开发IPD"><a href="#集成产品开发IPD" class="headerlink" title="集成产品开发IPD"></a>集成产品开发IPD</h2><blockquote><p>integrated Product Development，PID </p></blockquote><h3 id="前身-并行工程"><a href="#前身-并行工程" class="headerlink" title="前身 - 并行工程"></a>前身 - 并行工程</h3><h4 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h4><p>​在产品的设计与制造流程中，跨职能团队采用并行模式进行工作，而不是各个功能的顺序依次开发，从而促使团队全面考虑产品生命周期中从概念到实施的全部元素，包括质量、成本、维护等方面</p><h4 id="主要特征"><a href="#主要特征" class="headerlink" title="主要特征"></a>主要特征</h4><ol><li>并行交叉：并行工程强调产品设计与工艺过程设计、生产准备、采购等活动交叉进行<ol><li>按部件并行交叉，将一个产品分成若干部分，使其各部件能并行进行交叉开发</li><li>各个组件的设计、采购、生产等各种互动尽可能的交叉并行</li></ol></li><li>尽早开始工作，目的就是争取时间</li></ol><h4 id="具体做法"><a href="#具体做法" class="headerlink" title="具体做法"></a>具体做法</h4><p>​在产品开发的初期，组织多种可协同工作的项目组，使得有关人员从一开始就获得有关项目的最新消息，积极研究涉及本部门的工作任务，并将需求提供给设计人员，使得许多问题在开发早期就得到了解决从而保证设计质量，减少返工与浪费</p><h3 id="发展-集成产品开发IPD"><a href="#发展-集成产品开发IPD" class="headerlink" title="发展 - 集成产品开发IPD"></a>发展 - 集成产品开发IPD</h3><h4 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h4><p>​系统综合地应用不同职能体系的成果和理念，有效、高效的开发新产品，满足客户需求的方式</p><img src="http://www.vkcyan.top/image-20220407142631200.png" alt="image-20220407142631200" style="zoom:70%;" /><h3 id="IPD管理的精髓"><a href="#IPD管理的精髓" class="headerlink" title="IPD管理的精髓"></a>IPD管理的精髓</h3><ul><li>IPD基于<strong>并行工程</strong>发展而来</li><li>IPD首先<strong>是一个商业流程，关注商业结果</strong>，将产品开发作为一项投资进行审慎管理</li><li>IPD采用<strong>跨职能团队</strong>，加强部门合作，形成合力，共同承担</li><li>IPD流程分为不同的阶段，通过在决策评审点的决策实现集成组合管理团队（IPMT）和产品开发团队（PDT）<strong>互动</strong>，资源受控分配与投入，既满足项目进展的需求，又避免了投资失控的风险</li><li>IPD是灵活的，发展的，<strong>持续改进设计的</strong>，在不断吸纳业界实践和解决业务问题的过程与时俱进</li><li>IPD流程是<strong>基于市场的开发，关注市场需求和竞争分析</strong>，鼓励创新基于着二者之上</li></ul><h3 id="集成产品开发系统分级"><a href="#集成产品开发系统分级" class="headerlink" title="集成产品开发系统分级"></a>集成产品开发系统分级</h3><img src="http://www.vkcyan.top/image-20220407145126882.png" alt="image-20220407145126882" style="zoom:67%;" /><h2 id="精益产品开发"><a href="#精益产品开发" class="headerlink" title="精益产品开发"></a>精益产品开发</h2><p>定义（Lean Product Development）：创建在丰田首创的精益方法（TPS）的基础之上。目的是：从流程中去掉浪费</p><h3 id="精益开发的原则（提升生产效率）"><a href="#精益开发的原则（提升生产效率）" class="headerlink" title="精益开发的原则（提升生产效率）"></a>精益开发的原则（提升生产效率）</h3><ul><li>确定客户定义的价值</li><li>尽最大努力探索不同的解决方案</li><li>创造顺畅的产品开发流程</li><li>尊重颜色的标准，以减少变异</li><li>首席工程师全程参与</li><li>跨职能整合</li><li>学习不断改进</li><li>准求卓越与不断学习的文化</li><li>团队整个组织</li></ul><p>消除浪费 + 强化学习 + 慎重政策 + 尽快交付 + 授权团队 + 品质为先 + 全局优化 + 消除浪费 &#x3D; 精益产品</p><h3 id="潜在的浪费来源包括"><a href="#潜在的浪费来源包括" class="headerlink" title="潜在的浪费来源包括"></a>潜在的浪费来源包括</h3><ul><li>混乱的工作环境</li><li>缺乏可用的资源</li><li>缺乏明确的优先级顺序</li><li>不同职能之间的沟通存在障碍</li><li>糟糕的产品需求定义</li><li>缺乏对可制造性的早期考虑</li><li>过度设计</li><li>太多无效会议</li><li>太多的电子邮件</li></ul><h3 id="直接效益"><a href="#直接效益" class="headerlink" title="直接效益"></a>直接效益</h3><ul><li>显著提升生产效能</li></ul><h3 id="准时制"><a href="#准时制" class="headerlink" title="准时制"></a>准时制</h3><p>准时制生产方式（Just In Time简称JIT），又称作无库存生产方式（stockless production），零库存（zero inventories），单件流（one - piece flow）或者超市市场生产方式（supermarket production）</p><p>JIT的基本理念：只在需要的时候、按需要的量，生产所需的产品，故又被称为准时生产、适时生产方式。</p><p>JIT的目标：彻底消除无效劳动和浪费。具体要达到以下目标</p><ol><li>废品量最低 2. 库存量最低 3. 准备时间最短 4. 生产提前期最短 5. 减少零件搬运，搬运量低 6. 机器损坏低 7. 事故降低</li></ol><h3 id="单件流"><a href="#单件流" class="headerlink" title="单件流"></a>单件流</h3><p>批量生产虽然是降低成本的生产方法，但是容易出现堆积浪费，周转麻烦，容错率低的问题</p><p>单件流则有目的的降低周转问题，并且减少堆积浪费，同时增加容错率</p><h3 id="5WHY法（刨根问底法）"><a href="#5WHY法（刨根问底法）" class="headerlink" title="5WHY法（刨根问底法）"></a>5WHY法（刨根问底法）</h3><img src="http://www.vkcyan.top/image-20220407164034697.png" alt="image-20220407164034697" style="zoom:67%;" /><h3 id="安灯法"><a href="#安灯法" class="headerlink" title="安灯法"></a>安灯法</h3><p>操作：产线异常，按下按钮 - 产线报警 - 领班支持</p><p> 收益：</p><ul><li>一线员工既要动手，也要动脑</li><li>鼓励员工持续成长，获得成就感</li><li>公司流程优化，持续改善</li></ul><h3 id="现场现物"><a href="#现场现物" class="headerlink" title="现场现物"></a>现场现物</h3><p>亲临现场 - 细致观察，分析&#x2F;评估 - 找出原因</p><h3 id="构建学习型组织"><a href="#构建学习型组织" class="headerlink" title="构建学习型组织"></a>构建学习型组织</h3><ul><li>超越短期利益，着眼长期利益</li><li>致力提升员工，合作伙伴能力</li><li>继任领导延续公司文化基因</li></ul><p>丰田模式的核心精神是通过支持和鼓励员工持续改善工作流程</p><p>让他们不断成长与进步，进而获得工作成就感和主人翁意识</p><h3 id="精益产品开发过程的核心概念"><a href="#精益产品开发过程的核心概念" class="headerlink" title="精益产品开发过程的核心概念"></a>精益产品开发过程的核心概念</h3><img src="http://www.vkcyan.top/image-20220407185511266.png" alt="image-20220407185511266" style="zoom:80%;" /><h3 id="精益产品开发的优劣势"><a href="#精益产品开发的优劣势" class="headerlink" title="精益产品开发的优劣势"></a>精益产品开发的优劣势</h3><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><ul><li>流程的聚焦点在于信息的顺畅流动,而非严厉管控</li><li>通过事件驱动方法简化合作，优化设计</li><li>重视对进度、成本、消极和质量方面的风险的积极管控</li><li>适用于各种规模的项目</li><li>用于记录学习和进展、判定优先级和解决问题的工具是简单的，可视化的</li></ul><h4 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h4><ul><li>参与人员必须是相当敬业并且经验丰富的</li><li>需要改变组织的结构和文化</li><li>需要强有力的供应商管理</li><li>组织有意愿且有能力接受项目目标的和方向上的变化</li></ul><h2 id="敏捷开发"><a href="#敏捷开发" class="headerlink" title="敏捷开发"></a>敏捷开发</h2><h3 id="传统方法VS敏捷方法"><a href="#传统方法VS敏捷方法" class="headerlink" title="传统方法VS敏捷方法"></a>传统方法VS敏捷方法</h3><table><thead><tr><th>传统的写作方式</th><th>敏捷的写作方式</th><th></th></tr></thead><tbody><tr><td>确定主题</td><td>与读者互动</td><td></td></tr><tr><td>整理大纲、搭建框架</td><td>确定主题</td><td></td></tr><tr><td>书写内容</td><td>与读者互动。收集反馈</td><td></td></tr><tr><td>设计、排版、校对</td><td>试写第一张</td><td></td></tr><tr><td>出版</td><td>与读者互动，收集反馈</td><td></td></tr><tr><td>与读者见面</td><td>试写第二章</td><td></td></tr><tr><td>筹集反馈</td><td>…</td><td></td></tr><tr><td></td><td>设计、排班、校对</td><td></td></tr><tr><td></td><td>出版</td><td></td></tr></tbody></table><h3 id="传统VS敏捷之客户互动对比"><a href="#传统VS敏捷之客户互动对比" class="headerlink" title="传统VS敏捷之客户互动对比"></a>传统VS敏捷之客户互动对比</h3><img src="http://www.vkcyan.top/image-20220408195943522.png" alt="image-20220408195943522" style="zoom:80%;" /><h3 id="确定性项目VS不确定性项目"><a href="#确定性项目VS不确定性项目" class="headerlink" title="确定性项目VS不确定性项目"></a>确定性项目VS不确定性项目</h3><img src="http://www.vkcyan.top/image-20220408205133131.png" alt="image-20220408205133131" style="zoom:80%;" /><h3 id="生命周期类型"><a href="#生命周期类型" class="headerlink" title="生命周期类型"></a>生命周期类型</h3><img src="http://www.vkcyan.top/image-20220408205936546.png" alt="image-20220408205936546" style="zoom:80%;" /><p>增量型：楼盘 定下来不会变 但是要不断交付 </p><p>敏捷性：互联网项目 不断在变化</p><p>预测型：铁路建造 变化极小，有规律的项目</p><p>迭代型：研发疫苗 不断变化，但是只需要交付一次 </p><h3 id="Stacy斯泰西图"><a href="#Stacy斯泰西图" class="headerlink" title="Stacy斯泰西图"></a>Stacy斯泰西图</h3><img src="http://www.vkcyan.top/image-20220408210819352.png" alt="image-20220408210819352" style="zoom:80%;" /><h3 id="敏捷宣言"><a href="#敏捷宣言" class="headerlink" title="敏捷宣言"></a>敏捷宣言</h3><table><thead><tr><th>敏捷宣言</th><th>价值观</th><th></th></tr></thead><tbody><tr><td>个体以及互动 胜于 流程和工具</td><td>以人为本</td><td></td></tr><tr><td>可工作的软件 胜过 完整的文档</td><td>以价值为导向</td><td></td></tr><tr><td>客户合作 胜过 合同谈判</td><td>合作共赢</td><td></td></tr><tr><td>响应变化 胜过 遵循原则</td><td>拥抱变化</td><td></td></tr></tbody></table><h3 id="敏捷开发十二大原则"><a href="#敏捷开发十二大原则" class="headerlink" title="敏捷开发十二大原则"></a>敏捷开发十二大原则</h3><ul><li>通过<strong>尽早和持续地交付</strong>有价值的软件来满足客户</li><li><strong>欢迎对需求提出变更</strong>，敏捷过程要善于利用需求变更，帮助客户获得竞争优势</li><li><strong>经常交付</strong>可用软件，并周期越短越好</li><li>业务人员与开发人员必须<strong>通力合作</strong></li><li>要善于激励项目人员，基于他们所需的<strong>环境和支持</strong>，并相信他们能完成任务</li><li>团队内部和各个团队之间，最有效的沟通方式是<strong>面对面沟通</strong></li><li><strong>可工作的软件</strong>是衡量进度的首要指标</li><li>敏捷过程体长<strong>可持续</strong>的开发。项目方、开发人员和用户应该能够保持稳定恒久的进展速度</li><li>对技术的<strong>精益求精</strong>以及对设计的不断完善将提高敏捷性</li><li>尽量做到<strong>简洁</strong>，尽最大可能减少不必要工作，这是一门艺术</li><li>最佳的架构、需求和设计出自于<strong>自组织团队</strong></li><li>团队要定期<strong>回顾和反思</strong>如何能够做到更有效，并相应地调整团队的行为</li></ul><h3 id="敏捷Scrum框架"><a href="#敏捷Scrum框架" class="headerlink" title="敏捷Scrum框架"></a>敏捷Scrum框架</h3><img src="http://www.vkcyan.top/image-20220409112819570.png" alt="image-20220409112819570" style="zoom:80%;" /><h3 id="敏捷实践SCRUM的333555"><a href="#敏捷实践SCRUM的333555" class="headerlink" title="敏捷实践SCRUM的333555"></a>敏捷实践SCRUM的333555</h3><table><thead><tr><th>三个支柱</th><th>三个角色</th><th>三个工件</th></tr></thead><tbody><tr><td>透明性（Transparency）</td><td>产品负责人（Product Owner）</td><td>产品待办事项列表（Product Backlog）</td></tr><tr><td>检查（Inspection）</td><td>敏捷教练（Scrum Master）</td><td>冲刺待办事项列表（Sprint Backlog）</td></tr><tr><td>适应（Adaptation）</td><td>项目团队（Scrum Team）</td><td>可交付产品增量（Increment）</td></tr></tbody></table><table><thead><tr><th>五个事件</th><th>五大价值观</th></tr></thead><tbody><tr><td>冲刺</td><td>承诺（Commitment） - 愿意对目标做出承诺</td></tr><tr><td>冲刺规划会议</td><td>专注（Focus） - 全身心都用到你承诺的工作上去</td></tr><tr><td>每日站会</td><td>开放（Openness） - 团队内所有信息对所有人开发</td></tr><tr><td>迭代评审会议</td><td>尊重（Respect） - 每个人都有他独特的价值与经验</td></tr><tr><td>迭代回顾会议</td><td>勇气（Courage） - 勇于承诺，履行承诺，敢于说不</td></tr></tbody></table><h3 id="敏捷实践-3个角色"><a href="#敏捷实践-3个角色" class="headerlink" title="敏捷实践 - 3个角色"></a>敏捷实践 - 3个角色</h3><table><thead><tr><th>产品负责人</th><th>敏捷教练</th><th>敏捷团队</th></tr></thead><tbody><tr><td>确定产品的功能和标准<br />维护产品待办事项列表<br />指定软件的交付内容<br />代表客户利益<br />拥有最终解释权<br />平衡有竞争关系的利益相关者</td><td>团队和产品主管之间的协调者，消除他们之间的障碍<br />工作职责不是管理团队<br />激发团队的创造力，给团队授权<br />提升团队生产率<br />改进工程工具的实践<br />确保团队取得进展的信息实时更新与同步<br />服务团队、教导团队、保护团队</td><td>5到9个人<br />多职能部门人员组成<br />冲刺阶段，团队通过自组织的方式实现冲刺目标<br />实现目标的帆帆上有选择自主权<br />责任属于整个开发团队<br />一起成功，一起失败<br />一起调整，一起改进</td></tr></tbody></table><h3 id="敏捷实践-用户故事"><a href="#敏捷实践-用户故事" class="headerlink" title="敏捷实践 - 用户故事"></a>敏捷实践 - 用户故事</h3><p>作为 学员 我想 看直播课 以便于 和老师互动</p><p>作为老师 我想 提前排课表 以便于 合理安排事件</p><p>作为xx 我想 xx 以便于xxxxx</p><p>用户说出自己的问题而不是给出具体解决方案</p><h3 id="敏捷实践-产品代办列表"><a href="#敏捷实践-产品代办列表" class="headerlink" title="敏捷实践 - 产品代办列表"></a>敏捷实践 - 产品代办列表</h3><p>​待办事项是所有工作的有序列表，他以故事形式呈现给团队。价值大的排在上面。他是产品需求变更的唯一来源</p><p>​他是一个持续完善的清单，根据产品和开发环境的变化而演进。</p><p>​产品负责人Product Owner负责待办事项列表的内容，可用性和优先级</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="几种开发流程的对比"><a href="#几种开发流程的对比" class="headerlink" title="几种开发流程的对比"></a>几种开发流程的对比</h2><h3 id="瀑布模型-VS-敏捷流程"><a href="#瀑布模型-VS-敏捷流程" class="headerlink" title="瀑布模型 VS 敏捷流程"></a>瀑布模型 VS 敏捷流程</h3><table><thead><tr><th>瀑布模型</th><th>敏捷流程</th></tr></thead><tbody><tr><td>瀑布使用阶段</td><td>敏捷使用迭代</td></tr><tr><td>瀑布使用不提供高低频率的互动（开发阶段低频率，业务测试阶段高频率）</td><td>有频繁的业务互动</td></tr><tr><td>瀑布模式一个项目经理</td><td>敏捷流程是scrum master</td></tr><tr><td>瀑布不能迭代</td><td>敏捷能迭代</td></tr></tbody></table><h3 id="敏捷与精益"><a href="#敏捷与精益" class="headerlink" title="敏捷与精益"></a>敏捷与精益</h3><p>敏捷开发：敏捷设计的初衷是再短时间内执行任务，与客户进行频繁互动，并能够对变化做出迅速相应，比较常用于软件开发</p><p>精益开发：精益旨在减少浪费，提高运营效率，特别适用于制造过程中常见的重复性任务</p><h3 id="门径管理-VS-敏捷"><a href="#门径管理-VS-敏捷" class="headerlink" title="门径管理 VS 敏捷"></a>门径管理 VS 敏捷</h3><table><thead><tr><th>特征</th><th>门径管理</th><th>敏捷</th></tr></thead><tbody><tr><td>模型类型</td><td>宏观技术</td><td>微观计划，项目管理</td></tr><tr><td>范围</td><td>创意到结束，端点到端点</td><td>只有开发与测试阶段</td></tr><tr><td>组织广度</td><td>跨职能 - 技术、市场、生产</td><td>技术</td></tr><tr><td>结束点</td><td>上市成为新产品</td><td>已开发或测试的软件</td></tr><tr><td>决策模型</td><td>投资模型：设计高级管理层治理的继续或停止模型</td><td>主要是战术性的：下一个冲刺需要的动作</td></tr></tbody></table><h3 id="集成产品开发与其他流程对比"><a href="#集成产品开发与其他流程对比" class="headerlink" title="集成产品开发与其他流程对比"></a>集成产品开发与其他流程对比</h3><ol><li>集成产品开发提供一种将产品开发中的功能，角色和行为集成起来的框架。</li><li>定义为系统地、综合的应用不同职能体系的成功和理念，有效、高效地开发新产品，满足客户需求的方式</li><li>集成产品开发模型的一个重要功能是“学习与持续改进”，模型表明专注于产品开发过程和技术的组织如何发展以知识为基础的学习型组织</li><li>各流程模型是潜在互补的，而不是相互排斥的，应以持续学习和改进为重点，将每个模型中的元素融合为一个真正适合于产品开发的模型</li></ol><table><thead><tr><th></th><th>特点</th></tr></thead><tbody><tr><td>门径管理模型</td><td>宏观规划、决策基础</td></tr><tr><td>敏捷模型</td><td>微观技术和灵活性</td></tr><tr><td>精益生产</td><td>减少浪费</td></tr><tr><td>集成产品开发</td><td>学习型组织，对新产品开发的综合集成</td></tr></tbody></table><h3 id="开发流程的治理"><a href="#开发流程的治理" class="headerlink" title="开发流程的治理"></a>开发流程的治理</h3><p>治理：用于指导项目、程序和项目组合管理中的活动框架、功能和流程。治理是采取高层级和战略性的视角，而不是陷入过程和项目细节</p><table><thead><tr><th></th><th>治理</th><th>管理</th></tr></thead><tbody><tr><td>职能</td><td>监督、控制、整合和决策</td><td>技术、组织、领导和控制</td></tr><tr><td>关注点</td><td>结果和目标</td><td>方法和技术</td></tr><tr><td>层面</td><td>宏观（战略、决策角度）</td><td>中观和微观（战术、执行角度）</td></tr><tr><td>负责人</td><td>董事会</td><td>管理层</td></tr><tr><td>作用</td><td>为管理提供框架、功能和过程授予管理者经营权并加以监督</td><td>再治理提供的框架和监督中形式经营权，实现经营目标</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所有流程模型均遵从一下共同原则</p><ul><li>关注战略一致性</li><li>基于知识进行决策</li><li>降低产品失败的风险</li><li>剪掉将利益相关者的输入信息融入设计决策</li><li>应用跨职能团队</li><li>是一个结构化框架，要被整个项目所理解和应用</li></ul><table><thead><tr><th></th><th>门径管理流程</th><th>集成产品开发</th><th>精益开发</th><th>敏捷开发</th></tr></thead><tbody><tr><td>是否对整个新产品开发流程进行管理</td><td>是</td><td>是</td><td>是</td><td>否</td></tr><tr><td>是否专注于跨职能团队的使用</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td>能加快上市速度吗</td><td>是</td><td>是</td><td>是</td><td>是</td></tr><tr><td>最适用什么类型的产品行业</td><td>硬件、实物</td><td>多产品</td><td>制造 软件</td><td>软件类</td></tr><tr><td>如何降低产品失败的风险</td><td>关口</td><td>决策点</td><td>消除浪费</td><td>快速迭代</td></tr><tr><td>是线性还是迭代</td><td>线性</td><td>线性</td><td>线性+迭代</td><td>迭代+线性</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;思维导图&quot;&gt;&lt;a href=&quot;#思维导图&quot; class=&quot;headerlink&quot; title=&quot;思维导图&quot;&gt;&lt;/a&gt;思维导图&lt;/h2&gt;&lt;h2 id=&quot;管控产品失败（降低不确定性）的方法&quot;&gt;&lt;a href=&quot;#管控产品失败（降低不确定性）的方法&quot; class=&quot;he</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>组合管理</title>
    <link href="https://vkcyan.github.io/2022/03/18/%E7%BB%84%E5%90%88%E7%AE%A1%E7%90%86/"/>
    <id>https://vkcyan.github.io/2022/03/18/%E7%BB%84%E5%90%88%E7%AE%A1%E7%90%86/</id>
    <published>2022-03-17T16:00:00.000Z</published>
    <updated>2022-05-23T08:34:07.039Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合管理大纲"><a href="#组合管理大纲" class="headerlink" title="组合管理大纲"></a>组合管理大纲</h2><img src="http://www.vkcyan.top/image-20220324155927166.png" style="zoom:67%;" /><h2 id="产品组合"><a href="#产品组合" class="headerlink" title="产品组合"></a>产品组合</h2><p>产品组织：一个组织正在投资的并将其做出战略性权衡取舍的一系列项目或产品</p><p>产品组合管理：以组合形式被管理的一系列程序、项目和&#x2F;或操作的集合。一个组合的构成元素未必是相互依赖的，甚至未必是相关的，但他们被集合成一个组合，以此为单位接受管理，以实现战略目标。</p><p>在产品开发和产品管理中，企业可以通过两种途径实现新产品成功</p><ul><li>正确的完成项目（项目管理）</li><li>完成正确的项目（组合管理）</li></ul><h2 id="管理组合的五大高层次目标"><a href="#管理组合的五大高层次目标" class="headerlink" title="管理组合的五大高层次目标"></a>管理组合的五大高层次目标</h2><h3 id="价值最大化"><a href="#价值最大化" class="headerlink" title="价值最大化"></a>价值最大化</h3><p>​进行资源配置将组合价值最大化（独立项目商业价值的综合）（非财务评估与财务评估）</p><h3 id="战略协同"><a href="#战略协同" class="headerlink" title="战略协同"></a>战略协同</h3><p>​确保整体组合战略与经营战略及创新战略始终保持一致（自下而上，自下而上，结合法）</p><h3 id="项目平衡"><a href="#项目平衡" class="headerlink" title="项目平衡"></a>项目平衡</h3><p>​根据预定设定的标准如长期或短期、高风险或低风险、特定产品或市场分类等，保持正确的项目之间的平衡</p><h3 id="管道平衡"><a href="#管道平衡" class="headerlink" title="管道平衡"></a>管道平衡</h3><p>​确保资源及焦点不会过度分散，避免组合囊括的项目过多，导致被过度分流（资源配置）</p><h3 id="财务稳健"><a href="#财务稳健" class="headerlink" title="财务稳健"></a>财务稳健</h3><p>​确保产品组合所选项目能够实现新产品创新战略中所设定的财务目标（财务可行性）</p><h2 id="产品规划定义"><a href="#产品规划定义" class="headerlink" title="产品规划定义"></a>产品规划定义</h2><p>​运营严格、规范的方法对市场走势及客户的要求及需求进行分析，创建合理的市场细分规则，对要投资和取得领先地位的细分市场进行选择和优先级排序，从而设计确保市场营销取得成功需要执行的活动，定制可盈利，可执行的业务计划和驱动产品平台、新产品包的开发</p><table><thead><tr><th></th><th>老板决定</th><th>集体决定</th><th>成立规划部门</th><th>跨部门团队运行</th></tr></thead><tbody><tr><td>优点</td><td>决策迅速</td><td>体现集体意志，形成共识</td><td>保证资源，提升专业能力</td><td>提升规划质量</td></tr><tr><td>缺点</td><td>随意、混乱</td><td>方法不严谨，责任容易分散</td><td>存在局限性，影响规划执行</td><td>对管理要求高，决策可能较慢</td></tr><tr><td>适用情况</td><td>公司创业阶段</td><td>公司规模不大，产品较少</td><td>公司规模较大，产品较多</td><td>公司多产品线，众多产品</td></tr></tbody></table><h2 id="组合管理流程"><a href="#组合管理流程" class="headerlink" title="组合管理流程"></a>组合管理流程</h2><img src="http://www.vkcyan.top/image-20220323165828201.png" alt="image-20220323165828201" style="zoom: 67%;" /><h2 id="组合中的项目类型"><a href="#组合中的项目类型" class="headerlink" title="组合中的项目类型"></a>组合中的项目类型</h2><table><thead><tr><th>类型</th><th>特点</th><th>团队（一般而言）</th></tr></thead><tbody><tr><td>突破型项目<br />Breakthrouth</td><td>有时被称为激进的或颠覆式的<br />努力通过技术将新产品带进市场<br />与公司现行的项目大不相同，有高风险</td><td>自主团队</td></tr><tr><td>平台型项目<br />LpatForm</td><td>开发出一系列子系统及其接口，由此创建一个通用架构，继而高效的卡覅和生产一系列衍生产品<br />为发现衍生产品、项目提供平台<br />风险比产品改进或增量提升要高，但比开发突破性产品低</td><td>重量级团队</td></tr><tr><td>衍生项目<br />Derivative</td><td>从其他现有产品或平台中衍生出来<br />可以填补有产品线的空白，提供更具有成本竞争力的制造能力<br />基于组织的核心技术提升性能和引入新特效<br />风险较低</td><td>轻量级团队</td></tr><tr><td>支持项目<br />Support</td><td>对现有产品渐进式改革<br />提高现有产品的制造效率<br />低风险</td><td>职能团队</td></tr></tbody></table><h2 id="产品组合与战略的关系"><a href="#产品组合与战略的关系" class="headerlink" title="产品组合与战略的关系"></a>产品组合与战略的关系</h2><h3 id="自上而下法"><a href="#自上而下法" class="headerlink" title="自上而下法"></a>自上而下法</h3><ul><li>开发过程中首先考虑愿景与战略</li><li>确定整个项目组合中可获得的资源平衡，根据重要战略可能对新产品的贡献，确定业务单元和产品种类的顺序</li><li>“战略水桶方法”规定了不同业务单元或产生种类理想的投入比例</li><li>在路径上，项目按优先级排序</li></ul><h3 id="自下而上法"><a href="#自下而上法" class="headerlink" title="自下而上法"></a>自下而上法</h3><ul><li>始于单个项目，经评估筛选，形成项目组合</li><li>战略标准依据评估每个项目的选择标准而定</li><li>不同与自上而下法，单个的产品组合即是结果不对业务部门和产品类型进行特别考虑（不是很懂）</li><li>该法保证项目与战略是保持一致的，但可能无法对特定的项目类型头图理想比例的成本</li></ul><h3 id="自上而下和自下而上的结合法"><a href="#自上而下和自下而上的结合法" class="headerlink" title="自上而下和自下而上的结合法"></a>自上而下和自下而上的结合法</h3><ul><li>具备两种方法的优点</li><li>确定能根据业务部门或产品类型的投入，进行战略优先级的排序</li><li>所有潜在的项目都要根据战略标准和每个项目的预估投入进行排序</li><li>通过战略预算分配项目时，要综合考虑独立的目标优先顺序和预算投入，并与业务部门或产品类型优先顺序保持一致</li><li>从上而下的确定计划，从下而上确定执行</li></ul><h2 id="产品机会评估"><a href="#产品机会评估" class="headerlink" title="产品机会评估"></a>产品机会评估</h2><h3 id="新产品技术评估常用方法"><a href="#新产品技术评估常用方法" class="headerlink" title="新产品技术评估常用方法"></a>新产品技术评估常用方法</h3><p>气泡图、选项标价、评分方法、项目排序、战略水桶、折现现金单、检查清单、投资回收期</p><p>一般分为财务方法与非财务方法</p><h3 id="非财务性评估"><a href="#非财务性评估" class="headerlink" title="非财务性评估"></a>非财务性评估</h3><p>非财务评估方法或评分依据是主观判断。确定要采用的标准包括：</p><ul><li>战略一致</li><li>产品优势</li><li>风险高低程度</li><li>法律法规影响</li><li>上市时间</li><li>市场吸引</li><li>利用核心竞争力的能力</li><li>技术可行性</li></ul><h3 id="通过-x2F-失败评估示例"><a href="#通过-x2F-失败评估示例" class="headerlink" title="通过&#x2F;失败评估示例"></a>通过&#x2F;失败评估示例</h3><img src="http://www.vkcyan.top/image-20220324110758196.png" alt="image-20220324110758196" style="zoom:67%;" /><h2 id="财务性评估"><a href="#财务性评估" class="headerlink" title="财务性评估"></a>财务性评估</h2><p>建立对每个产品机会进行潜在财务评估的基础上</p><ul><li>决定新产品在财务上是否可行</li><li>决定项目的优先级</li></ul><p>具体可用的财务评估方法有：</p><ul><li>净现值（Net Persent Value，NPV）</li><li>投资回收期（Payback Period）</li><li>内部回报率（Internal Rate of Return，IRR）</li><li>投入产出比、投资回报率（Return on Invesment， Rol）</li></ul><p>以上每种方法都需要</p><ul><li>销售潜力及回报的相对值</li><li>制造和营销成本的相对值</li><li>资金投入预估（对新厂房、设备等进行的投资）</li></ul><h3 id="财务可行性研究-净现值分析"><a href="#财务可行性研究-净现值分析" class="headerlink" title="财务可行性研究 - 净现值分析"></a>财务可行性研究 - 净现值分析</h3><p>净现值NPV，表示期望项目未来收益折算到此刻的值的总和</p><h3 id="财务可行性研究-投资回报期"><a href="#财务可行性研究-投资回报期" class="headerlink" title="财务可行性研究 - 投资回报期"></a>财务可行性研究 - 投资回报期</h3><p>投资回报率（Payback period）：指多长时间能够收回在产品上的自由投入</p><p>静态投资回收期：不考虑资金的时间成本计算投资回收期</p><p>动态投资回收期：考虑资金的时间成本计算投资回收期</p><p>投资回收率 &#x3D; 1&#x2F;投资回收期 * 100%（假设3.2年成本收回，则投资回收率为30%左右）</p><p>投资回报率（ROI） &#x3D; 运营期年均收益&#x2F;投资总额 * 100%（投资收益率）（假设运营了5年，平均每年收益100，投资总额500，则投资回报率为20%）</p><p>内部收益率 &#x3D; 净现值等于0的折现率</p><h2 id="什么是平衡组合"><a href="#什么是平衡组合" class="headerlink" title="什么是平衡组合"></a>什么是平衡组合</h2><p>目的：达到良好的风险与回报平衡，加入一些新产品机会</p><p>新产品机会所属的业务单元、产品类别、目标市场，或者产品特征，都可以作为新产品机会的分类标准。</p><p>例如：</p><ul><li>突破性项目、衍生项目、平台型项目、支持性项目</li><li>研发成本、商业化成本</li><li>潜在的回报和利益</li><li>风险水平 - 开发阶段或商业化阶段</li><li>技术难度 - 开发或维护</li><li>上市时间 - 从决定开发到获得商业汇报时间</li><li>设施设备上的资金投入</li><li>知识产权的价值创造潜力</li></ul><h2 id="气泡图组合分析"><a href="#气泡图组合分析" class="headerlink" title="气泡图组合分析"></a>气泡图组合分析</h2><p>用气泡图（Bubble Diagram）来展示产品组合是否有效</p><ol><li>通常，用气泡图来表示处于二维坐标图中的项目</li><li>X轴和Y轴表示具体的利益标准，如风险和回报</li><li>气泡表示单个项目，是根据项目在X轴和Y轴的排序所绘</li><li>气泡的大小表示第三个标准，如所需投入资金数额或资源份额</li></ol><img src="http://www.vkcyan.top/image-20220324153254647.png" alt="image-20220324153254647" style="zoom:67%;" /><h2 id="资源配置"><a href="#资源配置" class="headerlink" title="资源配置"></a>资源配置</h2><h3 id="新产品开发成功率受限因素"><a href="#新产品开发成功率受限因素" class="headerlink" title="新产品开发成功率受限因素"></a>新产品开发成功率受限因素</h3><ul><li>同时项目太多</li><li>项目计划糟糕，执行任务能力差</li><li>产品开发项目与其他业务有优先级之争</li><li>上市延期，按照完成难度极大</li><li>产品资源竞争，流程不合理，缺乏辅助支持</li><li>任务优先级不断变化，资源配置随之改变</li><li>管理者陷入困境，无法施救项目</li></ul><h3 id="资源配置方法"><a href="#资源配置方法" class="headerlink" title="资源配置方法"></a>资源配置方法</h3><ul><li>基于项目资源的需求</li><li>基于新业务的目标</li><li>将资源配置作为一个业务流程</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;组合管理大纲&quot;&gt;&lt;a href=&quot;#组合管理大纲&quot; class=&quot;headerlink&quot; title=&quot;组合管理大纲&quot;&gt;&lt;/a&gt;组合管理大纲&lt;/h2&gt;&lt;img src=&quot;http://www.vkcyan.top/image-20220324155927166.p</summary>
      
    
    
    
    <category term="产品经理" scheme="https://vkcyan.github.io/categories/%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86/"/>
    
    
    <category term="NPDP" scheme="https://vkcyan.github.io/tags/NPDP/"/>
    
  </entry>
  
  <entry>
    <title>JS数据结构与算法</title>
    <link href="https://vkcyan.github.io/2022/03/15/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://vkcyan.github.io/2022/03/15/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:09.379Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><p>数据结构为算法提供服务，算法围绕数据结构操作</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li>一个函数用大O表示，比如O(1)，O(n)，O(logN)…</li><li>定性描述该算法的运行时间</li></ul><img src="http://www.vkcyan.top/FjHw8lvXEnVrgeNMLJ15aEQWZX7G.png" style="zoom:30%;" /><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>每次执行改逻辑的时候，之后执行一次，复杂度不会随着时间的变化而变化</p><h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 0; i &lt; n; i += 1) &#123;</span><br><span class="line">console.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环里面的代码执行n次</p><h3 id="O-1-O-n-x3D-O-n"><a href="#O-1-O-n-x3D-O-n" class="headerlink" title="O(1)  + O(n) &#x3D; O(n)"></a>O(1)  + O(n) &#x3D; O(n)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个时间复杂度先后排列就需要相加，相加的情况下低的的忽略不计，取更高的时间复杂度</p><h3 id="O-n-O-n-x3D-O-n-2"><a href="#O-n-O-n-x3D-O-n-2" class="headerlink" title="O(n)  * O(n) &#x3D; O(n ^ 2)"></a>O(n)  * O(n) &#x3D; O(n ^ 2)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i, j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个时间复杂度嵌套排列，时间复杂度就需要相乘</p><h3 id="O-logN"><a href="#O-logN" class="headerlink" title="O(logN)"></a>O(logN)</h3><p>$$<br>对数函数：如果ax&#x3D;N（a&gt;0，且a≠1），那么数x叫做以a为底N的对数，记作x&#x3D;loga<br>$$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; n) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">i *= <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的logN以2为底数，目的是就是求2的多少次方为N，  上面的代码while循环每次*2，实际上就是求2的多少次方为N，所以时间复杂度就是O(logN)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><ul><li>一个函数用O表示，比如O(1)，O(n)，O(n^2)</li><li>算法在运行过程中临时占用存储空间的大小的量度</li></ul><h3 id="O-1-1"><a href="#O-1-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>声明了变量i，单个变量所占用的内存为1，所以空间复杂度为O(1)</p><h3 id="O-n-1"><a href="#O-n-1" class="headerlink" title="O(n)"></a>O(n)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">list.<span class="title function_">push</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明了变量list，通过循环我们增加了n个值，相当于占用了n个内存单元，所以这段代码的空间复杂度为O(n)</p><h3 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> matrix = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  matrix.<span class="title function_">push</span>([])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line">matrix[i].<span class="title function_">push</span>(j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n^2)实际上就是一个矩阵，矩阵的本质就是一个二维数据，存储了n的二次方的变量</p><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><h3 id="调试工具栏每个图标的作用"><a href="#调试工具栏每个图标的作用" class="headerlink" title="调试工具栏每个图标的作用"></a>调试工具栏每个图标的作用</h3><img src="http://www.vkcyan.top/FvPzD6xek5NzfA-Sa2wAfTKkT8nH.png" style="zoom:50%;" /><p>第一个箭头：程序运行到下一个断点，没有断点，程序执行完毕</p><p>第二个图标：一行一行执行代码</p><p>第三个图标：当前处如果调用了fun，点击此图标就会进入函数里面</p><p>第四个图标：点击跳出当前函数</p><p>第五个图标：重启调试</p><p>第六个图标：停止调试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;数据结构为算法提供服务，算法围绕数据结构操作&lt;/p&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;&lt;a href=&quot;#时间复杂度&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 + jsx开发指南</title>
    <link href="https://vkcyan.github.io/2022/03/15/Vue3%20%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>https://vkcyan.github.io/2022/03/15/Vue3%20%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:18.409Z</updated>
    
    <content type="html"><![CDATA[<img src="http://www.vkcyan.top/FuGdH5QngblNApxjW3YV8ozIsO0J.png" style="zoom:30%;" /><p>​在2021年，<code>vue3</code>发布了正式版本，并且经过一年的维护已经越来越稳定，我们在公司项目中也小范围的上线了<code>vue3</code>的项目，总体还是很不错的</p><p>​但是<code>setup</code>语法需要return比较麻烦，还有<code>.value</code>问题，尝试过<code>setup</code>语法糖，依旧觉得<code>setup</code>语法的api记忆负担比较重</p><p>​所以下半年逐渐拾起了<code>jsx</code>的语法，并在开源项目中使用，总体感觉还是相当不错的，前人栽树后人乘凉，本文对jsx for vue的常见问题进行说明</p><ul><li><p><code>jsx</code>学习成本更低，这么多年jsx没有大改动；</p></li><li><p>无记忆负担，同时足够灵活，如果你是vue开发者，同时对setup语法并不是太合得来， vue3 + jsx也是非常不错的选择~</p></li></ul><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>​在vue3中使用jsx需要安装<a href="https://www.npmjs.com/package/@vitejs/plugin-vue-jsx">@vitejs&#x2F;plugin-vue-jsx</a>（webpack版本的不了解，有需要者执行搜索），根据文档配置一下就行了，官方提供了文档供参考，提供了相关示例<a href="https://github.com/vuejs/jsx-next">jsx-next</a>,有react基础的同学可以先看官方文档，在开发过程中出现问题再看本文</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>JSX  for vue是支持v-model语法的，这一点比react的setState,体验感确实要好</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常写法</span></span><br><span class="line">&lt;input v-model=<span class="string">&quot;value&quot;</span> /&gt;  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span> <span class="comment">// jsx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定值写法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model:modelValue</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span>  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;[value,</span>&#x27;<span class="attr">modelValue</span>&#x27;]&#125; /&gt;</span></span> <span class="comment">// jsx</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 修饰符写法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model:modelValue.trim</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span>  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;[value,</span>&#x27;<span class="attr">modelValue</span>&#x27;,[&#x27;<span class="attr">trim</span>&#x27;]]&#125; /&gt;</span></span> <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>这个api与在vue中的表现形式一致</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show=<span class="string">&quot;isShow&quot;</span>&gt;&lt;<span class="regexp">/div&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&lt;div v-show=&#123;isShow&#125;&gt;&lt;/</span>div&gt; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue</span></span><br><span class="line">&lt;a-modal</span><br><span class="line">  :width=<span class="string">&quot;&#x27;400px&#x27;&quot;</span></span><br><span class="line">  :title=<span class="string">&quot;&#x27;设置组件名称&#x27;&quot;</span></span><br><span class="line"> &gt;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&lt;/a-modal&gt;</span><br><span class="line"><span class="comment">// jsx</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a-modal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&#123;</span>&quot;<span class="attr">400px</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">title</span>=<span class="string">&#123;</span>&quot;设置组件名称&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> &gt;</span></span></span><br><span class="line"><span class="language-xml">// ....</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>在jsx for vue中没有这个api，我们需要用jsx风格来实现v-if的效果</p><p>可以简单理解为jsx直接将if搬到html中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">&quot;isShow&quot;</span>&gt; ... &lt;<span class="regexp">/div&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&#123;isShow &amp;&amp; &lt;div&gt; ... &lt;/</span>div&gt;&#125; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件语法"><a href="#事件语法" class="headerlink" title="事件语法"></a>事件语法</h3><p>jsx for vue，所有的事件都按照react风格来</p><ul><li>所有事件有on开头</li><li>所有事件名称首字母大写</li></ul><p><strong>例如：@click &#x3D;&gt; onClick @change &#x3D;&gt; onChange @drop &#x3D;&gt; onDrop</strong> </p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>这里没有找到权威的资料，有小伙伴知道也请告知一下，目前建议大家通过原生JavaScript来实现vue事件修饰符的效果</p><p>.stop ： 阻止事件冒泡，在JSX中使用event.stopPropagation()来代替</p><p>.prevent：阻止默认行为，在JSX中使用event.preventDefault() 来代替</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="ref与reactive"><a href="#ref与reactive" class="headerlink" title="ref与reactive"></a>ref与reactive</h3><p>vue3的template会自动解析ref的<code>.value</code>,在jsx中ref的<code>.value</code>是不会被自动解析的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量 let type = ref(1)</span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; type &#125;&#125;&lt;<span class="regexp">/p&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&lt;p&gt;&#123;type.value&#125;&lt;/</span>p&gt; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>在jsx for vue中，props的语法使用的就是setup的语法，实际表现形式完全一致</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h3><p>同样与vue3的setup语法保持一致，注意子父方法需要符合react规范</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">emit(&#x27;changeVisible&#x27;, false) // 子组件 </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xxx</span> <span class="attr">onChangeVisible</span>=<span class="string">&#123;(params)</span> =&gt;</span> xxxFun(params)&#125;&gt;<span class="tag">&lt;/<span class="name">xxx</span>&gt;</span> // 父组件</span><br></pre></td></tr></table></figure><h2 id="solt如何写插槽"><a href="#solt如何写插槽" class="headerlink" title="solt如何写插槽"></a>solt如何写插槽</h2><p>这里以antd for vue的<a href="https://next.antdv.com/components/popover-cn">Popover 气泡卡片</a>，为例子</p><h3 id="Vue3语法"><a href="#Vue3语法" class="headerlink" title="Vue3语法"></a>Vue3语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-popover</span> <span class="attr">title</span>=<span class="string">&quot;Title&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-popover</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jsx-for-vue语法"><a href="#jsx-for-vue语法" class="headerlink" title="jsx for vue语法"></a>jsx for vue语法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-popover</span><br><span class="line">title=<span class="string">&quot;Title&quot;</span></span><br><span class="line">content=&#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span></span><br><span class="line">&lt;/a-popover&gt;</span><br></pre></td></tr></table></figure><h2 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// props: [&#x27;xx&#x27;],</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props,&#123; emit &#125;</span>) &#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>国内这方面资料比较少，查问题的时候注意vue版本，以及jsx的使用（render方式本文不适用）</li><li>如果代码里面存在问题，如果是ui框架，建议直接看react版本的代码，例如antdv的jsx版本直接看antd的实例代码</li><li>直接看jsx语法的项目代码，<a href="https://github.com/vkcyan/H5-YD.v2">H5-YD.v2</a></li><li>不接受杠精，例如写jsx为啥不去用使用react</li></ul><p>如果在学习过程中遇到了解决不了的问题，请到QQ群 530496237，大佬解答疑惑~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;http://www.vkcyan.top/FuGdH5QngblNApxjW3YV8ozIsO0J.png&quot; style=&quot;zoom:30%;&quot; /&gt;



&lt;p&gt;​	在2021年，&lt;code&gt;vue3&lt;/code&gt;发布了正式版本，并且经过一年的维护已经越来</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vite配置alias（设置别名）</title>
    <link href="https://vkcyan.github.io/2022/03/15/vite%E9%85%8D%E7%BD%AEalias/"/>
    <id>https://vkcyan.github.io/2022/03/15/vite%E9%85%8D%E7%BD%AEalias/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:16.257Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vite配置alias需要两步进行（TS项目）</p><p>1、修改vite.config.ts（让程序支持）</p><p>2、修改tsconfig.json（让编辑器支持）</p></blockquote><h2 id="修改vite配置"><a href="#修改vite配置" class="headerlink" title="修改vite配置"></a>修改vite配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_resolve</span>(<span class="params">dir: string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">resolve</span>(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="comment">// 配置项目别名</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">_resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改tsconfig-json"><a href="#修改tsconfig-json" class="headerlink" title="修改tsconfig.json"></a>修改tsconfig.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;importHelpers&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 不让同样的辅助函数重复的出现在多个文件中</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许对不包含默认导出的模块使用默认导入。</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// 非相对模块的导入可以相对于baseUrl或通过下文会讲到的路径映射来进行解析</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 配置导出路径（这里根据自己项目执行修改）</span></span><br><span class="line">      <span class="attr">&quot;@/stores*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/stores*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/components*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/components*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/modules*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/modules*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/utils*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/utils*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;element-plus/global&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.jsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.js&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li><p>修改后请重启编辑器</p></li><li><p>本文验证与2022年1月10号，mac，win双平台均有效，如果以上配置无效了，请查看相关api的改动</p></li><li><p>如果帮助你解决了问题，动动小手点个赞吧！:)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Vite配置alias需要两步进行（TS项目）&lt;/p&gt;
&lt;p&gt;1、修改vite.config.ts（让程序支持）&lt;/p&gt;
&lt;p&gt;2、修改tsconfig.json（让编辑器支持）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;修改vite配置</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.x 预渲染 Unable to prerender all routes错误排查</title>
    <link href="https://vkcyan.github.io/2022/03/15/vue3.x%20%E9%A2%84%E6%B8%B2%E6%9F%93%20Unable%20to%20prerender%20all%20routes%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/"/>
    <id>https://vkcyan.github.io/2022/03/15/vue3.x%20%E9%A2%84%E6%B8%B2%E6%9F%93%20Unable%20to%20prerender%20all%20routes%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:22:23.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​BOOS最近对前几年做的公司官网不太满意，觉得没有有效体现公司的优势，表明随着公司这几年的努力发展，我们将会接触到更大规模的合作伙伴，自然要展示更好的企业形象，所以官网重做。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>没有交互的静态页面，但是存在大量动画</li><li>需要支持良好的SEO</li></ul><p>​最早期的官网是<code>vue2.x</code> + <code>webpack3.x</code> + <code>vue-cli-plugin-prerender-spa</code>进行实现的，效果挺不错，很快各大搜索引擎就收录了我们的网站，所以这次我们打算沿用此方案，不过使用最新技术栈；</p><h3 id="为什么不用vite"><a href="#为什么不用vite" class="headerlink" title="为什么不用vite"></a>为什么不用vite</h3><p>​查阅vite的生态后，未找到类似<strong>prerender-spa</strong>的plugin，没办法支持预渲染，所以vite就被淘汰了。</p><h3 id="为什么不用unxtjs"><a href="#为什么不用unxtjs" class="headerlink" title="为什么不用unxtjs"></a>为什么不用unxtjs</h3><p>​我们的官网不具备大量的接口交互，用<strong>Nnxtjs</strong>多少有点杀鸡用牛刀了，并且还需要使用<strong>pm2</strong>部署代码，付出于收获不成正比，被淘汰。</p><h3 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h3><p>​我们部门是vue技术栈，团队不考虑react，通过以上排除法，只能使用<code>vue3.x</code> + <code>webpack5.x</code> + <code>prerender-spa</code>进行业务实现了。</p><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><h3 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h3><p>我们使用最新的<code>vue-cli</code>进行项目搭建，选择vue3版本，最近的cli默认就是webpack5</p><h3 id="安装预渲染插件"><a href="#安装预渲染插件" class="headerlink" title="安装预渲染插件"></a>安装预渲染插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i prerender-spa-plugin -D</span><br></pre></td></tr></table></figure><h3 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      config.<span class="property">plugins</span>.<span class="title function_">push</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PrerenderSPAPlugin</span>(&#123;</span><br><span class="line">          <span class="attr">staticDir</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">          <span class="attr">routes</span>: [<span class="string">&#x27;/xxx&#x27;</span>],</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>然后就出现一个错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[prerender-spa-plugin] Unable to prerender all routes!</span><br></pre></td></tr></table></figure><p>让我们一起抽丝剥茧，看看报错的具体原因。</p><h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2><p>因为报错提示很模糊，我们打开他的源码，在源码line144发生错误的地方增加log，了解具体报错。</p><img src="http://www.vkcyan.top/image-20220520134031605.png" alt="image-20220520134031605" style="zoom:50%;" /><p>再次执行<code>npm run build</code>，得到真正的错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Building for production...error TypeError: compilerFS.mkdirp is not a function</span><br></pre></td></tr></table></figure><p>​我们继续最终源码发现 <strong>compilerFS</strong> 由<strong>webpack</strong>进行提供，我们带着错误前往<strong>webpack</strong>官网查询错误，于是就找到了<a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#filesystems">Filesystems</a>，因为这个插件已经好几年没有更新，而我们当前使用的是webpack5，出现了API变更的情况。</p><p>​于此同时，根据错误提示，我们也在该库的issues中找到了历史讨论。</p><img src="http://www.vkcyan.top/image-20220520135141080.png" alt="image-20220520135141080" style="zoom:67%;" /><p>在讨论中，找到了两种解决方案</p><ol><li><strong>修改node_modules源码，使其兼容webpack5</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// From https://github.com/ahmadnassri/mkdirp-promise/blob/master/lib/index.js</span></span><br><span class="line"> <span class="keyword">const</span> mkdirp = <span class="keyword">function</span> (<span class="params">dir, opts</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\ndir&#x27;</span>, dir, opts, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       compilerFS.<span class="title function_">mkdirp</span>(dir, opts, <span class="function">(<span class="params">err, made</span>) =&gt;</span> err === <span class="literal">null</span> ? <span class="title function_">resolve</span>(made) : <span class="title function_">reject</span>(err))</span><br><span class="line">     &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">       compilerFS.<span class="title function_">mkdir</span>(dir, opts, <span class="function">(<span class="params">err, made</span>) =&gt;</span> err === <span class="literal">null</span> ? <span class="title function_">resolve</span>(made) : <span class="title function_">reject</span>(err))</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用已经被修改的库，感谢这位大哥</strong></li></ol><p><img src="http://www.vkcyan.top/image-20220520135437289.png" alt="image-20220520135437289"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @dreysolano/prerender-spa-plugin</span><br></pre></td></tr></table></figure><p>我们使用第二种方案，重新修改<strong>vue.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>)</span><br><span class="line">+ <span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;@dreysolano/prerender-spa-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后再次打包测试</p><p><img src="http://www.vkcyan.top/image-20220520135659280.png" alt="image-20220520135659280"></p><p>打包成功，通过启动本地服务器<strong>curl</strong>命令测试得知，SEO功能正常，未发现问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​使用<strong>prerender-spa-plugin</strong>打包出现报错<code>[prerender-spa-plugin] Unable to prerender all routes!</code>，更换库为**@dreysolano&#x2F;prerender-spa-plugin**，即可解决问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	BOOS最近对前几年做的公司官网不太满意，觉得没有有效体现公司的优势，表明随着公司这几年的努力发展，我们将会接触到更大规模的合作伙伴，自</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>写给前端新人的nginx教程</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84nginx%E6%95%99%E7%A8%8B/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84nginx%E6%95%99%E7%A8%8B/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:07.710Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​我相信大部分前端新手是接触不到部署相关的工作的，一般都是将代码包交给后端，或者通过CI，FTP完成代码的更新，至于代码如何部署，如何从域名到前端代码包，很多前端仔没有实际操作过，自然是不知道的，这篇文章就是要帮助未接触过部署的人学会在服务器上线部署一个前端项目，在这个主线中带大家慢慢的熟悉nginx</p><p>​记得在2017年暑假，那时候大二还没开学，当时我只会写一点简单代码，linux和运维完全没接触过，一冲动在阿里云购买了一个服务器，外加一个域名，好像还是<code>xiaowuasy.top</code>,现在已经不能访问了；那时候单纯的兴趣使然，想搭建一个网站，因为实力不足，也不知道求助别人，前前后后折腾了一个月，最终竟然成功在服务器上面部署了wordpress服务，后面域名备案也成功了；</p><p>​这段经历是曲折的，依稀记得在盛夏的傍晚，我坐在慢慢暗下来的客厅，头上还残留着因为紧张流下的细汗，眼睛因为专注而干涩，面对不太看得懂的文档，一遍一遍尝试；我自然不希望大家在这上面浪费时间，这也是写这篇文章的初衷</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>一个云服务器，阿里云，腾讯云，xx云都行，首次购买或者学生认证都是有很大的优惠（本文以阿里云为例子）</li><li>了解linux基础命令，也就是对各种文件的增删改查</li><li>本教程基于CentOS 7.5系统，如果是图形化界面，或者其他系统，命令可能不完全一致，但是流程都是一致的，建议看对应教程</li></ul><p>如果linux基础命令不会。下面的也不用看了，立刻去学</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><p>通过<strong>远程工具</strong>（CRT，Xshell）或者自带的<strong>远程连接</strong>进入自己的服务器，连接方式选择<strong>公网ip</strong></p><p><img src="http://www.vkcyan.top/FkugXnbgmCdIOX-iAYI3UYUjmv7a.png" alt="image-20220113105611506"></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><blockquote><p>CentOS自带yum命令，这个命令很关键，自行了解</p></blockquote><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx // 终于遇到需要确认的，直接确认即可</span><br></pre></td></tr></table></figure><p>安装完成后,主机中便有了nginx服务，相关命令如下，启动完成后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>启动完成后，浏览器访问<strong>公网IP</strong>,就可以访问到nginx的默认主页</p><p><img src="http://www.vkcyan.top/FtVofGcUY5HFXsoI2PpMqNNXberG.png"></p><p>到这一步就算是nginx部署成功了</p><h3 id="nginx相关文件路径"><a href="#nginx相关文件路径" class="headerlink" title="nginx相关文件路径"></a>nginx相关文件路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/nginx/ // 配置文件</span><br><span class="line">/usr/share/nginx/ // 默认前端代码存放处</span><br></pre></td></tr></table></figure><p>​默认配置在<code>/etc/nginx/nginx.conf</code>,nginx根据默认配置，监听80端口，80端口指定了&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html这个文件夹，于是你访问公网ip -&gt; 公网ip:80 -&gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html,于是”Welcome to <strong>CentOS</strong>“便呈现在你的面前</p><p>​如果你希望不显示默认的页面，而是显示你自己写的项目，直接替换<code>/etc/nginx/nginx.conf</code>中的<strong>root</strong>,字段为自己程序包的路径</p><img src="http://www.vkcyan.top/FiqSDRnFVl2vLwpIGa7FMtv7QPkY.png" style="zoom: 33%;" /><h2 id="在6666端口上搭建一个站点"><a href="#在6666端口上搭建一个站点" class="headerlink" title="在6666端口上搭建一个站点"></a>在6666端口上搭建一个站点</h2><p>​我们的代码除了部署在默认80端口上面，还可以其他端口上，例如8888，7777，等等</p><p>​接下来我们就在一个自定义的端口上面部署一个站点</p><p>​这里我们需要注意<code>nginx.conf</code>中的一行配置</p><blockquote><p>含义：在&#x2F;etc&#x2F;nginx&#x2F;conf.d下面所有nginx的配置文件都会自动生效</p></blockquote><img src="http://www.vkcyan.top/Ft5oDDtWUipvEf-tFA5XNcR8N87L.png" style="zoom:33%;" /><p>根据配置文件的提示我们到目标文件夹下面，建立test.conf，名字无所谓，配置文件里面是通配符匹配的</p><p>并通过vi 写入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       7777;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    root/usr/share/nginx/test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再去文件夹<code>/usr/share/nginx/test</code>下建立一个index.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span> </span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure><p>将一下内容放入index.html种</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是7777端口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后重启nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>访问我们部署的项目ip:7777</p><p>然后你会发现访问不了，最终访问超时(&#x3D;&#x3D;)，这是因为服务器限制了可访问端口，此时需要到云管理后台设置安全组</p><img src="http://www.vkcyan.top/FsVXXP3i-gLk0rNFYdlPWxCGPBxl.png" style="zoom:50%;" /><p>在阿里云后台增加安全组规则</p><p><img src="http://www.vkcyan.top/Fv_L-8z8yfwLO0N69zahJp0L2vhf.png"></p><p>之后就可以正常访问了！</p><p><img src="http://www.vkcyan.top/Fq0nB1GSEzI1FJN-f0sf66YXVl1T.png">至此，便完成了第一个nginx项目的部署</p><h2 id="部署一个vue项目"><a href="#部署一个vue项目" class="headerlink" title="部署一个vue项目"></a>部署一个vue项目</h2><p>​通过上面的例子，我们已经可以完成一个自定义站点的部署了，那么真实项目呢，例如将一个vue项目部署到3006端口</p><ol><li>首先编写xxx.conf</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       3006;</span><br><span class="line">    server_name  _;</span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 开启gzip相关配置</span></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_static on;</span><br><span class="line">    gzip_min_length 2k;</span><br><span class="line">    gzip_buffers 4 8k;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/x-icon application/javascript;</span><br><span class="line">    gzip_comp_level 9;</span><br><span class="line">    gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"><span class="comment"># 站点代码路径</span></span><br><span class="line">    root         /usr/share/nginx/client;</span><br><span class="line"><span class="comment"># 单页应用必须设置（刷新404问题）</span></span><br><span class="line">    location / &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>将打包之后的代码，通过FTP上传代码到目标文件夹<code>/usr/share/nginx/client</code>（注意文件夹名称）</p><p><a href="https://www.filezilla.cn/">ftp</a></p></li><li><p>重启nginx <code>nginx -s reload</code></p></li></ol><p>这边完成了一个站点的部署！是不是很简单</p><p><img src="http://www.vkcyan.top/FjjTa2vHly5zv0-wvUdExapUmAhd.png"></p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>​直接拿<strong>ip+端口</strong>给别人访问是不太好的，大家都给自己站点绑定上一个好记忆的域名，那么nginx如何绑定域名呢？</p><ol><li>购买一个域名<a href="https://wanwang.aliyun.com/domain/%EF%BC%8C%E5%A4%87%E6%A1%88%E5%9F%9F%E5%90%8D%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%B5%81%E7%A8%8B%E5%BE%88%E9%BA%BB%E7%83%A6%EF%BC%8C%E9%9C%80%E8%A6%8110-30%E5%A4%A9">https://wanwang.aliyun.com/domain/，备案域名，这个流程很麻烦，需要10-30天</a></li><li>备案完成后，域名就可以使用了</li></ol><p>我们需要去修改我们的nginx配置，将server_name的值修改为需要绑定的域名即可；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       3006;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">// ....</span><br></pre></td></tr></table></figure><h2 id="增加https支持"><a href="#增加https支持" class="headerlink" title="增加https支持"></a>增加https支持</h2><ol><li>申请一个https证书，<a href="https://yundunnext.console.aliyun.com/?spm=a2c4g.11186623.0.0.4a7b9d1d55eAnw&p=cas#/certExtend/free">数字证书管理</a>，以阿里云为例子，国内云厂商都有</li><li>将证书放在服务器中你可以记得住的文件夹里面</li><li>修改nginx配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123; // <span class="comment"># 将当前域名的http自动打到https</span></span><br><span class="line">        listen  80;</span><br><span class="line">        server_name     xxx.com;</span><br><span class="line">        rewrite ^(.*)$  https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">    ssl_certificate xxxx/yy.pem; <span class="comment"># 证书</span></span><br><span class="line">    ssl_certificate_key xxxx/yy.key; <span class="comment"># 证书秘钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ssl验证相关配置</span></span><br><span class="line">    ssl_session_timeout  5m;    <span class="comment">#缓存有效期</span></span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    <span class="comment">#加密算法</span></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    <span class="comment">#安全链接可选的加密协议</span></span><br><span class="line">    ssl_prefer_server_ciphers on;   <span class="comment">#使用服务器端的首选算法</span></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line">    </span><br><span class="line">root   /usr/share/nginx/client;</span><br><span class="line">    location / &#123;   </span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​虽然部署一个站点，仅仅是用到nginx，但是涉及到的知识点还是很多的</p><p>​如果遇到了错误，一定要仔细检查报错信息，问题百度百度基本都能得到答案，如果实在搞不定，直接重做云服务器系统，重头再来；遇到问题并把它解决了，便成了你的技能</p><p>​一个有经验的开发人员部署一个站点，可能半小时就弄完了，想要熟练的话，一定要多练习多实践，从0到1部署一个项目还是一件很酷的事情！</p><p>如果搭建中遇到了解决不了的问题，请到QQ群 530496237，大佬解答疑惑~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​	我相信大部分前端新手是接触不到部署相关的工作的，一般都是将代码包交给后端，或者通过CI，FTP完成代码的更新，至于代码如何部署，如何从域</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器读取xls并生成二维码下载到本地</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96xls%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B9%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96xls%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B9%B6%E4%B8%8B%E8%BD%BD/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:04.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一次普通的技术需求会议</p><p>​项目经理首先发言 我们技术这边需要将xls表格中的几千条数据变成二维码，并且中间镶嵌logo，图片底部放置编号，由于xls表格数据私密，不能通过第三方完成</p><p>​平常这个事情都是后端处理的，前端就是来摸鱼的，但是这次一反常态，后端脸黑了，带样式搞不来，脚一蹬，直接装死</p><p>​项目经理用期盼的眼神看着我，顿时我紧张了起来，眼神飘忽，我已经好多年没搞过node了啊！！会议室都沉默了，在项目经理不断精神攻击下，后端装死的情况下，看来注定要大前端来拯救世界了，毕竟JavaScript万能语言，俺来试试吧！</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>​以上情节纯属虚构，但是需求确实是这样的，虽然好几年没碰过node，好歹年轻记性好，用过的基本都还记得，调研实现方案上没出现太多问题，有如下方案</p><h3 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h3><p>地址：<a href="https://github.com/puppeteer/puppeteer">https://github.com/puppeteer/puppeteer</a></p><p>​使用基于node环境的puppeteer，进行二维码绘制，图片绘制，是JavaScript开发者面对此类需求的主流选择</p><h3 id="node-canvas"><a href="#node-canvas" class="headerlink" title="node-canvas"></a>node-canvas</h3><p>地址：<a href="https://github.com/Automattic/node-canvas">https://github.com/Automattic/node-canvas</a></p><p>​同样是在服务端完成渲染，但是这个库依赖node-gyp，如果不安装python2，那安装过程懂得都懂，不过这也是很不错的方案</p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>​通过浏览器canvas绘制，然后下载下来，会有刷刷刷下载图片的炫酷效果</p><p>很明显有刷刷刷下载图片炫酷效果的方案更好，所以就选择你了 <strong>浏览器</strong>方案！</p><h2 id="问题分解"><a href="#问题分解" class="headerlink" title="问题分解"></a>问题分解</h2><p>确定了技术方案，就要考虑具体实现了</p><ul><li>JavaScript读取execl文件，并处理成理想格式</li><li>将读取到的execl中的网址字段生成一张二维码</li><li>将二维码写入canvas，在其中间加上logo，并在底部加一行文字</li><li>将canva转化为DataURL，下载它</li><li>不断递归生成，直到xls数据全部处理完毕</li></ul><p><strong>理论存在，实践开始</strong>！</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="启动一个本地服务器"><a href="#启动一个本地服务器" class="headerlink" title="启动一个本地服务器"></a>启动一个本地服务器</h3><p>首先我们通过VScode <strong>Live Server</strong> 启动一个本地服务器</p><p>这里有好奇宝宝要问了，为啥第一步是这？</p><p>答：因为浏览器是访问不了电脑的文件系统的，所以只能通过启动一个本地服务器的方案，来读取我们的资源文件</p><h3 id="创建html，引入资源库"><a href="#创建html，引入资源库" class="headerlink" title="创建html，引入资源库"></a>创建html，引入资源库</h3><p>分析需要用到的第三方开源库</p><ul><li>解析xls <a href="https://github.com/sheetjs/sheetjs">https://github.com/sheetjs/sheetjs</a></li><li>生成QRcode <a href="https://github.com/soldair/node-qrcode">https://github.com/soldair/node-qrcode</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>生成二维码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./qrcode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./xlsx.full.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于生成载体 最终生成的图片大小，按自己的需求来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">height</span>=<span class="string">&quot;310&quot;</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ctx = <span class="title function_">initCanvas</span>(); <span class="comment">// 获取ctx实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化画布</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">initCanvas</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#fff&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">260</span>, <span class="number">310</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> ctx;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解析xls文件"><a href="#解析xls文件" class="headerlink" title="解析xls文件"></a>解析xls文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readWorkbookFromRemoteFile</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res 为实际解析代码 [&#123;key:&#x27;xxxx&#x27;,value:&#x27;xxxx&#x27;&#125;,....]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取xls信息，并处理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readWorkbookFromRemoteFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://127.0.0.1:5500/xls.xls&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.<span class="property">responseType</span> = <span class="string">&quot;arraybuffer&quot;</span>;</span><br><span class="line">        xhr.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                <span class="keyword">var</span> workbook = <span class="variable constant_">XLSX</span>.<span class="title function_">read</span>(data, &#123; <span class="attr">type</span>: <span class="string">&quot;array&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取实际表格长度（去除表头）</span></span><br><span class="line">                <span class="keyword">let</span> carryLen = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>]) &#123;</span><br><span class="line">                    <span class="keyword">const</span> ele = workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>][key];</span><br><span class="line">                    <span class="keyword">if</span> (key.<span class="title function_">includes</span>(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">                        carryLen++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析数据</span></span><br><span class="line">                <span class="keyword">let</span> xls = [];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= carryLen; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> data = workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>];</span><br><span class="line">                    xls.<span class="title function_">push</span>(&#123;</span><br><span class="line">                        <span class="attr">key</span>: data[<span class="string">&quot;A&quot;</span> + i].<span class="property">w</span>,</span><br><span class="line">                        <span class="attr">value</span>: data[<span class="string">&quot;B&quot;</span> + i].<span class="property">w</span>,</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_">resolve</span>(xls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里肯定也有细心的好奇宝宝问，为啥循环体中的<code>i</code>为2呢?</p><p>答案：因为表格中的A1，B1为表格的第一行，而第一行是表头，要去除</p><h4 id="将链接生成为二维码"><a href="#将链接生成为二维码" class="headerlink" title="将链接生成为二维码"></a>将链接生成为二维码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 生成二维码</span></span><br><span class="line">    <span class="title class_">QRCode</span>.<span class="title function_">toDataURL</span>(</span><br><span class="line">        <span class="string">&#x27;xxxxxxx&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="attr">margin</span>: <span class="number">3</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">error, url</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">            <span class="keyword">const</span> code = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">            code.<span class="property">src</span> = url;</span><br><span class="line">            code.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                ctx.<span class="title function_">drawImage</span>(code, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="title function_">resolve</span>(code);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="写入中间logo"><a href="#写入中间logo" class="headerlink" title="写入中间logo"></a>写入中间logo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> code = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    code.<span class="property">src</span> = <span class="string">&quot;http://127.0.0.1:5500/logo.jpeg&quot;</span>;</span><br><span class="line">    code.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ctx.<span class="title function_">drawImage</span>(code, <span class="number">260</span> / <span class="number">2</span> - <span class="number">20</span>, <span class="number">260</span> / <span class="number">2</span> - <span class="number">20</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="写入底部文字"><a href="#写入底部文字" class="headerlink" title="写入底部文字"></a>写入底部文字</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入编号</span></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;24px Arial&quot;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#000&quot;</span>;</span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">ctx.<span class="property">textBaseline</span> = <span class="string">&quot;middle&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(xls[index].<span class="property">value</span>, <span class="number">130</span>, <span class="number">270</span>);</span><br></pre></td></tr></table></figure><h3 id="canvas转化为图片，并下载到本地"><a href="#canvas转化为图片，并下载到本地" class="headerlink" title="canvas转化为图片，并下载到本地"></a>canvas转化为图片，并下载到本地</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于预览</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>).<span class="title function_">toDataURL</span>(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// 生成一个a元素</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&quot;click&quot;</span>); <span class="comment">// 创建一个单击事件</span></span><br><span class="line">a.<span class="property">download</span> = xls[index].<span class="property">value</span>; <span class="comment">// 将a的download属性设置为我们想要下载的图片名称，若name不存在则使用‘下载图片名称’作为默认名称</span></span><br><span class="line">a.<span class="property">href</span> = url; <span class="comment">// 将生成的URL设置为a.href属性</span></span><br><span class="line">a.<span class="title function_">dispatchEvent</span>(event); <span class="comment">// 触发a的单击事件</span></span><br></pre></td></tr></table></figure><p>第一张图片，完成生成</p><img src="http://www.vkcyan.top/image-20220424154056800.png" alt="image-20220424154056800" style="zoom: 67%;" /><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><p>我们修改发起逻辑代码，逻辑尾部增加递归调用就好啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readWorkbookFromRemoteFile</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">createImg</span>(res, <span class="number">0</span>); <span class="comment">// 递归生成</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// 实际生成逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createImg</span>(<span class="params">xls, index</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 生成二维码</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 生成中间logo</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 写入编号</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 下载图片</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xls.<span class="property">length</span> &gt; index + <span class="number">1</span>) &#123;</span><br><span class="line">                ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#fff&quot;</span>; </span><br><span class="line">                ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">260</span>, <span class="number">310</span>); <span class="comment">// 初始化画布</span></span><br><span class="line">                <span class="title function_">createImg</span>(xls, index + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">20</span>); <span class="comment">// 爱惜机器，加个延时，也可以去掉延时，体会机器的极致速度</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="http://www.vkcyan.top/8my3l-a8ef0.gif" alt="8my3l-a8ef0"></p><p>至此，终于实现了刷刷刷下载图片炫酷效果，此时可以脑部一段很快的rap，如果华佗再世，崇洋可以医治，外邦来学汉字……………</p><p>最终生成的文件</p><img src="http://www.vkcyan.top/image-20220424160255476.png" alt="image-20220424160255476" style="zoom:67%;" /><h2 id="最终代码地址"><a href="#最终代码地址" class="headerlink" title="最终代码地址"></a>最终代码地址</h2><blockquote><p>一定要针对该项目启动一个本地服务器，否则资源无法访问</p></blockquote><p><a href="https://github.com/vkcyan/web-Output-QRcode">web-Output-QRcode</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​首先纠正一点，JavaScript开发者针对生成二维码类似的任务，首选肯定是<code>puppeteer</code>，使用浏览器绕个弯这种实现方案，多少带点科研味道，长期项目自然是不推荐的</p><p>​带着学习的态度去完成需求，并且不断优化代码、总结问题，将遇到的未知知识点学会，（比如创建a链接，自动触发点击事件），这才是本文的目的。</p><p>​感谢阅读，觉得还不错就点个赞吧~</p><p>​QQ交流群：530496237 大佬解答疑惑~（内有微信群二维码）</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;一次普通的技术需求会议&lt;/p&gt;
&lt;p&gt;​	项目经理首先发言 我们技术这边需要将xls表格中的几千条数据变成二维码，并且中间镶嵌logo，图片</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>三个案例带你理解Event Loop流程</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E8%81%8A%E4%B8%80%E8%81%8A%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8AEventLoop/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E8%81%8A%E4%B8%80%E8%81%8A%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8AEventLoop/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T08:02:01.480Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么-JavaScript-需要-Event-Loop"><a href="#为什么-JavaScript-需要-Event-Loop" class="headerlink" title="为什么 JavaScript 需要 Event Loop"></a>为什么 JavaScript 需要 Event Loop</h2><p> JavaScript 在创建之初就确认了一点，JavaScript 是一门单线程语言，因为 JavaScript 主要提供用户互动以及操作 DOM，假定存在两个线程，同时对一个 Dom 进行操作，那究竟以谁为准呢，为了避免这种复杂性，JavaScript 确认了单线程这个核心概念</p><p> 在单线程中，除了 JavaScript 本身的逻辑之外，还存在一些 IO 操作，例如从服务端获取数据，在单线程中就需要等待结果的返回才能继续下面的逻辑，这时候机器是挂起状态，为了避免这个低效问题，这里就引入了同步任务与异步任务的概念，依旧是是单线程，但是有些任务不等待其运行结果</p><p> 于是同步任务都在函数执行栈（Stack）上执行，所有的异步任务，在有了运行结果之后，就会将其放入任务队列（callback queue），如果 Stack 中任务执行完毕，就会再去检查任务队列是否存在待执行的回调任务，将其任务放入 Stack，再执行，这里就会不断循环此操作</p><p> Stack 执行 - Stack 执行完毕 - 检查任务队列 - 将任务加入 Stack - Stack 执行，这样重复的过程就需要 Event Loop 来持续不断的循环检查任务队列，确保异步任务被准时加入到 Stack</p><p><img src="http://www.vkcyan.top/Fr09Z8JDsWNH_CThK4l2piOyaagp.png"></p><h2 id="相关名词介绍"><a href="#相关名词介绍" class="headerlink" title="相关名词介绍"></a>相关名词介绍</h2><p><strong>函数执行栈（Stask）</strong>：遵循后进先出原则，同步函数执行栈</p><p><strong>webAPIs</strong>：异步任务的发起者，事件是首先进入 stack，例如 click，change，再将 callback 加入任务队列</p><p><strong>回调队列（callback queue）</strong>：也可以被称为任务队列，回调函数到达了执行时机就会进入任务队列，他们将会被 Event Loop 持续打入函数执行栈</p><h2 id="事件循环解析"><a href="#事件循环解析" class="headerlink" title="事件循环解析"></a>事件循环解析</h2><p>我们用 Event Loop 来解释一个简单的 demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">consoleo.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure><p>我相信大部分人都知道，这里打印的顺序为 1 3 2，下面我们用事件循环的流程来说明为什么是这个结果</p><p><strong>注： cb 为 callback</strong></p><ol><li><p><code>console.log(&#39;hi&#39;)</code>，进栈 执行 出栈，<strong>打印 1</strong></p></li><li><p><code>setTimeout</code>进栈 执行 cb 加入异步队列 自身出栈</p></li><li><p><code>console.log(&#39;end&#39;)</code>，进栈 执行 出栈 <strong>打印 3</strong></p></li><li><p>5s 后，cb 加入任务队列，event Loop 检查当前执行栈是否存在函数，检查发现不存在，将 cb 加入函数执行栈</p></li><li><p><code>cb</code>进栈 执行 出栈 <strong>打印 2</strong></p></li></ol><p> 我们通过 event Loop 的角度进行解析，就能很轻易的解释为什么代码执行顺序是 1 3 2，这是非常简单的场景，接下来我们会分析一些更加有难度的代码</p><h2 id="关于宏任务与微任务"><a href="#关于宏任务与微任务" class="headerlink" title="关于宏任务与微任务"></a>关于宏任务与微任务</h2><p> 通过上面的介绍，我相信大部分人都事件循环有一个基础的认知的，但是与以上我们通过简单的示例，演示了异步代码在事件循环中的运行流程，并没有涉及宏任务与微任务，这两货是什么呢，为什么要在这里出现？</p><p><strong>首先，宏任务（macrotask），微任务（microtask）都是异步任务</strong></p><p>宏任务：<code>setTimeout</code> <code>setInterval</code> <code>setImmediate</code> <code>I/O 键盘事件</code> <code>网络事件</code> <code>UI rendering</code></p><p>微任务：<code>pormise</code> <code>MutationObserver</code> <code>process.nextTick</code></p><p>他们在执行层面上存在一定差异</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br></pre></td></tr></table></figure><p>结果为 <code>script start</code> <code>script end</code> <code>promise1</code> <code>promise2</code> <code>setTimeout</code></p><p>pormise 与 setTimeout 虽然都是异步任务，但是上图的代码你会发现，promise 仿佛插队了，这便是宏任务与微任务在任务队列最大的不同之处</p><p> <strong>event Loop 在事件循环中,首先解析 script，将宏任务加入宏任务队列，将微任务加入微任务队列，栈空了之后，执行当前微任务，第一轮事件循环结束</strong></p><p><strong>在第二轮事件循环中，首先执行宏任务 callback 中的第一个，执行完毕，栈空了之后，再执行当前微任务，后面同理</strong></p><img src="http://www.vkcyan.top/FqUHDZ_5cScznXGrkeEfGhaXCWUw.png" style="zoom: 50%;" /><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;g&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f&quot;</span>);</span><br></pre></td></tr></table></figure><p>大家可以先别看答案，自己先尝试将答案推算出来</p><h4 id="第一轮事件循环"><a href="#第一轮事件循环" class="headerlink" title="第一轮事件循环"></a>第一轮事件循环</h4><p><code>console.log(&quot;a&quot;);</code>进入栈 执行 出栈 <strong>打印 a</strong></p><p><code>setTimeout</code>进入栈 <strong>callback 加入宏任务队列</strong> 本身出栈</p><p><code>new Promise</code> 进入栈 执行</p><p><code>console.log(&quot;c&quot;);</code>进入栈 执行 出栈 <strong>打印 c</strong></p><p><code>new Promise.then</code> 进入微任务队列</p><p><code>console.log(&quot;f&quot;);</code>进入栈 执行 出栈 <strong>打印 f</strong></p><p><code>new Promise</code> 出栈</p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><code>console.log(&quot;d&quot;)</code>进入栈 执行 出栈 <strong>打印 d</strong></p><p><code>console.log(&quot;e&quot;)</code>进入栈 执行 出栈 <strong>打印 e</strong></p><p><strong>–微任务执行完毕 第一轮事件循环完毕–</strong></p><p>结果为 a c f d e</p><h4 id="第二轮事件循环"><a href="#第二轮事件循环" class="headerlink" title="第二轮事件循环"></a>第二轮事件循环</h4><p>第一轮循环中 setTimeout 在宏任务中，开始执行</p><p><code>console.log(&quot;b&quot;)</code> 进入栈 执行 出栈 <strong>打印 b</strong></p><p><code>setTimeout</code>进入栈 <strong>callback 加入宏任务队列</strong> 本身出栈</p><p><code>new Promise</code> 进入栈 执行</p><p><code>new Promise.then</code> 进入微任务队列</p><p><code>new Promise</code> 出栈</p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><code>console.log(&quot;h&quot;)</code>进入栈 执行 出栈 <strong>打印 h</strong></p><p><strong>–微任务执行完毕 第二轮事件循环完毕–</strong></p><p>结果为 b h</p><h4 id="第三轮事件循环"><a href="#第三轮事件循环" class="headerlink" title="第三轮事件循环"></a>第三轮事件循环</h4><p>第二轮循环中 setTimeout 在宏任务中，开始执行</p><p><code>console.log(&quot;g&quot;);</code>进入栈 执行 出栈 <strong>打印 g</strong></p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><strong>–微任务队列为空 第三轮事件循环完毕–</strong></p><p>结果为 g</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><strong>a c f d e b h g</strong></p><h3 id="宏-x2F-微任务的结论"><a href="#宏-x2F-微任务的结论" class="headerlink" title="宏&#x2F;微任务的结论"></a>宏&#x2F;微任务的结论</h3><p>通过上面三个例子，我们可以得出以下结论</p><ul><li><p>函数执行栈中如果还存在函数，则等待其结束，才会继续事件循环</p></li><li><p>Event Loop 先执行同步任务，再微任务，下一轮循环，宏任务加入队列，执行，所以说先微任务，再宏任务是合理的</p></li><li><p>单次 Event Loop 中，只会执行一次宏任务，但是微任务可以一次执行多个</p></li></ul><h2 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h2><p><a href="https://juejin.cn/post/6969028296893792286">做一些动图，学习一下 EventLoop</a> 通过动图看 Event Loop 更加便于理解</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p> JavaScript 单线程语言的特性注定其需要异步队列，让网页交互体验上更加友好，对于开发来说，需要尽量了解其特性</p><p> 首先我们需要了解事件循环机制，搞懂代码执行栈 异步队列的概念，再后面搞懂宏任务与微任务，读懂异步队列的运行机制，这样基本上就可以解决大部分 Event Loop 问题，了解宏任务 微任务 将会对代码执行顺序有更加底层的理解，这样就可以解决</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;为什么-JavaScript-需要-Event-Loop&quot;&gt;&lt;a href=&quot;#为什么-JavaScript-需要-Event-Loop&quot; class=&quot;headerlink&quot; title=&quot;为什么 JavaScript 需要 Event Loop&quot;&gt;&lt;/a&gt;为什</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
