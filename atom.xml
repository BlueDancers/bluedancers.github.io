<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>vkcya Blog</title>
  
  
  <link href="https://vkcyan.github.io/atom.xml" rel="self"/>
  
  <link href="https://vkcyan.github.io/"/>
  <updated>2022-05-12T01:22:41.901Z</updated>
  <id>https://vkcyan.github.io/</id>
  
  <author>
    <name>vkcyan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://vkcyan.github.io/2022/05/23/%E9%92%88%E5%AF%B9%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/"/>
    <id>https://vkcyan.github.io/2022/05/23/%E9%92%88%E5%AF%B9%E5%85%8D%E7%99%BB%E5%BD%95%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E8%B7%B5%E4%B8%8E%E6%80%9D%E8%80%83/</id>
    <published>2022-05-23T06:29:52.233Z</published>
    <updated>2022-05-12T01:22:41.901Z</updated>
    
    <content type="html"><![CDATA[<h1 id="针对打通免登录的一些实践与思考"><a href="#针对打通免登录的一些实践与思考" class="headerlink" title="针对打通免登录的一些实践与思考"></a>针对打通免登录的一些实践与思考</h1><p>我最近一直再想一句话，听用户说，但是不要照着做。这人</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;针对打通免登录的一些实践与思考&quot;&gt;&lt;a href=&quot;#针对打通免登录的一些实践与思考&quot; class=&quot;headerlink&quot; title=&quot;针对打通免登录的一些实践与思考&quot;&gt;&lt;/a&gt;针对打通免登录的一些实践与思考&lt;/h1&gt;&lt;p&gt;我最近一直再想一句话，听用户说，但是</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JS数据结构与算法</title>
    <link href="https://vkcyan.github.io/2022/03/15/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    <id>https://vkcyan.github.io/2022/03/15/JS%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T06:55:48.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JS数据结构与算法"><a href="#JS数据结构与算法" class="headerlink" title="JS数据结构与算法"></a>JS数据结构与算法</h1><p>数据结构为算法提供服务，算法围绕数据结构操作</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><ul><li>一个函数用大O表示，比如O(1)，O(n)，O(logN)…</li><li>定性描述该算法的运行时间</li></ul><img src="http://www.vkcyan.top/FjHw8lvXEnVrgeNMLJ15aEQWZX7G.png" style="zoom:30%;" /><h3 id="O-1"><a href="#O-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>每次执行改逻辑的时候，之后执行一次，复杂度不会随着时间的变化而变化</p><h3 id="O-n"><a href="#O-n" class="headerlink" title="O(n)"></a>O(n)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 0; i &lt; n; i += 1) &#123;</span><br><span class="line">console.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for循环里面的代码执行n次</p><h3 id="O-1-O-n-x3D-O-n"><a href="#O-1-O-n-x3D-O-n" class="headerlink" title="O(1)  + O(n) &#x3D; O(n)"></a>O(1)  + O(n) &#x3D; O(n)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line">a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个时间复杂度先后排列就需要相加，相加的情况下低的的忽略不计，取更高的时间复杂度</p><h3 id="O-n-O-n-x3D-O-n-2"><a href="#O-n-O-n-x3D-O-n-2" class="headerlink" title="O(n)  * O(n) &#x3D; O(n ^ 2)"></a>O(n)  * O(n) &#x3D; O(n ^ 2)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i, j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个时间复杂度嵌套排列，时间复杂度就需要相乘</p><h3 id="O-logN"><a href="#O-logN" class="headerlink" title="O(logN)"></a>O(logN)</h3><p>$$<br>对数函数：如果ax&#x3D;N（a&gt;0，且a≠1），那么数x叫做以a为底N的对数，记作x&#x3D;loga<br>$$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span>(i &lt; n) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">i *= <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的logN以2为底数，目的是就是求2的多少次方为N，  上面的代码while循环每次*2，实际上就是求2的多少次方为N，所以时间复杂度就是O(logN)</p><h2 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h2><ul><li>一个函数用O表示，比如O(1)，O(n)，O(n^2)</li><li>算法在运行过程中临时占用存储空间的大小的量度</li></ul><h3 id="O-1-1"><a href="#O-1-1" class="headerlink" title="O(1)"></a>O(1)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">i += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>声明了变量i，单个变量所占用的内存为1，所以空间复杂度为O(1)</p><h3 id="O-n-1"><a href="#O-n-1" class="headerlink" title="O(n)"></a>O(n)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">list.<span class="title function_">push</span>(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明了变量list，通过循环我们增加了n个值，相当于占用了n个内存单元，所以这段代码的空间复杂度为O(n)</p><h3 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> matrix = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">1</span>) &#123;</span><br><span class="line">  matrix.<span class="title function_">push</span>([])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j += <span class="number">1</span>) &#123;</span><br><span class="line">matrix[i].<span class="title function_">push</span>(j)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n^2)实际上就是一个矩阵，矩阵的本质就是一个二维数据，存储了n的二次方的变量</p><h2 id="小知识"><a href="#小知识" class="headerlink" title="小知识"></a>小知识</h2><h3 id="调试工具栏每个图标的作用"><a href="#调试工具栏每个图标的作用" class="headerlink" title="调试工具栏每个图标的作用"></a>调试工具栏每个图标的作用</h3><img src="http://www.vkcyan.top/FvPzD6xek5NzfA-Sa2wAfTKkT8nH.png" style="zoom:50%;" /><p>第一个箭头：程序运行到下一个断点，没有断点，程序执行完毕</p><p>第二个图标：一行一行执行代码</p><p>第三个图标：当前处如果调用了fun，点击此图标就会进入函数里面</p><p>第四个图标：点击跳出当前函数</p><p>第五个图标：重启调试</p><p>第六个图标：停止调试</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;JS数据结构与算法&quot;&gt;&lt;a href=&quot;#JS数据结构与算法&quot; class=&quot;headerlink&quot; title=&quot;JS数据结构与算法&quot;&gt;&lt;/a&gt;JS数据结构与算法&lt;/h1&gt;&lt;p&gt;数据结构为算法提供服务，算法围绕数据结构操作&lt;/p&gt;
&lt;h2 id=&quot;时间复杂度&quot;&gt;</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 + jsx开发指南</title>
    <link href="https://vkcyan.github.io/2022/03/15/Vue3%20%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/"/>
    <id>https://vkcyan.github.io/2022/03/15/Vue3%20%E4%BD%BF%E7%94%A8jsx%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T06:56:22.057Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-jsx开发指南"><a href="#Vue3-jsx开发指南" class="headerlink" title="Vue3 + jsx开发指南"></a>Vue3 + jsx开发指南</h1><img src="http://www.vkcyan.top/FuGdH5QngblNApxjW3YV8ozIsO0J.png" style="zoom:30%;" /><p>​在2021年，<code>vue3</code>发布了正式版本，并且经过一年的维护已经越来越稳定，我们在公司项目中也小范围的上线了<code>vue3</code>的项目，总体还是很不错的</p><p>​但是<code>setup</code>语法需要return比较麻烦，还有<code>.value</code>问题，尝试过<code>setup</code>语法糖，依旧觉得<code>setup</code>语法的api记忆负担比较重</p><p>​所以下半年逐渐拾起了<code>jsx</code>的语法，并在开源项目中使用，总体感觉还是相当不错的，前人栽树后人乘凉，本文对jsx for vue的常见问题进行说明</p><ul><li><p><code>jsx</code>学习成本更低，这么多年jsx没有大改动；</p></li><li><p>无记忆负担，同时足够灵活，如果你是vue开发者，同时对setup语法并不是太合得来， vue3 + jsx也是非常不错的选择~</p></li></ul><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>​在vue3中使用jsx需要安装<a href="https://www.npmjs.com/package/@vitejs/plugin-vue-jsx">@vitejs&#x2F;plugin-vue-jsx</a>（webpack版本的不了解，有需要者执行搜索），根据文档配置一下就行了，官方提供了文档供参考，提供了相关示例<a href="https://github.com/vuejs/jsx-next">jsx-next</a>,有react基础的同学可以先看官方文档，在开发过程中出现问题再看本文</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><h3 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h3><p>JSX  for vue是支持v-model语法的，这一点比react的setState,体验感确实要好</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常写法</span></span><br><span class="line">&lt;input v-model=<span class="string">&quot;value&quot;</span> /&gt;  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;value&#125;</span> /&gt;</span></span> <span class="comment">// jsx</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定值写法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model:modelValue</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span>  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;[value,</span>&#x27;<span class="attr">modelValue</span>&#x27;]&#125; /&gt;</span></span> <span class="comment">// jsx</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 修饰符写法</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model:modelValue.trim</span>=<span class="string">&quot;value&quot;</span> /&gt;</span></span>  <span class="comment">// vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&#123;[value,</span>&#x27;<span class="attr">modelValue</span>&#x27;,[&#x27;<span class="attr">trim</span>&#x27;]]&#125; /&gt;</span></span> <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h3><p>这个api与在vue中的表现形式一致</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-show=<span class="string">&quot;isShow&quot;</span>&gt;&lt;<span class="regexp">/div&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&lt;div v-show=&#123;isShow&#125;&gt;&lt;/</span>div&gt; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue</span></span><br><span class="line">&lt;a-modal</span><br><span class="line">  :width=<span class="string">&quot;&#x27;400px&#x27;&quot;</span></span><br><span class="line">  :title=<span class="string">&quot;&#x27;设置组件名称&#x27;&quot;</span></span><br><span class="line"> &gt;</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line">&lt;/a-modal&gt;</span><br><span class="line"><span class="comment">// jsx</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a-modal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">width</span>=<span class="string">&#123;</span>&quot;<span class="attr">400px</span>&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">title</span>=<span class="string">&#123;</span>&quot;设置组件名称&quot;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml"> &gt;</span></span></span><br><span class="line"><span class="language-xml">// ....</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a-modal</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><p>在jsx for vue中没有这个api，我们需要用jsx风格来实现v-if的效果</p><p>可以简单理解为jsx直接将if搬到html中</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-<span class="keyword">if</span>=<span class="string">&quot;isShow&quot;</span>&gt; ... &lt;<span class="regexp">/div&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&#123;isShow &amp;&amp; &lt;div&gt; ... &lt;/</span>div&gt;&#125; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件语法"><a href="#事件语法" class="headerlink" title="事件语法"></a>事件语法</h3><p>jsx for vue，所有的事件都按照react风格来</p><ul><li>所有事件有on开头</li><li>所有事件名称首字母大写</li></ul><p><strong>例如：@click &#x3D;&gt; onClick @change &#x3D;&gt; onChange @drop &#x3D;&gt; onDrop</strong> </p><h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><p>这里没有找到权威的资料，有小伙伴知道也请告知一下，目前建议大家通过原生JavaScript来实现vue事件修饰符的效果</p><p>.stop ： 阻止事件冒泡，在JSX中使用event.stopPropagation()来代替</p><p>.prevent：阻止默认行为，在JSX中使用event.preventDefault() 来代替</p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><h3 id="ref与reactive"><a href="#ref与reactive" class="headerlink" title="ref与reactive"></a>ref与reactive</h3><p>vue3的template会自动解析ref的<code>.value</code>,在jsx中ref的<code>.value</code>是不会被自动解析的</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明变量 let type = ref(1)</span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;&#123; type &#125;&#125;&lt;<span class="regexp">/p&gt; /</span><span class="regexp">/ vue</span></span><br><span class="line"><span class="regexp">&lt;p&gt;&#123;type.value&#125;&lt;/</span>p&gt; <span class="comment">// jsx</span></span><br></pre></td></tr></table></figure><h3 id="props"><a href="#props" class="headerlink" title="props"></a>props</h3><p>在jsx for vue中，props的语法使用的就是setup的语法，实际表现形式完全一致</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="attr">props</span>: [<span class="string">&#x27;title&#x27;</span>],</span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(props.<span class="property">title</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.title&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="emit"><a href="#emit" class="headerlink" title="emit"></a>emit</h3><p>同样与vue3的setup语法保持一致，注意子父方法需要符合react规范</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">emit(&#x27;changeVisible&#x27;, false) // 子组件 </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">xxx</span> <span class="attr">onChangeVisible</span>=<span class="string">&#123;(params)</span> =&gt;</span> xxxFun(params)&#125;&gt;<span class="tag">&lt;/<span class="name">xxx</span>&gt;</span> // 父组件</span><br></pre></td></tr></table></figure><h2 id="solt如何写插槽"><a href="#solt如何写插槽" class="headerlink" title="solt如何写插槽"></a>solt如何写插槽</h2><p>这里以antd for vue的<a href="https://next.antdv.com/components/popover-cn">Popover 气泡卡片</a>，为例子</p><h3 id="Vue3语法"><a href="#Vue3语法" class="headerlink" title="Vue3语法"></a>Vue3语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a-popover</span> <span class="attr">title</span>=<span class="string">&quot;Title&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a-popover</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="jsx-for-vue语法"><a href="#jsx-for-vue语法" class="headerlink" title="jsx for vue语法"></a>jsx for vue语法</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-popover</span><br><span class="line">title=<span class="string">&quot;Title&quot;</span></span><br><span class="line">content=&#123;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Content<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">a-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>Hover me<span class="tag">&lt;/<span class="name">a-button</span>&gt;</span></span></span><br><span class="line">&lt;/a-popover&gt;</span><br></pre></td></tr></table></figure><h2 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineComponent, onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineComponent</span>(&#123;</span><br><span class="line">  <span class="comment">// props: [&#x27;xx&#x27;],</span></span><br><span class="line">  <span class="title function_">setup</span>(<span class="params">props,&#123; emit &#125;</span>) &#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li>国内这方面资料比较少，查问题的时候注意vue版本，以及jsx的使用（render方式本文不适用）</li><li>如果代码里面存在问题，如果是ui框架，建议直接看react版本的代码，例如antdv的jsx版本直接看antd的实例代码</li><li>直接看jsx语法的项目代码，<a href="https://github.com/vkcyan/H5-YD.v2">H5-YD.v2</a></li><li>不接受杠精，例如写jsx为啥不去用使用react</li></ul><p>如果在学习过程中遇到了解决不了的问题，请到QQ群 530496237，大佬解答疑惑~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3-jsx开发指南&quot;&gt;&lt;a href=&quot;#Vue3-jsx开发指南&quot; class=&quot;headerlink&quot; title=&quot;Vue3 + jsx开发指南&quot;&gt;&lt;/a&gt;Vue3 + jsx开发指南&lt;/h1&gt;&lt;img src=&quot;http://www.vkcyan.t</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vite配置alias（设置别名）</title>
    <link href="https://vkcyan.github.io/2022/03/15/vite%E9%85%8D%E7%BD%AEalias/"/>
    <id>https://vkcyan.github.io/2022/03/15/vite%E9%85%8D%E7%BD%AEalias/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T06:56:02.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vite配置alias（设置别名）"><a href="#Vite配置alias（设置别名）" class="headerlink" title="Vite配置alias（设置别名）"></a>Vite配置alias（设置别名）</h1><blockquote><p>Vite配置alias需要两步进行（TS项目）</p><p>1、修改vite.config.ts（让程序支持）</p><p>2、修改tsconfig.json（让编辑器支持）</p></blockquote><h2 id="修改vite配置"><a href="#修改vite配置" class="headerlink" title="修改vite配置"></a>修改vite配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_resolve</span>(<span class="params">dir: string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="title function_">resolve</span>(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="comment">// 配置项目别名</span></span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">_resolve</span>(<span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="修改tsconfig-json"><a href="#修改tsconfig-json" class="headerlink" title="修改tsconfig.json"></a>修改tsconfig.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;noImplicitAny&quot;</span><span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sourceMap&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;importHelpers&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 不让同样的辅助函数重复的出现在多个文件中</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span> <span class="comment">// 允许对不包含默认导出的模块使用默认导入。</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span> <span class="comment">// 非相对模块的导入可以相对于baseUrl或通过下文会讲到的路径映射来进行解析</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;dom&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">// 配置导出路径（这里根据自己项目执行修改）</span></span><br><span class="line">      <span class="attr">&quot;@/stores*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/stores*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/components*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/components*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/modules*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/modules*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;@/utils*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;./src/utils*&quot;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;element-plus/global&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.jsx&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;src/**/*.js&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li><p>修改后请重启编辑器</p></li><li><p>本文验证与2022年1月10号，mac，win双平台均有效，如果以上配置无效了，请查看相关api的改动</p></li><li><p>如果帮助你解决了问题，动动小手点个赞吧！:)</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vite配置alias（设置别名）&quot;&gt;&lt;a href=&quot;#Vite配置alias（设置别名）&quot; class=&quot;headerlink&quot; title=&quot;Vite配置alias（设置别名）&quot;&gt;&lt;/a&gt;Vite配置alias（设置别名）&lt;/h1&gt;&lt;blockquote&gt;
</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.x 预渲染 Unable to prerender all routes错误排查</title>
    <link href="https://vkcyan.github.io/2022/03/15/vue3.x%20%E9%A2%84%E6%B8%B2%E6%9F%93%20Unable%20to%20prerender%20all%20routes%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/"/>
    <id>https://vkcyan.github.io/2022/03/15/vue3.x%20%E9%A2%84%E6%B8%B2%E6%9F%93%20Unable%20to%20prerender%20all%20routes%E9%94%99%E8%AF%AF%E6%8E%92%E6%9F%A5/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T06:56:39.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue3-x-预渲染-Unable-to-prerender-all-routes错误排查"><a href="#Vue3-x-预渲染-Unable-to-prerender-all-routes错误排查" class="headerlink" title="Vue3.x 预渲染 Unable to prerender all routes错误排查"></a>Vue3.x 预渲染 Unable to prerender all routes错误排查</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​BOOS最近对前几年做的公司官网不太满意，觉得没有有效体现公司的优势，表明随着公司这几年的努力发展，我们将会接触到更大规模的合作伙伴，自然要展示更好的企业形象，所以官网重做。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li>没有交互的静态页面，但是存在大量动画</li><li>需要支持良好的SEO</li></ul><p>​最早期的官网是<code>vue2.x</code> + <code>webpack3.x</code> + <code>vue-cli-plugin-prerender-spa</code>进行实现的，效果挺不错，很快各大搜索引擎就收录了我们的网站，所以这次我们打算沿用此方案，不过使用最新技术栈；</p><h3 id="为什么不用vite"><a href="#为什么不用vite" class="headerlink" title="为什么不用vite"></a>为什么不用vite</h3><p>​查阅vite的生态后，未找到类似<strong>prerender-spa</strong>的plugin，没办法支持预渲染，所以vite就被淘汰了。</p><h3 id="为什么不用unxtjs"><a href="#为什么不用unxtjs" class="headerlink" title="为什么不用unxtjs"></a>为什么不用unxtjs</h3><p>​我们的官网不具备大量的接口交互，用<strong>Nnxtjs</strong>多少有点杀鸡用牛刀了，并且还需要使用<strong>pm2</strong>部署代码，付出于收获不成正比，被淘汰。</p><h3 id="最终方案"><a href="#最终方案" class="headerlink" title="最终方案"></a>最终方案</h3><p>​我们部门是vue技术栈，团队不考虑react，通过以上排除法，只能使用<code>vue3.x</code> + <code>webpack5.x</code> + <code>prerender-spa</code>进行业务实现了。</p><h2 id="技术实现"><a href="#技术实现" class="headerlink" title="技术实现"></a>技术实现</h2><h3 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h3><p>我们使用最新的<code>vue-cli</code>进行项目搭建，选择vue3版本，最近的cli默认就是webpack5</p><h3 id="安装预渲染插件"><a href="#安装预渲染插件" class="headerlink" title="安装预渲染插件"></a>安装预渲染插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i prerender-spa-plugin -D</span><br></pre></td></tr></table></figure><h3 id="增加配置"><a href="#增加配置" class="headerlink" title="增加配置"></a>增加配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">      config.<span class="property">plugins</span>.<span class="title function_">push</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">PrerenderSPAPlugin</span>(&#123;</span><br><span class="line">          <span class="attr">staticDir</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">          <span class="attr">routes</span>: [<span class="string">&#x27;/xxx&#x27;</span>],</span><br><span class="line">        &#125;)</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="打包测试"><a href="#打包测试" class="headerlink" title="打包测试"></a>打包测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>然后就出现一个错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[prerender-spa-plugin] Unable to prerender all routes!</span><br></pre></td></tr></table></figure><p>让我们一起抽丝剥茧，看看报错的具体原因。</p><h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2><p>因为报错提示很模糊，我们打开他的源码，在源码line144发生错误的地方增加log，了解具体报错。</p><img src="http://www.vkcyan.top/image-20220520134031605.png" alt="image-20220520134031605" style="zoom:50%;" /><p>再次执行<code>npm run build</code>，得到真正的错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Building for production...error TypeError: compilerFS.mkdirp is not a function</span><br></pre></td></tr></table></figure><p>​我们继续最终源码发现 <strong>compilerFS</strong> 由<strong>webpack</strong>进行提供，我们带着错误前往<strong>webpack</strong>官网查询错误，于是就找到了<a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/#filesystems">Filesystems</a>，因为这个插件已经好几年没有更新，而我们当前使用的是webpack5，出现了API变更的情况。</p><p>​于此同时，根据错误提示，我们也在该库的issues中找到了历史讨论。</p><img src="http://www.vkcyan.top/image-20220520135141080.png" alt="image-20220520135141080" style="zoom:67%;" /><p>在讨论中，找到了两种解决方案</p><ol><li><strong>修改node_modules源码，使其兼容webpack5</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// From https://github.com/ahmadnassri/mkdirp-promise/blob/master/lib/index.js</span></span><br><span class="line"> <span class="keyword">const</span> mkdirp = <span class="keyword">function</span> (<span class="params">dir, opts</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;\ndir&#x27;</span>, dir, opts, <span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       compilerFS.<span class="title function_">mkdirp</span>(dir, opts, <span class="function">(<span class="params">err, made</span>) =&gt;</span> err === <span class="literal">null</span> ? <span class="title function_">resolve</span>(made) : <span class="title function_">reject</span>(err))</span><br><span class="line">     &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">       compilerFS.<span class="title function_">mkdir</span>(dir, opts, <span class="function">(<span class="params">err, made</span>) =&gt;</span> err === <span class="literal">null</span> ? <span class="title function_">resolve</span>(made) : <span class="title function_">reject</span>(err))</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>使用已经被修改的库，感谢这位大哥</strong></li></ol><p><img src="http://www.vkcyan.top/image-20220520135437289.png" alt="image-20220520135437289"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @dreysolano/prerender-spa-plugin</span><br></pre></td></tr></table></figure><p>我们使用第二种方案，重新修改<strong>vue.config.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;prerender-spa-plugin&#x27;</span>)</span><br><span class="line">+ <span class="keyword">const</span> <span class="title class_">PrerenderSPAPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;@dreysolano/prerender-spa-plugin&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后再次打包测试</p><p><img src="http://www.vkcyan.top/image-20220520135659280.png" alt="image-20220520135659280"></p><p>打包成功，通过启动本地服务器<strong>curl</strong>命令测试得知，SEO功能正常，未发现问题。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​使用<strong>prerender-spa-plugin</strong>打包出现报错<code>[prerender-spa-plugin] Unable to prerender all routes!</code>，更换库为**@dreysolano&#x2F;prerender-spa-plugin**，即可解决问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vue3-x-预渲染-Unable-to-prerender-all-routes错误排查&quot;&gt;&lt;a href=&quot;#Vue3-x-预渲染-Unable-to-prerender-all-routes错误排查&quot; class=&quot;headerlink&quot; title=&quot;Vu</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>写给前端新人的nginx教程</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84nginx%E6%95%99%E7%A8%8B/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88%E7%9A%84nginx%E6%95%99%E7%A8%8B/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T06:55:30.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写给前端新人的nginx教程"><a href="#写给前端新人的nginx教程" class="headerlink" title="写给前端新人的nginx教程"></a>写给前端新人的nginx教程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​我相信大部分前端新手是接触不到部署相关的工作的，一般都是将代码包交给后端，或者通过CI，FTP完成代码的更新，至于代码如何部署，如何从域名到前端代码包，很多前端仔没有实际操作过，自然是不知道的，这篇文章就是要帮助未接触过部署的人学会在服务器上线部署一个前端项目，在这个主线中带大家慢慢的熟悉nginx</p><p>​记得在2017年暑假，那时候大二还没开学，当时我只会写一点简单代码，linux和运维完全没接触过，一冲动在阿里云购买了一个服务器，外加一个域名，好像还是<code>xiaowuasy.top</code>,现在已经不能访问了；那时候单纯的兴趣使然，想搭建一个网站，因为实力不足，也不知道求助别人，前前后后折腾了一个月，最终竟然成功在服务器上面部署了wordpress服务，后面域名备案也成功了；</p><p>​这段经历是曲折的，依稀记得在盛夏的傍晚，我坐在慢慢暗下来的客厅，头上还残留着因为紧张流下的细汗，眼睛因为专注而干涩，面对不太看得懂的文档，一遍一遍尝试；我自然不希望大家在这上面浪费时间，这也是写这篇文章的初衷</p><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ul><li>一个云服务器，阿里云，腾讯云，xx云都行，首次购买或者学生认证都是有很大的优惠（本文以阿里云为例子）</li><li>了解linux基础命令，也就是对各种文件的增删改查</li><li>本教程基于CentOS 7.5系统，如果是图形化界面，或者其他系统，命令可能不完全一致，但是流程都是一致的，建议看对应教程</li></ul><p>如果linux基础命令不会。下面的也不用看了，立刻去学</p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h3><p>通过<strong>远程工具</strong>（CRT，Xshell）或者自带的<strong>远程连接</strong>进入自己的服务器，连接方式选择<strong>公网ip</strong></p><p><img src="http://www.vkcyan.top/FkugXnbgmCdIOX-iAYI3UYUjmv7a.png" alt="image-20220113105611506"></p><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><blockquote><p>CentOS自带yum命令，这个命令很关键，自行了解</p></blockquote><p>执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx // 终于遇到需要确认的，直接确认即可</span><br></pre></td></tr></table></figure><p>安装完成后,主机中便有了nginx服务，相关命令如下，启动完成后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p>启动完成后，浏览器访问<strong>公网IP</strong>,就可以访问到nginx的默认主页</p><p><img src="http://www.vkcyan.top/FtVofGcUY5HFXsoI2PpMqNNXberG.png"></p><p>到这一步就算是nginx部署成功了</p><h3 id="nginx相关文件路径"><a href="#nginx相关文件路径" class="headerlink" title="nginx相关文件路径"></a>nginx相关文件路径</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/etc/nginx/ // 配置文件</span><br><span class="line">/usr/share/nginx/ // 默认前端代码存放处</span><br></pre></td></tr></table></figure><p>​默认配置在<code>/etc/nginx/nginx.conf</code>,nginx根据默认配置，监听80端口，80端口指定了&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html这个文件夹，于是你访问公网ip -&gt; 公网ip:80 -&gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html,于是”Welcome to <strong>CentOS</strong>“便呈现在你的面前</p><p>​如果你希望不显示默认的页面，而是显示你自己写的项目，直接替换<code>/etc/nginx/nginx.conf</code>中的<strong>root</strong>,字段为自己程序包的路径</p><img src="http://www.vkcyan.top/FiqSDRnFVl2vLwpIGa7FMtv7QPkY.png" style="zoom: 33%;" /><h2 id="在6666端口上搭建一个站点"><a href="#在6666端口上搭建一个站点" class="headerlink" title="在6666端口上搭建一个站点"></a>在6666端口上搭建一个站点</h2><p>​我们的代码除了部署在默认80端口上面，还可以其他端口上，例如8888，7777，等等</p><p>​接下来我们就在一个自定义的端口上面部署一个站点</p><p>​这里我们需要注意<code>nginx.conf</code>中的一行配置</p><blockquote><p>含义：在&#x2F;etc&#x2F;nginx&#x2F;conf.d下面所有nginx的配置文件都会自动生效</p></blockquote><img src="http://www.vkcyan.top/Ft5oDDtWUipvEf-tFA5XNcR8N87L.png" style="zoom:33%;" /><p>根据配置文件的提示我们到目标文件夹下面，建立test.conf，名字无所谓，配置文件里面是通配符匹配的</p><p>并通过vi 写入内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       7777;</span><br><span class="line">    server_name  _;</span><br><span class="line"></span><br><span class="line">    root/usr/share/nginx/test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再去文件夹<code>/usr/share/nginx/test</code>下建立一个index.html</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">test</span> </span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">vi index.html</span><br></pre></td></tr></table></figure><p>将一下内容放入index.html种</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是7777端口<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后重启nginx</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>访问我们部署的项目ip:7777</p><p>然后你会发现访问不了，最终访问超时(&#x3D;&#x3D;)，这是因为服务器限制了可访问端口，此时需要到云管理后台设置安全组</p><img src="http://www.vkcyan.top/FsVXXP3i-gLk0rNFYdlPWxCGPBxl.png" style="zoom:50%;" /><p>在阿里云后台增加安全组规则</p><p><img src="http://www.vkcyan.top/Fv_L-8z8yfwLO0N69zahJp0L2vhf.png"></p><p>之后就可以正常访问了！</p><p><img src="http://www.vkcyan.top/Fq0nB1GSEzI1FJN-f0sf66YXVl1T.png">至此，便完成了第一个nginx项目的部署</p><h2 id="部署一个vue项目"><a href="#部署一个vue项目" class="headerlink" title="部署一个vue项目"></a>部署一个vue项目</h2><p>​通过上面的例子，我们已经可以完成一个自定义站点的部署了，那么真实项目呢，例如将一个vue项目部署到3006端口</p><ol><li>首先编写xxx.conf</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       3006;</span><br><span class="line">    server_name  _;</span><br><span class="line">    </span><br><span class="line"> <span class="comment"># 开启gzip相关配置</span></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_static on;</span><br><span class="line">    gzip_min_length 2k;</span><br><span class="line">    gzip_buffers 4 8k;</span><br><span class="line">    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/x-icon application/javascript;</span><br><span class="line">    gzip_comp_level 9;</span><br><span class="line">    gzip_disable <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"><span class="comment"># 站点代码路径</span></span><br><span class="line">    root         /usr/share/nginx/client;</span><br><span class="line"><span class="comment"># 单页应用必须设置（刷新404问题）</span></span><br><span class="line">    location / &#123;</span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><p>将打包之后的代码，通过FTP上传代码到目标文件夹<code>/usr/share/nginx/client</code>（注意文件夹名称）</p><p><a href="https://www.filezilla.cn/">ftp</a></p></li><li><p>重启nginx <code>nginx -s reload</code></p></li></ol><p>这边完成了一个站点的部署！是不是很简单</p><p><img src="http://www.vkcyan.top/FjjTa2vHly5zv0-wvUdExapUmAhd.png"></p><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>​直接拿<strong>ip+端口</strong>给别人访问是不太好的，大家都给自己站点绑定上一个好记忆的域名，那么nginx如何绑定域名呢？</p><ol><li>购买一个域名<a href="https://wanwang.aliyun.com/domain/%EF%BC%8C%E5%A4%87%E6%A1%88%E5%9F%9F%E5%90%8D%EF%BC%8C%E8%BF%99%E4%B8%AA%E6%B5%81%E7%A8%8B%E5%BE%88%E9%BA%BB%E7%83%A6%EF%BC%8C%E9%9C%80%E8%A6%8110-30%E5%A4%A9">https://wanwang.aliyun.com/domain/，备案域名，这个流程很麻烦，需要10-30天</a></li><li>备案完成后，域名就可以使用了</li></ol><p>我们需要去修改我们的nginx配置，将server_name的值修改为需要绑定的域名即可；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       3006;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">// ....</span><br></pre></td></tr></table></figure><h2 id="增加https支持"><a href="#增加https支持" class="headerlink" title="增加https支持"></a>增加https支持</h2><ol><li>申请一个https证书，<a href="https://yundunnext.console.aliyun.com/?spm=a2c4g.11186623.0.0.4a7b9d1d55eAnw&p=cas#/certExtend/free">数字证书管理</a>，以阿里云为例子，国内云厂商都有</li><li>将证书放在服务器中你可以记得住的文件夹里面</li><li>修改nginx配置</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123; // <span class="comment"># 将当前域名的http自动打到https</span></span><br><span class="line">        listen  80;</span><br><span class="line">        server_name     xxx.com;</span><br><span class="line">        rewrite ^(.*)$  https://$host<span class="variable">$1</span> permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       443 ssl http2;</span><br><span class="line">    server_name  xxx.com;</span><br><span class="line">    ssl_certificate xxxx/yy.pem; <span class="comment"># 证书</span></span><br><span class="line">    ssl_certificate_key xxxx/yy.key; <span class="comment"># 证书秘钥</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ssl验证相关配置</span></span><br><span class="line">    ssl_session_timeout  5m;    <span class="comment">#缓存有效期</span></span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;    <span class="comment">#加密算法</span></span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;    <span class="comment">#安全链接可选的加密协议</span></span><br><span class="line">    ssl_prefer_server_ciphers on;   <span class="comment">#使用服务器端的首选算法</span></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="comment">#access_log  /var/log/nginx/host.access.log  main;</span></span><br><span class="line">    </span><br><span class="line">root   /usr/share/nginx/client;</span><br><span class="line">    location / &#123;   </span><br><span class="line">    try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​虽然部署一个站点，仅仅是用到nginx，但是涉及到的知识点还是很多的</p><p>​如果遇到了错误，一定要仔细检查报错信息，问题百度百度基本都能得到答案，如果实在搞不定，直接重做云服务器系统，重头再来；遇到问题并把它解决了，便成了你的技能</p><p>​一个有经验的开发人员部署一个站点，可能半小时就弄完了，想要熟练的话，一定要多练习多实践，从0到1部署一个项目还是一件很酷的事情！</p><p>如果搭建中遇到了解决不了的问题，请到QQ群 530496237，大佬解答疑惑~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写给前端新人的nginx教程&quot;&gt;&lt;a href=&quot;#写给前端新人的nginx教程&quot; class=&quot;headerlink&quot; title=&quot;写给前端新人的nginx教程&quot;&gt;&lt;/a&gt;写给前端新人的nginx教程&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>浏览器读取xls并生成二维码下载到本地</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96xls%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B9%B6%E4%B8%8B%E8%BD%BD/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96xls%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%B9%B6%E4%B8%8B%E8%BD%BD/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T06:55:14.983Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浏览器读取xls并生成二维码下载到本地"><a href="#浏览器读取xls并生成二维码下载到本地" class="headerlink" title="浏览器读取xls并生成二维码下载到本地"></a>浏览器读取xls并生成二维码下载到本地</h1><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一次普通的技术需求会议</p><p>​项目经理首先发言 我们技术这边需要将xls表格中的几千条数据变成二维码，并且中间镶嵌logo，图片底部放置编号，由于xls表格数据私密，不能通过第三方完成</p><p>​平常这个事情都是后端处理的，前端就是来摸鱼的，但是这次一反常态，后端脸黑了，带样式搞不来，脚一蹬，直接装死</p><p>​项目经理用期盼的眼神看着我，顿时我紧张了起来，眼神飘忽，我已经好多年没搞过node了啊！！会议室都沉默了，在项目经理不断精神攻击下，后端装死的情况下，看来注定要大前端来拯救世界了，毕竟JavaScript万能语言，俺来试试吧！</p><h2 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h2><p>​以上情节纯属虚构，但是需求确实是这样的，虽然好几年没碰过node，好歹年轻记性好，用过的基本都还记得，调研实现方案上没出现太多问题，有如下方案</p><h3 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h3><p>地址：<a href="https://github.com/puppeteer/puppeteer">https://github.com/puppeteer/puppeteer</a></p><p>​使用基于node环境的puppeteer，进行二维码绘制，图片绘制，是JavaScript开发者面对此类需求的主流选择</p><h3 id="node-canvas"><a href="#node-canvas" class="headerlink" title="node-canvas"></a>node-canvas</h3><p>地址：<a href="https://github.com/Automattic/node-canvas">https://github.com/Automattic/node-canvas</a></p><p>​同样是在服务端完成渲染，但是这个库依赖node-gyp，如果不安装python2，那安装过程懂得都懂，不过这也是很不错的方案</p><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><p>​通过浏览器canvas绘制，然后下载下来，会有刷刷刷下载图片的炫酷效果</p><p>很明显有刷刷刷下载图片炫酷效果的方案更好，所以就选择你了 <strong>浏览器</strong>方案！</p><h2 id="问题分解"><a href="#问题分解" class="headerlink" title="问题分解"></a>问题分解</h2><p>确定了技术方案，就要考虑具体实现了</p><ul><li>JavaScript读取execl文件，并处理成理想格式</li><li>将读取到的execl中的网址字段生成一张二维码</li><li>将二维码写入canvas，在其中间加上logo，并在底部加一行文字</li><li>将canva转化为DataURL，下载它</li><li>不断递归生成，直到xls数据全部处理完毕</li></ul><p><strong>理论存在，实践开始</strong>！</p><h2 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h2><h3 id="启动一个本地服务器"><a href="#启动一个本地服务器" class="headerlink" title="启动一个本地服务器"></a>启动一个本地服务器</h3><p>首先我们通过VScode <strong>Live Server</strong> 启动一个本地服务器</p><p>这里有好奇宝宝要问了，为啥第一步是这？</p><p>答：因为浏览器是访问不了电脑的文件系统的，所以只能通过启动一个本地服务器的方案，来读取我们的资源文件</p><h3 id="创建html，引入资源库"><a href="#创建html，引入资源库" class="headerlink" title="创建html，引入资源库"></a>创建html，引入资源库</h3><p>分析需要用到的第三方开源库</p><ul><li>解析xls <a href="https://github.com/sheetjs/sheetjs">https://github.com/sheetjs/sheetjs</a></li><li>生成QRcode <a href="https://github.com/soldair/node-qrcode">https://github.com/soldair/node-qrcode</a></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>生成二维码<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./qrcode.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./xlsx.full.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用于生成载体 最终生成的图片大小，按自己的需求来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">&quot;260&quot;</span> <span class="attr">height</span>=<span class="string">&quot;310&quot;</span> <span class="attr">id</span>=<span class="string">&quot;canvas&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> ctx = <span class="title function_">initCanvas</span>(); <span class="comment">// 获取ctx实例</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 初始化画布</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">initCanvas</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#fff&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">260</span>, <span class="number">310</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> ctx;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="解析xls文件"><a href="#解析xls文件" class="headerlink" title="解析xls文件"></a>解析xls文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readWorkbookFromRemoteFile</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// res 为实际解析代码 [&#123;key:&#x27;xxxx&#x27;,value:&#x27;xxxx&#x27;&#125;,....]</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取xls信息，并处理</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readWorkbookFromRemoteFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;http://127.0.0.1:5500/xls.xls&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        xhr.<span class="property">responseType</span> = <span class="string">&quot;arraybuffer&quot;</span>;</span><br><span class="line">        xhr.<span class="property">onload</span> = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(xhr.<span class="property">response</span>);</span><br><span class="line">                <span class="keyword">var</span> workbook = <span class="variable constant_">XLSX</span>.<span class="title function_">read</span>(data, &#123; <span class="attr">type</span>: <span class="string">&quot;array&quot;</span> &#125;);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 获取实际表格长度（去除表头）</span></span><br><span class="line">                <span class="keyword">let</span> carryLen = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>]) &#123;</span><br><span class="line">                    <span class="keyword">const</span> ele = workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>][key];</span><br><span class="line">                    <span class="keyword">if</span> (key.<span class="title function_">includes</span>(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">                        carryLen++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 解析数据</span></span><br><span class="line">                <span class="keyword">let</span> xls = [];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= carryLen; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> data = workbook.<span class="property">Sheets</span>[<span class="string">&quot;Sheet&quot;</span>];</span><br><span class="line">                    xls.<span class="title function_">push</span>(&#123;</span><br><span class="line">                        <span class="attr">key</span>: data[<span class="string">&quot;A&quot;</span> + i].<span class="property">w</span>,</span><br><span class="line">                        <span class="attr">value</span>: data[<span class="string">&quot;B&quot;</span> + i].<span class="property">w</span>,</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="title function_">resolve</span>(xls);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这里肯定也有细心的好奇宝宝问，为啥循环体中的<code>i</code>为2呢?</p><p>答案：因为表格中的A1，B1为表格的第一行，而第一行是表头，要去除</p><h4 id="将链接生成为二维码"><a href="#将链接生成为二维码" class="headerlink" title="将链接生成为二维码"></a>将链接生成为二维码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 生成二维码</span></span><br><span class="line">    <span class="title class_">QRCode</span>.<span class="title function_">toDataURL</span>(</span><br><span class="line">        <span class="string">&#x27;xxxxxxx&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">260</span>,</span><br><span class="line">            <span class="attr">margin</span>: <span class="number">3</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function">(<span class="params">error, url</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">            <span class="keyword">const</span> code = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">            code.<span class="property">src</span> = url;</span><br><span class="line">            code.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                ctx.<span class="title function_">drawImage</span>(code, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="title function_">resolve</span>(code);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="写入中间logo"><a href="#写入中间logo" class="headerlink" title="写入中间logo"></a>写入中间logo</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> code = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">    code.<span class="property">src</span> = <span class="string">&quot;http://127.0.0.1:5500/logo.jpeg&quot;</span>;</span><br><span class="line">    code.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        ctx.<span class="title function_">drawImage</span>(code, <span class="number">260</span> / <span class="number">2</span> - <span class="number">20</span>, <span class="number">260</span> / <span class="number">2</span> - <span class="number">20</span>, <span class="number">40</span>, <span class="number">40</span>);</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="写入底部文字"><a href="#写入底部文字" class="headerlink" title="写入底部文字"></a>写入底部文字</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入编号</span></span><br><span class="line">ctx.<span class="property">font</span> = <span class="string">&quot;24px Arial&quot;</span>;</span><br><span class="line">ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#000&quot;</span>;</span><br><span class="line">ctx.<span class="property">textAlign</span> = <span class="string">&quot;center&quot;</span>;</span><br><span class="line">ctx.<span class="property">textBaseline</span> = <span class="string">&quot;middle&quot;</span>;</span><br><span class="line">ctx.<span class="title function_">fillText</span>(xls[index].<span class="property">value</span>, <span class="number">130</span>, <span class="number">270</span>);</span><br></pre></td></tr></table></figure><h3 id="canvas转化为图片，并下载到本地"><a href="#canvas转化为图片，并下载到本地" class="headerlink" title="canvas转化为图片，并下载到本地"></a>canvas转化为图片，并下载到本地</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于预览</span></span><br><span class="line"><span class="keyword">let</span> url = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;canvas&quot;</span>).<span class="title function_">toDataURL</span>(<span class="string">&quot;image/png&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;a&quot;</span>); <span class="comment">// 生成一个a元素</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&quot;click&quot;</span>); <span class="comment">// 创建一个单击事件</span></span><br><span class="line">a.<span class="property">download</span> = xls[index].<span class="property">value</span>; <span class="comment">// 将a的download属性设置为我们想要下载的图片名称，若name不存在则使用‘下载图片名称’作为默认名称</span></span><br><span class="line">a.<span class="property">href</span> = url; <span class="comment">// 将生成的URL设置为a.href属性</span></span><br><span class="line">a.<span class="title function_">dispatchEvent</span>(event); <span class="comment">// 触发a的单击事件</span></span><br></pre></td></tr></table></figure><p>第一张图片，完成生成</p><img src="http://www.vkcyan.top/image-20220424154056800.png" alt="image-20220424154056800" style="zoom: 67%;" /><h3 id="递归调用"><a href="#递归调用" class="headerlink" title="递归调用"></a>递归调用</h3><p>我们修改发起逻辑代码，逻辑尾部增加递归调用就好啦</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">readWorkbookFromRemoteFile</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">createImg</span>(res, <span class="number">0</span>); <span class="comment">// 递归生成</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// ......</span></span><br><span class="line"><span class="comment">// 实际生成逻辑</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createImg</span>(<span class="params">xls, index</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 生成二维码</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 生成中间logo</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 写入编号</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 下载图片</span></span><br><span class="line">    &#125;)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (xls.<span class="property">length</span> &gt; index + <span class="number">1</span>) &#123;</span><br><span class="line">                ctx.<span class="property">fillStyle</span> = <span class="string">&quot;#fff&quot;</span>; </span><br><span class="line">                ctx.<span class="title function_">fillRect</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">260</span>, <span class="number">310</span>); <span class="comment">// 初始化画布</span></span><br><span class="line">                <span class="title function_">createImg</span>(xls, index + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">20</span>); <span class="comment">// 爱惜机器，加个延时，也可以去掉延时，体会机器的极致速度</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p><img src="http://www.vkcyan.top/8my3l-a8ef0.gif" alt="8my3l-a8ef0"></p><p>至此，终于实现了刷刷刷下载图片炫酷效果，此时可以脑部一段很快的rap，如果华佗再世，崇洋可以医治，外邦来学汉字……………</p><p>最终生成的文件</p><img src="http://www.vkcyan.top/image-20220424160255476.png" alt="image-20220424160255476" style="zoom:67%;" /><h2 id="最终代码地址"><a href="#最终代码地址" class="headerlink" title="最终代码地址"></a>最终代码地址</h2><blockquote><p>一定要针对该项目启动一个本地服务器，否则资源无法访问</p></blockquote><p><a href="https://github.com/vkcyan/web-Output-QRcode">web-Output-QRcode</a></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>​首先纠正一点，JavaScript开发者针对生成二维码类似的任务，首选肯定是<code>puppeteer</code>，使用浏览器绕个弯这种实现方案，多少带点科研味道，长期项目自然是不推荐的</p><p>​带着学习的态度去完成需求，并且不断优化代码、总结问题，将遇到的未知知识点学会，（比如创建a链接，自动触发点击事件），这才是本文的目的。</p><p>​感谢阅读，觉得还不错就点个赞吧~</p><p>​QQ交流群：530496237 大佬解答疑惑~（内有微信群二维码）</p><p>​</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;浏览器读取xls并生成二维码下载到本地&quot;&gt;&lt;a href=&quot;#浏览器读取xls并生成二维码下载到本地&quot; class=&quot;headerlink&quot; title=&quot;浏览器读取xls并生成二维码下载到本地&quot;&gt;&lt;/a&gt;浏览器读取xls并生成二维码下载到本地&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>三个案例带你理解Event Loop流程</title>
    <link href="https://vkcyan.github.io/2022/03/15/%E8%81%8A%E4%B8%80%E8%81%8A%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8AEventLoop/"/>
    <id>https://vkcyan.github.io/2022/03/15/%E8%81%8A%E4%B8%80%E8%81%8A%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1%E4%BB%A5%E5%8F%8AEventLoop/</id>
    <published>2022-03-14T16:00:00.000Z</published>
    <updated>2022-05-23T06:54:53.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三个案例带你理解-Event-Loop-流程"><a href="#三个案例带你理解-Event-Loop-流程" class="headerlink" title="三个案例带你理解 Event Loop 流程"></a>三个案例带你理解 Event Loop 流程</h1><h2 id="为什么-JavaScript-需要-Event-Loop"><a href="#为什么-JavaScript-需要-Event-Loop" class="headerlink" title="为什么 JavaScript 需要 Event Loop"></a>为什么 JavaScript 需要 Event Loop</h2><p>​ JavaScript 在创建之初就确认了一点，JavaScript 是一门单线程语言，因为 JavaScript 主要提供用户互动以及操作 DOM，假定存在两个线程，同时对一个 Dom 进行操作，那究竟以谁为准呢，为了避免这种复杂性，JavaScript 确认了单线程这个核心概念</p><p>​ 在单线程中，除了 JavaScript 本身的逻辑之外，还存在一些 IO 操作，例如从服务端获取数据，在单线程中就需要等待结果的返回才能继续下面的逻辑，这时候机器是挂起状态，为了避免这个低效问题，这里就引入了同步任务与异步任务的概念，依旧是是单线程，但是有些任务不等待其运行结果</p><p>​ 于是同步任务都在函数执行栈（Stack）上执行，所有的异步任务，在有了运行结果之后，就会将其放入任务队列（callback queue），如果 Stack 中任务执行完毕，就会再去检查任务队列是否存在待执行的回调任务，将其任务放入 Stack，再执行，这里就会不断循环此操作</p><p>​ Stack 执行 - Stack 执行完毕 - 检查任务队列 - 将任务加入 Stack - Stack 执行，这样重复的过程就需要 Event Loop 来持续不断的循环检查任务队列，确保异步任务被准时加入到 Stack</p><p><img src="http://www.vkcyan.top/Fr09Z8JDsWNH_CThK4l2piOyaagp.png"></p><h2 id="相关名词介绍"><a href="#相关名词介绍" class="headerlink" title="相关名词介绍"></a>相关名词介绍</h2><p><strong>函数执行栈（Stask）</strong>：遵循后进先出原则，同步函数执行栈</p><p><strong>webAPIs</strong>：异步任务的发起者，事件是首先进入 stack，例如 click，change，再将 callback 加入任务队列</p><p><strong>回调队列（callback queue）</strong>：也可以被称为任务队列，回调函数到达了执行时机就会进入任务队列，他们将会被 Event Loop 持续打入函数执行栈</p><h2 id="事件循环解析"><a href="#事件循环解析" class="headerlink" title="事件循环解析"></a>事件循环解析</h2><p>我们用 Event Loop 来解释一个简单的 demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">consoleo.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">&#125;, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>);</span><br></pre></td></tr></table></figure><p>我相信大部分人都知道，这里打印的顺序为 1 3 2，下面我们用事件循环的流程来说明为什么是这个结果</p><p><strong>注： cb 为 callback</strong></p><ol><li><p><code>console.log(&#39;hi&#39;)</code>，进栈 执行 出栈，<strong>打印 1</strong></p></li><li><p><code>setTimeout</code>进栈 执行 cb 加入异步队列 自身出栈</p></li><li><p><code>console.log(&#39;end&#39;)</code>，进栈 执行 出栈 <strong>打印 3</strong></p></li><li><p>5s 后，cb 加入任务队列，event Loop 检查当前执行栈是否存在函数，检查发现不存在，将 cb 加入函数执行栈</p></li><li><p><code>cb</code>进栈 执行 出栈 <strong>打印 2</strong></p></li></ol><p>​</p><p>​ 我们通过 event Loop 的角度进行解析，就能很轻易的解释为什么代码执行顺序是 1 3 2，这是非常简单的场景，接下来我们会分析一些更加有难度的代码</p><h2 id="关于宏任务与微任务"><a href="#关于宏任务与微任务" class="headerlink" title="关于宏任务与微任务"></a>关于宏任务与微任务</h2><p>​ 通过上面的介绍，我相信大部分人都事件循环有一个基础的认知的，但是与以上我们通过简单的示例，演示了异步代码在事件循环中的运行流程，并没有涉及宏任务与微任务，这两货是什么呢，为什么要在这里出现？</p><p><strong>首先，宏任务（macrotask），微任务（microtask）都是异步任务</strong></p><p>宏任务：<code>setTimeout</code> <code>setInterval</code> <code>setImmediate</code> <code>I/O 键盘事件</code> <code>网络事件</code> <code>UI rendering</code></p><p>微任务：<code>pormise</code> <code>MutationObserver</code> <code>process.nextTick</code></p><p>他们在执行层面上存在一定差异</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子 1"></a>例子 1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise2&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>);</span><br></pre></td></tr></table></figure><p>结果为 <code>script start</code> <code>script end</code> <code>promise1</code> <code>promise2</code> <code>setTimeout</code></p><p>pormise 与 setTimeout 虽然都是异步任务，但是上图的代码你会发现，promise 仿佛插队了，这便是宏任务与微任务在任务队列最大的不同之处</p><p>​ <strong>event Loop 在事件循环中,首先解析 script，将宏任务加入宏任务队列，将微任务加入微任务队列，栈空了之后，执行当前微任务，第一轮事件循环结束</strong></p><p><strong>在第二轮事件循环中，首先执行宏任务 callback 中的第一个，执行完毕，栈空了之后，再执行当前微任务，后面同理</strong></p><img src="http://www.vkcyan.top/FqUHDZ_5cScznXGrkeEfGhaXCWUw.png" style="zoom: 50%;" /><h3 id="例子-2"><a href="#例子-2" class="headerlink" title="例子 2"></a>例子 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;g&quot;</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;h&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f&quot;</span>);</span><br></pre></td></tr></table></figure><p>大家可以先别看答案，自己先尝试将答案推算出来</p><h4 id="第一轮事件循环"><a href="#第一轮事件循环" class="headerlink" title="第一轮事件循环"></a>第一轮事件循环</h4><p><code>console.log(&quot;a&quot;);</code>进入栈 执行 出栈 <strong>打印 a</strong></p><p><code>setTimeout</code>进入栈 <strong>callback 加入宏任务队列</strong> 本身出栈</p><p><code>new Promise</code> 进入栈 执行</p><p><code>console.log(&quot;c&quot;);</code>进入栈 执行 出栈 <strong>打印 c</strong></p><p><code>new Promise.then</code> 进入微任务队列</p><p><code>console.log(&quot;f&quot;);</code>进入栈 执行 出栈 <strong>打印 f</strong></p><p><code>new Promise</code> 出栈</p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><code>console.log(&quot;d&quot;)</code>进入栈 执行 出栈 <strong>打印 d</strong></p><p><code>console.log(&quot;e&quot;)</code>进入栈 执行 出栈 <strong>打印 e</strong></p><p><strong>–微任务执行完毕 第一轮事件循环完毕–</strong></p><p>结果为 a c f d e</p><h4 id="第二轮事件循环"><a href="#第二轮事件循环" class="headerlink" title="第二轮事件循环"></a>第二轮事件循环</h4><p>第一轮循环中 setTimeout 在宏任务中，开始执行</p><p><code>console.log(&quot;b&quot;)</code> 进入栈 执行 出栈 <strong>打印 b</strong></p><p><code>setTimeout</code>进入栈 <strong>callback 加入宏任务队列</strong> 本身出栈</p><p><code>new Promise</code> 进入栈 执行</p><p><code>new Promise.then</code> 进入微任务队列</p><p><code>new Promise</code> 出栈</p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><code>console.log(&quot;h&quot;)</code>进入栈 执行 出栈 <strong>打印 h</strong></p><p><strong>–微任务执行完毕 第二轮事件循环完毕–</strong></p><p>结果为 b h</p><h4 id="第三轮事件循环"><a href="#第三轮事件循环" class="headerlink" title="第三轮事件循环"></a>第三轮事件循环</h4><p>第二轮循环中 setTimeout 在宏任务中，开始执行</p><p><code>console.log(&quot;g&quot;);</code>进入栈 执行 出栈 <strong>打印 g</strong></p><p><strong>—宏任务完毕，开始执行微任务—</strong></p><p><strong>–微任务队列为空 第三轮事件循环完毕–</strong></p><p>结果为 g</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><strong>a c f d e b h g</strong></p><h3 id="宏-x2F-微任务的结论"><a href="#宏-x2F-微任务的结论" class="headerlink" title="宏&#x2F;微任务的结论"></a>宏&#x2F;微任务的结论</h3><p>通过上面三个例子，我们可以得出以下结论</p><ul><li><p>函数执行栈中如果还存在函数，则等待其结束，才会继续事件循环</p></li><li><p>Event Loop 先执行同步任务，再微任务，下一轮循环，宏任务加入队列，执行，所以说先微任务，再宏任务是合理的</p></li><li><p>单次 Event Loop 中，只会执行一次宏任务，但是微任务可以一次执行多个</p></li></ul><h2 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h2><p><a href="https://juejin.cn/post/6969028296893792286">做一些动图，学习一下 EventLoop</a> 通过动图看 Event Loop 更加便于理解</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​ JavaScript 单线程语言的特性注定其需要异步队列，让网页交互体验上更加友好，对于开发来说，需要尽量了解其特性</p><p>​ 首先我们需要了解事件循环机制，搞懂代码执行栈 异步队列的概念，再后面搞懂宏任务与微任务，读懂异步队列的运行机制，这样基本上就可以解决大部分 Event Loop 问题，了解宏任务 微任务 将会对代码执行顺序有更加底层的理解，这样就可以解决</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;三个案例带你理解-Event-Loop-流程&quot;&gt;&lt;a href=&quot;#三个案例带你理解-Event-Loop-流程&quot; class=&quot;headerlink&quot; title=&quot;三个案例带你理解 Event Loop 流程&quot;&gt;&lt;/a&gt;三个案例带你理解 Event Loop </summary>
      
    
    
    
    <category term="JavaScript-2022" scheme="https://vkcyan.github.io/categories/JavaScript-2022/"/>
    
    
    <category term="JavaScript" scheme="https://vkcyan.github.io/tags/JavaScript/"/>
    
  </entry>
  
</feed>
